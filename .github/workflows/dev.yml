# This is a basic workflow to help you get started with Actions

name: dev

# Controls when the action will run.
on:
    # Triggers the workflow on push or pull request events but only for the main branch
    push:
        branches: [ develop ]
    # Allows you to run this workflow manually from the Actions tab
    workflow_dispatch:

env:
  ACTIONS_ALLOW_UNSECURE_COMMANDS: true

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  build-and-test:

    runs-on: ubuntu-latest
    container: node:14

    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v1
        with:
          node-version: '14.x'

      - uses: actions/cache@v2
        with:
          path: |
            node_modules
            ./*/node_modules
          key: v1-npm-deps-${{ hashFiles('**/yarn.lock') }}
          restore-keys: v1-npm-deps-

      - name: build
        run: |
          yarn
          yarn build
          yarn generate-components-api
          cd server && yarn
      - name: test
        run: yarn test

  docker:
    needs: build-and-test
    runs-on: ubuntu-latest
    env:
      IMAGE_NAME: ui-dev
      ACTIONS_STEP_DEBUG: true
      REGISTRY_URL: epmtai.azurecr.io
    steps:
      - name: Check Out Repo
        uses: actions/checkout@v2

      - name: build app
        run: |
          yarn
          yarn build
          yarn generate-components-api
          cd server && yarn

      - name: Login to registry
        uses: docker/login-action@v1
        with:
          registry: ${{ secrets.REGISTRY_URL }}
          username: ${{ secrets.REGISTRY_USER }}
          password: ${{ secrets.REGISTRY_PASSWORD }}

      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v3
        with:
          # list of Docker images to use as base name for tags
          images: |
            ${{ secrets.REGISTRY_URL }}/ui-dev
          # generate Docker tags based on the following events/attributes
          tags: |
            type=sha

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Build and push
        id: docker_build
        uses: docker/build-push-action@v2
        with:
          context: ./
          file: ./Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}

  package:
    needs: docker
    runs-on: ubuntu-20.04 # Gitversion requires .NET SDK 3.1

    steps:
      - uses: actions/checkout@v2
        name: Code checkout
        with:
          fetch-depth: 0

      # install Gitversion to obtain semver version
      - name: Install GitVersion
        uses: gittools/actions/gitversion/setup@v0.9.15
        with:
          versionSpec: '5.5.0'

      - name: Version determination
        id:   gitversion
        uses: gittools/actions/gitversion/execute@v0.9.15

      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v3
        with:
          # list of Docker images to use as base name for tags
          images: |
            ${{ secrets.REGISTRY_URL }}/uui
          # generate Docker tags based on the following events/attributes
          tags: |
            type=sha

      - name: Install Helm
        uses: azure/setup-helm@v1
        with:
          version: v3.8.0

      - name: Preparation and Helm chart packaging
        run: |
          export tag=$(echo ${{ steps.meta.outputs.tags }} | awk -F":" '{print $2}')
          echo ${{ secrets.REGISTRY_PASSWORD }} | helm registry login ${{ secrets.REGISTRY_URL }} --username ${{ secrets.REGISTRY_USER }} --password-stdin
          mkdir helmchart && cd ./helmchart # helm cannot untar file to the repo with the same name as a package. To avoid error we create temp folder
          helm pull oci://${{ secrets.REGISTRY_URL }}/helm/${{ secrets.HELM_REGISTRY_URL_DEV }} --version ${{ secrets.HELM_REGISTRY_VERSION_DEV }} --untar
          echo "[INFO] Replace Docker image tag in helm chart..."
          sed -i -e "s/tag: latest/tag: ${tag}/g" ${{ secrets.HELM_REGISTRY_URL_DEV }}/values.dev.yaml

      - name: Packaging and Uploading Helm Chart
        run: |
          cd ./helmchart
          export helm_tag="$GITVERSION_MAJOR.$GITVERSION_MAJOR.$GITVERSION_PRERELEASENUMBER"
          echo "[INFO] Replace Helm Chart package version..."
          sed -i -e "s/version: ${{ secrets.HELM_REGISTRY_VERSION_DEV }}/version: ${helm_tag}/g" ${{ secrets.HELM_REGISTRY_URL_DEV }}/Chart.yaml
          echo "[INFO] Changing Helm Chart package name..."
          sed -i -e "s/name: ${{ secrets.HELM_REGISTRY_URL_DEV }}/name: ${{ secrets.APP_NAME_DEV }}/g" ${{ secrets.HELM_REGISTRY_URL_DEV }}/Chart.yaml
          helm package ${{ secrets.HELM_REGISTRY_URL_DEV }}
          helm push ${{ secrets.APP_NAME_DEV }}-${helm_tag}.tgz oci://${{ secrets.REGISTRY_URL }}/helm