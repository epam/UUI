import * as React from 'react';
import { IDemoApi } from './demoApi';
import { DocBuilder } from './DocBuilder';

export interface DemoComponentProps<TProps = any> {
    DemoComponent: React.ComponentType<TProps> | React.NamedExoticComponent<TProps>;
    props: TProps;
}

export interface IComponentDocs<TProps> {
    name: string;
    component?: React.ComponentType<TProps> | React.NamedExoticComponent<TProps>;
    props?: PropDoc<TProps, keyof TProps>[];
    contexts?: DemoContext[];
}

export interface DemoContext {
    context: React.ComponentType<DemoComponentProps>;
    name: string;
}

export interface IPropSamplesCreationContext<TProps = {}> {
    getCallback(name: string): () => void;
    getChangeHandler(name: string): (newValue: any) => void;
    getSelectedProps(): TProps;
    demoApi: IDemoApi;
    forceUpdate: () => void;
}

export type PropExampleObject<TProp> = {
    id?: string;
    name?: string;
    value: TProp;
    isDefault?: boolean;
};

export type PropExample<TProp> = PropExampleObject<TProp> | TProp;

export interface IPropDocEditor<TProp = any> {
    name: string;
    value: TProp;
    exampleId: string;
    examples: PropExampleObject<TProp>[];
    onValueChange(newValue: TProp): void;
    onExampleIdChange(newExampleId: string): void;
}
export type TSharedPropEditorType =
    'CssClassEditor' |
    'JsonEditor' |
    'JsonView' |
    'LinkEditor' |
    'NumEditor' |
    'StringEditor' |
    'StringWithExamplesEditor' |
    'MultiUnknownEditor' |
    'SingleUnknownEditor' |
    'CantResolve'
    ;

export type TPropDocEditorType = React.FC<IPropDocEditor> | TSharedPropEditorType;

export interface PropDoc<TProps, TProp extends keyof TProps> {
    name: Extract<keyof TProps, string>;
    description?: string;
    isRequired: boolean;
    defaultValue?: TProps[TProp];
    examples?: PropExample<TProps[TProp]>[] | ((ctx: IPropSamplesCreationContext<TProps>) => PropExample<TProps[TProp]>[]);
    editorType?: TPropDocEditorType;
    remountOnChange?: boolean;
}

export enum TSkin {
    UUI3_loveship = 'UUI3_loveship',
    UUI4_promo = 'UUI4_promo',
    UUI = 'UUI'
}

export type TDocConfig = {
    /**
     * The React component's tag name
     */
    name: string;
    /**
     * Contexts needed for this doc. The TDocContext.Default is used when no contexts are provided.
     */
    contexts?: TDocContext[];
    bySkin: {
        [key in TSkin]?: {
            /**
             * Identifier of the React component props Typescript type.
             */
            type: TDocsGenExportedType,
            /**
             * The actual React component
             */
            component: React.ComponentType<any> | any,
            /**
             * Override doc for this specific skin.
             * @param doc
             */
            doc?: (doc: DocBuilder<any>) => void
        }
    };
    /**
     * Override doc for all listed skins. Skin-specific override has higher priority.
     * @param doc
     */
    doc?: (doc: DocBuilder<any>) => void;
};

export enum TDocContext {
    Default = 'Default',
    FlexRow = 'FlexRow',
    Form = 'Form',
    PagePanel = 'PagePanel',
    RelativePanel = 'RelativePanel',
    Resizable = 'Resizable',
    TabButton = 'TabButton',
    Table = 'Table',
    VerticalTabButton = 'VerticalTabButton'
}

export type TDocsGenExportedType = Autogenerated_TDocsGenExportedTypeRef;
