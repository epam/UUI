// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`docsGen:complexTypes should convert interface when it extends another interface and passes specific generic parameter to it 1`] = `
{
 "docsGenTypes": {
  "test/test.tsx:IInterface": {
   "summary": {
    "module": "test/test.tsx",
    "typeName": {
     "name": "IInterface",
     "nameFull": "IInterface"
    },
    "src": "test/test.tsx",
    "exported": true
   },
   "details": {
    "kind": 263,
    "typeValue": {
     "raw": "IInterface",
     "print": [
      "interface IInterface extends IBaseInterface<string> {",
      "}"
     ]
    },
    "props": [
     {
      "uid": 1,
      "name": "value",
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "from": "test/test.tsx:IBaseInterface",
      "required": true
     },
     {
      "uid": 2,
      "name": "onValueChange",
      "typeValue": {
       "raw": "(newValue: string) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "test/test.tsx:IBaseInterface",
      "required": true
     }
    ],
    "propsFromUnion": false
   }
  },
  "test/test.tsx:IBaseInterface": {
   "summary": {
    "module": "test/test.tsx",
    "typeName": {
     "name": "IBaseInterface",
     "nameFull": "IBaseInterface<T>"
    },
    "src": "test/test.tsx",
    "exported": false
   }
  }
 }
}
`;

exports[`docsGen:complexTypes should convert interface which extends other interface 1`] = `
{
 "docsGenTypes": {
  "test/test.tsx:ITestA": {
   "summary": {
    "module": "test/test.tsx",
    "typeName": {
     "name": "ITestA",
     "nameFull": "ITestA"
    },
    "src": "test/test.tsx",
    "exported": true
   },
   "details": {
    "kind": 263,
    "typeValue": {
     "raw": "ITestA",
     "print": [
      "interface ITestA extends ITestB {",
      "    // This comment must be ignored, because it's not TSDoc",
      "    aProp: 'black' | 'white';",
      "    propExternalTypeTest: HTMLElement;",
      "    /** This is PropertySignature */",
      "    propSignatureTest: {",
      "        name: string;",
      "        value: any;",
      "    }[];",
      "    /** This is MethodSignature */",
      "    methodSignatureTest: (a?: number, b?: number) => number | undefined;",
      "    /** This is MethodDeclaration */",
      "    methodDeclarationTest: (p: number) => number;",
      "    /** This is GetAccessor */",
      "    get someBool(): boolean;",
      "    /** This is SetAccessor */",
      "    set someBool(b: boolean);",
      "}"
     ]
    },
    "props": [
     {
      "uid": 1,
      "name": "aProp",
      "typeValue": {
       "raw": "'black' | 'white'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "black",
        "white"
       ]
      },
      "required": true
     },
     {
      "uid": 2,
      "name": "propExternalTypeTest",
      "typeValue": {
       "raw": "HTMLElement"
      },
      "required": true
     },
     {
      "uid": 3,
      "name": "propSignatureTest",
      "comment": {
       "raw": [
        "This is PropertySignature"
       ]
      },
      "typeValue": {
       "raw": "{ name: string; value: any; }[]"
      },
      "required": true
     },
     {
      "uid": 4,
      "name": "methodSignatureTest",
      "comment": {
       "raw": [
        "This is MethodSignature"
       ]
      },
      "typeValue": {
       "raw": "(a?: number | undefined, b?: number | undefined) => number | undefined"
      },
      "editor": {
       "type": "func"
      },
      "required": true
     },
     {
      "uid": 5,
      "name": "methodDeclarationTest",
      "comment": {
       "raw": [
        "This is MethodDeclaration"
       ]
      },
      "typeValue": {
       "raw": "(p: number) => number"
      },
      "editor": {
       "type": "func"
      },
      "required": true
     },
     {
      "uid": 6,
      "name": "get someBool",
      "comment": {
       "raw": [
        "This is GetAccessor"
       ]
      },
      "typeValue": {
       "raw": "get someBool(): boolean"
      },
      "editor": {
       "type": "bool"
      },
      "required": true
     },
     {
      "uid": 7,
      "name": "a",
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "from": "test/test.tsx:ITestB",
      "required": true
     },
     {
      "uid": 8,
      "name": "b",
      "comment": {
       "raw": [
        "This is inherited property TSDoc"
       ]
      },
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "from": "test/test.tsx:ITestB",
      "required": true
     }
    ],
    "propsFromUnion": false
   }
  },
  "test/test.tsx:ITestB": {
   "summary": {
    "module": "test/test.tsx",
    "typeName": {
     "name": "ITestB",
     "nameFull": "ITestB"
    },
    "src": "test/test.tsx",
    "exported": true
   },
   "details": {
    "kind": 263,
    "typeValue": {
     "raw": "ITestB",
     "print": [
      "interface ITestB {",
      "    a: number;",
      "    /** This is inherited property TSDoc */",
      "    b: number;",
      "}"
     ]
    },
    "props": [
     {
      "uid": 1,
      "name": "a",
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "required": true
     },
     {
      "uid": 2,
      "name": "b",
      "comment": {
       "raw": [
        "This is inherited property TSDoc"
       ]
      },
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "required": true
     }
    ],
    "propsFromUnion": false
   }
  }
 }
}
`;

exports[`docsGen:complexTypes should convert interface with generics 1`] = `
{
 "docsGenTypes": {
  "test/test.tsx:AcceptDropParams": {
   "summary": {
    "module": "test/test.tsx",
    "typeName": {
     "name": "AcceptDropParams",
     "nameFull": "AcceptDropParams<TSrcData, TDstData>"
    },
    "src": "test/test.tsx",
    "exported": true
   },
   "details": {
    "kind": 263,
    "typeValue": {
     "raw": "AcceptDropParams<TSrcData, TDstData>",
     "print": [
      "interface AcceptDropParams<TSrcData, TDstData> {",
      "    srcData: TSrcData;",
      "    dstData?: TDstData;",
      "    offsetLeft: number;",
      "    offsetTop: number;",
      "    targetWidth: number;",
      "    targetHeight: number;",
      "}"
     ]
    },
    "props": [
     {
      "uid": 1,
      "name": "srcData",
      "typeValue": {
       "raw": "TSrcData"
      },
      "required": true
     },
     {
      "uid": 2,
      "name": "dstData",
      "typeValue": {
       "raw": "TDstData"
      },
      "required": false
     },
     {
      "uid": 3,
      "name": "offsetLeft",
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "required": true
     },
     {
      "uid": 4,
      "name": "offsetTop",
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "required": true
     },
     {
      "uid": 5,
      "name": "targetWidth",
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "required": true
     },
     {
      "uid": 6,
      "name": "targetHeight",
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "required": true
     }
    ],
    "propsFromUnion": false
   }
  }
 }
}
`;

exports[`docsGen:complexTypes should convert object type with different types of props 1`] = `
{
 "docsGenTypes": {
  "test/test.tsx:TPrimitives": {
   "summary": {
    "module": "test/test.tsx",
    "typeName": {
     "name": "TPrimitives",
     "nameFull": "TPrimitives"
    },
    "src": "test/test.tsx",
    "exported": true
   },
   "details": {
    "kind": 264,
    "typeValue": {
     "raw": "TPrimitives",
     "print": [
      "type TPrimitives = {",
      "    pBool: boolean;",
      "    pNumber: number;",
      "    pString: string;",
      "    pAny: any;",
      "    pUnknown: unknown;",
      "    pNever: never;",
      "    pVoid: void;",
      "    pNull: null;",
      "    pUndefined: undefined;",
      "    pArray: string[];",
      "    pObject: object;",
      "    pBigint: bigint;",
      "    pSymbol: symbol;",
      "    pLiteral: 'test';",
      "    pTuple: [",
      "        boolean,",
      "        number,",
      "        string,",
      "        any,",
      "        unknown,",
      "        never,",
      "        void,",
      "        null,",
      "        undefined,",
      "        string[],",
      "        object,",
      "        bigint,",
      "        symbol,",
      "        'test'",
      "    ];",
      "    pUnion: boolean | number | string | never | void | null | undefined | string[] | object | bigint | symbol | 'test';",
      "};"
     ]
    },
    "props": [
     {
      "uid": 1,
      "name": "pBool",
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "required": true
     },
     {
      "uid": 2,
      "name": "pNumber",
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "required": true
     },
     {
      "uid": 3,
      "name": "pString",
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "required": true
     },
     {
      "uid": 4,
      "name": "pAny",
      "typeValue": {
       "raw": "any"
      },
      "required": true
     },
     {
      "uid": 5,
      "name": "pUnknown",
      "typeValue": {
       "raw": "unknown"
      },
      "required": true
     },
     {
      "uid": 6,
      "name": "pNever",
      "typeValue": {
       "raw": "never"
      },
      "required": true
     },
     {
      "uid": 7,
      "name": "pVoid",
      "typeValue": {
       "raw": "void"
      },
      "required": true
     },
     {
      "uid": 8,
      "name": "pNull",
      "typeValue": {
       "raw": "null"
      },
      "required": true
     },
     {
      "uid": 9,
      "name": "pUndefined",
      "typeValue": {
       "raw": "undefined"
      },
      "required": true
     },
     {
      "uid": 10,
      "name": "pArray",
      "typeValue": {
       "raw": "string[]"
      },
      "required": true
     },
     {
      "uid": 11,
      "name": "pObject",
      "typeValue": {
       "raw": "object"
      },
      "required": true
     },
     {
      "uid": 12,
      "name": "pBigint",
      "typeValue": {
       "raw": "bigint"
      },
      "required": true
     },
     {
      "uid": 13,
      "name": "pSymbol",
      "typeValue": {
       "raw": "symbol"
      },
      "required": true
     },
     {
      "uid": 14,
      "name": "pLiteral",
      "typeValue": {
       "raw": "'test'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "test"
       ]
      },
      "required": true
     },
     {
      "uid": 15,
      "name": "pTuple",
      "typeValue": {
       "raw": "[boolean, number, string, any, unknown, never, void, null, undefined, string[], object, bigint, symbol, 'test']"
      },
      "required": true
     },
     {
      "uid": 16,
      "name": "pUnion",
      "typeValue": {
       "raw": "null | string | number | bigint | boolean | symbol | void | object | string[]"
      },
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  }
 }
}
`;

exports[`docsGen:complexTypes should expand props if internal type is wrapped in Typescript utility type 1`] = `
{
 "docsGenTypes": {
  "test/test.tsx:TTest": {
   "summary": {
    "module": "test/test.tsx",
    "typeName": {
     "name": "TTest",
     "nameFull": "TTest"
    },
    "src": "test/test.tsx",
    "exported": true
   },
   "details": {
    "kind": 264,
    "typeValue": {
     "raw": "TTest",
     "print": [
      "type TTest = Omit<TLocal, 'p1'>;"
     ]
    },
    "props": [
     {
      "uid": 1,
      "name": "p2",
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "from": "test/test.tsx:TLocal",
      "required": true
     }
    ],
    "propsFromUnion": false
   }
  },
  "test/test.tsx:TLocal": {
   "summary": {
    "module": "test/test.tsx",
    "typeName": {
     "name": "TLocal",
     "nameFull": "TLocal"
    },
    "src": "test/test.tsx",
    "exported": false
   }
  }
 }
}
`;

exports[`docsGen:complexTypes should include generic type argument names in fullName of type 1`] = `
{
 "docsGenTypes": {
  "test/test.tsx:IA": {
   "summary": {
    "module": "test/test.tsx",
    "typeName": {
     "name": "IA",
     "nameFull": "IA<T>"
    },
    "src": "test/test.tsx",
    "exported": true
   },
   "details": {
    "kind": 263,
    "typeValue": {
     "raw": "IA<T>",
     "print": [
      "interface IA<T> {",
      "    p1: Record<string, T>;",
      "}"
     ]
    },
    "props": [
     {
      "uid": 1,
      "name": "p1",
      "typeValue": {
       "raw": "Record<string, T>"
      },
      "typeValueRef": "node_modules/typescript/lib/lib.es5.d.ts:Record",
      "required": true
     }
    ],
    "propsFromUnion": false
   }
  },
  "test/test.tsx:TA": {
   "summary": {
    "module": "test/test.tsx",
    "typeName": {
     "name": "TA",
     "nameFull": "TA<S>"
    },
    "src": "test/test.tsx",
    "exported": true
   },
   "details": {
    "kind": 264,
    "typeValue": {
     "raw": "TA<S>",
     "print": [
      "type TA<S> = {",
      "    p1: Record<string, S>;",
      "};"
     ]
    },
    "props": [
     {
      "uid": 1,
      "name": "p1",
      "typeValue": {
       "raw": "Record<string, S>"
      },
      "typeValueRef": "node_modules/typescript/lib/lib.es5.d.ts:Record",
      "required": true
     }
    ],
    "propsFromUnion": false
   }
  },
  "node_modules/typescript/lib/lib.es5.d.ts:Record": {
   "summary": {
    "module": "node_modules/typescript/lib/lib.es5.d.ts",
    "typeName": {
     "name": "Record",
     "nameFull": "Record<K, T>"
    },
    "src": "node_modules/typescript/lib/lib.es5.d.ts",
    "exported": false
   }
  }
 }
}
`;

exports[`docsGen:complexTypes should not expand props from external type 1`] = `
{
 "docsGenTypes": {
  "test/test.tsx:TExternalTypeTest": {
   "summary": {
    "module": "test/test.tsx",
    "typeName": {
     "name": "TExternalTypeTest",
     "nameFull": "TExternalTypeTest"
    },
    "src": "test/test.tsx",
    "exported": true
   },
   "details": {
    "kind": 264,
    "typeValue": {
     "raw": "HTMLElement",
     "print": [
      "type TExternalTypeTest = HTMLElement;"
     ]
    }
   }
  }
 }
}
`;
