{
  "props": {
    "/Users/ihorkorenets/Job/UUI/epam-promo/components/buttons/docs/button.doc.tsx": [
      {
        "name": "clearIcon",
        "value": "React.FC<any>"
      },
      {
        "name": "captionCX",
        "value": "any"
      },
      {
        "name": "dropdownIcon",
        "value": "React.FC<any>"
      },
      {
        "name": "dropdownIconPosition",
        "value": "left | right"
      },
      {
        "name": "countPosition",
        "value": "left | right"
      },
      {
        "name": "count",
        "value": "number"
      },
      {
        "name": "isLinkActive",
        "value": "boolean"
      },
      {
        "name": "tabIndex",
        "value": "number"
      },
      {
        "name": "cx",
        "value": "any"
      },
      {
        "name": "onClick",
        "value": "(e?: any) => void"
      },
      {
        "name": "link",
        "value": "Link"
      },
      {
        "name": "href",
        "value": "string"
      },
      {
        "name": "target",
        "value": "\"_blank\""
      },
      {
        "name": "isDisabled",
        "value": "boolean"
      },
      {
        "name": "icon",
        "value": "React.FC<any>"
      },
      {
        "name": "iconPosition",
        "value": "left | right"
      },
      {
        "name": "onIconClick",
        "value": "() => void"
      },
      {
        "name": "clickAnalyticsEvent",
        "value": "{ [key: string]: any; name: string; }"
      },
      {
        "name": "caption",
        "value": "any"
      },
      {
        "name": "onClear",
        "value": "(e?: any) => void"
      },
      {
        "name": "isOpen",
        "value": "boolean"
      },
      {
        "name": "isDropdown",
        "value": "boolean"
      },
      {
        "name": "toggleDropdownOpening",
        "value": "(value: boolean) => void"
      },
      {
        "name": "isInteractedOutside",
        "value": "(event: Event) => boolean"
      },
      {
        "name": "ref",
        "value": "React.Ref<any>"
      },
      {
        "name": "placeholder",
        "value": "any"
      },
      {
        "name": "rawProps",
        "value": "any"
      },
      {
        "name": "forwardedRef",
        "value": "React.ForwardedRef<T>"
      },
      {
        "name": "size",
        "value": "none | 24 | 30 | 36 | 42 | 48 | 18"
      },
      {
        "name": "fill",
        "value": "none | solid | white | light"
      },
      {
        "name": "color",
        "value": "blue | green | red | gray50"
      }
    ],
    "/Users/ihorkorenets/Job/UUI/epam-promo/components/buttons/docs/iconButton.doc.tsx": [
      {
        "name": "isLinkActive",
        "value": "boolean"
      },
      {
        "name": "tabIndex",
        "value": "number"
      },
      {
        "name": "cx",
        "value": "any"
      },
      {
        "name": "onClick",
        "value": "(e?: any) => void"
      },
      {
        "name": "link",
        "value": "Link"
      },
      {
        "name": "href",
        "value": "string"
      },
      {
        "name": "target",
        "value": "\"_blank\""
      },
      {
        "name": "isDisabled",
        "value": "boolean"
      },
      {
        "name": "icon",
        "value": "React.FC<any>"
      },
      {
        "name": "iconPosition",
        "value": "left | right"
      },
      {
        "name": "onIconClick",
        "value": "() => void"
      },
      {
        "name": "clickAnalyticsEvent",
        "value": "{ [key: string]: any; name: string; }"
      },
      {
        "name": "rawProps",
        "value": "any"
      },
      {
        "name": "forwardedRef",
        "value": "React.ForwardedRef<T>"
      },
      {
        "name": "color",
        "value": "blue | green | red | gray50 | amber | gray30 | gray60"
      }
    ],
    "/Users/ihorkorenets/Job/UUI/epam-promo/components/buttons/docs/linkButton.doc.ts": [
      {
        "name": "clearIcon",
        "value": "React.FC<any>"
      },
      {
        "name": "captionCX",
        "value": "any"
      },
      {
        "name": "dropdownIcon",
        "value": "React.FC<any>"
      },
      {
        "name": "dropdownIconPosition",
        "value": "left | right"
      },
      {
        "name": "countPosition",
        "value": "left | right"
      },
      {
        "name": "count",
        "value": "number"
      },
      {
        "name": "isLinkActive",
        "value": "boolean"
      },
      {
        "name": "tabIndex",
        "value": "number"
      },
      {
        "name": "cx",
        "value": "any"
      },
      {
        "name": "onClick",
        "value": "(e?: any) => void"
      },
      {
        "name": "link",
        "value": "Link"
      },
      {
        "name": "href",
        "value": "string"
      },
      {
        "name": "target",
        "value": "\"_blank\""
      },
      {
        "name": "isDisabled",
        "value": "boolean"
      },
      {
        "name": "icon",
        "value": "React.FC<any>"
      },
      {
        "name": "iconPosition",
        "value": "left | right"
      },
      {
        "name": "onIconClick",
        "value": "() => void"
      },
      {
        "name": "clickAnalyticsEvent",
        "value": "{ [key: string]: any; name: string; }"
      },
      {
        "name": "caption",
        "value": "any"
      },
      {
        "name": "onClear",
        "value": "(e?: any) => void"
      },
      {
        "name": "isOpen",
        "value": "boolean"
      },
      {
        "name": "isDropdown",
        "value": "boolean"
      },
      {
        "name": "toggleDropdownOpening",
        "value": "(value: boolean) => void"
      },
      {
        "name": "isInteractedOutside",
        "value": "(event: Event) => boolean"
      },
      {
        "name": "ref",
        "value": "React.Ref<any>"
      },
      {
        "name": "placeholder",
        "value": "any"
      },
      {
        "name": "rawProps",
        "value": "any"
      },
      {
        "name": "forwardedRef",
        "value": "React.ForwardedRef<T>"
      },
      {
        "name": "size",
        "value": "none | 24 | 30 | 36 | 42 | 48"
      },
      {
        "name": "color",
        "value": "blue | green | red | amber"
      }
    ],
    "/Users/ihorkorenets/Job/UUI/epam-promo/components/buttons/docs/tabButton.doc.ts": [
      {
        "name": "size",
        "value": "36 | 48 | 60"
      },
      {
        "name": "withNotify",
        "value": "boolean"
      },
      {
        "name": "clearIcon",
        "value": "React.FC<any>"
      },
      {
        "name": "captionCX",
        "value": "any"
      },
      {
        "name": "dropdownIcon",
        "value": "React.FC<any>"
      },
      {
        "name": "dropdownIconPosition",
        "value": "left | right"
      },
      {
        "name": "countPosition",
        "value": "left | right"
      },
      {
        "name": "count",
        "value": "number"
      },
      {
        "name": "isLinkActive",
        "value": "boolean"
      },
      {
        "name": "tabIndex",
        "value": "number"
      },
      {
        "name": "cx",
        "value": "any"
      },
      {
        "name": "onClick",
        "value": "(e?: any) => void"
      },
      {
        "name": "link",
        "value": "Link"
      },
      {
        "name": "href",
        "value": "string"
      },
      {
        "name": "target",
        "value": "\"_blank\""
      },
      {
        "name": "isDisabled",
        "value": "boolean"
      },
      {
        "name": "icon",
        "value": "React.FC<any>"
      },
      {
        "name": "iconPosition",
        "value": "left | right"
      },
      {
        "name": "onIconClick",
        "value": "() => void"
      },
      {
        "name": "clickAnalyticsEvent",
        "value": "{ [key: string]: any; name: string; }"
      },
      {
        "name": "caption",
        "value": "any"
      },
      {
        "name": "onClear",
        "value": "(e?: any) => void"
      },
      {
        "name": "isOpen",
        "value": "boolean"
      },
      {
        "name": "isDropdown",
        "value": "boolean"
      },
      {
        "name": "toggleDropdownOpening",
        "value": "(value: boolean) => void"
      },
      {
        "name": "isInteractedOutside",
        "value": "(event: Event) => boolean"
      },
      {
        "name": "ref",
        "value": "React.Ref<any>"
      },
      {
        "name": "placeholder",
        "value": "any"
      },
      {
        "name": "rawProps",
        "value": "any"
      },
      {
        "name": "forwardedRef",
        "value": "React.ForwardedRef<T>"
      }
    ],
    "/Users/ihorkorenets/Job/UUI/epam-promo/components/buttons/docs/verticalTabButton.doc.ts": [
      {
        "name": "size",
        "value": "36 | 48 | 60"
      },
      {
        "name": "withNotify",
        "value": "boolean"
      },
      {
        "name": "clearIcon",
        "value": "React.FC<any>"
      },
      {
        "name": "captionCX",
        "value": "any"
      },
      {
        "name": "dropdownIcon",
        "value": "React.FC<any>"
      },
      {
        "name": "dropdownIconPosition",
        "value": "left | right"
      },
      {
        "name": "countPosition",
        "value": "left | right"
      },
      {
        "name": "count",
        "value": "number"
      },
      {
        "name": "isLinkActive",
        "value": "boolean"
      },
      {
        "name": "tabIndex",
        "value": "number"
      },
      {
        "name": "cx",
        "value": "any"
      },
      {
        "name": "onClick",
        "value": "(e?: any) => void"
      },
      {
        "name": "link",
        "value": "Link"
      },
      {
        "name": "href",
        "value": "string"
      },
      {
        "name": "target",
        "value": "\"_blank\""
      },
      {
        "name": "isDisabled",
        "value": "boolean"
      },
      {
        "name": "icon",
        "value": "React.FC<any>"
      },
      {
        "name": "iconPosition",
        "value": "left | right"
      },
      {
        "name": "onIconClick",
        "value": "() => void"
      },
      {
        "name": "clickAnalyticsEvent",
        "value": "{ [key: string]: any; name: string; }"
      },
      {
        "name": "caption",
        "value": "any"
      },
      {
        "name": "onClear",
        "value": "(e?: any) => void"
      },
      {
        "name": "isOpen",
        "value": "boolean"
      },
      {
        "name": "isDropdown",
        "value": "boolean"
      },
      {
        "name": "toggleDropdownOpening",
        "value": "(value: boolean) => void"
      },
      {
        "name": "isInteractedOutside",
        "value": "(event: Event) => boolean"
      },
      {
        "name": "ref",
        "value": "React.Ref<any>"
      },
      {
        "name": "placeholder",
        "value": "any"
      },
      {
        "name": "rawProps",
        "value": "any"
      },
      {
        "name": "forwardedRef",
        "value": "React.ForwardedRef<T>"
      }
    ],
    "/Users/ihorkorenets/Job/UUI/epam-promo/components/datePickers/docs/datePicker.doc.tsx": [
      {
        "name": "renderFooter",
        "value": "() => React.ReactNode"
      },
      {
        "name": "rawProps",
        "value": "{ input?: any; body?: any; }"
      },
      {
        "name": "format",
        "value": "string"
      },
      {
        "name": "filter",
        "value": "(day: Dayjs) => boolean"
      },
      {
        "name": "renderTarget",
        "value": "(props: IDropdownToggler) => React.ReactNode"
      },
      {
        "name": "iconPosition",
        "value": "left | right"
      },
      {
        "name": "disableClear",
        "value": "boolean"
      },
      {
        "name": "renderDay",
        "value": "(day: Dayjs) => void) => React.ReactElement<Element, string | ((props: any) => React.ReactElement<any, any>) | (new (props: any) => React.Component<any, any, any>)>"
      },
      {
        "name": "isHoliday",
        "value": "(day: Dayjs) => boolean"
      },
      {
        "name": "onBlur",
        "value": "(e?: React.FocusEvent<HTMLInputElement>) => void"
      },
      {
        "name": "value",
        "value": "T"
      },
      {
        "name": "onValueChange",
        "value": "(newValue: T) => void"
      },
      {
        "name": "isInvalid",
        "value": "boolean"
      },
      {
        "name": "validationMessage",
        "value": "string"
      },
      {
        "name": "validationProps",
        "value": "{ [key: string]: ICanBeInvalid; }"
      },
      {
        "name": "isDisabled",
        "value": "boolean"
      },
      {
        "name": "isReadonly",
        "value": "boolean"
      },
      {
        "name": "isRequired",
        "value": "boolean"
      },
      {
        "name": "onFocus",
        "value": "(e: React.FocusEvent<T>) => void"
      },
      {
        "name": "cx",
        "value": "any"
      },
      {
        "name": "placeholder",
        "value": "any"
      },
      {
        "name": "getValueChangeAnalyticsEvent",
        "value": "(newValue: T, oldValue: T) => { [key: string]: any; name: string; }"
      },
      {
        "name": "size",
        "value": "none | 24 | 30 | 36 | 42 | 48"
      },
      {
        "name": "mode",
        "value": "form | cell"
      }
    ],
    "/Users/ihorkorenets/Job/UUI/epam-promo/components/datePickers/docs/rangeDatePicker.doc.tsx": [
      {
        "name": "getPlaceholder",
        "value": "(type: InputType) => string"
      },
      {
        "name": "rawProps",
        "value": "{ from?: any; to?: any; body?: any; }"
      },
      {
        "name": "format",
        "value": "string"
      },
      {
        "name": "filter",
        "value": "(day: Dayjs) => boolean"
      },
      {
        "name": "renderTarget",
        "value": "(props: IDropdownToggler) => React.ReactNode"
      },
      {
        "name": "renderFooter",
        "value": "(value: RangeDatePickerValue) => React.ReactNode"
      },
      {
        "name": "renderDay",
        "value": "(day: Dayjs) => void) => React.ReactElement<Element, string | ((props: any) => React.ReactElement<any, any>) | (new (props: any) => React.Component<any, any, any>)>"
      },
      {
        "name": "presets",
        "value": "RangeDatePickerPresets"
      },
      {
        "name": "disableClear",
        "value": "boolean"
      },
      {
        "name": "placement",
        "value": "left | right | auto | auto-start | auto-end | top | bottom | top-start | top-end | bottom-start | bottom-end | right-start | right-end | left-start | left-end"
      },
      {
        "name": "isHoliday",
        "value": "(day: Dayjs) => boolean"
      },
      {
        "name": "value",
        "value": "T"
      },
      {
        "name": "onValueChange",
        "value": "(newValue: T) => void"
      },
      {
        "name": "isInvalid",
        "value": "boolean"
      },
      {
        "name": "validationMessage",
        "value": "string"
      },
      {
        "name": "validationProps",
        "value": "{ [key: string]: ICanBeInvalid; }"
      },
      {
        "name": "isDisabled",
        "value": "boolean"
      },
      {
        "name": "isReadonly",
        "value": "boolean"
      },
      {
        "name": "isRequired",
        "value": "boolean"
      },
      {
        "name": "cx",
        "value": "any"
      },
      {
        "name": "getValueChangeAnalyticsEvent",
        "value": "(newValue: T, oldValue: T) => { [key: string]: any; name: string; }"
      },
      {
        "name": "size",
        "value": "none | 24 | 30 | 36 | 42 | 48"
      }
    ],
    "/Users/ihorkorenets/Job/UUI/epam-promo/components/inputs/docs/checkbox.doc.ts": [
      {
        "name": "icon",
        "value": "React.FC<any>"
      },
      {
        "name": "indeterminateIcon",
        "value": "React.FC<any>"
      },
      {
        "name": "renderLabel",
        "value": "() => React.ReactNode"
      },
      {
        "name": "tabIndex",
        "value": "number"
      },
      {
        "name": "id",
        "value": "string"
      },
      {
        "name": "value",
        "value": "T"
      },
      {
        "name": "onValueChange",
        "value": "(newValue: T) => void"
      },
      {
        "name": "isInvalid",
        "value": "boolean"
      },
      {
        "name": "validationMessage",
        "value": "string"
      },
      {
        "name": "validationProps",
        "value": "{ [key: string]: ICanBeInvalid; }"
      },
      {
        "name": "isDisabled",
        "value": "boolean"
      },
      {
        "name": "isReadonly",
        "value": "boolean"
      },
      {
        "name": "isRequired",
        "value": "boolean"
      },
      {
        "name": "indeterminate",
        "value": "boolean"
      },
      {
        "name": "onFocus",
        "value": "(e: React.FocusEvent<T>) => void"
      },
      {
        "name": "onBlur",
        "value": "(e: React.FocusEvent<T>) => void"
      },
      {
        "name": "cx",
        "value": "any"
      },
      {
        "name": "label",
        "value": "any"
      },
      {
        "name": "getValueChangeAnalyticsEvent",
        "value": "(newValue: T, oldValue: T) => { [key: string]: any; name: string; }"
      },
      {
        "name": "rawProps",
        "value": "any"
      },
      {
        "name": "forwardedRef",
        "value": "React.ForwardedRef<T>"
      },
      {
        "name": "size",
        "value": "18 | 12"
      },
      {
        "name": "theme",
        "value": "light | dark"
      }
    ],
    "/Users/ihorkorenets/Job/UUI/epam-promo/components/inputs/docs/multiSwitch.doc.tsx": [
      {
        "name": "items",
        "value": "MultiSwitchItem<TValue>[]"
      },
      {
        "name": "color",
        "value": "blue | gray50"
      },
      {
        "name": "value",
        "value": "T"
      },
      {
        "name": "onValueChange",
        "value": "(newValue: T) => void"
      },
      {
        "name": "isInvalid",
        "value": "boolean"
      },
      {
        "name": "validationMessage",
        "value": "string"
      },
      {
        "name": "validationProps",
        "value": "{ [key: string]: ICanBeInvalid; }"
      },
      {
        "name": "isDisabled",
        "value": "boolean"
      },
      {
        "name": "isReadonly",
        "value": "boolean"
      },
      {
        "name": "isRequired",
        "value": "boolean"
      },
      {
        "name": "size",
        "value": "none | 24 | 30 | 36 | 42 | 48"
      },
      {
        "name": "rawProps",
        "value": "any"
      }
    ],
    "/Users/ihorkorenets/Job/UUI/epam-promo/components/inputs/docs/numericInput.doc.ts": [
      {
        "name": "max",
        "value": "number"
      },
      {
        "name": "min",
        "value": "number"
      },
      {
        "name": "upIcon",
        "value": "React.FC<any>"
      },
      {
        "name": "downIcon",
        "value": "React.FC<any>"
      },
      {
        "name": "step",
        "value": "number"
      },
      {
        "name": "inputCx",
        "value": "any"
      },
      {
        "name": "id",
        "value": "string"
      },
      {
        "name": "disableArrows",
        "value": "boolean"
      },
      {
        "name": "align",
        "value": "left | right"
      },
      {
        "name": "onFocus",
        "value": "(e: React.FocusEvent<T>) => void"
      },
      {
        "name": "onBlur",
        "value": "(e: React.FocusEvent<T>) => void"
      },
      {
        "name": "cx",
        "value": "any"
      },
      {
        "name": "onClick",
        "value": "(e?: any) => void"
      },
      {
        "name": "isDisabled",
        "value": "boolean"
      },
      {
        "name": "formatter",
        "value": "(value: T) => T"
      },
      {
        "name": "value",
        "value": "T"
      },
      {
        "name": "onValueChange",
        "value": "(newValue: T) => void"
      },
      {
        "name": "isInvalid",
        "value": "boolean"
      },
      {
        "name": "validationMessage",
        "value": "string"
      },
      {
        "name": "validationProps",
        "value": "{ [key: string]: ICanBeInvalid; }"
      },
      {
        "name": "isReadonly",
        "value": "boolean"
      },
      {
        "name": "isRequired",
        "value": "boolean"
      },
      {
        "name": "placeholder",
        "value": "any"
      },
      {
        "name": "getValueChangeAnalyticsEvent",
        "value": "(newValue: T, oldValue: T) => { [key: string]: any; name: string; }"
      },
      {
        "name": "rawProps",
        "value": "any"
      },
      {
        "name": "forwardedRef",
        "value": "React.ForwardedRef<T>"
      },
      {
        "name": "size",
        "value": "none | 24 | 30 | 36 | 42 | 48"
      },
      {
        "name": "mode",
        "value": "form | cell"
      }
    ],
    "/Users/ihorkorenets/Job/UUI/epam-promo/components/inputs/docs/radioInput.doc.ts": [
      {
        "name": "icon",
        "value": "React.FC<any>"
      },
      {
        "name": "renderLabel",
        "value": "() => React.ReactNode"
      },
      {
        "name": "tabIndex",
        "value": "number"
      },
      {
        "name": "id",
        "value": "string"
      },
      {
        "name": "cx",
        "value": "any"
      },
      {
        "name": "isDisabled",
        "value": "boolean"
      },
      {
        "name": "value",
        "value": "T"
      },
      {
        "name": "onValueChange",
        "value": "(newValue: T) => void"
      },
      {
        "name": "isInvalid",
        "value": "boolean"
      },
      {
        "name": "validationMessage",
        "value": "string"
      },
      {
        "name": "validationProps",
        "value": "{ [key: string]: ICanBeInvalid; }"
      },
      {
        "name": "isReadonly",
        "value": "boolean"
      },
      {
        "name": "isRequired",
        "value": "boolean"
      },
      {
        "name": "label",
        "value": "any"
      },
      {
        "name": "getValueChangeAnalyticsEvent",
        "value": "(newValue: T, oldValue: T) => { [key: string]: any; name: string; }"
      },
      {
        "name": "rawProps",
        "value": "any"
      },
      {
        "name": "forwardedRef",
        "value": "React.ForwardedRef<T>"
      },
      {
        "name": "size",
        "value": "18 | 12"
      }
    ],
    "/Users/ihorkorenets/Job/UUI/epam-promo/components/inputs/docs/rating.doc.ts": [
      {
        "name": "filledStarIcon",
        "value": "any"
      },
      {
        "name": "emptyStarIcon",
        "value": "any"
      },
      {
        "name": "hideTooltip",
        "value": "boolean"
      },
      {
        "name": "hint",
        "value": "(value: number) => string"
      },
      {
        "name": "Tooltip",
        "value": "React.ComponentType<TooltipProps>"
      },
      {
        "name": "from",
        "value": "number"
      },
      {
        "name": "to",
        "value": "number"
      },
      {
        "name": "step",
        "value": "1 | 0.5"
      },
      {
        "name": "renderRating",
        "value": "(rating: number, markWidth: number, numberOfMarks: number) => React.ReactNode"
      },
      {
        "name": "cx",
        "value": "any"
      },
      {
        "name": "isDisabled",
        "value": "boolean"
      },
      {
        "name": "value",
        "value": "T"
      },
      {
        "name": "onValueChange",
        "value": "(newValue: T) => void"
      },
      {
        "name": "isInvalid",
        "value": "boolean"
      },
      {
        "name": "validationMessage",
        "value": "string"
      },
      {
        "name": "validationProps",
        "value": "{ [key: string]: ICanBeInvalid; }"
      },
      {
        "name": "isReadonly",
        "value": "boolean"
      },
      {
        "name": "isRequired",
        "value": "boolean"
      },
      {
        "name": "rawProps",
        "value": "any"
      },
      {
        "name": "forwardedRef",
        "value": "React.ForwardedRef<T>"
      },
      {
        "name": "size",
        "value": "18 | 24 | 30"
      }
    ],
    "/Users/ihorkorenets/Job/UUI/epam-promo/components/inputs/docs/searchInput.doc.ts": [
      {
        "name": "acceptIcon",
        "value": "React.FC<any>"
      },
      {
        "name": "cancelIcon",
        "value": "React.FC<any>"
      },
      {
        "name": "dropdownIcon",
        "value": "React.FC<any>"
      },
      {
        "name": "inputCx",
        "value": "any"
      },
      {
        "name": "renderInput",
        "value": "(props: React.DetailedHTMLProps<React.InputHTMLAttributes<HTMLInputElement>, HTMLInputElement>) => JSX.Element"
      },
      {
        "name": "onCancel",
        "value": "() => void"
      },
      {
        "name": "onAccept",
        "value": "() => void"
      },
      {
        "name": "onKeyDown",
        "value": "(e?: any) => void"
      },
      {
        "name": "autoFocus",
        "value": "boolean"
      },
      {
        "name": "type",
        "value": "string"
      },
      {
        "name": "autoComplete",
        "value": "string"
      },
      {
        "name": "name",
        "value": "string"
      },
      {
        "name": "maxLength",
        "value": "number"
      },
      {
        "name": "inputMode",
        "value": "none | text | search | tel | url | email | numeric | decimal"
      },
      {
        "name": "tabIndex",
        "value": "number"
      },
      {
        "name": "id",
        "value": "string"
      },
      {
        "name": "prefix",
        "value": "React.ReactNode"
      },
      {
        "name": "suffix",
        "value": "React.ReactNode"
      },
      {
        "name": "cx",
        "value": "any"
      },
      {
        "name": "onClick",
        "value": "(e?: any) => void"
      },
      {
        "name": "isDisabled",
        "value": "boolean"
      },
      {
        "name": "value",
        "value": "T"
      },
      {
        "name": "onValueChange",
        "value": "(newValue: T) => void"
      },
      {
        "name": "isInvalid",
        "value": "boolean"
      },
      {
        "name": "validationMessage",
        "value": "string"
      },
      {
        "name": "validationProps",
        "value": "{ [key: string]: ICanBeInvalid; }"
      },
      {
        "name": "isReadonly",
        "value": "boolean"
      },
      {
        "name": "isRequired",
        "value": "boolean"
      },
      {
        "name": "placeholder",
        "value": "any"
      },
      {
        "name": "icon",
        "value": "React.FC<any>"
      },
      {
        "name": "iconPosition",
        "value": "left | right"
      },
      {
        "name": "onIconClick",
        "value": "() => void"
      },
      {
        "name": "isOpen",
        "value": "boolean"
      },
      {
        "name": "isDropdown",
        "value": "boolean"
      },
      {
        "name": "toggleDropdownOpening",
        "value": "(value: boolean) => void"
      },
      {
        "name": "isInteractedOutside",
        "value": "(event: Event) => boolean"
      },
      {
        "name": "ref",
        "value": "React.Ref<any>"
      },
      {
        "name": "caption",
        "value": "any"
      },
      {
        "name": "getValueChangeAnalyticsEvent",
        "value": "(newValue: T, oldValue: T) => { [key: string]: any; name: string; }"
      },
      {
        "name": "rawProps",
        "value": "any"
      },
      {
        "name": "onFocus",
        "value": "(e: React.FocusEvent<T>) => void"
      },
      {
        "name": "onBlur",
        "value": "(e: React.FocusEvent<T>) => void"
      },
      {
        "name": "size",
        "value": "none | 24 | 30 | 36 | 42 | 48"
      },
      {
        "name": "mode",
        "value": "form | cell"
      },
      {
        "name": "disableDebounce",
        "value": "boolean"
      },
      {
        "name": "debounceDelay",
        "value": "number"
      }
    ],
    "/Users/ihorkorenets/Job/UUI/epam-promo/components/inputs/docs/switch.doc.ts": [
      {
        "name": "tabIndex",
        "value": "number"
      },
      {
        "name": "id",
        "value": "string"
      },
      {
        "name": "cx",
        "value": "any"
      },
      {
        "name": "isDisabled",
        "value": "boolean"
      },
      {
        "name": "value",
        "value": "T"
      },
      {
        "name": "onValueChange",
        "value": "(newValue: T) => void"
      },
      {
        "name": "isInvalid",
        "value": "boolean"
      },
      {
        "name": "validationMessage",
        "value": "string"
      },
      {
        "name": "validationProps",
        "value": "{ [key: string]: ICanBeInvalid; }"
      },
      {
        "name": "isReadonly",
        "value": "boolean"
      },
      {
        "name": "isRequired",
        "value": "boolean"
      },
      {
        "name": "label",
        "value": "any"
      },
      {
        "name": "getValueChangeAnalyticsEvent",
        "value": "(newValue: T, oldValue: T) => { [key: string]: any; name: string; }"
      },
      {
        "name": "rawProps",
        "value": "any"
      },
      {
        "name": "forwardedRef",
        "value": "React.ForwardedRef<T>"
      },
      {
        "name": "size",
        "value": "24 | 18 | 12"
      }
    ],
    "/Users/ihorkorenets/Job/UUI/epam-promo/components/inputs/docs/textArea.doc.ts": [
      {
        "name": "rows",
        "value": "number"
      },
      {
        "name": "autoSize",
        "value": "boolean"
      },
      {
        "name": "onBlur",
        "value": "(e?: any) => void"
      },
      {
        "name": "onFocus",
        "value": "(e?: any) => void"
      },
      {
        "name": "onKeyDown",
        "value": "(e?: any) => void"
      },
      {
        "name": "autoFocus",
        "value": "boolean"
      },
      {
        "name": "inputCx",
        "value": "any"
      },
      {
        "name": "maxLength",
        "value": "number"
      },
      {
        "name": "id",
        "value": "string"
      },
      {
        "name": "cx",
        "value": "any"
      },
      {
        "name": "value",
        "value": "T"
      },
      {
        "name": "onValueChange",
        "value": "(newValue: T) => void"
      },
      {
        "name": "isInvalid",
        "value": "boolean"
      },
      {
        "name": "validationMessage",
        "value": "string"
      },
      {
        "name": "validationProps",
        "value": "{ [key: string]: ICanBeInvalid; }"
      },
      {
        "name": "isDisabled",
        "value": "boolean"
      },
      {
        "name": "isReadonly",
        "value": "boolean"
      },
      {
        "name": "isRequired",
        "value": "boolean"
      },
      {
        "name": "placeholder",
        "value": "any"
      },
      {
        "name": "rawProps",
        "value": "any"
      },
      {
        "name": "forwardedRef",
        "value": "React.ForwardedRef<T>"
      },
      {
        "name": "size",
        "value": "none | 24 | 30 | 36 | 42 | 48"
      },
      {
        "name": "mode",
        "value": "form | cell"
      }
    ],
    "/Users/ihorkorenets/Job/UUI/epam-promo/components/inputs/docs/textInput.doc.ts": [
      {
        "name": "acceptIcon",
        "value": "React.FC<any>"
      },
      {
        "name": "cancelIcon",
        "value": "React.FC<any>"
      },
      {
        "name": "dropdownIcon",
        "value": "React.FC<any>"
      },
      {
        "name": "inputCx",
        "value": "any"
      },
      {
        "name": "renderInput",
        "value": "(props: React.DetailedHTMLProps<React.InputHTMLAttributes<HTMLInputElement>, HTMLInputElement>) => JSX.Element"
      },
      {
        "name": "onCancel",
        "value": "() => void"
      },
      {
        "name": "onAccept",
        "value": "() => void"
      },
      {
        "name": "onKeyDown",
        "value": "(e?: any) => void"
      },
      {
        "name": "autoFocus",
        "value": "boolean"
      },
      {
        "name": "type",
        "value": "string"
      },
      {
        "name": "autoComplete",
        "value": "string"
      },
      {
        "name": "name",
        "value": "string"
      },
      {
        "name": "maxLength",
        "value": "number"
      },
      {
        "name": "inputMode",
        "value": "none | text | search | tel | url | email | numeric | decimal"
      },
      {
        "name": "tabIndex",
        "value": "number"
      },
      {
        "name": "id",
        "value": "string"
      },
      {
        "name": "prefix",
        "value": "React.ReactNode"
      },
      {
        "name": "suffix",
        "value": "React.ReactNode"
      },
      {
        "name": "cx",
        "value": "any"
      },
      {
        "name": "onClick",
        "value": "(e?: any) => void"
      },
      {
        "name": "isDisabled",
        "value": "boolean"
      },
      {
        "name": "value",
        "value": "T"
      },
      {
        "name": "onValueChange",
        "value": "(newValue: T) => void"
      },
      {
        "name": "isInvalid",
        "value": "boolean"
      },
      {
        "name": "validationMessage",
        "value": "string"
      },
      {
        "name": "validationProps",
        "value": "{ [key: string]: ICanBeInvalid; }"
      },
      {
        "name": "isReadonly",
        "value": "boolean"
      },
      {
        "name": "isRequired",
        "value": "boolean"
      },
      {
        "name": "placeholder",
        "value": "any"
      },
      {
        "name": "icon",
        "value": "React.FC<any>"
      },
      {
        "name": "iconPosition",
        "value": "left | right"
      },
      {
        "name": "onIconClick",
        "value": "() => void"
      },
      {
        "name": "isOpen",
        "value": "boolean"
      },
      {
        "name": "isDropdown",
        "value": "boolean"
      },
      {
        "name": "toggleDropdownOpening",
        "value": "(value: boolean) => void"
      },
      {
        "name": "isInteractedOutside",
        "value": "(event: Event) => boolean"
      },
      {
        "name": "ref",
        "value": "React.Ref<any>"
      },
      {
        "name": "caption",
        "value": "any"
      },
      {
        "name": "getValueChangeAnalyticsEvent",
        "value": "(newValue: T, oldValue: T) => { [key: string]: any; name: string; }"
      },
      {
        "name": "rawProps",
        "value": "any"
      },
      {
        "name": "onFocus",
        "value": "(e: React.FocusEvent<T>) => void"
      },
      {
        "name": "onBlur",
        "value": "(e: React.FocusEvent<T>) => void"
      },
      {
        "name": "size",
        "value": "none | 24 | 30 | 36 | 42 | 48"
      },
      {
        "name": "mode",
        "value": "form | cell"
      }
    ],
    "/Users/ihorkorenets/Job/UUI/epam-promo/components/inputs/docs/timePicker.doc.ts": [
      {
        "name": "minutesStep",
        "value": "number"
      },
      {
        "name": "format",
        "value": "24 | 12"
      },
      {
        "name": "rawProps",
        "value": "{ input?: any; body?: any; }"
      },
      {
        "name": "id",
        "value": "string"
      },
      {
        "name": "renderTarget",
        "value": "(props: IDropdownToggler) => React.ReactNode"
      },
      {
        "name": "value",
        "value": "T"
      },
      {
        "name": "onValueChange",
        "value": "(newValue: T) => void"
      },
      {
        "name": "isInvalid",
        "value": "boolean"
      },
      {
        "name": "validationMessage",
        "value": "string"
      },
      {
        "name": "validationProps",
        "value": "{ [key: string]: ICanBeInvalid; }"
      },
      {
        "name": "isDisabled",
        "value": "boolean"
      },
      {
        "name": "isReadonly",
        "value": "boolean"
      },
      {
        "name": "isRequired",
        "value": "boolean"
      },
      {
        "name": "placeholder",
        "value": "any"
      },
      {
        "name": "size",
        "value": "none | 24 | 30 | 36 | 42 | 48"
      },
      {
        "name": "mode",
        "value": "form | cell"
      }
    ],
    "/Users/ihorkorenets/Job/UUI/epam-promo/components/layout/docs/accordion.doc.tsx": [
      {
        "name": "title",
        "value": "string"
      },
      {
        "name": "dropdownIcon",
        "value": "React.FC<any>"
      },
      {
        "name": "renderAdditionalItems",
        "value": "(isOpened: boolean) => React.ReactNode"
      },
      {
        "name": "value",
        "value": "T"
      },
      {
        "name": "onValueChange",
        "value": "(newValue: T) => void"
      },
      {
        "name": "isInvalid",
        "value": "boolean"
      },
      {
        "name": "validationMessage",
        "value": "string"
      },
      {
        "name": "validationProps",
        "value": "{ [key: string]: ICanBeInvalid; }"
      },
      {
        "name": "isDisabled",
        "value": "boolean"
      },
      {
        "name": "isReadonly",
        "value": "boolean"
      },
      {
        "name": "isRequired",
        "value": "boolean"
      },
      {
        "name": "cx",
        "value": "any"
      },
      {
        "name": "children",
        "value": "React.ReactNode"
      },
      {
        "name": "rawProps",
        "value": "any"
      },
      {
        "name": "forwardedRef",
        "value": "React.ForwardedRef<T>"
      },
      {
        "name": "mode",
        "value": "block | inline"
      },
      {
        "name": "padding",
        "value": "18 | 12 | 0 | 6"
      }
    ],
    "/Users/ihorkorenets/Job/UUI/epam-promo/components/layout/docs/blocker.doc.ts": [
      {
        "name": "isEnabled",
        "value": "boolean"
      },
      {
        "name": "hideSpinner",
        "value": "boolean"
      },
      {
        "name": "spacerHeight",
        "value": "number"
      },
      {
        "name": "renderSpinner",
        "value": "(props: any) => React.ReactNode"
      },
      {
        "name": "cx",
        "value": "any"
      },
      {
        "name": "rawProps",
        "value": "any"
      },
      {
        "name": "forwardedRef",
        "value": "React.ForwardedRef<T>"
      }
    ],
    "/Users/ihorkorenets/Job/UUI/epam-promo/components/layout/docs/checkboxGroup.doc.ts": [
      {
        "name": "CheckboxInput",
        "value": "React.ComponentType<CheckboxProps>"
      },
      {
        "name": "items",
        "value": "CheckboxGroupItem<TValue>[]"
      },
      {
        "name": "isInvalid",
        "value": "boolean"
      },
      {
        "name": "validationMessage",
        "value": "string"
      },
      {
        "name": "validationProps",
        "value": "{ [key: string]: ICanBeInvalid; }"
      },
      {
        "name": "cx",
        "value": "any"
      },
      {
        "name": "value",
        "value": "T"
      },
      {
        "name": "onValueChange",
        "value": "(newValue: T) => void"
      },
      {
        "name": "isDisabled",
        "value": "boolean"
      },
      {
        "name": "isReadonly",
        "value": "boolean"
      },
      {
        "name": "isRequired",
        "value": "boolean"
      },
      {
        "name": "direction",
        "value": "vertical | horizontal"
      },
      {
        "name": "rawProps",
        "value": "any"
      },
      {
        "name": "forwardedRef",
        "value": "React.ForwardedRef<T>"
      }
    ],
    "/Users/ihorkorenets/Job/UUI/epam-promo/components/layout/docs/controlGroup.doc.tsx": [
      {
        "name": "cx",
        "value": "any"
      },
      {
        "name": "children",
        "value": "React.ReactNode"
      },
      {
        "name": "rawProps",
        "value": "any"
      },
      {
        "name": "forwardedRef",
        "value": "React.ForwardedRef<T>"
      }
    ],
    "/Users/ihorkorenets/Job/UUI/epam-promo/components/layout/docs/iconContainer.doc.tsx": [
      {
        "name": "icon",
        "value": "React.FC<any>"
      },
      {
        "name": "flipY",
        "value": "boolean"
      },
      {
        "name": "rotate",
        "value": "0 | 90cw | 180 | 90ccw"
      },
      {
        "name": "onClick",
        "value": "(e: React.SyntheticEvent<HTMLDivElement, Event>) => void"
      },
      {
        "name": "tabIndex",
        "value": "number"
      },
      {
        "name": "style",
        "value": "React.CSSProperties"
      },
      {
        "name": "size",
        "value": "number"
      },
      {
        "name": "cx",
        "value": "any"
      },
      {
        "name": "isDisabled",
        "value": "boolean"
      },
      {
        "name": "rawProps",
        "value": "any"
      },
      {
        "name": "color",
        "value": "white | blue | green | red | gray50 | amber | gray30 | gray60 | gray5 | gray10 | gray20 | gray40 | gray70 | gray80 | gray90 | cyan | orange | purple | violet"
      }
    ],
    "/Users/ihorkorenets/Job/UUI/epam-promo/components/layout/docs/labeledInput.doc.tsx": [
      {
        "name": "Tooltip",
        "value": "React.ComponentType<TooltipProps>"
      },
      {
        "name": "infoIcon",
        "value": "React.FC<any>"
      },
      {
        "name": "labelPosition",
        "value": "left | top"
      },
      {
        "name": "info",
        "value": "string"
      },
      {
        "name": "isOptional",
        "value": "boolean"
      },
      {
        "name": "htmlFor",
        "value": "string"
      },
      {
        "name": "isInvalid",
        "value": "boolean"
      },
      {
        "name": "validationMessage",
        "value": "string"
      },
      {
        "name": "validationProps",
        "value": "{ [key: string]: ICanBeInvalid; }"
      },
      {
        "name": "cx",
        "value": "any"
      },
      {
        "name": "label",
        "value": "any"
      },
      {
        "name": "children",
        "value": "React.ReactNode"
      },
      {
        "name": "isRequired",
        "value": "boolean"
      },
      {
        "name": "rawProps",
        "value": "any"
      },
      {
        "name": "forwardedRef",
        "value": "React.ForwardedRef<T>"
      },
      {
        "name": "size",
        "value": "none | 24 | 30 | 36 | 42 | 48"
      }
    ],
    "/Users/ihorkorenets/Job/UUI/epam-promo/components/layout/docs/radioGroup.doc.ts": [
      {
        "name": "RadioInput",
        "value": "React.ComponentType<RadioInputProps>"
      },
      {
        "name": "items",
        "value": "RadioGroupItem<TValue>[]"
      },
      {
        "name": "radioInputProps",
        "value": "RadioInputProps & { key: React.ReactText; }"
      },
      {
        "name": "cx",
        "value": "any"
      },
      {
        "name": "value",
        "value": "T"
      },
      {
        "name": "onValueChange",
        "value": "(newValue: T) => void"
      },
      {
        "name": "isInvalid",
        "value": "boolean"
      },
      {
        "name": "validationMessage",
        "value": "string"
      },
      {
        "name": "validationProps",
        "value": "{ [key: string]: ICanBeInvalid; }"
      },
      {
        "name": "isDisabled",
        "value": "boolean"
      },
      {
        "name": "isReadonly",
        "value": "boolean"
      },
      {
        "name": "isRequired",
        "value": "boolean"
      },
      {
        "name": "direction",
        "value": "vertical | horizontal"
      },
      {
        "name": "rawProps",
        "value": "any"
      },
      {
        "name": "forwardedRef",
        "value": "React.ForwardedRef<T>"
      }
    ],
    "/Users/ihorkorenets/Job/UUI/epam-promo/components/navigation/docs/anchor.doc.tsx": [
      {
        "name": "cx",
        "value": "any"
      },
      {
        "name": "link",
        "value": "Link"
      },
      {
        "name": "href",
        "value": "string"
      },
      {
        "name": "isLinkActive",
        "value": "boolean"
      },
      {
        "name": "target",
        "value": "\"_blank\""
      },
      {
        "name": "children",
        "value": "React.ReactNode"
      },
      {
        "name": "isDisabled",
        "value": "boolean"
      },
      {
        "name": "onClick",
        "value": "(e?: any) => void"
      },
      {
        "name": "rawProps",
        "value": "any"
      },
      {
        "name": "forwardedRef",
        "value": "React.ForwardedRef<T>"
      }
    ],
    "/Users/ihorkorenets/Job/UUI/epam-promo/components/navigation/docs/mainMenu.doc.tsx": [
      {
        "name": "children",
        "value": "any"
      },
      {
        "name": "externalGap",
        "value": "number"
      },
      {
        "name": "appLogoUrl",
        "value": "string"
      },
      {
        "name": "appLogoBgColor",
        "value": "string"
      },
      {
        "name": "customerLogoUrl",
        "value": "string"
      },
      {
        "name": "customerLogoBgColor",
        "value": "string"
      },
      {
        "name": "customerLogoWidth",
        "value": "number"
      },
      {
        "name": "isTransparent",
        "value": "boolean"
      },
      {
        "name": "renderBurger",
        "value": "(props: { onClose: () => void; }) => React.ReactNode"
      },
      {
        "name": "alwaysShowBurger",
        "value": "boolean"
      },
      {
        "name": "serverBadge",
        "value": "string"
      },
      {
        "name": "tooltipTechInfo",
        "value": "React.ReactNode"
      },
      {
        "name": "logoLink",
        "value": "Link"
      },
      {
        "name": "logoHref",
        "value": "string"
      },
      {
        "name": "logoWidth",
        "value": "number"
      },
      {
        "name": "onLogoClick",
        "value": "(e: React.MouseEvent<Element, MouseEvent>) => any"
      },
      {
        "name": "customerLogoLink",
        "value": "Link"
      },
      {
        "name": "customerLogoHref",
        "value": "string"
      },
      {
        "name": "MainMenuDropdown",
        "value": "React.ComponentType<MainMenuDropdownProps>"
      },
      {
        "name": "Burger",
        "value": "React.ComponentType<BurgerProps>"
      },
      {
        "name": "cx",
        "value": "any"
      },
      {
        "name": "rawProps",
        "value": "any"
      },
      {
        "name": "forwardedRef",
        "value": "React.ForwardedRef<T>"
      }
    ],
    "/Users/ihorkorenets/Job/UUI/epam-promo/components/overlays/docs/alert.doc.tsx": [
      {
        "name": "actions",
        "value": "notificationAction[]"
      },
      {
        "name": "color",
        "value": "blue | green | red | amber"
      },
      {
        "name": "onClose",
        "value": "() => void"
      },
      {
        "name": "icon",
        "value": "React.FC<any>"
      },
      {
        "name": "children",
        "value": "React.ReactNode"
      },
      {
        "name": "cx",
        "value": "any"
      },
      {
        "name": "rawProps",
        "value": "any"
      }
    ],
    "/Users/ihorkorenets/Job/UUI/epam-promo/components/overlays/docs/dropdown.doc.tsx": [
      {
        "name": "renderTarget",
        "value": "(props: IDropdownToggler) => React.ReactNode"
      },
      {
        "name": "renderBody",
        "value": "(props: DropdownBodyProps) => React.ReactNode"
      },
      {
        "name": "onClose",
        "value": "() => void"
      },
      {
        "name": "isNotUnfoldable",
        "value": "boolean"
      },
      {
        "name": "zIndex",
        "value": "number"
      },
      {
        "name": "placement",
        "value": "left | right | auto | auto-start | auto-end | top | bottom | top-start | top-end | bottom-start | bottom-end | right-start | right-end | left-start | left-end"
      },
      {
        "name": "modifiers",
        "value": "(Partial<Modifier<any, object>>)[]"
      },
      {
        "name": "openOnClick",
        "value": "boolean"
      },
      {
        "name": "openOnHover",
        "value": "boolean"
      },
      {
        "name": "closeOnTargetClick",
        "value": "boolean"
      },
      {
        "name": "closeOnClickOutside",
        "value": "boolean"
      },
      {
        "name": "closeOnMouseLeave",
        "value": "toggler | boundary"
      },
      {
        "name": "portalTarget",
        "value": "HTMLElement"
      },
      {
        "name": "boundaryElement",
        "value": "clippingParents"
      },
      {
        "name": "closeBodyOnTogglerHidden",
        "value": "boolean"
      },
      {
        "name": "value",
        "value": "T"
      },
      {
        "name": "onValueChange",
        "value": "(newValue: T) => void"
      },
      {
        "name": "isInvalid",
        "value": "boolean"
      },
      {
        "name": "validationMessage",
        "value": "string"
      },
      {
        "name": "validationProps",
        "value": "{ [key: string]: ICanBeInvalid; }"
      },
      {
        "name": "isDisabled",
        "value": "boolean"
      },
      {
        "name": "isReadonly",
        "value": "boolean"
      },
      {
        "name": "isRequired",
        "value": "boolean"
      }
    ],
    "/Users/ihorkorenets/Job/UUI/epam-promo/components/overlays/docs/modalFooter.doc.tsx": [
      {
        "name": "background",
        "value": "none | white | gray5"
      },
      {
        "name": "topShadow",
        "value": "boolean"
      },
      {
        "name": "borderBottom",
        "value": "gray40"
      },
      {
        "name": "padding",
        "value": "24 | 18 | 12 | 6"
      },
      {
        "name": "vPadding",
        "value": "24 | 36 | 48 | 18 | 12"
      },
      {
        "name": "spacing",
        "value": "18 | 12 | 6"
      },
      {
        "name": "margin",
        "value": "24 | 12"
      },
      {
        "name": "size",
        "value": "24 | 30 | 36 | 42 | 48"
      },
      {
        "name": "borderTop",
        "value": "boolean"
      },
      {
        "name": "children",
        "value": "React.ReactNode"
      },
      {
        "name": "cx",
        "value": "any"
      },
      {
        "name": "rawProps",
        "value": "any"
      }
    ],
    "/Users/ihorkorenets/Job/UUI/epam-promo/components/overlays/docs/modalHeader.doc.tsx": [
      {
        "name": "background",
        "value": "none | white | gray5"
      },
      {
        "name": "topShadow",
        "value": "boolean"
      },
      {
        "name": "borderBottom",
        "value": "gray40"
      },
      {
        "name": "padding",
        "value": "24 | 18 | 12 | 6"
      },
      {
        "name": "vPadding",
        "value": "24 | 36 | 48 | 18 | 12"
      },
      {
        "name": "spacing",
        "value": "18 | 12 | 6"
      },
      {
        "name": "margin",
        "value": "24 | 12"
      },
      {
        "name": "size",
        "value": "24 | 30 | 36 | 42 | 48"
      },
      {
        "name": "onClose",
        "value": "() => any"
      },
      {
        "name": "title",
        "value": "React.ReactNode"
      },
      {
        "name": "children",
        "value": "React.ReactNode"
      },
      {
        "name": "cx",
        "value": "any"
      },
      {
        "name": "rawProps",
        "value": "any"
      }
    ],
    "/Users/ihorkorenets/Job/UUI/epam-promo/components/overlays/docs/notificationCard.doc.tsx": [
      {
        "name": "icon",
        "value": "React.FC<any>"
      },
      {
        "name": "color",
        "value": "blue | green | red | amber | gray60"
      },
      {
        "name": "actions",
        "value": "NotificationAction[]"
      },
      {
        "name": "onClose",
        "value": "() => void"
      },
      {
        "name": "onSuccess",
        "value": "() => void"
      },
      {
        "name": "clearTimer",
        "value": "() => void"
      },
      {
        "name": "refreshTimer",
        "value": "() => void"
      },
      {
        "name": "id",
        "value": "number"
      },
      {
        "name": "key",
        "value": "string"
      },
      {
        "name": "children",
        "value": "React.ReactNode"
      },
      {
        "name": "cx",
        "value": "any"
      },
      {
        "name": "rawProps",
        "value": "any"
      }
    ],
    "/Users/ihorkorenets/Job/UUI/epam-promo/components/overlays/docs/tooltip.doc.tsx": [
      {
        "name": "content",
        "value": "any"
      },
      {
        "name": "renderContent",
        "value": "() => any"
      },
      {
        "name": "placement",
        "value": "left | right | auto | auto-start | auto-end | top | bottom | top-start | top-end | bottom-start | bottom-end | right-start | right-end | left-start | left-end"
      },
      {
        "name": "trigger",
        "value": "click | press | hover"
      },
      {
        "name": "portalTarget",
        "value": "HTMLElement"
      },
      {
        "name": "offset",
        "value": "Offset"
      },
      {
        "name": "children",
        "value": "React.ReactNode"
      },
      {
        "name": "boundaryElement",
        "value": "clippingParents"
      },
      {
        "name": "cx",
        "value": "any"
      },
      {
        "name": "color",
        "value": "white | gray90"
      }
    ],
    "/Users/ihorkorenets/Job/UUI/epam-promo/components/pickers/docs/pickerInput.doc.tsx": [
      {
        "name": "entityName",
        "value": "string"
      },
      {
        "name": "entityPluralName",
        "value": "string"
      },
      {
        "name": "dataSource",
        "value": "IDataSource<TItem, TId, any>"
      },
      {
        "name": "getName",
        "value": "(item: TItem) => string"
      },
      {
        "name": "renderRow",
        "value": "(props: DataRowProps<TItem, TId>) => React.ReactNode"
      },
      {
        "name": "getRowOptions",
        "value": "(item: TItem, index: number) => DataRowOptions<TItem, TId>"
      },
      {
        "name": "renderNotFound",
        "value": "(props: { search: string; onClose: () => void; }) => React.ReactNode"
      },
      {
        "name": "emptyValue",
        "value": "[]"
      },
      {
        "name": "sortBy",
        "value": "(item: TItem, sorting: SortingOption<any>) => any"
      },
      {
        "name": "filter",
        "value": "any"
      },
      {
        "name": "sorting",
        "value": "SortingOption<any>"
      },
      {
        "name": "cascadeSelection",
        "value": "boolean"
      },
      {
        "name": "isFoldedByDefault",
        "value": "(item: TItem) => boolean"
      },
      {
        "name": "getSearchFields",
        "value": "(item: TItem) => string[]"
      },
      {
        "name": "selectionMode",
        "value": "\"single\""
      },
      {
        "name": "valueType",
        "value": "\"id\""
      },
      {
        "name": "value",
        "value": "T"
      },
      {
        "name": "onValueChange",
        "value": "(newValue: T) => void"
      },
      {
        "name": "isInvalid",
        "value": "boolean"
      },
      {
        "name": "validationMessage",
        "value": "string"
      },
      {
        "name": "validationProps",
        "value": "{ [key: string]: ICanBeInvalid; }"
      },
      {
        "name": "isDisabled",
        "value": "boolean"
      },
      {
        "name": "isReadonly",
        "value": "boolean"
      },
      {
        "name": "isRequired",
        "value": "boolean"
      },
      {
        "name": "getValueChangeAnalyticsEvent",
        "value": "(newValue: T, oldValue: T) => { [key: string]: any; name: string; }"
      },
      {
        "name": "onFocus",
        "value": "(e: React.FocusEvent<T>) => void"
      },
      {
        "name": "onBlur",
        "value": "(e: React.FocusEvent<T>) => void"
      },
      {
        "name": "placeholder",
        "value": "any"
      },
      {
        "name": "icon",
        "value": "React.FC<any>"
      },
      {
        "name": "iconPosition",
        "value": "left | right"
      },
      {
        "name": "onIconClick",
        "value": "() => void"
      },
      {
        "name": "editMode",
        "value": "dropdown | modal"
      },
      {
        "name": "maxItems",
        "value": "number"
      },
      {
        "name": "minBodyWidth",
        "value": "number"
      },
      {
        "name": "isSingleLine",
        "value": "boolean"
      },
      {
        "name": "dropdownPlacement",
        "value": "left | right | auto | auto-start | auto-end | top | bottom | top-start | top-end | bottom-start | bottom-end | right-start | right-end | left-start | left-end"
      },
      {
        "name": "renderToggler",
        "value": "(props: PickerTogglerProps<TItem, TId>) => React.ReactNode"
      },
      {
        "name": "searchPosition",
        "value": "none | input | body"
      },
      {
        "name": "disableClear",
        "value": "boolean"
      },
      {
        "name": "minCharsToSearch",
        "value": "number"
      },
      {
        "name": "dropdownHeight",
        "value": "number"
      },
      {
        "name": "autoFocus",
        "value": "boolean"
      },
      {
        "name": "prefix",
        "value": "React.ReactNode"
      },
      {
        "name": "suffix",
        "value": "React.ReactNode"
      },
      {
        "name": "rawProps",
        "value": "{ input?: any; body?: any; }"
      },
      {
        "name": "renderFooter",
        "value": "(props: PickerInputFooterProps<TItem, TId>) => React.ReactNode"
      },
      {
        "name": "size",
        "value": "none | 24 | 30 | 36 | 42 | 48"
      },
      {
        "name": "mode",
        "value": "form | cell"
      }
    ],
    "/Users/ihorkorenets/Job/UUI/epam-promo/components/pickers/docs/pickerModal.doc.tsx": [
      {
        "name": "entityName",
        "value": "string"
      },
      {
        "name": "entityPluralName",
        "value": "string"
      },
      {
        "name": "dataSource",
        "value": "IDataSource<TItem, TId, any>"
      },
      {
        "name": "getName",
        "value": "(item: TItem) => string"
      },
      {
        "name": "renderRow",
        "value": "(props: DataRowProps<TItem, TId>) => React.ReactNode"
      },
      {
        "name": "getRowOptions",
        "value": "(item: TItem, index: number) => DataRowOptions<TItem, TId>"
      },
      {
        "name": "renderNotFound",
        "value": "(props: { search: string; onClose: () => void; }) => React.ReactNode"
      },
      {
        "name": "emptyValue",
        "value": "[]"
      },
      {
        "name": "sortBy",
        "value": "(item: TItem, sorting: SortingOption<any>) => any"
      },
      {
        "name": "filter",
        "value": "any"
      },
      {
        "name": "sorting",
        "value": "SortingOption<any>"
      },
      {
        "name": "cascadeSelection",
        "value": "boolean"
      },
      {
        "name": "isFoldedByDefault",
        "value": "(item: TItem) => boolean"
      },
      {
        "name": "getSearchFields",
        "value": "(item: TItem) => string[]"
      },
      {
        "name": "caption",
        "value": "any"
      },
      {
        "name": "selectionMode",
        "value": "\"single\""
      },
      {
        "name": "valueType",
        "value": "\"id\""
      },
      {
        "name": "initialValue",
        "value": "TId"
      },
      {
        "name": "isActive",
        "value": "boolean"
      },
      {
        "name": "key",
        "value": "string"
      },
      {
        "name": "zIndex",
        "value": "number"
      },
      {
        "name": "success",
        "value": "(result: TResult) => void"
      },
      {
        "name": "abort",
        "value": "() => void"
      },
      {
        "name": "disallowClickOutside",
        "value": "boolean"
      },
      {
        "name": "renderFilter",
        "value": "(editableFilter: IEditable<any>) => React.ReactNode"
      },
      {
        "name": "renderFooter",
        "value": "(props: IModal<any>>) => React.ReactNode"
      }
    ],
    "/Users/ihorkorenets/Job/UUI/epam-promo/components/pickers/docs/pickerToggler.doc.tsx": [
      {
        "name": "cancelIcon",
        "value": "React.FC<any>"
      },
      {
        "name": "dropdownIcon",
        "value": "React.FC<any>"
      },
      {
        "name": "autoFocus",
        "value": "boolean"
      },
      {
        "name": "renderItem",
        "value": "(props: DataRowProps<TItem, TId>) => React.ReactNode"
      },
      {
        "name": "getName",
        "value": "(item: DataRowProps<TItem, TId>) => string"
      },
      {
        "name": "entityName",
        "value": "string"
      },
      {
        "name": "maxItems",
        "value": "number"
      },
      {
        "name": "isSingleLine",
        "value": "boolean"
      },
      {
        "name": "pickerMode",
        "value": "single | multi"
      },
      {
        "name": "searchPosition",
        "value": "none | input | body"
      },
      {
        "name": "onKeyDown",
        "value": "(e: React.KeyboardEvent<HTMLElement>) => void"
      },
      {
        "name": "disableSearch",
        "value": "boolean"
      },
      {
        "name": "disableClear",
        "value": "boolean"
      },
      {
        "name": "minCharsToSearch",
        "value": "number"
      },
      {
        "name": "prefix",
        "value": "React.ReactNode"
      },
      {
        "name": "suffix",
        "value": "React.ReactNode"
      },
      {
        "name": "selection",
        "value": "DataRowProps<TItem, TId>[]"
      },
      {
        "name": "onClear",
        "value": "(e?: any) => void"
      },
      {
        "name": "isOpen",
        "value": "boolean"
      },
      {
        "name": "isDropdown",
        "value": "boolean"
      },
      {
        "name": "toggleDropdownOpening",
        "value": "(value: boolean) => void"
      },
      {
        "name": "isInteractedOutside",
        "value": "(event: Event) => boolean"
      },
      {
        "name": "ref",
        "value": "React.Ref<any>"
      },
      {
        "name": "caption",
        "value": "any"
      },
      {
        "name": "onClick",
        "value": "(e?: any) => void"
      },
      {
        "name": "value",
        "value": "T"
      },
      {
        "name": "onValueChange",
        "value": "(newValue: T) => void"
      },
      {
        "name": "isInvalid",
        "value": "boolean"
      },
      {
        "name": "validationMessage",
        "value": "string"
      },
      {
        "name": "validationProps",
        "value": "{ [key: string]: ICanBeInvalid; }"
      },
      {
        "name": "isDisabled",
        "value": "boolean"
      },
      {
        "name": "isReadonly",
        "value": "boolean"
      },
      {
        "name": "isRequired",
        "value": "boolean"
      },
      {
        "name": "placeholder",
        "value": "any"
      },
      {
        "name": "onFocus",
        "value": "(e: React.FocusEvent<T>) => void"
      },
      {
        "name": "onBlur",
        "value": "(e: React.FocusEvent<T>) => void"
      },
      {
        "name": "icon",
        "value": "React.FC<any>"
      },
      {
        "name": "iconPosition",
        "value": "left | right"
      },
      {
        "name": "onIconClick",
        "value": "() => void"
      },
      {
        "name": "cx",
        "value": "any"
      },
      {
        "name": "rawProps",
        "value": "any"
      },
      {
        "name": "size",
        "value": "24 | 30 | 36 | 42 | 48"
      },
      {
        "name": "mode",
        "value": "form | cell"
      }
    ],
    "/Users/ihorkorenets/Job/UUI/epam-promo/components/tables/docs/dataTableCell.doc.tsx": [
      {
        "name": "rowProps",
        "value": "DataRowProps<TItem, TId>"
      },
      {
        "name": "column",
        "value": "DataColumnProps<TItem, TId, any>"
      },
      {
        "name": "index",
        "value": "number"
      },
      {
        "name": "role",
        "value": "string"
      },
      {
        "name": "tabIndex",
        "value": "number"
      },
      {
        "name": "cx",
        "value": "any"
      },
      {
        "name": "size",
        "value": "none | 24 | 30 | 36 | 42 | 48 | 60"
      },
      {
        "name": "padding",
        "value": "24 | 12 | 0"
      },
      {
        "name": "isFirstColumn",
        "value": "boolean"
      },
      {
        "name": "isLastColumn",
        "value": "boolean"
      },
      {
        "name": "alignActions",
        "value": "top | center"
      }
    ],
    "/Users/ihorkorenets/Job/UUI/epam-promo/components/tables/docs/dataTableHeaderCell.doc.tsx": [
      {
        "name": "column",
        "value": "DataColumnProps<TItem, TId, any>"
      },
      {
        "name": "isFirstColumn",
        "value": "boolean"
      },
      {
        "name": "isLastColumn",
        "value": "boolean"
      },
      {
        "name": "selectAll",
        "value": "ICheckable"
      },
      {
        "name": "isFilterActive",
        "value": "boolean"
      },
      {
        "name": "sortDirection",
        "value": "desc | asc"
      },
      {
        "name": "onSort",
        "value": "(dir: SortDirection) => void"
      },
      {
        "name": "onDrop",
        "value": "(params: DataColumnProps<TItem, TId, any>>) => void"
      },
      {
        "name": "renderFilter",
        "value": "() => React.ReactNode"
      },
      {
        "name": "value",
        "value": "T"
      },
      {
        "name": "onValueChange",
        "value": "(newValue: T) => void"
      },
      {
        "name": "isInvalid",
        "value": "boolean"
      },
      {
        "name": "validationMessage",
        "value": "string"
      },
      {
        "name": "validationProps",
        "value": "{ [key: string]: ICanBeInvalid; }"
      },
      {
        "name": "isDisabled",
        "value": "boolean"
      },
      {
        "name": "isReadonly",
        "value": "boolean"
      },
      {
        "name": "isRequired",
        "value": "boolean"
      },
      {
        "name": "isOpen",
        "value": "boolean"
      },
      {
        "name": "isDropdown",
        "value": "boolean"
      },
      {
        "name": "toggleDropdownOpening",
        "value": "(value: boolean) => void"
      },
      {
        "name": "isInteractedOutside",
        "value": "(event: Event) => boolean"
      },
      {
        "name": "ref",
        "value": "React.Ref<any>"
      },
      {
        "name": "caption",
        "value": "any"
      },
      {
        "name": "onClick",
        "value": "(e?: any) => void"
      },
      {
        "name": "cx",
        "value": "any"
      },
      {
        "name": "allowColumnsReordering",
        "value": "boolean"
      },
      {
        "name": "allowColumnsResizing",
        "value": "boolean"
      },
      {
        "name": "textCase",
        "value": "upper | normal"
      },
      {
        "name": "size",
        "value": "none | 24 | 30 | 36 | 42 | 48 | 60"
      }
    ],
    "/Users/ihorkorenets/Job/UUI/epam-promo/components/tables/docs/dataTableHeaderRow.doc.tsx": [
      {
        "name": "columns",
        "value": "DataColumnProps<TItem, TId, any>[]"
      },
      {
        "name": "selectAll",
        "value": "ICheckable"
      },
      {
        "name": "onConfigButtonClick",
        "value": "(params: DataTableConfigModalParams) => any"
      },
      {
        "name": "renderCell",
        "value": "(props: DataTableHeaderCellProps<TItem, TId>) => React.ReactNode"
      },
      {
        "name": "renderConfigButton",
        "value": "() => React.ReactNode"
      },
      {
        "name": "value",
        "value": "T"
      },
      {
        "name": "onValueChange",
        "value": "(newValue: T) => void"
      },
      {
        "name": "isInvalid",
        "value": "boolean"
      },
      {
        "name": "validationMessage",
        "value": "string"
      },
      {
        "name": "validationProps",
        "value": "{ [key: string]: ICanBeInvalid; }"
      },
      {
        "name": "isDisabled",
        "value": "boolean"
      },
      {
        "name": "isReadonly",
        "value": "boolean"
      },
      {
        "name": "isRequired",
        "value": "boolean"
      },
      {
        "name": "cx",
        "value": "any"
      },
      {
        "name": "allowColumnsReordering",
        "value": "boolean"
      },
      {
        "name": "allowColumnsResizing",
        "value": "boolean"
      },
      {
        "name": "textCase",
        "value": "upper | normal"
      },
      {
        "name": "size",
        "value": "none | 24 | 30 | 36 | 42 | 48 | 60"
      }
    ],
    "/Users/ihorkorenets/Job/UUI/epam-promo/components/tables/docs/dataTableRow.doc.tsx": [
      {
        "name": "renderCell",
        "value": "(props: DataTableCellProps<TItem, TId>) => React.ReactNode"
      },
      {
        "name": "renderDropMarkers",
        "value": "(props: DndActorRenderParams) => React.ReactNode"
      },
      {
        "name": "cx",
        "value": "any"
      },
      {
        "name": "onClick",
        "value": "(e?: any) => void"
      },
      {
        "name": "key",
        "value": "React.ReactText"
      },
      {
        "name": "rawProps",
        "value": "any"
      },
      {
        "name": "alignItems",
        "value": "top | bottom | center | stretch"
      },
      {
        "name": "children",
        "value": "any"
      },
      {
        "name": "checkbox",
        "value": "{ isVisible: boolean; } & ICanBeInvalid"
      },
      {
        "name": "isSelectable",
        "value": "boolean"
      },
      {
        "name": "dnd",
        "value": "IDndActor<any, any>"
      },
      {
        "name": "link",
        "value": "Link"
      },
      {
        "name": "columns",
        "value": "DataColumnProps<TItem, TId, any>[]"
      },
      {
        "name": "isDisabled",
        "value": "boolean"
      },
      {
        "name": "id",
        "value": "TId"
      },
      {
        "name": "rowKey",
        "value": "string"
      },
      {
        "name": "index",
        "value": "number"
      },
      {
        "name": "value",
        "value": "TItem"
      },
      {
        "name": "path",
        "value": "DataRowPathItem<TId, TItem>[]"
      },
      {
        "name": "depth",
        "value": "number"
      },
      {
        "name": "indent",
        "value": "number"
      },
      {
        "name": "isLoading",
        "value": "boolean"
      },
      {
        "name": "isFoldable",
        "value": "boolean"
      },
      {
        "name": "isFolded",
        "value": "boolean"
      },
      {
        "name": "isChecked",
        "value": "boolean"
      },
      {
        "name": "isCheckable",
        "value": "boolean"
      },
      {
        "name": "isChildrenChecked",
        "value": "boolean"
      },
      {
        "name": "isSelected",
        "value": "boolean"
      },
      {
        "name": "isChildrenSelected",
        "value": "boolean"
      },
      {
        "name": "isFocused",
        "value": "boolean"
      },
      {
        "name": "isLastChild",
        "value": "boolean"
      },
      {
        "name": "onFold",
        "value": "(rowProps: DataRowProps<TItem, TId>) => void"
      },
      {
        "name": "onCheck",
        "value": "(rowProps: DataRowProps<TItem, TId>) => void"
      },
      {
        "name": "onSelect",
        "value": "(rowProps: DataRowProps<TItem, TId>) => void"
      },
      {
        "name": "onFocus",
        "value": "(focusedIndex: number) => void"
      },
      {
        "name": "borderBottom",
        "value": "none | gray30"
      },
      {
        "name": "size",
        "value": "none | 24 | 30 | 36 | 42 | 48 | 60"
      },
      {
        "name": "padding",
        "value": "24 | 12 | 0"
      },
      {
        "name": "isFirstColumn",
        "value": "boolean"
      },
      {
        "name": "isLastColumn",
        "value": "boolean"
      },
      {
        "name": "alignActions",
        "value": "top | center"
      }
    ],
    "/Users/ihorkorenets/Job/UUI/epam-promo/components/typography/docs/richTextView.doc.tsx": [
      {
        "name": "htmlContent",
        "value": "any"
      },
      {
        "name": "cx",
        "value": "any"
      },
      {
        "name": "children",
        "value": "React.ReactNode"
      },
      {
        "name": "rawProps",
        "value": "any"
      },
      {
        "name": "size",
        "value": "12 | 14 | 16"
      }
    ],
    "/Users/ihorkorenets/Job/UUI/epam-promo/components/typography/docs/text.doc.tsx": [
      {
        "name": "cx",
        "value": "any"
      },
      {
        "name": "children",
        "value": "React.ReactNode"
      },
      {
        "name": "onClick",
        "value": "(e?: any) => void"
      },
      {
        "name": "clickAnalyticsEvent",
        "value": "{ [key: string]: any; name: string; }"
      },
      {
        "name": "rawProps",
        "value": "any"
      },
      {
        "name": "forwardedRef",
        "value": "React.ForwardedRef<T>"
      },
      {
        "name": "size",
        "value": "none | 24 | 30 | 36 | 42 | 48 | 18"
      },
      {
        "name": "font",
        "value": "sans | sans-semibold | sans-italic | museo-sans | museo-slab"
      },
      {
        "name": "color",
        "value": "gray60 | gray5 | gray80 | gray90"
      },
      {
        "name": "lineHeight",
        "value": "24 | 30 | 18 | 12"
      },
      {
        "name": "fontSize",
        "value": "24 | 18 | 12 | 10 | 14 | 16"
      }
    ],
    "/Users/ihorkorenets/Job/UUI/epam-promo/components/typography/docs/textPlaceholder.doc.tsx": [
      {
        "name": "wordsCount",
        "value": "number"
      },
      {
        "name": "color",
        "value": "gray10 | gray40"
      },
      {
        "name": "isNotAnimated",
        "value": "boolean"
      }
    ],
    "/Users/ihorkorenets/Job/UUI/epam-promo/components/widgets/docs/avatar.doc.tsx": [
      {
        "name": "alt",
        "value": "string"
      },
      {
        "name": "img",
        "value": "string"
      },
      {
        "name": "size",
        "value": "24 | 30 | 36 | 42 | 48 | 18 | 60 | 12 | 54 | 72 | 78 | 90 | 144"
      },
      {
        "name": "isLoading",
        "value": "boolean"
      },
      {
        "name": "cx",
        "value": "any"
      },
      {
        "name": "rawProps",
        "value": "any"
      },
      {
        "name": "forwardedRef",
        "value": "React.ForwardedRef<T>"
      }
    ],
    "/Users/ihorkorenets/Job/UUI/epam-promo/components/widgets/docs/avatarStack.doc.tsx": [
      {
        "name": "avatarSize",
        "value": "24 | 36 | 48 | 144"
      },
      {
        "name": "urlArray",
        "value": "string[]"
      },
      {
        "name": "direction",
        "value": "left | right"
      },
      {
        "name": "avatarsCount",
        "value": "number"
      },
      {
        "name": "renderItem",
        "value": "(url: string) => React.ReactElement<any, string | ((props: any) => React.ReactElement<any, any>) | (new (props: any) => React.Component<any, any, any>)>"
      },
      {
        "name": "cx",
        "value": "any"
      },
      {
        "name": "rawProps",
        "value": "any"
      }
    ],
    "/Users/ihorkorenets/Job/UUI/epam-promo/components/widgets/docs/badge.doc.tsx": [
      {
        "name": "clearIcon",
        "value": "React.FC<any>"
      },
      {
        "name": "captionCX",
        "value": "any"
      },
      {
        "name": "dropdownIcon",
        "value": "React.FC<any>"
      },
      {
        "name": "dropdownIconPosition",
        "value": "left | right"
      },
      {
        "name": "countPosition",
        "value": "left | right"
      },
      {
        "name": "count",
        "value": "number"
      },
      {
        "name": "isLinkActive",
        "value": "boolean"
      },
      {
        "name": "tabIndex",
        "value": "number"
      },
      {
        "name": "cx",
        "value": "any"
      },
      {
        "name": "onClick",
        "value": "(e?: any) => void"
      },
      {
        "name": "link",
        "value": "Link"
      },
      {
        "name": "href",
        "value": "string"
      },
      {
        "name": "target",
        "value": "\"_blank\""
      },
      {
        "name": "isDisabled",
        "value": "boolean"
      },
      {
        "name": "icon",
        "value": "React.FC<any>"
      },
      {
        "name": "iconPosition",
        "value": "left | right"
      },
      {
        "name": "onIconClick",
        "value": "() => void"
      },
      {
        "name": "clickAnalyticsEvent",
        "value": "{ [key: string]: any; name: string; }"
      },
      {
        "name": "caption",
        "value": "any"
      },
      {
        "name": "onClear",
        "value": "(e?: any) => void"
      },
      {
        "name": "isOpen",
        "value": "boolean"
      },
      {
        "name": "isDropdown",
        "value": "boolean"
      },
      {
        "name": "toggleDropdownOpening",
        "value": "(value: boolean) => void"
      },
      {
        "name": "isInteractedOutside",
        "value": "(event: Event) => boolean"
      },
      {
        "name": "ref",
        "value": "React.Ref<any>"
      },
      {
        "name": "placeholder",
        "value": "any"
      },
      {
        "name": "rawProps",
        "value": "any"
      },
      {
        "name": "forwardedRef",
        "value": "React.ForwardedRef<T>"
      },
      {
        "name": "fill",
        "value": "solid | transparent | semitransparent"
      },
      {
        "name": "size",
        "value": "24 | 30 | 36 | 42 | 48 | 18"
      },
      {
        "name": "color",
        "value": "blue | green | red | amber | gray30 | cyan | orange | purple | violet"
      }
    ],
    "/Users/ihorkorenets/Job/UUI/epam-promo/components/widgets/docs/paginator.doc.tsx": [
      {
        "name": "size",
        "value": "24 | 30"
      },
      {
        "name": "totalPages",
        "value": "number"
      },
      {
        "name": "render",
        "value": "(params: PaginatorParams) => any"
      },
      {
        "name": "value",
        "value": "T"
      },
      {
        "name": "onValueChange",
        "value": "(newValue: T) => void"
      },
      {
        "name": "isInvalid",
        "value": "boolean"
      },
      {
        "name": "validationMessage",
        "value": "string"
      },
      {
        "name": "validationProps",
        "value": "{ [key: string]: ICanBeInvalid; }"
      },
      {
        "name": "isDisabled",
        "value": "boolean"
      },
      {
        "name": "isReadonly",
        "value": "boolean"
      },
      {
        "name": "isRequired",
        "value": "boolean"
      },
      {
        "name": "getValueChangeAnalyticsEvent",
        "value": "(newValue: T, oldValue: T) => { [key: string]: any; name: string; }"
      }
    ],
    "/Users/ihorkorenets/Job/UUI/epam-promo/components/widgets/docs/spinner.doc.tsx": [
      {
        "name": "cx",
        "value": "any"
      },
      {
        "name": "rawProps",
        "value": "any"
      },
      {
        "name": "forwardedRef",
        "value": "React.ForwardedRef<T>"
      },
      {
        "name": "color",
        "value": "white | blue | gray50"
      }
    ],
    "/Users/ihorkorenets/Job/UUI/epam-promo/components/widgets/docs/tag.doc.tsx": [
      {
        "name": "clearIcon",
        "value": "React.FC<any>"
      },
      {
        "name": "captionCX",
        "value": "any"
      },
      {
        "name": "dropdownIcon",
        "value": "React.FC<any>"
      },
      {
        "name": "dropdownIconPosition",
        "value": "left | right"
      },
      {
        "name": "countPosition",
        "value": "left | right"
      },
      {
        "name": "count",
        "value": "number"
      },
      {
        "name": "isLinkActive",
        "value": "boolean"
      },
      {
        "name": "tabIndex",
        "value": "number"
      },
      {
        "name": "cx",
        "value": "any"
      },
      {
        "name": "onClick",
        "value": "(e?: any) => void"
      },
      {
        "name": "link",
        "value": "Link"
      },
      {
        "name": "href",
        "value": "string"
      },
      {
        "name": "target",
        "value": "\"_blank\""
      },
      {
        "name": "isDisabled",
        "value": "boolean"
      },
      {
        "name": "icon",
        "value": "React.FC<any>"
      },
      {
        "name": "iconPosition",
        "value": "left | right"
      },
      {
        "name": "onIconClick",
        "value": "() => void"
      },
      {
        "name": "clickAnalyticsEvent",
        "value": "{ [key: string]: any; name: string; }"
      },
      {
        "name": "caption",
        "value": "any"
      },
      {
        "name": "onClear",
        "value": "(e?: any) => void"
      },
      {
        "name": "isOpen",
        "value": "boolean"
      },
      {
        "name": "isDropdown",
        "value": "boolean"
      },
      {
        "name": "toggleDropdownOpening",
        "value": "(value: boolean) => void"
      },
      {
        "name": "isInteractedOutside",
        "value": "(event: Event) => boolean"
      },
      {
        "name": "ref",
        "value": "React.Ref<any>"
      },
      {
        "name": "placeholder",
        "value": "any"
      },
      {
        "name": "rawProps",
        "value": "any"
      },
      {
        "name": "forwardedRef",
        "value": "React.ForwardedRef<T>"
      },
      {
        "name": "size",
        "value": "24 | 30 | 36 | 42 | 48 | 18"
      }
    ],
    "/Users/ihorkorenets/Job/UUI/loveship/components/buttons/docs/button.doc.tsx": [
      {
        "name": "clearIcon",
        "value": "React.FC<any>"
      },
      {
        "name": "captionCX",
        "value": "any"
      },
      {
        "name": "dropdownIcon",
        "value": "React.FC<any>"
      },
      {
        "name": "dropdownIconPosition",
        "value": "left | right"
      },
      {
        "name": "countPosition",
        "value": "left | right"
      },
      {
        "name": "count",
        "value": "number"
      },
      {
        "name": "isLinkActive",
        "value": "boolean"
      },
      {
        "name": "tabIndex",
        "value": "number"
      },
      {
        "name": "cx",
        "value": "any"
      },
      {
        "name": "onClick",
        "value": "(e?: any) => void"
      },
      {
        "name": "link",
        "value": "Link"
      },
      {
        "name": "href",
        "value": "string"
      },
      {
        "name": "target",
        "value": "\"_blank\""
      },
      {
        "name": "isDisabled",
        "value": "boolean"
      },
      {
        "name": "icon",
        "value": "React.FC<any>"
      },
      {
        "name": "iconPosition",
        "value": "left | right"
      },
      {
        "name": "onIconClick",
        "value": "() => void"
      },
      {
        "name": "clickAnalyticsEvent",
        "value": "{ [key: string]: any; name: string; }"
      },
      {
        "name": "caption",
        "value": "any"
      },
      {
        "name": "onClear",
        "value": "(e?: any) => void"
      },
      {
        "name": "isOpen",
        "value": "boolean"
      },
      {
        "name": "isDropdown",
        "value": "boolean"
      },
      {
        "name": "toggleDropdownOpening",
        "value": "(value: boolean) => void"
      },
      {
        "name": "isInteractedOutside",
        "value": "(event: Event) => boolean"
      },
      {
        "name": "ref",
        "value": "React.Ref<any>"
      },
      {
        "name": "placeholder",
        "value": "any"
      },
      {
        "name": "rawProps",
        "value": "any"
      },
      {
        "name": "forwardedRef",
        "value": "React.ForwardedRef<T>"
      },
      {
        "name": "size",
        "value": "none | 24 | 30 | 36 | 42 | 48 | 18"
      },
      {
        "name": "shape",
        "value": "square | round"
      },
      {
        "name": "fill",
        "value": "none | solid | white | light"
      },
      {
        "name": "color",
        "value": "white | fuchsia | sky | grass | sun | fire | carbon | cobalt | lavanda | night50 | night100 | night200 | night300 | night400 | night500 | night600 | night700 | night800 | night900"
      },
      {
        "name": "lineHeight",
        "value": "24 | 30 | 18 | 12"
      },
      {
        "name": "fontSize",
        "value": "18 | 12 | 10 | 14 | 16"
      }
    ],
    "/Users/ihorkorenets/Job/UUI/loveship/components/buttons/docs/iconButton.doc.ts": [
      {
        "name": "isLinkActive",
        "value": "boolean"
      },
      {
        "name": "tabIndex",
        "value": "number"
      },
      {
        "name": "cx",
        "value": "any"
      },
      {
        "name": "onClick",
        "value": "(e?: any) => void"
      },
      {
        "name": "link",
        "value": "Link"
      },
      {
        "name": "href",
        "value": "string"
      },
      {
        "name": "target",
        "value": "\"_blank\""
      },
      {
        "name": "isDisabled",
        "value": "boolean"
      },
      {
        "name": "icon",
        "value": "React.FC<any>"
      },
      {
        "name": "iconPosition",
        "value": "left | right"
      },
      {
        "name": "onIconClick",
        "value": "() => void"
      },
      {
        "name": "clickAnalyticsEvent",
        "value": "{ [key: string]: any; name: string; }"
      },
      {
        "name": "rawProps",
        "value": "any"
      },
      {
        "name": "forwardedRef",
        "value": "React.ForwardedRef<T>"
      },
      {
        "name": "color",
        "value": "white | fuchsia | sky | grass | sun | fire | carbon | cobalt | lavanda | night50 | night100 | night200 | night300 | night400 | night500 | night600 | night700 | night800 | night900"
      }
    ],
    "/Users/ihorkorenets/Job/UUI/loveship/components/buttons/docs/linkButton.doc.tsx": [
      {
        "name": "clearIcon",
        "value": "React.FC<any>"
      },
      {
        "name": "captionCX",
        "value": "any"
      },
      {
        "name": "dropdownIcon",
        "value": "React.FC<any>"
      },
      {
        "name": "dropdownIconPosition",
        "value": "left | right"
      },
      {
        "name": "countPosition",
        "value": "left | right"
      },
      {
        "name": "count",
        "value": "number"
      },
      {
        "name": "isLinkActive",
        "value": "boolean"
      },
      {
        "name": "tabIndex",
        "value": "number"
      },
      {
        "name": "cx",
        "value": "any"
      },
      {
        "name": "onClick",
        "value": "(e?: any) => void"
      },
      {
        "name": "link",
        "value": "Link"
      },
      {
        "name": "href",
        "value": "string"
      },
      {
        "name": "target",
        "value": "\"_blank\""
      },
      {
        "name": "isDisabled",
        "value": "boolean"
      },
      {
        "name": "icon",
        "value": "React.FC<any>"
      },
      {
        "name": "iconPosition",
        "value": "left | right"
      },
      {
        "name": "onIconClick",
        "value": "() => void"
      },
      {
        "name": "clickAnalyticsEvent",
        "value": "{ [key: string]: any; name: string; }"
      },
      {
        "name": "caption",
        "value": "any"
      },
      {
        "name": "onClear",
        "value": "(e?: any) => void"
      },
      {
        "name": "isOpen",
        "value": "boolean"
      },
      {
        "name": "isDropdown",
        "value": "boolean"
      },
      {
        "name": "toggleDropdownOpening",
        "value": "(value: boolean) => void"
      },
      {
        "name": "isInteractedOutside",
        "value": "(event: Event) => boolean"
      },
      {
        "name": "ref",
        "value": "React.Ref<any>"
      },
      {
        "name": "placeholder",
        "value": "any"
      },
      {
        "name": "rawProps",
        "value": "any"
      },
      {
        "name": "forwardedRef",
        "value": "React.ForwardedRef<T>"
      },
      {
        "name": "size",
        "value": "none | 24 | 30 | 36 | 42 | 48"
      },
      {
        "name": "color",
        "value": "white | fuchsia | sky | grass | sun | fire | carbon | cobalt | lavanda | night50 | night100 | night200 | night300 | night400 | night500 | night600 | night700 | night800 | night900"
      },
      {
        "name": "font",
        "value": "sans | sans-semibold | sans-light"
      },
      {
        "name": "lineHeight",
        "value": "24 | 30 | 18 | 12"
      },
      {
        "name": "fontSize",
        "value": "18 | 12 | 10 | 14 | 16"
      }
    ],
    "/Users/ihorkorenets/Job/UUI/loveship/components/buttons/docs/tabButton.doc.ts": [
      {
        "name": "size",
        "value": "36 | 48 | 60"
      },
      {
        "name": "theme",
        "value": "light | dark"
      },
      {
        "name": "withNotify",
        "value": "boolean"
      },
      {
        "name": "clearIcon",
        "value": "React.FC<any>"
      },
      {
        "name": "captionCX",
        "value": "any"
      },
      {
        "name": "dropdownIcon",
        "value": "React.FC<any>"
      },
      {
        "name": "dropdownIconPosition",
        "value": "left | right"
      },
      {
        "name": "countPosition",
        "value": "left | right"
      },
      {
        "name": "count",
        "value": "number"
      },
      {
        "name": "isLinkActive",
        "value": "boolean"
      },
      {
        "name": "tabIndex",
        "value": "number"
      },
      {
        "name": "cx",
        "value": "any"
      },
      {
        "name": "onClick",
        "value": "(e?: any) => void"
      },
      {
        "name": "link",
        "value": "Link"
      },
      {
        "name": "href",
        "value": "string"
      },
      {
        "name": "target",
        "value": "\"_blank\""
      },
      {
        "name": "isDisabled",
        "value": "boolean"
      },
      {
        "name": "icon",
        "value": "React.FC<any>"
      },
      {
        "name": "iconPosition",
        "value": "left | right"
      },
      {
        "name": "onIconClick",
        "value": "() => void"
      },
      {
        "name": "clickAnalyticsEvent",
        "value": "{ [key: string]: any; name: string; }"
      },
      {
        "name": "caption",
        "value": "any"
      },
      {
        "name": "onClear",
        "value": "(e?: any) => void"
      },
      {
        "name": "isOpen",
        "value": "boolean"
      },
      {
        "name": "isDropdown",
        "value": "boolean"
      },
      {
        "name": "toggleDropdownOpening",
        "value": "(value: boolean) => void"
      },
      {
        "name": "isInteractedOutside",
        "value": "(event: Event) => boolean"
      },
      {
        "name": "ref",
        "value": "React.Ref<any>"
      },
      {
        "name": "placeholder",
        "value": "any"
      },
      {
        "name": "rawProps",
        "value": "any"
      },
      {
        "name": "forwardedRef",
        "value": "React.ForwardedRef<T>"
      }
    ],
    "/Users/ihorkorenets/Job/UUI/loveship/components/buttons/docs/verticalTabButton.doc.ts": [
      {
        "name": "size",
        "value": "36 | 48 | 60"
      },
      {
        "name": "theme",
        "value": "light | dark"
      },
      {
        "name": "withNotify",
        "value": "boolean"
      },
      {
        "name": "clearIcon",
        "value": "React.FC<any>"
      },
      {
        "name": "captionCX",
        "value": "any"
      },
      {
        "name": "dropdownIcon",
        "value": "React.FC<any>"
      },
      {
        "name": "dropdownIconPosition",
        "value": "left | right"
      },
      {
        "name": "countPosition",
        "value": "left | right"
      },
      {
        "name": "count",
        "value": "number"
      },
      {
        "name": "isLinkActive",
        "value": "boolean"
      },
      {
        "name": "tabIndex",
        "value": "number"
      },
      {
        "name": "cx",
        "value": "any"
      },
      {
        "name": "onClick",
        "value": "(e?: any) => void"
      },
      {
        "name": "link",
        "value": "Link"
      },
      {
        "name": "href",
        "value": "string"
      },
      {
        "name": "target",
        "value": "\"_blank\""
      },
      {
        "name": "isDisabled",
        "value": "boolean"
      },
      {
        "name": "icon",
        "value": "React.FC<any>"
      },
      {
        "name": "iconPosition",
        "value": "left | right"
      },
      {
        "name": "onIconClick",
        "value": "() => void"
      },
      {
        "name": "clickAnalyticsEvent",
        "value": "{ [key: string]: any; name: string; }"
      },
      {
        "name": "caption",
        "value": "any"
      },
      {
        "name": "onClear",
        "value": "(e?: any) => void"
      },
      {
        "name": "isOpen",
        "value": "boolean"
      },
      {
        "name": "isDropdown",
        "value": "boolean"
      },
      {
        "name": "toggleDropdownOpening",
        "value": "(value: boolean) => void"
      },
      {
        "name": "isInteractedOutside",
        "value": "(event: Event) => boolean"
      },
      {
        "name": "ref",
        "value": "React.Ref<any>"
      },
      {
        "name": "placeholder",
        "value": "any"
      },
      {
        "name": "rawProps",
        "value": "any"
      },
      {
        "name": "forwardedRef",
        "value": "React.ForwardedRef<T>"
      }
    ],
    "/Users/ihorkorenets/Job/UUI/loveship/components/datePickers/docs/calendar.doc.ts": [
      {
        "name": "value",
        "value": "TSelection"
      },
      {
        "name": "onValueChange",
        "value": "(day: Dayjs) => void"
      },
      {
        "name": "displayedDate",
        "value": "Dayjs"
      },
      {
        "name": "renderDay",
        "value": "(day: Dayjs) => void) => React.ReactElement<Element, string | ((props: any) => React.ReactElement<any, any>) | (new (props: any) => React.Component<any, any, any>)>"
      },
      {
        "name": "filter",
        "value": "(day: Dayjs) => boolean"
      },
      {
        "name": "hideAnotherMonths",
        "value": "boolean"
      },
      {
        "name": "getDayCX",
        "value": "(day: Dayjs) => any"
      },
      {
        "name": "isHoliday",
        "value": "(day: Dayjs) => boolean"
      },
      {
        "name": "cx",
        "value": "any"
      },
      {
        "name": "rawProps",
        "value": "any"
      },
      {
        "name": "forwardedRef",
        "value": "React.ForwardedRef<T>"
      }
    ],
    "/Users/ihorkorenets/Job/UUI/loveship/components/datePickers/docs/datePicker.doc.tsx": [
      {
        "name": "format",
        "value": "string"
      },
      {
        "name": "filter",
        "value": "(day: Dayjs) => boolean"
      },
      {
        "name": "renderTarget",
        "value": "(props: any) => React.ReactNode"
      },
      {
        "name": "renderFooter",
        "value": "() => React.ReactNode"
      },
      {
        "name": "iconPosition",
        "value": "left | right"
      },
      {
        "name": "disableClear",
        "value": "boolean"
      },
      {
        "name": "rawProps",
        "value": "{ input?: any; body?: any; }"
      },
      {
        "name": "renderDay",
        "value": "(day: Dayjs) => void) => React.ReactElement<Element, string | ((props: any) => React.ReactElement<any, any>) | (new (props: any) => React.Component<any, any, any>)>"
      },
      {
        "name": "isHoliday",
        "value": "(day: Dayjs) => boolean"
      },
      {
        "name": "onBlur",
        "value": "(e?: React.FocusEvent<HTMLInputElement>) => void"
      },
      {
        "name": "value",
        "value": "T"
      },
      {
        "name": "onValueChange",
        "value": "(newValue: T) => void"
      },
      {
        "name": "isInvalid",
        "value": "boolean"
      },
      {
        "name": "validationMessage",
        "value": "string"
      },
      {
        "name": "validationProps",
        "value": "{ [key: string]: ICanBeInvalid; }"
      },
      {
        "name": "isDisabled",
        "value": "boolean"
      },
      {
        "name": "isReadonly",
        "value": "boolean"
      },
      {
        "name": "isRequired",
        "value": "boolean"
      },
      {
        "name": "onFocus",
        "value": "(e: React.FocusEvent<T>) => void"
      },
      {
        "name": "cx",
        "value": "any"
      },
      {
        "name": "placeholder",
        "value": "any"
      },
      {
        "name": "getValueChangeAnalyticsEvent",
        "value": "(newValue: T, oldValue: T) => { [key: string]: any; name: string; }"
      },
      {
        "name": "size",
        "value": "none | 24 | 30 | 36 | 42 | 48"
      },
      {
        "name": "lineHeight",
        "value": "24 | 30 | 18 | 12"
      },
      {
        "name": "fontSize",
        "value": "18 | 12 | 10 | 14 | 16"
      },
      {
        "name": "mode",
        "value": "none | form | cell | inline"
      }
    ],
    "/Users/ihorkorenets/Job/UUI/loveship/components/datePickers/docs/rangeDatePicker.doc.tsx": [
      {
        "name": "getPlaceholder",
        "value": "(type: InputType) => string"
      },
      {
        "name": "rawProps",
        "value": "{ from?: any; to?: any; body?: any; }"
      },
      {
        "name": "format",
        "value": "string"
      },
      {
        "name": "filter",
        "value": "(day: Dayjs) => boolean"
      },
      {
        "name": "renderTarget",
        "value": "(props: IDropdownToggler) => React.ReactNode"
      },
      {
        "name": "renderFooter",
        "value": "(value: RangeDatePickerValue) => React.ReactNode"
      },
      {
        "name": "renderDay",
        "value": "(day: Dayjs) => void) => React.ReactElement<Element, string | ((props: any) => React.ReactElement<any, any>) | (new (props: any) => React.Component<any, any, any>)>"
      },
      {
        "name": "presets",
        "value": "RangeDatePickerPresets"
      },
      {
        "name": "disableClear",
        "value": "boolean"
      },
      {
        "name": "placement",
        "value": "left | right | auto | auto-start | auto-end | top | bottom | top-start | top-end | bottom-start | bottom-end | right-start | right-end | left-start | left-end"
      },
      {
        "name": "isHoliday",
        "value": "(day: Dayjs) => boolean"
      },
      {
        "name": "value",
        "value": "T"
      },
      {
        "name": "onValueChange",
        "value": "(newValue: T) => void"
      },
      {
        "name": "isInvalid",
        "value": "boolean"
      },
      {
        "name": "validationMessage",
        "value": "string"
      },
      {
        "name": "validationProps",
        "value": "{ [key: string]: ICanBeInvalid; }"
      },
      {
        "name": "isDisabled",
        "value": "boolean"
      },
      {
        "name": "isReadonly",
        "value": "boolean"
      },
      {
        "name": "isRequired",
        "value": "boolean"
      },
      {
        "name": "cx",
        "value": "any"
      },
      {
        "name": "getValueChangeAnalyticsEvent",
        "value": "(newValue: T, oldValue: T) => { [key: string]: any; name: string; }"
      },
      {
        "name": "size",
        "value": "none | 24 | 30 | 36 | 42 | 48"
      },
      {
        "name": "lineHeight",
        "value": "24 | 30 | 18 | 12"
      },
      {
        "name": "fontSize",
        "value": "18 | 12 | 10 | 14 | 16"
      },
      {
        "name": "mode",
        "value": "none | form | cell | inline"
      }
    ],
    "/Users/ihorkorenets/Job/UUI/loveship/components/inputs/docs/checkbox.doc.tsx": [
      {
        "name": "icon",
        "value": "React.FC<any>"
      },
      {
        "name": "indeterminateIcon",
        "value": "React.FC<any>"
      },
      {
        "name": "renderLabel",
        "value": "() => React.ReactNode"
      },
      {
        "name": "tabIndex",
        "value": "number"
      },
      {
        "name": "id",
        "value": "string"
      },
      {
        "name": "value",
        "value": "T"
      },
      {
        "name": "onValueChange",
        "value": "(newValue: T) => void"
      },
      {
        "name": "isInvalid",
        "value": "boolean"
      },
      {
        "name": "validationMessage",
        "value": "string"
      },
      {
        "name": "validationProps",
        "value": "{ [key: string]: ICanBeInvalid; }"
      },
      {
        "name": "isDisabled",
        "value": "boolean"
      },
      {
        "name": "isReadonly",
        "value": "boolean"
      },
      {
        "name": "isRequired",
        "value": "boolean"
      },
      {
        "name": "indeterminate",
        "value": "boolean"
      },
      {
        "name": "onFocus",
        "value": "(e: React.FocusEvent<T>) => void"
      },
      {
        "name": "onBlur",
        "value": "(e: React.FocusEvent<T>) => void"
      },
      {
        "name": "cx",
        "value": "any"
      },
      {
        "name": "label",
        "value": "any"
      },
      {
        "name": "getValueChangeAnalyticsEvent",
        "value": "(newValue: T, oldValue: T) => { [key: string]: any; name: string; }"
      },
      {
        "name": "rawProps",
        "value": "any"
      },
      {
        "name": "forwardedRef",
        "value": "React.ForwardedRef<T>"
      },
      {
        "name": "size",
        "value": "18 | 12"
      },
      {
        "name": "theme",
        "value": "light | dark"
      },
      {
        "name": "color",
        "value": "white | fuchsia | sky | grass | sun | fire | carbon | cobalt | lavanda | night50 | night100 | night200 | night300 | night400 | night500 | night600 | night700 | night800 | night900"
      }
    ],
    "/Users/ihorkorenets/Job/UUI/loveship/components/inputs/docs/multiSwitch.doc.tsx": [
      {
        "name": "items",
        "value": "MultiSwitchItem<TValue>[]"
      },
      {
        "name": "color",
        "value": "sky | night600"
      },
      {
        "name": "value",
        "value": "T"
      },
      {
        "name": "onValueChange",
        "value": "(newValue: T) => void"
      },
      {
        "name": "isInvalid",
        "value": "boolean"
      },
      {
        "name": "validationMessage",
        "value": "string"
      },
      {
        "name": "validationProps",
        "value": "{ [key: string]: ICanBeInvalid; }"
      },
      {
        "name": "isDisabled",
        "value": "boolean"
      },
      {
        "name": "isReadonly",
        "value": "boolean"
      },
      {
        "name": "isRequired",
        "value": "boolean"
      },
      {
        "name": "size",
        "value": "none | 24 | 30 | 36 | 42 | 48"
      },
      {
        "name": "rawProps",
        "value": "any"
      }
    ],
    "/Users/ihorkorenets/Job/UUI/loveship/components/inputs/docs/numericInput.doc.ts": [
      {
        "name": "max",
        "value": "number"
      },
      {
        "name": "min",
        "value": "number"
      },
      {
        "name": "upIcon",
        "value": "React.FC<any>"
      },
      {
        "name": "downIcon",
        "value": "React.FC<any>"
      },
      {
        "name": "step",
        "value": "number"
      },
      {
        "name": "inputCx",
        "value": "any"
      },
      {
        "name": "id",
        "value": "string"
      },
      {
        "name": "disableArrows",
        "value": "boolean"
      },
      {
        "name": "align",
        "value": "left | right"
      },
      {
        "name": "onFocus",
        "value": "(e: React.FocusEvent<T>) => void"
      },
      {
        "name": "onBlur",
        "value": "(e: React.FocusEvent<T>) => void"
      },
      {
        "name": "cx",
        "value": "any"
      },
      {
        "name": "onClick",
        "value": "(e?: any) => void"
      },
      {
        "name": "isDisabled",
        "value": "boolean"
      },
      {
        "name": "formatter",
        "value": "(value: T) => T"
      },
      {
        "name": "value",
        "value": "T"
      },
      {
        "name": "onValueChange",
        "value": "(newValue: T) => void"
      },
      {
        "name": "isInvalid",
        "value": "boolean"
      },
      {
        "name": "validationMessage",
        "value": "string"
      },
      {
        "name": "validationProps",
        "value": "{ [key: string]: ICanBeInvalid; }"
      },
      {
        "name": "isReadonly",
        "value": "boolean"
      },
      {
        "name": "isRequired",
        "value": "boolean"
      },
      {
        "name": "placeholder",
        "value": "any"
      },
      {
        "name": "getValueChangeAnalyticsEvent",
        "value": "(newValue: T, oldValue: T) => { [key: string]: any; name: string; }"
      },
      {
        "name": "rawProps",
        "value": "any"
      },
      {
        "name": "forwardedRef",
        "value": "React.ForwardedRef<T>"
      },
      {
        "name": "mode",
        "value": "none | form | cell | inline"
      },
      {
        "name": "size",
        "value": "none | 24 | 30 | 36 | 42 | 48"
      },
      {
        "name": "lineHeight",
        "value": "24 | 30 | 18 | 12"
      },
      {
        "name": "fontSize",
        "value": "18 | 12 | 10 | 14 | 16"
      }
    ],
    "/Users/ihorkorenets/Job/UUI/loveship/components/inputs/docs/radioInput.doc.tsx": [
      {
        "name": "icon",
        "value": "React.FC<any>"
      },
      {
        "name": "renderLabel",
        "value": "() => React.ReactNode"
      },
      {
        "name": "tabIndex",
        "value": "number"
      },
      {
        "name": "id",
        "value": "string"
      },
      {
        "name": "cx",
        "value": "any"
      },
      {
        "name": "isDisabled",
        "value": "boolean"
      },
      {
        "name": "value",
        "value": "T"
      },
      {
        "name": "onValueChange",
        "value": "(newValue: T) => void"
      },
      {
        "name": "isInvalid",
        "value": "boolean"
      },
      {
        "name": "validationMessage",
        "value": "string"
      },
      {
        "name": "validationProps",
        "value": "{ [key: string]: ICanBeInvalid; }"
      },
      {
        "name": "isReadonly",
        "value": "boolean"
      },
      {
        "name": "isRequired",
        "value": "boolean"
      },
      {
        "name": "label",
        "value": "any"
      },
      {
        "name": "getValueChangeAnalyticsEvent",
        "value": "(newValue: T, oldValue: T) => { [key: string]: any; name: string; }"
      },
      {
        "name": "rawProps",
        "value": "any"
      },
      {
        "name": "forwardedRef",
        "value": "React.ForwardedRef<T>"
      },
      {
        "name": "size",
        "value": "18 | 12"
      },
      {
        "name": "color",
        "value": "ColorMod"
      },
      {
        "name": "theme",
        "value": "light | dark"
      }
    ],
    "/Users/ihorkorenets/Job/UUI/loveship/components/inputs/docs/rating.doc.ts": [
      {
        "name": "filledStarIcon",
        "value": "any"
      },
      {
        "name": "emptyStarIcon",
        "value": "any"
      },
      {
        "name": "hideTooltip",
        "value": "boolean"
      },
      {
        "name": "hint",
        "value": "(value: number) => string"
      },
      {
        "name": "Tooltip",
        "value": "React.ComponentType<TooltipProps>"
      },
      {
        "name": "from",
        "value": "number"
      },
      {
        "name": "to",
        "value": "number"
      },
      {
        "name": "step",
        "value": "1 | 0.5"
      },
      {
        "name": "renderRating",
        "value": "(rating: number, markWidth: number, numberOfMarks: number) => React.ReactNode"
      },
      {
        "name": "cx",
        "value": "any"
      },
      {
        "name": "isDisabled",
        "value": "boolean"
      },
      {
        "name": "value",
        "value": "T"
      },
      {
        "name": "onValueChange",
        "value": "(newValue: T) => void"
      },
      {
        "name": "isInvalid",
        "value": "boolean"
      },
      {
        "name": "validationMessage",
        "value": "string"
      },
      {
        "name": "validationProps",
        "value": "{ [key: string]: ICanBeInvalid; }"
      },
      {
        "name": "isReadonly",
        "value": "boolean"
      },
      {
        "name": "isRequired",
        "value": "boolean"
      },
      {
        "name": "rawProps",
        "value": "any"
      },
      {
        "name": "forwardedRef",
        "value": "React.ForwardedRef<T>"
      },
      {
        "name": "color",
        "value": "white | fuchsia | sky | grass | sun | fire | carbon | cobalt | lavanda | night50 | night100 | night200 | night300 | night400 | night500 | night600 | night700 | night800 | night900"
      },
      {
        "name": "size",
        "value": "18 | 24 | 30"
      }
    ],
    "/Users/ihorkorenets/Job/UUI/loveship/components/inputs/docs/searchInput.doc.ts": [
      {
        "name": "acceptIcon",
        "value": "React.FC<any>"
      },
      {
        "name": "cancelIcon",
        "value": "React.FC<any>"
      },
      {
        "name": "dropdownIcon",
        "value": "React.FC<any>"
      },
      {
        "name": "inputCx",
        "value": "any"
      },
      {
        "name": "renderInput",
        "value": "(props: React.DetailedHTMLProps<React.InputHTMLAttributes<HTMLInputElement>, HTMLInputElement>) => JSX.Element"
      },
      {
        "name": "onCancel",
        "value": "() => void"
      },
      {
        "name": "onAccept",
        "value": "() => void"
      },
      {
        "name": "onKeyDown",
        "value": "(e?: any) => void"
      },
      {
        "name": "autoFocus",
        "value": "boolean"
      },
      {
        "name": "type",
        "value": "string"
      },
      {
        "name": "autoComplete",
        "value": "string"
      },
      {
        "name": "name",
        "value": "string"
      },
      {
        "name": "maxLength",
        "value": "number"
      },
      {
        "name": "inputMode",
        "value": "none | text | search | tel | url | email | numeric | decimal"
      },
      {
        "name": "tabIndex",
        "value": "number"
      },
      {
        "name": "id",
        "value": "string"
      },
      {
        "name": "prefix",
        "value": "React.ReactNode"
      },
      {
        "name": "suffix",
        "value": "React.ReactNode"
      },
      {
        "name": "cx",
        "value": "any"
      },
      {
        "name": "onClick",
        "value": "(e?: any) => void"
      },
      {
        "name": "isDisabled",
        "value": "boolean"
      },
      {
        "name": "value",
        "value": "T"
      },
      {
        "name": "onValueChange",
        "value": "(newValue: T) => void"
      },
      {
        "name": "isInvalid",
        "value": "boolean"
      },
      {
        "name": "validationMessage",
        "value": "string"
      },
      {
        "name": "validationProps",
        "value": "{ [key: string]: ICanBeInvalid; }"
      },
      {
        "name": "isReadonly",
        "value": "boolean"
      },
      {
        "name": "isRequired",
        "value": "boolean"
      },
      {
        "name": "placeholder",
        "value": "any"
      },
      {
        "name": "icon",
        "value": "React.FC<any>"
      },
      {
        "name": "iconPosition",
        "value": "left | right"
      },
      {
        "name": "onIconClick",
        "value": "() => void"
      },
      {
        "name": "isOpen",
        "value": "boolean"
      },
      {
        "name": "isDropdown",
        "value": "boolean"
      },
      {
        "name": "toggleDropdownOpening",
        "value": "(value: boolean) => void"
      },
      {
        "name": "isInteractedOutside",
        "value": "(event: Event) => boolean"
      },
      {
        "name": "ref",
        "value": "React.Ref<any>"
      },
      {
        "name": "caption",
        "value": "any"
      },
      {
        "name": "getValueChangeAnalyticsEvent",
        "value": "(newValue: T, oldValue: T) => { [key: string]: any; name: string; }"
      },
      {
        "name": "rawProps",
        "value": "any"
      },
      {
        "name": "onFocus",
        "value": "(e: React.FocusEvent<T>) => void"
      },
      {
        "name": "onBlur",
        "value": "(e: React.FocusEvent<T>) => void"
      },
      {
        "name": "size",
        "value": "none | 24 | 30 | 36 | 42 | 48 | 60"
      },
      {
        "name": "mode",
        "value": "none | form | cell | inline"
      },
      {
        "name": "lineHeight",
        "value": "24 | 30 | 18 | 12"
      },
      {
        "name": "fontSize",
        "value": "18 | 12 | 10 | 14 | 16"
      },
      {
        "name": "disableDebounce",
        "value": "boolean"
      },
      {
        "name": "debounceDelay",
        "value": "number"
      }
    ],
    "/Users/ihorkorenets/Job/UUI/loveship/components/inputs/docs/sliderRating.doc.tsx": [
      {
        "name": "renderTooltip",
        "value": "(value: TValue) => React.ReactNode"
      },
      {
        "name": "from",
        "value": "1 | 2"
      },
      {
        "name": "withoutNa",
        "value": "boolean"
      },
      {
        "name": "size",
        "value": "24 | 18"
      },
      {
        "name": "getScaleIcon",
        "value": "(value: number) => React.FC<any>"
      },
      {
        "name": "getHandlerIcon",
        "value": "(value: number) => React.FC<any>"
      },
      {
        "name": "value",
        "value": "T"
      },
      {
        "name": "onValueChange",
        "value": "(newValue: T) => void"
      },
      {
        "name": "isInvalid",
        "value": "boolean"
      },
      {
        "name": "validationMessage",
        "value": "string"
      },
      {
        "name": "validationProps",
        "value": "{ [key: string]: ICanBeInvalid; }"
      },
      {
        "name": "isDisabled",
        "value": "boolean"
      },
      {
        "name": "isReadonly",
        "value": "boolean"
      },
      {
        "name": "isRequired",
        "value": "boolean"
      }
    ],
    "/Users/ihorkorenets/Job/UUI/loveship/components/inputs/docs/switch.doc.ts": [
      {
        "name": "tabIndex",
        "value": "number"
      },
      {
        "name": "id",
        "value": "string"
      },
      {
        "name": "cx",
        "value": "any"
      },
      {
        "name": "isDisabled",
        "value": "boolean"
      },
      {
        "name": "value",
        "value": "T"
      },
      {
        "name": "onValueChange",
        "value": "(newValue: T) => void"
      },
      {
        "name": "isInvalid",
        "value": "boolean"
      },
      {
        "name": "validationMessage",
        "value": "string"
      },
      {
        "name": "validationProps",
        "value": "{ [key: string]: ICanBeInvalid; }"
      },
      {
        "name": "isReadonly",
        "value": "boolean"
      },
      {
        "name": "isRequired",
        "value": "boolean"
      },
      {
        "name": "label",
        "value": "any"
      },
      {
        "name": "getValueChangeAnalyticsEvent",
        "value": "(newValue: T, oldValue: T) => { [key: string]: any; name: string; }"
      },
      {
        "name": "rawProps",
        "value": "any"
      },
      {
        "name": "forwardedRef",
        "value": "React.ForwardedRef<T>"
      },
      {
        "name": "size",
        "value": "24 | 18 | 12"
      },
      {
        "name": "theme",
        "value": "light | dark"
      },
      {
        "name": "color",
        "value": "white | fuchsia | sky | grass | sun | fire | carbon | cobalt | lavanda | night50 | night100 | night200 | night300 | night400 | night500 | night600 | night700 | night800 | night900"
      }
    ],
    "/Users/ihorkorenets/Job/UUI/loveship/components/inputs/docs/textArea.doc.ts": [
      {
        "name": "rows",
        "value": "number"
      },
      {
        "name": "autoSize",
        "value": "boolean"
      },
      {
        "name": "onBlur",
        "value": "(e?: any) => void"
      },
      {
        "name": "onFocus",
        "value": "(e?: any) => void"
      },
      {
        "name": "onKeyDown",
        "value": "(e?: any) => void"
      },
      {
        "name": "autoFocus",
        "value": "boolean"
      },
      {
        "name": "inputCx",
        "value": "any"
      },
      {
        "name": "maxLength",
        "value": "number"
      },
      {
        "name": "id",
        "value": "string"
      },
      {
        "name": "cx",
        "value": "any"
      },
      {
        "name": "value",
        "value": "T"
      },
      {
        "name": "onValueChange",
        "value": "(newValue: T) => void"
      },
      {
        "name": "isInvalid",
        "value": "boolean"
      },
      {
        "name": "validationMessage",
        "value": "string"
      },
      {
        "name": "validationProps",
        "value": "{ [key: string]: ICanBeInvalid; }"
      },
      {
        "name": "isDisabled",
        "value": "boolean"
      },
      {
        "name": "isReadonly",
        "value": "boolean"
      },
      {
        "name": "isRequired",
        "value": "boolean"
      },
      {
        "name": "placeholder",
        "value": "any"
      },
      {
        "name": "rawProps",
        "value": "any"
      },
      {
        "name": "forwardedRef",
        "value": "React.ForwardedRef<T>"
      },
      {
        "name": "size",
        "value": "none | 24 | 30 | 36 | 42 | 48 | 60"
      },
      {
        "name": "mode",
        "value": "none | form | cell | inline"
      },
      {
        "name": "lineHeight",
        "value": "24 | 30 | 18 | 12"
      },
      {
        "name": "fontSize",
        "value": "18 | 12 | 10 | 14 | 16"
      }
    ],
    "/Users/ihorkorenets/Job/UUI/loveship/components/inputs/docs/textInput.doc.ts": [
      {
        "name": "acceptIcon",
        "value": "React.FC<any>"
      },
      {
        "name": "cancelIcon",
        "value": "React.FC<any>"
      },
      {
        "name": "dropdownIcon",
        "value": "React.FC<any>"
      },
      {
        "name": "inputCx",
        "value": "any"
      },
      {
        "name": "renderInput",
        "value": "(props: React.DetailedHTMLProps<React.InputHTMLAttributes<HTMLInputElement>, HTMLInputElement>) => JSX.Element"
      },
      {
        "name": "onCancel",
        "value": "() => void"
      },
      {
        "name": "onAccept",
        "value": "() => void"
      },
      {
        "name": "onKeyDown",
        "value": "(e?: any) => void"
      },
      {
        "name": "autoFocus",
        "value": "boolean"
      },
      {
        "name": "type",
        "value": "string"
      },
      {
        "name": "autoComplete",
        "value": "string"
      },
      {
        "name": "name",
        "value": "string"
      },
      {
        "name": "maxLength",
        "value": "number"
      },
      {
        "name": "inputMode",
        "value": "none | text | search | tel | url | email | numeric | decimal"
      },
      {
        "name": "tabIndex",
        "value": "number"
      },
      {
        "name": "id",
        "value": "string"
      },
      {
        "name": "prefix",
        "value": "React.ReactNode"
      },
      {
        "name": "suffix",
        "value": "React.ReactNode"
      },
      {
        "name": "cx",
        "value": "any"
      },
      {
        "name": "onClick",
        "value": "(e?: any) => void"
      },
      {
        "name": "isDisabled",
        "value": "boolean"
      },
      {
        "name": "value",
        "value": "T"
      },
      {
        "name": "onValueChange",
        "value": "(newValue: T) => void"
      },
      {
        "name": "isInvalid",
        "value": "boolean"
      },
      {
        "name": "validationMessage",
        "value": "string"
      },
      {
        "name": "validationProps",
        "value": "{ [key: string]: ICanBeInvalid; }"
      },
      {
        "name": "isReadonly",
        "value": "boolean"
      },
      {
        "name": "isRequired",
        "value": "boolean"
      },
      {
        "name": "placeholder",
        "value": "any"
      },
      {
        "name": "icon",
        "value": "React.FC<any>"
      },
      {
        "name": "iconPosition",
        "value": "left | right"
      },
      {
        "name": "onIconClick",
        "value": "() => void"
      },
      {
        "name": "isOpen",
        "value": "boolean"
      },
      {
        "name": "isDropdown",
        "value": "boolean"
      },
      {
        "name": "toggleDropdownOpening",
        "value": "(value: boolean) => void"
      },
      {
        "name": "isInteractedOutside",
        "value": "(event: Event) => boolean"
      },
      {
        "name": "ref",
        "value": "React.Ref<any>"
      },
      {
        "name": "caption",
        "value": "any"
      },
      {
        "name": "getValueChangeAnalyticsEvent",
        "value": "(newValue: T, oldValue: T) => { [key: string]: any; name: string; }"
      },
      {
        "name": "rawProps",
        "value": "any"
      },
      {
        "name": "onFocus",
        "value": "(e: React.FocusEvent<T>) => void"
      },
      {
        "name": "onBlur",
        "value": "(e: React.FocusEvent<T>) => void"
      },
      {
        "name": "size",
        "value": "none | 24 | 30 | 36 | 42 | 48 | 60"
      },
      {
        "name": "mode",
        "value": "none | form | cell | inline"
      },
      {
        "name": "lineHeight",
        "value": "24 | 30 | 18 | 12"
      },
      {
        "name": "fontSize",
        "value": "18 | 12 | 10 | 14 | 16"
      }
    ],
    "/Users/ihorkorenets/Job/UUI/loveship/components/inputs/docs/timePicker.doc.ts": [
      {
        "name": "minutesStep",
        "value": "number"
      },
      {
        "name": "format",
        "value": "24 | 12"
      },
      {
        "name": "id",
        "value": "string"
      },
      {
        "name": "renderTarget",
        "value": "(props: IDropdownToggler) => React.ReactNode"
      },
      {
        "name": "value",
        "value": "T"
      },
      {
        "name": "onValueChange",
        "value": "(newValue: T) => void"
      },
      {
        "name": "isInvalid",
        "value": "boolean"
      },
      {
        "name": "validationMessage",
        "value": "string"
      },
      {
        "name": "validationProps",
        "value": "{ [key: string]: ICanBeInvalid; }"
      },
      {
        "name": "isDisabled",
        "value": "boolean"
      },
      {
        "name": "isReadonly",
        "value": "boolean"
      },
      {
        "name": "isRequired",
        "value": "boolean"
      },
      {
        "name": "placeholder",
        "value": "any"
      },
      {
        "name": "size",
        "value": "none | 24 | 30 | 36 | 42 | 48"
      },
      {
        "name": "mode",
        "value": "none | form | cell | inline"
      }
    ],
    "/Users/ihorkorenets/Job/UUI/loveship/components/layout/docs/accordion.doc.tsx": [
      {
        "name": "title",
        "value": "string"
      },
      {
        "name": "dropdownIcon",
        "value": "React.FC<any>"
      },
      {
        "name": "renderAdditionalItems",
        "value": "(isOpened: boolean) => React.ReactNode"
      },
      {
        "name": "value",
        "value": "T"
      },
      {
        "name": "onValueChange",
        "value": "(newValue: T) => void"
      },
      {
        "name": "isInvalid",
        "value": "boolean"
      },
      {
        "name": "validationMessage",
        "value": "string"
      },
      {
        "name": "validationProps",
        "value": "{ [key: string]: ICanBeInvalid; }"
      },
      {
        "name": "isDisabled",
        "value": "boolean"
      },
      {
        "name": "isReadonly",
        "value": "boolean"
      },
      {
        "name": "isRequired",
        "value": "boolean"
      },
      {
        "name": "cx",
        "value": "any"
      },
      {
        "name": "children",
        "value": "React.ReactNode"
      },
      {
        "name": "rawProps",
        "value": "any"
      },
      {
        "name": "forwardedRef",
        "value": "React.ForwardedRef<T>"
      },
      {
        "name": "mode",
        "value": "block | inline"
      },
      {
        "name": "padding",
        "value": "18 | 12 | 0 | 6"
      }
    ],
    "/Users/ihorkorenets/Job/UUI/loveship/components/layout/docs/blocker.doc.ts": [
      {
        "name": "isEnabled",
        "value": "boolean"
      },
      {
        "name": "hideSpinner",
        "value": "boolean"
      },
      {
        "name": "spacerHeight",
        "value": "number"
      },
      {
        "name": "renderSpinner",
        "value": "(props: any) => React.ReactNode"
      },
      {
        "name": "cx",
        "value": "any"
      },
      {
        "name": "rawProps",
        "value": "any"
      },
      {
        "name": "forwardedRef",
        "value": "React.ForwardedRef<T>"
      }
    ],
    "/Users/ihorkorenets/Job/UUI/loveship/components/layout/docs/checkboxGroup.doc.ts": [
      {
        "name": "CheckboxInput",
        "value": "React.ComponentType<CheckboxProps>"
      },
      {
        "name": "items",
        "value": "CheckboxGroupItem<TValue>[]"
      },
      {
        "name": "isInvalid",
        "value": "boolean"
      },
      {
        "name": "validationMessage",
        "value": "string"
      },
      {
        "name": "validationProps",
        "value": "{ [key: string]: ICanBeInvalid; }"
      },
      {
        "name": "cx",
        "value": "any"
      },
      {
        "name": "value",
        "value": "T"
      },
      {
        "name": "onValueChange",
        "value": "(newValue: T) => void"
      },
      {
        "name": "isDisabled",
        "value": "boolean"
      },
      {
        "name": "isReadonly",
        "value": "boolean"
      },
      {
        "name": "isRequired",
        "value": "boolean"
      },
      {
        "name": "direction",
        "value": "vertical | horizontal"
      },
      {
        "name": "rawProps",
        "value": "any"
      },
      {
        "name": "forwardedRef",
        "value": "React.ForwardedRef<T>"
      }
    ],
    "/Users/ihorkorenets/Job/UUI/loveship/components/layout/docs/controlGroup.doc.tsx": [
      {
        "name": "cx",
        "value": "any"
      },
      {
        "name": "children",
        "value": "React.ReactNode"
      },
      {
        "name": "rawProps",
        "value": "any"
      },
      {
        "name": "forwardedRef",
        "value": "React.ForwardedRef<T>"
      }
    ],
    "/Users/ihorkorenets/Job/UUI/loveship/components/layout/docs/iconContainer.doc.tsx": [
      {
        "name": "icon",
        "value": "React.FC<any>"
      },
      {
        "name": "flipY",
        "value": "boolean"
      },
      {
        "name": "rotate",
        "value": "0 | 90cw | 180 | 90ccw"
      },
      {
        "name": "onClick",
        "value": "(e: React.SyntheticEvent<HTMLDivElement, Event>) => void"
      },
      {
        "name": "tabIndex",
        "value": "number"
      },
      {
        "name": "style",
        "value": "React.CSSProperties"
      },
      {
        "name": "size",
        "value": "number"
      },
      {
        "name": "cx",
        "value": "any"
      },
      {
        "name": "isDisabled",
        "value": "boolean"
      },
      {
        "name": "rawProps",
        "value": "any"
      },
      {
        "name": "color",
        "value": "white | fuchsia | sky | grass | sun | fire | carbon | cobalt | lavanda | night50 | night100 | night200 | night300 | night400 | night500 | night600 | night700 | night800 | night900"
      }
    ],
    "/Users/ihorkorenets/Job/UUI/loveship/components/layout/docs/labeledInput.doc.tsx": [
      {
        "name": "Tooltip",
        "value": "React.ComponentType<TooltipProps>"
      },
      {
        "name": "infoIcon",
        "value": "React.FC<any>"
      },
      {
        "name": "labelPosition",
        "value": "left | top"
      },
      {
        "name": "info",
        "value": "string"
      },
      {
        "name": "isOptional",
        "value": "boolean"
      },
      {
        "name": "htmlFor",
        "value": "string"
      },
      {
        "name": "isInvalid",
        "value": "boolean"
      },
      {
        "name": "validationMessage",
        "value": "string"
      },
      {
        "name": "validationProps",
        "value": "{ [key: string]: ICanBeInvalid; }"
      },
      {
        "name": "cx",
        "value": "any"
      },
      {
        "name": "label",
        "value": "any"
      },
      {
        "name": "children",
        "value": "React.ReactNode"
      },
      {
        "name": "isRequired",
        "value": "boolean"
      },
      {
        "name": "rawProps",
        "value": "any"
      },
      {
        "name": "forwardedRef",
        "value": "React.ForwardedRef<T>"
      },
      {
        "name": "color",
        "value": "white | fuchsia | sky | grass | sun | fire | carbon | cobalt | lavanda | night50 | night100 | night200 | night300 | night400 | night500 | night600 | night700 | night800 | night900"
      },
      {
        "name": "size",
        "value": "none | 24 | 30 | 36 | 42 | 48"
      }
    ],
    "/Users/ihorkorenets/Job/UUI/loveship/components/layout/docs/radioGroup.doc.ts": [
      {
        "name": "RadioInput",
        "value": "React.ComponentType<RadioInputProps>"
      },
      {
        "name": "items",
        "value": "RadioGroupItem<TValue>[]"
      },
      {
        "name": "radioInputProps",
        "value": "RadioInputProps & { key: React.ReactText; }"
      },
      {
        "name": "cx",
        "value": "any"
      },
      {
        "name": "value",
        "value": "T"
      },
      {
        "name": "onValueChange",
        "value": "(newValue: T) => void"
      },
      {
        "name": "isInvalid",
        "value": "boolean"
      },
      {
        "name": "validationMessage",
        "value": "string"
      },
      {
        "name": "validationProps",
        "value": "{ [key: string]: ICanBeInvalid; }"
      },
      {
        "name": "isDisabled",
        "value": "boolean"
      },
      {
        "name": "isReadonly",
        "value": "boolean"
      },
      {
        "name": "isRequired",
        "value": "boolean"
      },
      {
        "name": "direction",
        "value": "vertical | horizontal"
      },
      {
        "name": "rawProps",
        "value": "any"
      },
      {
        "name": "forwardedRef",
        "value": "React.ForwardedRef<T>"
      }
    ],
    "/Users/ihorkorenets/Job/UUI/loveship/components/navigation/docs/mainMenu.doc.tsx": [
      {
        "name": "children",
        "value": "any"
      },
      {
        "name": "externalGap",
        "value": "number"
      },
      {
        "name": "appLogoUrl",
        "value": "string"
      },
      {
        "name": "appLogoBgColor",
        "value": "string"
      },
      {
        "name": "customerLogoUrl",
        "value": "string"
      },
      {
        "name": "customerLogoBgColor",
        "value": "string"
      },
      {
        "name": "customerLogoWidth",
        "value": "number"
      },
      {
        "name": "isTransparent",
        "value": "boolean"
      },
      {
        "name": "renderBurger",
        "value": "(props: { onClose: () => void; }) => React.ReactNode"
      },
      {
        "name": "alwaysShowBurger",
        "value": "boolean"
      },
      {
        "name": "serverBadge",
        "value": "string"
      },
      {
        "name": "tooltipTechInfo",
        "value": "React.ReactNode"
      },
      {
        "name": "logoLink",
        "value": "Link"
      },
      {
        "name": "logoHref",
        "value": "string"
      },
      {
        "name": "logoWidth",
        "value": "number"
      },
      {
        "name": "onLogoClick",
        "value": "(e: React.MouseEvent<Element, MouseEvent>) => any"
      },
      {
        "name": "customerLogoLink",
        "value": "Link"
      },
      {
        "name": "customerLogoHref",
        "value": "string"
      },
      {
        "name": "MainMenuDropdown",
        "value": "React.ComponentType<MainMenuDropdownProps>"
      },
      {
        "name": "Burger",
        "value": "React.ComponentType<BurgerProps>"
      },
      {
        "name": "cx",
        "value": "any"
      },
      {
        "name": "rawProps",
        "value": "any"
      },
      {
        "name": "forwardedRef",
        "value": "React.ForwardedRef<T>"
      }
    ],
    "/Users/ihorkorenets/Job/UUI/loveship/components/overlays/docs/alert.doc.tsx": [
      {
        "name": "actions",
        "value": "notificationAction[]"
      },
      {
        "name": "color",
        "value": "sky | grass | sun | fire"
      },
      {
        "name": "onClose",
        "value": "() => void"
      },
      {
        "name": "icon",
        "value": "React.FC<any>"
      },
      {
        "name": "children",
        "value": "React.ReactNode"
      },
      {
        "name": "cx",
        "value": "any"
      },
      {
        "name": "rawProps",
        "value": "any"
      }
    ],
    "/Users/ihorkorenets/Job/UUI/loveship/components/overlays/docs/dropdown.doc.tsx": [
      {
        "name": "renderTarget",
        "value": "(props: IDropdownToggler) => React.ReactNode"
      },
      {
        "name": "renderBody",
        "value": "(props: DropdownBodyProps) => React.ReactNode"
      },
      {
        "name": "onClose",
        "value": "() => void"
      },
      {
        "name": "isNotUnfoldable",
        "value": "boolean"
      },
      {
        "name": "zIndex",
        "value": "number"
      },
      {
        "name": "placement",
        "value": "left | right | auto | auto-start | auto-end | top | bottom | top-start | top-end | bottom-start | bottom-end | right-start | right-end | left-start | left-end"
      },
      {
        "name": "modifiers",
        "value": "(Partial<Modifier<any, object>>)[]"
      },
      {
        "name": "openOnClick",
        "value": "boolean"
      },
      {
        "name": "openOnHover",
        "value": "boolean"
      },
      {
        "name": "closeOnTargetClick",
        "value": "boolean"
      },
      {
        "name": "closeOnClickOutside",
        "value": "boolean"
      },
      {
        "name": "closeOnMouseLeave",
        "value": "toggler | boundary"
      },
      {
        "name": "portalTarget",
        "value": "HTMLElement"
      },
      {
        "name": "boundaryElement",
        "value": "clippingParents"
      },
      {
        "name": "closeBodyOnTogglerHidden",
        "value": "boolean"
      },
      {
        "name": "value",
        "value": "T"
      },
      {
        "name": "onValueChange",
        "value": "(newValue: T) => void"
      },
      {
        "name": "isInvalid",
        "value": "boolean"
      },
      {
        "name": "validationMessage",
        "value": "string"
      },
      {
        "name": "validationProps",
        "value": "{ [key: string]: ICanBeInvalid; }"
      },
      {
        "name": "isDisabled",
        "value": "boolean"
      },
      {
        "name": "isReadonly",
        "value": "boolean"
      },
      {
        "name": "isRequired",
        "value": "boolean"
      },
      {
        "name": "color",
        "value": "white | night"
      },
      {
        "name": "noIcon",
        "value": "boolean"
      },
      {
        "name": "inMainMenu",
        "value": "boolean"
      },
      {
        "name": "icon",
        "value": "React.FC<any>"
      },
      {
        "name": "iconPosition",
        "value": "left | right"
      },
      {
        "name": "onIconClick",
        "value": "() => void"
      },
      {
        "name": "isOpen",
        "value": "boolean"
      },
      {
        "name": "isDropdown",
        "value": "boolean"
      },
      {
        "name": "toggleDropdownOpening",
        "value": "(value: boolean) => void"
      },
      {
        "name": "isInteractedOutside",
        "value": "(event: Event) => boolean"
      },
      {
        "name": "ref",
        "value": "React.Ref<any>"
      },
      {
        "name": "caption",
        "value": "any"
      },
      {
        "name": "onClick",
        "value": "(e?: any) => void"
      }
    ],
    "/Users/ihorkorenets/Job/UUI/loveship/components/overlays/docs/dropdownMenu.doc.tsx": [
      {
        "name": "renderTarget",
        "value": "(props: IDropdownToggler) => React.ReactNode"
      },
      {
        "name": "renderBody",
        "value": "(props: DropdownBodyProps) => React.ReactNode"
      },
      {
        "name": "onClose",
        "value": "() => void"
      },
      {
        "name": "isNotUnfoldable",
        "value": "boolean"
      },
      {
        "name": "zIndex",
        "value": "number"
      },
      {
        "name": "placement",
        "value": "left | right | auto | auto-start | auto-end | top | bottom | top-start | top-end | bottom-start | bottom-end | right-start | right-end | left-start | left-end"
      },
      {
        "name": "modifiers",
        "value": "(Partial<Modifier<any, object>>)[]"
      },
      {
        "name": "openOnClick",
        "value": "boolean"
      },
      {
        "name": "openOnHover",
        "value": "boolean"
      },
      {
        "name": "closeOnTargetClick",
        "value": "boolean"
      },
      {
        "name": "closeOnClickOutside",
        "value": "boolean"
      },
      {
        "name": "closeOnMouseLeave",
        "value": "toggler | boundary"
      },
      {
        "name": "portalTarget",
        "value": "HTMLElement"
      },
      {
        "name": "boundaryElement",
        "value": "clippingParents"
      },
      {
        "name": "closeBodyOnTogglerHidden",
        "value": "boolean"
      },
      {
        "name": "value",
        "value": "T"
      },
      {
        "name": "onValueChange",
        "value": "(newValue: T) => void"
      },
      {
        "name": "isInvalid",
        "value": "boolean"
      },
      {
        "name": "validationMessage",
        "value": "string"
      },
      {
        "name": "validationProps",
        "value": "{ [key: string]: ICanBeInvalid; }"
      },
      {
        "name": "isDisabled",
        "value": "boolean"
      },
      {
        "name": "isReadonly",
        "value": "boolean"
      },
      {
        "name": "isRequired",
        "value": "boolean"
      },
      {
        "name": "color",
        "value": "white | night"
      },
      {
        "name": "noIcon",
        "value": "boolean"
      },
      {
        "name": "inMainMenu",
        "value": "boolean"
      },
      {
        "name": "icon",
        "value": "React.FC<any>"
      },
      {
        "name": "iconPosition",
        "value": "left | right"
      },
      {
        "name": "onIconClick",
        "value": "() => void"
      },
      {
        "name": "isOpen",
        "value": "boolean"
      },
      {
        "name": "isDropdown",
        "value": "boolean"
      },
      {
        "name": "toggleDropdownOpening",
        "value": "(value: boolean) => void"
      },
      {
        "name": "isInteractedOutside",
        "value": "(event: Event) => boolean"
      },
      {
        "name": "ref",
        "value": "React.Ref<any>"
      },
      {
        "name": "caption",
        "value": "any"
      },
      {
        "name": "onClick",
        "value": "(e?: any) => void"
      }
    ],
    "/Users/ihorkorenets/Job/UUI/loveship/components/overlays/docs/dropdownMenuButton.doc.tsx": [
      {
        "name": "clearIcon",
        "value": "React.FC<any>"
      },
      {
        "name": "captionCX",
        "value": "any"
      },
      {
        "name": "dropdownIcon",
        "value": "React.FC<any>"
      },
      {
        "name": "dropdownIconPosition",
        "value": "left | right"
      },
      {
        "name": "countPosition",
        "value": "left | right"
      },
      {
        "name": "count",
        "value": "number"
      },
      {
        "name": "isLinkActive",
        "value": "boolean"
      },
      {
        "name": "tabIndex",
        "value": "number"
      },
      {
        "name": "cx",
        "value": "any"
      },
      {
        "name": "onClick",
        "value": "(e?: any) => void"
      },
      {
        "name": "link",
        "value": "Link"
      },
      {
        "name": "href",
        "value": "string"
      },
      {
        "name": "target",
        "value": "\"_blank\""
      },
      {
        "name": "isDisabled",
        "value": "boolean"
      },
      {
        "name": "icon",
        "value": "React.FC<any>"
      },
      {
        "name": "iconPosition",
        "value": "left | right"
      },
      {
        "name": "onIconClick",
        "value": "() => void"
      },
      {
        "name": "clickAnalyticsEvent",
        "value": "{ [key: string]: any; name: string; }"
      },
      {
        "name": "caption",
        "value": "any"
      },
      {
        "name": "onClear",
        "value": "(e?: any) => void"
      },
      {
        "name": "isOpen",
        "value": "boolean"
      },
      {
        "name": "isDropdown",
        "value": "boolean"
      },
      {
        "name": "toggleDropdownOpening",
        "value": "(value: boolean) => void"
      },
      {
        "name": "isInteractedOutside",
        "value": "(event: Event) => boolean"
      },
      {
        "name": "ref",
        "value": "React.Ref<any>"
      },
      {
        "name": "placeholder",
        "value": "any"
      },
      {
        "name": "rawProps",
        "value": "any"
      },
      {
        "name": "forwardedRef",
        "value": "React.ForwardedRef<T>"
      },
      {
        "name": "color",
        "value": "white | night"
      },
      {
        "name": "noIcon",
        "value": "boolean"
      },
      {
        "name": "inMainMenu",
        "value": "boolean"
      }
    ],
    "/Users/ihorkorenets/Job/UUI/loveship/components/overlays/docs/modalFooter.doc.tsx": [
      {
        "name": "background",
        "value": "none | white | night50 | night100"
      },
      {
        "name": "topShadow",
        "value": "boolean"
      },
      {
        "name": "borderBottom",
        "value": "night50 | night300 | night400 | night700"
      },
      {
        "name": "padding",
        "value": "24 | 18 | 12 | 6"
      },
      {
        "name": "vPadding",
        "value": "24 | 36 | 48 | 18 | 12"
      },
      {
        "name": "spacing",
        "value": "18 | 12 | 6"
      },
      {
        "name": "type",
        "value": "form | panel"
      },
      {
        "name": "margin",
        "value": "24 | 12"
      },
      {
        "name": "size",
        "value": "24 | 30 | 36 | 42 | 48"
      },
      {
        "name": "borderTop",
        "value": "boolean"
      },
      {
        "name": "children",
        "value": "React.ReactNode"
      },
      {
        "name": "cx",
        "value": "any"
      },
      {
        "name": "rawProps",
        "value": "any"
      }
    ],
    "/Users/ihorkorenets/Job/UUI/loveship/components/overlays/docs/modalHeader.doc.tsx": [
      {
        "name": "background",
        "value": "none | white | night50 | night100"
      },
      {
        "name": "topShadow",
        "value": "boolean"
      },
      {
        "name": "borderBottom",
        "value": "night50 | night300 | night400 | night700"
      },
      {
        "name": "padding",
        "value": "24 | 18 | 12 | 6"
      },
      {
        "name": "vPadding",
        "value": "24 | 36 | 48 | 18 | 12"
      },
      {
        "name": "spacing",
        "value": "18 | 12 | 6"
      },
      {
        "name": "type",
        "value": "form | panel"
      },
      {
        "name": "margin",
        "value": "24 | 12"
      },
      {
        "name": "size",
        "value": "24 | 30 | 36 | 42 | 48"
      },
      {
        "name": "onClose",
        "value": "() => any"
      },
      {
        "name": "title",
        "value": "React.ReactNode"
      },
      {
        "name": "children",
        "value": "React.ReactNode"
      },
      {
        "name": "cx",
        "value": "any"
      },
      {
        "name": "rawProps",
        "value": "any"
      }
    ],
    "/Users/ihorkorenets/Job/UUI/loveship/components/overlays/docs/notificationCard.doc.tsx": [
      {
        "name": "icon",
        "value": "React.FC<any>"
      },
      {
        "name": "color",
        "value": "white | fuchsia | sky | grass | sun | fire | carbon | cobalt | lavanda | night50 | night100 | night200 | night300 | night400 | night500 | night600 | night700 | night800 | night900"
      },
      {
        "name": "actions",
        "value": "NotificationAction[]"
      },
      {
        "name": "onClose",
        "value": "() => void"
      },
      {
        "name": "onSuccess",
        "value": "() => void"
      },
      {
        "name": "clearTimer",
        "value": "() => void"
      },
      {
        "name": "refreshTimer",
        "value": "() => void"
      },
      {
        "name": "id",
        "value": "number"
      },
      {
        "name": "key",
        "value": "string"
      },
      {
        "name": "children",
        "value": "React.ReactNode"
      },
      {
        "name": "cx",
        "value": "any"
      },
      {
        "name": "rawProps",
        "value": "any"
      }
    ],
    "/Users/ihorkorenets/Job/UUI/loveship/components/overlays/docs/snackbarCard.doc.tsx": [
      {
        "name": "snackType",
        "value": "info | success | warning | danger"
      },
      {
        "name": "onClose",
        "value": "() => void"
      },
      {
        "name": "onSuccess",
        "value": "() => void"
      },
      {
        "name": "clearTimer",
        "value": "() => void"
      },
      {
        "name": "refreshTimer",
        "value": "() => void"
      },
      {
        "name": "id",
        "value": "number"
      },
      {
        "name": "key",
        "value": "string"
      },
      {
        "name": "children",
        "value": "React.ReactNode"
      },
      {
        "name": "rawProps",
        "value": "any"
      }
    ],
    "/Users/ihorkorenets/Job/UUI/loveship/components/overlays/docs/tooltip.doc.tsx": [
      {
        "name": "content",
        "value": "any"
      },
      {
        "name": "renderContent",
        "value": "() => any"
      },
      {
        "name": "placement",
        "value": "left | right | auto | auto-start | auto-end | top | bottom | top-start | top-end | bottom-start | bottom-end | right-start | right-end | left-start | left-end"
      },
      {
        "name": "trigger",
        "value": "click | press | hover"
      },
      {
        "name": "portalTarget",
        "value": "HTMLElement"
      },
      {
        "name": "offset",
        "value": "Offset"
      },
      {
        "name": "children",
        "value": "React.ReactNode"
      },
      {
        "name": "boundaryElement",
        "value": "clippingParents"
      },
      {
        "name": "cx",
        "value": "any"
      },
      {
        "name": "color",
        "value": "white | fuchsia | sky | grass | sun | fire | carbon | cobalt | lavanda | night50 | night100 | night200 | night300 | night400 | night500 | night600 | night700 | night800 | night900"
      }
    ],
    "/Users/ihorkorenets/Job/UUI/loveship/components/pickers/docs/pickerInput.doc.tsx": [
      {
        "name": "entityName",
        "value": "string"
      },
      {
        "name": "entityPluralName",
        "value": "string"
      },
      {
        "name": "dataSource",
        "value": "IDataSource<TItem, TId, any>"
      },
      {
        "name": "getName",
        "value": "(item: TItem) => string"
      },
      {
        "name": "renderRow",
        "value": "(props: DataRowProps<TItem, TId>) => React.ReactNode"
      },
      {
        "name": "getRowOptions",
        "value": "(item: TItem, index: number) => DataRowOptions<TItem, TId>"
      },
      {
        "name": "renderNotFound",
        "value": "(props: { search: string; onClose: () => void; }) => React.ReactNode"
      },
      {
        "name": "emptyValue",
        "value": "[]"
      },
      {
        "name": "sortBy",
        "value": "(item: TItem, sorting: SortingOption<any>) => any"
      },
      {
        "name": "filter",
        "value": "any"
      },
      {
        "name": "sorting",
        "value": "SortingOption<any>"
      },
      {
        "name": "cascadeSelection",
        "value": "boolean"
      },
      {
        "name": "isFoldedByDefault",
        "value": "(item: TItem) => boolean"
      },
      {
        "name": "getSearchFields",
        "value": "(item: TItem) => string[]"
      },
      {
        "name": "selectionMode",
        "value": "\"single\""
      },
      {
        "name": "valueType",
        "value": "\"id\""
      },
      {
        "name": "value",
        "value": "T"
      },
      {
        "name": "onValueChange",
        "value": "(newValue: T) => void"
      },
      {
        "name": "isInvalid",
        "value": "boolean"
      },
      {
        "name": "validationMessage",
        "value": "string"
      },
      {
        "name": "validationProps",
        "value": "{ [key: string]: ICanBeInvalid; }"
      },
      {
        "name": "isDisabled",
        "value": "boolean"
      },
      {
        "name": "isReadonly",
        "value": "boolean"
      },
      {
        "name": "isRequired",
        "value": "boolean"
      },
      {
        "name": "getValueChangeAnalyticsEvent",
        "value": "(newValue: T, oldValue: T) => { [key: string]: any; name: string; }"
      },
      {
        "name": "onFocus",
        "value": "(e: React.FocusEvent<T>) => void"
      },
      {
        "name": "onBlur",
        "value": "(e: React.FocusEvent<T>) => void"
      },
      {
        "name": "placeholder",
        "value": "any"
      },
      {
        "name": "icon",
        "value": "React.FC<any>"
      },
      {
        "name": "iconPosition",
        "value": "left | right"
      },
      {
        "name": "onIconClick",
        "value": "() => void"
      },
      {
        "name": "editMode",
        "value": "dropdown | modal"
      },
      {
        "name": "maxItems",
        "value": "number"
      },
      {
        "name": "minBodyWidth",
        "value": "number"
      },
      {
        "name": "isSingleLine",
        "value": "boolean"
      },
      {
        "name": "dropdownPlacement",
        "value": "left | right | auto | auto-start | auto-end | top | bottom | top-start | top-end | bottom-start | bottom-end | right-start | right-end | left-start | left-end"
      },
      {
        "name": "renderToggler",
        "value": "(props: PickerTogglerProps<TItem, TId>) => React.ReactNode"
      },
      {
        "name": "searchPosition",
        "value": "none | input | body"
      },
      {
        "name": "disableClear",
        "value": "boolean"
      },
      {
        "name": "minCharsToSearch",
        "value": "number"
      },
      {
        "name": "dropdownHeight",
        "value": "number"
      },
      {
        "name": "autoFocus",
        "value": "boolean"
      },
      {
        "name": "prefix",
        "value": "React.ReactNode"
      },
      {
        "name": "suffix",
        "value": "React.ReactNode"
      },
      {
        "name": "rawProps",
        "value": "{ input?: any; body?: any; }"
      },
      {
        "name": "renderFooter",
        "value": "(props: PickerInputFooterProps<TItem, TId>) => React.ReactNode"
      },
      {
        "name": "size",
        "value": "none | 24 | 30 | 36 | 42 | 48"
      },
      {
        "name": "mode",
        "value": "none | form | cell | inline"
      }
    ],
    "/Users/ihorkorenets/Job/UUI/loveship/components/pickers/docs/pickerList.doc.tsx": [
      {
        "name": "size",
        "value": "none | 24 | 30 | 36 | 42 | 48"
      },
      {
        "name": "placeholder",
        "value": "any"
      },
      {
        "name": "renderFilter",
        "value": "(editableFilter: IEditable<any>) => React.ReactNode"
      },
      {
        "name": "renderFooter",
        "value": "(props: IModal<any>>) => React.ReactNode"
      },
      {
        "name": "disallowClickOutside",
        "value": "boolean"
      },
      {
        "name": "theme",
        "value": "light | dark"
      },
      {
        "name": "renderModalToggler",
        "value": "(props: DataRowProps<TItem, TId>[]) => React.ReactNode"
      },
      {
        "name": "noOptionsMessage",
        "value": "React.ReactNode"
      },
      {
        "name": "entityName",
        "value": "string"
      },
      {
        "name": "entityPluralName",
        "value": "string"
      },
      {
        "name": "dataSource",
        "value": "IDataSource<TItem, TId, any>"
      },
      {
        "name": "getName",
        "value": "(item: TItem) => string"
      },
      {
        "name": "renderRow",
        "value": "(props: DataRowProps<TItem, TId>) => React.ReactNode"
      },
      {
        "name": "getRowOptions",
        "value": "(item: TItem, index: number) => DataRowOptions<TItem, TId>"
      },
      {
        "name": "renderNotFound",
        "value": "(props: { search: string; onClose: () => void; }) => React.ReactNode"
      },
      {
        "name": "emptyValue",
        "value": "[]"
      },
      {
        "name": "sortBy",
        "value": "(item: TItem, sorting: SortingOption<any>) => any"
      },
      {
        "name": "filter",
        "value": "any"
      },
      {
        "name": "sorting",
        "value": "SortingOption<any>"
      },
      {
        "name": "cascadeSelection",
        "value": "boolean"
      },
      {
        "name": "isFoldedByDefault",
        "value": "(item: TItem) => boolean"
      },
      {
        "name": "getSearchFields",
        "value": "(item: TItem) => string[]"
      },
      {
        "name": "selectionMode",
        "value": "\"single\""
      },
      {
        "name": "valueType",
        "value": "\"id\""
      },
      {
        "name": "value",
        "value": "T"
      },
      {
        "name": "onValueChange",
        "value": "(newValue: T) => void"
      },
      {
        "name": "isInvalid",
        "value": "boolean"
      },
      {
        "name": "validationMessage",
        "value": "string"
      },
      {
        "name": "validationProps",
        "value": "{ [key: string]: ICanBeInvalid; }"
      },
      {
        "name": "isDisabled",
        "value": "boolean"
      },
      {
        "name": "isReadonly",
        "value": "boolean"
      },
      {
        "name": "isRequired",
        "value": "boolean"
      },
      {
        "name": "getValueChangeAnalyticsEvent",
        "value": "(newValue: T, oldValue: T) => { [key: string]: any; name: string; }"
      },
      {
        "name": "maxDefaultItems",
        "value": "number"
      },
      {
        "name": "maxTotalItems",
        "value": "number"
      },
      {
        "name": "defaultIds",
        "value": "TId[]"
      },
      {
        "name": "settingsKey",
        "value": "string"
      }
    ],
    "/Users/ihorkorenets/Job/UUI/loveship/components/pickers/docs/pickerModal.doc.tsx": [
      {
        "name": "entityName",
        "value": "string"
      },
      {
        "name": "entityPluralName",
        "value": "string"
      },
      {
        "name": "dataSource",
        "value": "IDataSource<TItem, TId, any>"
      },
      {
        "name": "getName",
        "value": "(item: TItem) => string"
      },
      {
        "name": "renderRow",
        "value": "(props: DataRowProps<TItem, TId>) => React.ReactNode"
      },
      {
        "name": "getRowOptions",
        "value": "(item: TItem, index: number) => DataRowOptions<TItem, TId>"
      },
      {
        "name": "renderNotFound",
        "value": "(props: { search: string; onClose: () => void; }) => React.ReactNode"
      },
      {
        "name": "emptyValue",
        "value": "[]"
      },
      {
        "name": "sortBy",
        "value": "(item: TItem, sorting: SortingOption<any>) => any"
      },
      {
        "name": "filter",
        "value": "any"
      },
      {
        "name": "sorting",
        "value": "SortingOption<any>"
      },
      {
        "name": "cascadeSelection",
        "value": "boolean"
      },
      {
        "name": "isFoldedByDefault",
        "value": "(item: TItem) => boolean"
      },
      {
        "name": "getSearchFields",
        "value": "(item: TItem) => string[]"
      },
      {
        "name": "caption",
        "value": "any"
      },
      {
        "name": "selectionMode",
        "value": "\"single\""
      },
      {
        "name": "valueType",
        "value": "\"id\""
      },
      {
        "name": "initialValue",
        "value": "TId"
      },
      {
        "name": "isActive",
        "value": "boolean"
      },
      {
        "name": "key",
        "value": "string"
      },
      {
        "name": "zIndex",
        "value": "number"
      },
      {
        "name": "success",
        "value": "(result: TResult) => void"
      },
      {
        "name": "abort",
        "value": "() => void"
      },
      {
        "name": "disallowClickOutside",
        "value": "boolean"
      },
      {
        "name": "renderFilter",
        "value": "(editableFilter: IEditable<any>) => React.ReactNode"
      },
      {
        "name": "renderFooter",
        "value": "(props: IModal<any>>) => React.ReactNode"
      }
    ],
    "/Users/ihorkorenets/Job/UUI/loveship/components/pickers/docs/pickerToggler.doc.tsx": [
      {
        "name": "cancelIcon",
        "value": "React.FC<any>"
      },
      {
        "name": "dropdownIcon",
        "value": "React.FC<any>"
      },
      {
        "name": "autoFocus",
        "value": "boolean"
      },
      {
        "name": "renderItem",
        "value": "(props: DataRowProps<TItem, TId>) => React.ReactNode"
      },
      {
        "name": "getName",
        "value": "(item: DataRowProps<TItem, TId>) => string"
      },
      {
        "name": "entityName",
        "value": "string"
      },
      {
        "name": "maxItems",
        "value": "number"
      },
      {
        "name": "isSingleLine",
        "value": "boolean"
      },
      {
        "name": "pickerMode",
        "value": "single | multi"
      },
      {
        "name": "searchPosition",
        "value": "none | input | body"
      },
      {
        "name": "onKeyDown",
        "value": "(e: React.KeyboardEvent<HTMLElement>) => void"
      },
      {
        "name": "disableSearch",
        "value": "boolean"
      },
      {
        "name": "disableClear",
        "value": "boolean"
      },
      {
        "name": "minCharsToSearch",
        "value": "number"
      },
      {
        "name": "prefix",
        "value": "React.ReactNode"
      },
      {
        "name": "suffix",
        "value": "React.ReactNode"
      },
      {
        "name": "selection",
        "value": "DataRowProps<TItem, TId>[]"
      },
      {
        "name": "onClear",
        "value": "(e?: any) => void"
      },
      {
        "name": "isOpen",
        "value": "boolean"
      },
      {
        "name": "isDropdown",
        "value": "boolean"
      },
      {
        "name": "toggleDropdownOpening",
        "value": "(value: boolean) => void"
      },
      {
        "name": "isInteractedOutside",
        "value": "(event: Event) => boolean"
      },
      {
        "name": "ref",
        "value": "React.Ref<any>"
      },
      {
        "name": "caption",
        "value": "any"
      },
      {
        "name": "onClick",
        "value": "(e?: any) => void"
      },
      {
        "name": "value",
        "value": "T"
      },
      {
        "name": "onValueChange",
        "value": "(newValue: T) => void"
      },
      {
        "name": "isInvalid",
        "value": "boolean"
      },
      {
        "name": "validationMessage",
        "value": "string"
      },
      {
        "name": "validationProps",
        "value": "{ [key: string]: ICanBeInvalid; }"
      },
      {
        "name": "isDisabled",
        "value": "boolean"
      },
      {
        "name": "isReadonly",
        "value": "boolean"
      },
      {
        "name": "isRequired",
        "value": "boolean"
      },
      {
        "name": "placeholder",
        "value": "any"
      },
      {
        "name": "onFocus",
        "value": "(e: React.FocusEvent<T>) => void"
      },
      {
        "name": "onBlur",
        "value": "(e: React.FocusEvent<T>) => void"
      },
      {
        "name": "icon",
        "value": "React.FC<any>"
      },
      {
        "name": "iconPosition",
        "value": "left | right"
      },
      {
        "name": "onIconClick",
        "value": "() => void"
      },
      {
        "name": "cx",
        "value": "any"
      },
      {
        "name": "rawProps",
        "value": "any"
      }
    ],
    "/Users/ihorkorenets/Job/UUI/loveship/components/tables/docs/dataTableCell.doc.tsx": [
      {
        "name": "rowProps",
        "value": "DataRowProps<TItem, TId>"
      },
      {
        "name": "column",
        "value": "DataColumnProps<TItem, TId, any>"
      },
      {
        "name": "index",
        "value": "number"
      },
      {
        "name": "role",
        "value": "string"
      },
      {
        "name": "tabIndex",
        "value": "number"
      },
      {
        "name": "cx",
        "value": "any"
      },
      {
        "name": "size",
        "value": "none | 24 | 30 | 36 | 42 | 48 | 60"
      },
      {
        "name": "padding",
        "value": "24 | 12 | 0"
      },
      {
        "name": "isFirstColumn",
        "value": "boolean"
      },
      {
        "name": "isLastColumn",
        "value": "boolean"
      },
      {
        "name": "alignActions",
        "value": "top | center"
      }
    ],
    "/Users/ihorkorenets/Job/UUI/loveship/components/tables/docs/dataTableHeaderCell.doc.tsx": [
      {
        "name": "column",
        "value": "DataColumnProps<TItem, TId, any>"
      },
      {
        "name": "isFirstColumn",
        "value": "boolean"
      },
      {
        "name": "isLastColumn",
        "value": "boolean"
      },
      {
        "name": "selectAll",
        "value": "ICheckable"
      },
      {
        "name": "isFilterActive",
        "value": "boolean"
      },
      {
        "name": "sortDirection",
        "value": "desc | asc"
      },
      {
        "name": "onSort",
        "value": "(dir: SortDirection) => void"
      },
      {
        "name": "onDrop",
        "value": "(params: DataColumnProps<TItem, TId, any>>) => void"
      },
      {
        "name": "renderFilter",
        "value": "() => React.ReactNode"
      },
      {
        "name": "value",
        "value": "T"
      },
      {
        "name": "onValueChange",
        "value": "(newValue: T) => void"
      },
      {
        "name": "isInvalid",
        "value": "boolean"
      },
      {
        "name": "validationMessage",
        "value": "string"
      },
      {
        "name": "validationProps",
        "value": "{ [key: string]: ICanBeInvalid; }"
      },
      {
        "name": "isDisabled",
        "value": "boolean"
      },
      {
        "name": "isReadonly",
        "value": "boolean"
      },
      {
        "name": "isRequired",
        "value": "boolean"
      },
      {
        "name": "isOpen",
        "value": "boolean"
      },
      {
        "name": "isDropdown",
        "value": "boolean"
      },
      {
        "name": "toggleDropdownOpening",
        "value": "(value: boolean) => void"
      },
      {
        "name": "isInteractedOutside",
        "value": "(event: Event) => boolean"
      },
      {
        "name": "ref",
        "value": "React.Ref<any>"
      },
      {
        "name": "caption",
        "value": "any"
      },
      {
        "name": "onClick",
        "value": "(e?: any) => void"
      },
      {
        "name": "cx",
        "value": "any"
      },
      {
        "name": "allowColumnsReordering",
        "value": "boolean"
      },
      {
        "name": "allowColumnsResizing",
        "value": "boolean"
      },
      {
        "name": "textCase",
        "value": "upper | normal"
      },
      {
        "name": "size",
        "value": "none | 24 | 30 | 36 | 42 | 48 | 60"
      }
    ],
    "/Users/ihorkorenets/Job/UUI/loveship/components/tables/docs/dataTableHeaderRow.doc.tsx": [
      {
        "name": "columns",
        "value": "DataColumnProps<TItem, TId, any>[]"
      },
      {
        "name": "selectAll",
        "value": "ICheckable"
      },
      {
        "name": "onConfigButtonClick",
        "value": "(params: DataTableConfigModalParams) => any"
      },
      {
        "name": "renderCell",
        "value": "(props: DataTableHeaderCellProps<TItem, TId>) => React.ReactNode"
      },
      {
        "name": "renderConfigButton",
        "value": "() => React.ReactNode"
      },
      {
        "name": "value",
        "value": "T"
      },
      {
        "name": "onValueChange",
        "value": "(newValue: T) => void"
      },
      {
        "name": "isInvalid",
        "value": "boolean"
      },
      {
        "name": "validationMessage",
        "value": "string"
      },
      {
        "name": "validationProps",
        "value": "{ [key: string]: ICanBeInvalid; }"
      },
      {
        "name": "isDisabled",
        "value": "boolean"
      },
      {
        "name": "isReadonly",
        "value": "boolean"
      },
      {
        "name": "isRequired",
        "value": "boolean"
      },
      {
        "name": "cx",
        "value": "any"
      },
      {
        "name": "allowColumnsReordering",
        "value": "boolean"
      },
      {
        "name": "allowColumnsResizing",
        "value": "boolean"
      },
      {
        "name": "textCase",
        "value": "upper | normal"
      },
      {
        "name": "size",
        "value": "none | 24 | 30 | 36 | 42 | 48 | 60"
      }
    ],
    "/Users/ihorkorenets/Job/UUI/loveship/components/tables/docs/dataTableRow.doc.tsx": [
      {
        "name": "renderCell",
        "value": "(props: DataTableCellProps<TItem, TId>) => React.ReactNode"
      },
      {
        "name": "renderDropMarkers",
        "value": "(props: DndActorRenderParams) => React.ReactNode"
      },
      {
        "name": "cx",
        "value": "any"
      },
      {
        "name": "onClick",
        "value": "(e?: any) => void"
      },
      {
        "name": "key",
        "value": "React.ReactText"
      },
      {
        "name": "rawProps",
        "value": "any"
      },
      {
        "name": "alignItems",
        "value": "top | bottom | center | stretch"
      },
      {
        "name": "children",
        "value": "any"
      },
      {
        "name": "checkbox",
        "value": "{ isVisible: boolean; } & ICanBeInvalid"
      },
      {
        "name": "isSelectable",
        "value": "boolean"
      },
      {
        "name": "dnd",
        "value": "IDndActor<any, any>"
      },
      {
        "name": "link",
        "value": "Link"
      },
      {
        "name": "columns",
        "value": "DataColumnProps<TItem, TId, any>[]"
      },
      {
        "name": "isDisabled",
        "value": "boolean"
      },
      {
        "name": "id",
        "value": "TId"
      },
      {
        "name": "rowKey",
        "value": "string"
      },
      {
        "name": "index",
        "value": "number"
      },
      {
        "name": "value",
        "value": "TItem"
      },
      {
        "name": "path",
        "value": "DataRowPathItem<TId, TItem>[]"
      },
      {
        "name": "depth",
        "value": "number"
      },
      {
        "name": "indent",
        "value": "number"
      },
      {
        "name": "isLoading",
        "value": "boolean"
      },
      {
        "name": "isFoldable",
        "value": "boolean"
      },
      {
        "name": "isFolded",
        "value": "boolean"
      },
      {
        "name": "isChecked",
        "value": "boolean"
      },
      {
        "name": "isCheckable",
        "value": "boolean"
      },
      {
        "name": "isChildrenChecked",
        "value": "boolean"
      },
      {
        "name": "isSelected",
        "value": "boolean"
      },
      {
        "name": "isChildrenSelected",
        "value": "boolean"
      },
      {
        "name": "isFocused",
        "value": "boolean"
      },
      {
        "name": "isLastChild",
        "value": "boolean"
      },
      {
        "name": "onFold",
        "value": "(rowProps: DataRowProps<TItem, TId>) => void"
      },
      {
        "name": "onCheck",
        "value": "(rowProps: DataRowProps<TItem, TId>) => void"
      },
      {
        "name": "onSelect",
        "value": "(rowProps: DataRowProps<TItem, TId>) => void"
      },
      {
        "name": "onFocus",
        "value": "(focusedIndex: number) => void"
      },
      {
        "name": "borderBottom",
        "value": "none | night300"
      },
      {
        "name": "background",
        "value": "none | white | night50"
      },
      {
        "name": "size",
        "value": "none | 24 | 30 | 36 | 42 | 48 | 60"
      },
      {
        "name": "padding",
        "value": "24 | 12 | 0"
      },
      {
        "name": "isFirstColumn",
        "value": "boolean"
      },
      {
        "name": "isLastColumn",
        "value": "boolean"
      },
      {
        "name": "alignActions",
        "value": "top | center"
      }
    ],
    "/Users/ihorkorenets/Job/UUI/loveship/components/typography/docs/richTextView.doc.tsx": [
      {
        "name": "htmlContent",
        "value": "any"
      },
      {
        "name": "cx",
        "value": "any"
      },
      {
        "name": "children",
        "value": "React.ReactNode"
      },
      {
        "name": "rawProps",
        "value": "any"
      },
      {
        "name": "theme",
        "value": "light | dark"
      },
      {
        "name": "size",
        "value": "12 | 14 | 16"
      }
    ],
    "/Users/ihorkorenets/Job/UUI/loveship/components/typography/docs/text.doc.tsx": [
      {
        "name": "cx",
        "value": "any"
      },
      {
        "name": "children",
        "value": "React.ReactNode"
      },
      {
        "name": "onClick",
        "value": "(e?: any) => void"
      },
      {
        "name": "clickAnalyticsEvent",
        "value": "{ [key: string]: any; name: string; }"
      },
      {
        "name": "rawProps",
        "value": "any"
      },
      {
        "name": "forwardedRef",
        "value": "React.ForwardedRef<T>"
      },
      {
        "name": "size",
        "value": "none | 24 | 30 | 36 | 42 | 48 | 18"
      },
      {
        "name": "font",
        "value": "sans | sans-semibold | sans-light"
      },
      {
        "name": "color",
        "value": "white | fuchsia | sky | grass | sun | fire | carbon | cobalt | lavanda | night50 | night100 | night200 | night300 | night400 | night500 | night600 | night700 | night800 | night900"
      },
      {
        "name": "lineHeight",
        "value": "24 | 30 | 18 | 12"
      },
      {
        "name": "fontSize",
        "value": "18 | 12 | 10 | 14 | 16"
      }
    ],
    "/Users/ihorkorenets/Job/UUI/loveship/components/typography/docs/textPlaceholder.doc.tsx": [
      {
        "name": "wordsCount",
        "value": "number"
      },
      {
        "name": "color",
        "value": "white | fuchsia | sky | grass | sun | fire | carbon | cobalt | lavanda | night50 | night100 | night200 | night300 | night400 | night500 | night600 | night700 | night800 | night900"
      },
      {
        "name": "isNotAnimated",
        "value": "boolean"
      },
      {
        "name": "cx",
        "value": "any"
      },
      {
        "name": "rawProps",
        "value": "any"
      }
    ],
    "/Users/ihorkorenets/Job/UUI/loveship/components/widgets/docs/avatar.doc.tsx": [
      {
        "name": "alt",
        "value": "string"
      },
      {
        "name": "img",
        "value": "string"
      },
      {
        "name": "size",
        "value": "24 | 30 | 36 | 42 | 48 | 18 | 60 | 12 | 54 | 72 | 78 | 90 | 144"
      },
      {
        "name": "isLoading",
        "value": "boolean"
      },
      {
        "name": "cx",
        "value": "any"
      },
      {
        "name": "rawProps",
        "value": "any"
      },
      {
        "name": "forwardedRef",
        "value": "React.ForwardedRef<T>"
      }
    ],
    "/Users/ihorkorenets/Job/UUI/loveship/components/widgets/docs/avatarStack.doc.tsx": [
      {
        "name": "avatarSize",
        "value": "24 | 36 | 48 | 144"
      },
      {
        "name": "urlArray",
        "value": "string[]"
      },
      {
        "name": "direction",
        "value": "left | right"
      },
      {
        "name": "avatarsCount",
        "value": "number"
      },
      {
        "name": "renderItem",
        "value": "(url: string) => React.ReactElement<any, string | ((props: any) => React.ReactElement<any, any>) | (new (props: any) => React.Component<any, any, any>)>"
      },
      {
        "name": "cx",
        "value": "any"
      },
      {
        "name": "rawProps",
        "value": "any"
      }
    ],
    "/Users/ihorkorenets/Job/UUI/loveship/components/widgets/docs/badge.doc.ts": [
      {
        "name": "clearIcon",
        "value": "React.FC<any>"
      },
      {
        "name": "captionCX",
        "value": "any"
      },
      {
        "name": "dropdownIcon",
        "value": "React.FC<any>"
      },
      {
        "name": "dropdownIconPosition",
        "value": "left | right"
      },
      {
        "name": "countPosition",
        "value": "left | right"
      },
      {
        "name": "count",
        "value": "number"
      },
      {
        "name": "isLinkActive",
        "value": "boolean"
      },
      {
        "name": "tabIndex",
        "value": "number"
      },
      {
        "name": "cx",
        "value": "any"
      },
      {
        "name": "onClick",
        "value": "(e?: any) => void"
      },
      {
        "name": "link",
        "value": "Link"
      },
      {
        "name": "href",
        "value": "string"
      },
      {
        "name": "target",
        "value": "\"_blank\""
      },
      {
        "name": "isDisabled",
        "value": "boolean"
      },
      {
        "name": "icon",
        "value": "React.FC<any>"
      },
      {
        "name": "iconPosition",
        "value": "left | right"
      },
      {
        "name": "onIconClick",
        "value": "() => void"
      },
      {
        "name": "clickAnalyticsEvent",
        "value": "{ [key: string]: any; name: string; }"
      },
      {
        "name": "caption",
        "value": "any"
      },
      {
        "name": "onClear",
        "value": "(e?: any) => void"
      },
      {
        "name": "isOpen",
        "value": "boolean"
      },
      {
        "name": "isDropdown",
        "value": "boolean"
      },
      {
        "name": "toggleDropdownOpening",
        "value": "(value: boolean) => void"
      },
      {
        "name": "isInteractedOutside",
        "value": "(event: Event) => boolean"
      },
      {
        "name": "ref",
        "value": "React.Ref<any>"
      },
      {
        "name": "placeholder",
        "value": "any"
      },
      {
        "name": "rawProps",
        "value": "any"
      },
      {
        "name": "forwardedRef",
        "value": "React.ForwardedRef<T>"
      },
      {
        "name": "shape",
        "value": "square | round"
      },
      {
        "name": "fill",
        "value": "none | solid | white | light | transparent | semitransparent"
      },
      {
        "name": "size",
        "value": "24 | 30 | 36 | 42 | 48 | 18 | 12"
      },
      {
        "name": "color",
        "value": "white | fuchsia | sky | grass | sun | fire | carbon | cobalt | lavanda | night50 | night100 | night200 | night300 | night400 | night500 | night600 | night700 | night800 | night900"
      }
    ],
    "/Users/ihorkorenets/Job/UUI/loveship/components/widgets/docs/carousel.doc.tsx": [
      {
        "name": "items",
        "value": "Record<string, any>[]"
      },
      {
        "name": "renderItem",
        "value": "(item: Record<string, any>) => React.ReactNode"
      },
      {
        "name": "divideBy",
        "value": "number"
      },
      {
        "name": "arrowIcon",
        "value": "React.FC<any>"
      },
      {
        "name": "cx",
        "value": "any"
      },
      {
        "name": "rawProps",
        "value": "any"
      },
      {
        "name": "forwardedRef",
        "value": "React.ForwardedRef<T>"
      },
      {
        "name": "color",
        "value": "white | fuchsia | sky | grass | sun | fire | carbon | cobalt | lavanda | night50 | night100 | night200 | night300 | night400 | night500 | night600 | night700 | night800 | night900"
      }
    ],
    "/Users/ihorkorenets/Job/UUI/loveship/components/widgets/docs/paginator.doc.tsx": [
      {
        "name": "size",
        "value": "24 | 30"
      },
      {
        "name": "totalPages",
        "value": "number"
      },
      {
        "name": "render",
        "value": "(params: PaginatorParams) => any"
      },
      {
        "name": "value",
        "value": "T"
      },
      {
        "name": "onValueChange",
        "value": "(newValue: T) => void"
      },
      {
        "name": "isInvalid",
        "value": "boolean"
      },
      {
        "name": "validationMessage",
        "value": "string"
      },
      {
        "name": "validationProps",
        "value": "{ [key: string]: ICanBeInvalid; }"
      },
      {
        "name": "isDisabled",
        "value": "boolean"
      },
      {
        "name": "isReadonly",
        "value": "boolean"
      },
      {
        "name": "isRequired",
        "value": "boolean"
      },
      {
        "name": "getValueChangeAnalyticsEvent",
        "value": "(newValue: T, oldValue: T) => { [key: string]: any; name: string; }"
      }
    ],
    "/Users/ihorkorenets/Job/UUI/loveship/components/widgets/docs/spinner.doc.ts": [
      {
        "name": "cx",
        "value": "any"
      },
      {
        "name": "rawProps",
        "value": "any"
      },
      {
        "name": "forwardedRef",
        "value": "React.ForwardedRef<T>"
      },
      {
        "name": "color",
        "value": "white | fuchsia | sky | grass | sun | fire | carbon | cobalt | lavanda | night50 | night100 | night200 | night300 | night400 | night500 | night600 | night700 | night800 | night900"
      }
    ],
    "/Users/ihorkorenets/Job/UUI/loveship/components/widgets/docs/tag.doc.ts": [
      {
        "name": "clearIcon",
        "value": "React.FC<any>"
      },
      {
        "name": "captionCX",
        "value": "any"
      },
      {
        "name": "dropdownIcon",
        "value": "React.FC<any>"
      },
      {
        "name": "dropdownIconPosition",
        "value": "left | right"
      },
      {
        "name": "countPosition",
        "value": "left | right"
      },
      {
        "name": "count",
        "value": "number"
      },
      {
        "name": "isLinkActive",
        "value": "boolean"
      },
      {
        "name": "tabIndex",
        "value": "number"
      },
      {
        "name": "cx",
        "value": "any"
      },
      {
        "name": "onClick",
        "value": "(e?: any) => void"
      },
      {
        "name": "link",
        "value": "Link"
      },
      {
        "name": "href",
        "value": "string"
      },
      {
        "name": "target",
        "value": "\"_blank\""
      },
      {
        "name": "isDisabled",
        "value": "boolean"
      },
      {
        "name": "icon",
        "value": "React.FC<any>"
      },
      {
        "name": "iconPosition",
        "value": "left | right"
      },
      {
        "name": "onIconClick",
        "value": "() => void"
      },
      {
        "name": "clickAnalyticsEvent",
        "value": "{ [key: string]: any; name: string; }"
      },
      {
        "name": "caption",
        "value": "any"
      },
      {
        "name": "onClear",
        "value": "(e?: any) => void"
      },
      {
        "name": "isOpen",
        "value": "boolean"
      },
      {
        "name": "isDropdown",
        "value": "boolean"
      },
      {
        "name": "toggleDropdownOpening",
        "value": "(value: boolean) => void"
      },
      {
        "name": "isInteractedOutside",
        "value": "(event: Event) => boolean"
      },
      {
        "name": "ref",
        "value": "React.Ref<any>"
      },
      {
        "name": "placeholder",
        "value": "any"
      },
      {
        "name": "rawProps",
        "value": "any"
      },
      {
        "name": "forwardedRef",
        "value": "React.ForwardedRef<T>"
      },
      {
        "name": "fill",
        "value": "none | solid | white | light"
      },
      {
        "name": "size",
        "value": "24 | 30 | 36 | 42 | 48 | 18"
      },
      {
        "name": "color",
        "value": "white | fuchsia | sky | grass | sun | fire | carbon | cobalt | lavanda | night50 | night100 | night200 | night300 | night400 | night500 | night600 | night700 | night800 | night900"
      }
    ],
    "/Users/ihorkorenets/Job/UUI/uui/components/buttons/docs/button.doc.tsx": [
      {
        "name": "clearIcon",
        "value": "React.FC<any>"
      },
      {
        "name": "captionCX",
        "value": "any"
      },
      {
        "name": "dropdownIcon",
        "value": "React.FC<any>"
      },
      {
        "name": "dropdownIconPosition",
        "value": "left | right"
      },
      {
        "name": "countPosition",
        "value": "left | right"
      },
      {
        "name": "count",
        "value": "number"
      },
      {
        "name": "isLinkActive",
        "value": "boolean"
      },
      {
        "name": "tabIndex",
        "value": "number"
      },
      {
        "name": "cx",
        "value": "any"
      },
      {
        "name": "onClick",
        "value": "(e?: any) => void"
      },
      {
        "name": "link",
        "value": "Link"
      },
      {
        "name": "href",
        "value": "string"
      },
      {
        "name": "target",
        "value": "\"_blank\""
      },
      {
        "name": "isDisabled",
        "value": "boolean"
      },
      {
        "name": "icon",
        "value": "React.FC<any>"
      },
      {
        "name": "iconPosition",
        "value": "left | right"
      },
      {
        "name": "onIconClick",
        "value": "() => void"
      },
      {
        "name": "clickAnalyticsEvent",
        "value": "{ [key: string]: any; name: string; }"
      },
      {
        "name": "caption",
        "value": "any"
      },
      {
        "name": "onClear",
        "value": "(e?: any) => void"
      },
      {
        "name": "isOpen",
        "value": "boolean"
      },
      {
        "name": "isDropdown",
        "value": "boolean"
      },
      {
        "name": "toggleDropdownOpening",
        "value": "(value: boolean) => void"
      },
      {
        "name": "isInteractedOutside",
        "value": "(event: Event) => boolean"
      },
      {
        "name": "ref",
        "value": "React.Ref<any>"
      },
      {
        "name": "placeholder",
        "value": "any"
      },
      {
        "name": "rawProps",
        "value": "any"
      },
      {
        "name": "forwardedRef",
        "value": "React.ForwardedRef<T>"
      },
      {
        "name": "size",
        "value": "none | 24 | 30 | 36 | 42 | 48 | 18"
      },
      {
        "name": "mode",
        "value": "none | solid | outline | ghost"
      },
      {
        "name": "color",
        "value": "accent | primary | secondary | negative"
      }
    ],
    "/Users/ihorkorenets/Job/UUI/uui/components/buttons/docs/linkButton.doc.ts": [
      {
        "name": "clearIcon",
        "value": "React.FC<any>"
      },
      {
        "name": "captionCX",
        "value": "any"
      },
      {
        "name": "dropdownIcon",
        "value": "React.FC<any>"
      },
      {
        "name": "dropdownIconPosition",
        "value": "left | right"
      },
      {
        "name": "countPosition",
        "value": "left | right"
      },
      {
        "name": "count",
        "value": "number"
      },
      {
        "name": "isLinkActive",
        "value": "boolean"
      },
      {
        "name": "tabIndex",
        "value": "number"
      },
      {
        "name": "cx",
        "value": "any"
      },
      {
        "name": "onClick",
        "value": "(e?: any) => void"
      },
      {
        "name": "link",
        "value": "Link"
      },
      {
        "name": "href",
        "value": "string"
      },
      {
        "name": "target",
        "value": "\"_blank\""
      },
      {
        "name": "isDisabled",
        "value": "boolean"
      },
      {
        "name": "icon",
        "value": "React.FC<any>"
      },
      {
        "name": "iconPosition",
        "value": "left | right"
      },
      {
        "name": "onIconClick",
        "value": "() => void"
      },
      {
        "name": "clickAnalyticsEvent",
        "value": "{ [key: string]: any; name: string; }"
      },
      {
        "name": "caption",
        "value": "any"
      },
      {
        "name": "onClear",
        "value": "(e?: any) => void"
      },
      {
        "name": "isOpen",
        "value": "boolean"
      },
      {
        "name": "isDropdown",
        "value": "boolean"
      },
      {
        "name": "toggleDropdownOpening",
        "value": "(value: boolean) => void"
      },
      {
        "name": "isInteractedOutside",
        "value": "(event: Event) => boolean"
      },
      {
        "name": "ref",
        "value": "React.Ref<any>"
      },
      {
        "name": "placeholder",
        "value": "any"
      },
      {
        "name": "rawProps",
        "value": "any"
      },
      {
        "name": "forwardedRef",
        "value": "React.ForwardedRef<T>"
      },
      {
        "name": "size",
        "value": "none | 24 | 30 | 36 | 42 | 48"
      }
    ],
    "/Users/ihorkorenets/Job/UUI/uui/components/inputs/docs/checkbox.doc.ts": [
      {
        "name": "icon",
        "value": "React.FC<any>"
      },
      {
        "name": "indeterminateIcon",
        "value": "React.FC<any>"
      },
      {
        "name": "renderLabel",
        "value": "() => React.ReactNode"
      },
      {
        "name": "tabIndex",
        "value": "number"
      },
      {
        "name": "id",
        "value": "string"
      },
      {
        "name": "value",
        "value": "T"
      },
      {
        "name": "onValueChange",
        "value": "(newValue: T) => void"
      },
      {
        "name": "isInvalid",
        "value": "boolean"
      },
      {
        "name": "validationMessage",
        "value": "string"
      },
      {
        "name": "validationProps",
        "value": "{ [key: string]: ICanBeInvalid; }"
      },
      {
        "name": "isDisabled",
        "value": "boolean"
      },
      {
        "name": "isReadonly",
        "value": "boolean"
      },
      {
        "name": "isRequired",
        "value": "boolean"
      },
      {
        "name": "indeterminate",
        "value": "boolean"
      },
      {
        "name": "onFocus",
        "value": "(e: React.FocusEvent<T>) => void"
      },
      {
        "name": "onBlur",
        "value": "(e: React.FocusEvent<T>) => void"
      },
      {
        "name": "cx",
        "value": "any"
      },
      {
        "name": "label",
        "value": "any"
      },
      {
        "name": "getValueChangeAnalyticsEvent",
        "value": "(newValue: T, oldValue: T) => { [key: string]: any; name: string; }"
      },
      {
        "name": "rawProps",
        "value": "any"
      },
      {
        "name": "forwardedRef",
        "value": "React.ForwardedRef<T>"
      },
      {
        "name": "size",
        "value": "18 | 12"
      },
      {
        "name": "theme",
        "value": "light | dark"
      }
    ],
    "/Users/ihorkorenets/Job/UUI/uui/components/inputs/docs/radioInput.doc.ts": [
      {
        "name": "icon",
        "value": "React.FC<any>"
      },
      {
        "name": "renderLabel",
        "value": "() => React.ReactNode"
      },
      {
        "name": "tabIndex",
        "value": "number"
      },
      {
        "name": "id",
        "value": "string"
      },
      {
        "name": "cx",
        "value": "any"
      },
      {
        "name": "isDisabled",
        "value": "boolean"
      },
      {
        "name": "value",
        "value": "T"
      },
      {
        "name": "onValueChange",
        "value": "(newValue: T) => void"
      },
      {
        "name": "isInvalid",
        "value": "boolean"
      },
      {
        "name": "validationMessage",
        "value": "string"
      },
      {
        "name": "validationProps",
        "value": "{ [key: string]: ICanBeInvalid; }"
      },
      {
        "name": "isReadonly",
        "value": "boolean"
      },
      {
        "name": "isRequired",
        "value": "boolean"
      },
      {
        "name": "label",
        "value": "any"
      },
      {
        "name": "getValueChangeAnalyticsEvent",
        "value": "(newValue: T, oldValue: T) => { [key: string]: any; name: string; }"
      },
      {
        "name": "rawProps",
        "value": "any"
      },
      {
        "name": "forwardedRef",
        "value": "React.ForwardedRef<T>"
      },
      {
        "name": "size",
        "value": "18 | 12"
      }
    ],
    "/Users/ihorkorenets/Job/UUI/uui/components/inputs/docs/switch.doc.ts": [
      {
        "name": "tabIndex",
        "value": "number"
      },
      {
        "name": "id",
        "value": "string"
      },
      {
        "name": "cx",
        "value": "any"
      },
      {
        "name": "isDisabled",
        "value": "boolean"
      },
      {
        "name": "value",
        "value": "T"
      },
      {
        "name": "onValueChange",
        "value": "(newValue: T) => void"
      },
      {
        "name": "isInvalid",
        "value": "boolean"
      },
      {
        "name": "validationMessage",
        "value": "string"
      },
      {
        "name": "validationProps",
        "value": "{ [key: string]: ICanBeInvalid; }"
      },
      {
        "name": "isReadonly",
        "value": "boolean"
      },
      {
        "name": "isRequired",
        "value": "boolean"
      },
      {
        "name": "label",
        "value": "any"
      },
      {
        "name": "getValueChangeAnalyticsEvent",
        "value": "(newValue: T, oldValue: T) => { [key: string]: any; name: string; }"
      },
      {
        "name": "rawProps",
        "value": "any"
      },
      {
        "name": "forwardedRef",
        "value": "React.ForwardedRef<T>"
      },
      {
        "name": "size",
        "value": "24 | 18 | 12"
      }
    ],
    "/Users/ihorkorenets/Job/UUI/uui/components/inputs/docs/textInput.doc.ts": [
      {
        "name": "acceptIcon",
        "value": "React.FC<any>"
      },
      {
        "name": "cancelIcon",
        "value": "React.FC<any>"
      },
      {
        "name": "dropdownIcon",
        "value": "React.FC<any>"
      },
      {
        "name": "inputCx",
        "value": "any"
      },
      {
        "name": "renderInput",
        "value": "(props: React.DetailedHTMLProps<React.InputHTMLAttributes<HTMLInputElement>, HTMLInputElement>) => JSX.Element"
      },
      {
        "name": "onCancel",
        "value": "() => void"
      },
      {
        "name": "onAccept",
        "value": "() => void"
      },
      {
        "name": "onKeyDown",
        "value": "(e?: any) => void"
      },
      {
        "name": "autoFocus",
        "value": "boolean"
      },
      {
        "name": "type",
        "value": "string"
      },
      {
        "name": "autoComplete",
        "value": "string"
      },
      {
        "name": "name",
        "value": "string"
      },
      {
        "name": "maxLength",
        "value": "number"
      },
      {
        "name": "inputMode",
        "value": "none | text | search | tel | url | email | numeric | decimal"
      },
      {
        "name": "tabIndex",
        "value": "number"
      },
      {
        "name": "id",
        "value": "string"
      },
      {
        "name": "prefix",
        "value": "React.ReactNode"
      },
      {
        "name": "suffix",
        "value": "React.ReactNode"
      },
      {
        "name": "cx",
        "value": "any"
      },
      {
        "name": "onClick",
        "value": "(e?: any) => void"
      },
      {
        "name": "isDisabled",
        "value": "boolean"
      },
      {
        "name": "value",
        "value": "T"
      },
      {
        "name": "onValueChange",
        "value": "(newValue: T) => void"
      },
      {
        "name": "isInvalid",
        "value": "boolean"
      },
      {
        "name": "validationMessage",
        "value": "string"
      },
      {
        "name": "validationProps",
        "value": "{ [key: string]: ICanBeInvalid; }"
      },
      {
        "name": "isReadonly",
        "value": "boolean"
      },
      {
        "name": "isRequired",
        "value": "boolean"
      },
      {
        "name": "placeholder",
        "value": "any"
      },
      {
        "name": "icon",
        "value": "React.FC<any>"
      },
      {
        "name": "iconPosition",
        "value": "left | right"
      },
      {
        "name": "onIconClick",
        "value": "() => void"
      },
      {
        "name": "isOpen",
        "value": "boolean"
      },
      {
        "name": "isDropdown",
        "value": "boolean"
      },
      {
        "name": "toggleDropdownOpening",
        "value": "(value: boolean) => void"
      },
      {
        "name": "isInteractedOutside",
        "value": "(event: Event) => boolean"
      },
      {
        "name": "ref",
        "value": "React.Ref<any>"
      },
      {
        "name": "caption",
        "value": "any"
      },
      {
        "name": "getValueChangeAnalyticsEvent",
        "value": "(newValue: T, oldValue: T) => { [key: string]: any; name: string; }"
      },
      {
        "name": "rawProps",
        "value": "any"
      },
      {
        "name": "onFocus",
        "value": "(e: React.FocusEvent<T>) => void"
      },
      {
        "name": "onBlur",
        "value": "(e: React.FocusEvent<T>) => void"
      },
      {
        "name": "size",
        "value": "none | 24 | 30 | 36 | 42 | 48"
      },
      {
        "name": "mode",
        "value": "form | cell"
      }
    ],
    "/Users/ihorkorenets/Job/UUI/uui/components/pickers/docs/pickerInput.doc.tsx": [
      {
        "name": "entityName",
        "value": "string"
      },
      {
        "name": "entityPluralName",
        "value": "string"
      },
      {
        "name": "dataSource",
        "value": "IDataSource<TItem, TId, any>"
      },
      {
        "name": "getName",
        "value": "(item: TItem) => string"
      },
      {
        "name": "renderRow",
        "value": "(props: DataRowProps<TItem, TId>) => React.ReactNode"
      },
      {
        "name": "getRowOptions",
        "value": "(item: TItem, index: number) => DataRowOptions<TItem, TId>"
      },
      {
        "name": "renderNotFound",
        "value": "(props: { search: string; onClose: () => void; }) => React.ReactNode"
      },
      {
        "name": "emptyValue",
        "value": "[]"
      },
      {
        "name": "sortBy",
        "value": "(item: TItem, sorting: SortingOption<any>) => any"
      },
      {
        "name": "filter",
        "value": "any"
      },
      {
        "name": "sorting",
        "value": "SortingOption<any>"
      },
      {
        "name": "cascadeSelection",
        "value": "boolean"
      },
      {
        "name": "isFoldedByDefault",
        "value": "(item: TItem) => boolean"
      },
      {
        "name": "getSearchFields",
        "value": "(item: TItem) => string[]"
      },
      {
        "name": "selectionMode",
        "value": "\"single\""
      },
      {
        "name": "valueType",
        "value": "\"id\""
      },
      {
        "name": "value",
        "value": "T"
      },
      {
        "name": "onValueChange",
        "value": "(newValue: T) => void"
      },
      {
        "name": "isInvalid",
        "value": "boolean"
      },
      {
        "name": "validationMessage",
        "value": "string"
      },
      {
        "name": "validationProps",
        "value": "{ [key: string]: ICanBeInvalid; }"
      },
      {
        "name": "isDisabled",
        "value": "boolean"
      },
      {
        "name": "isReadonly",
        "value": "boolean"
      },
      {
        "name": "isRequired",
        "value": "boolean"
      },
      {
        "name": "getValueChangeAnalyticsEvent",
        "value": "(newValue: T, oldValue: T) => { [key: string]: any; name: string; }"
      },
      {
        "name": "onFocus",
        "value": "(e: React.FocusEvent<T>) => void"
      },
      {
        "name": "onBlur",
        "value": "(e: React.FocusEvent<T>) => void"
      },
      {
        "name": "placeholder",
        "value": "any"
      },
      {
        "name": "icon",
        "value": "React.FC<any>"
      },
      {
        "name": "iconPosition",
        "value": "left | right"
      },
      {
        "name": "onIconClick",
        "value": "() => void"
      },
      {
        "name": "editMode",
        "value": "dropdown | modal"
      },
      {
        "name": "maxItems",
        "value": "number"
      },
      {
        "name": "minBodyWidth",
        "value": "number"
      },
      {
        "name": "isSingleLine",
        "value": "boolean"
      },
      {
        "name": "dropdownPlacement",
        "value": "left | right | auto | auto-start | auto-end | top | bottom | top-start | top-end | bottom-start | bottom-end | right-start | right-end | left-start | left-end"
      },
      {
        "name": "renderToggler",
        "value": "(props: PickerTogglerProps<TItem, TId>) => React.ReactNode"
      },
      {
        "name": "searchPosition",
        "value": "none | input | body"
      },
      {
        "name": "disableClear",
        "value": "boolean"
      },
      {
        "name": "minCharsToSearch",
        "value": "number"
      },
      {
        "name": "dropdownHeight",
        "value": "number"
      },
      {
        "name": "autoFocus",
        "value": "boolean"
      },
      {
        "name": "prefix",
        "value": "React.ReactNode"
      },
      {
        "name": "suffix",
        "value": "React.ReactNode"
      },
      {
        "name": "rawProps",
        "value": "{ input?: any; body?: any; }"
      },
      {
        "name": "renderFooter",
        "value": "(props: PickerInputFooterProps<TItem, TId>) => React.ReactNode"
      },
      {
        "name": "size",
        "value": "none | 24 | 30 | 36 | 42 | 48"
      },
      {
        "name": "mode",
        "value": "form | cell"
      }
    ],
    "/Users/ihorkorenets/Job/UUI/uui/components/pickers/docs/pickerToggler.doc.tsx": [
      {
        "name": "cancelIcon",
        "value": "React.FC<any>"
      },
      {
        "name": "dropdownIcon",
        "value": "React.FC<any>"
      },
      {
        "name": "autoFocus",
        "value": "boolean"
      },
      {
        "name": "renderItem",
        "value": "(props: DataRowProps<TItem, TId>) => React.ReactNode"
      },
      {
        "name": "getName",
        "value": "(item: DataRowProps<TItem, TId>) => string"
      },
      {
        "name": "entityName",
        "value": "string"
      },
      {
        "name": "maxItems",
        "value": "number"
      },
      {
        "name": "isSingleLine",
        "value": "boolean"
      },
      {
        "name": "pickerMode",
        "value": "single | multi"
      },
      {
        "name": "searchPosition",
        "value": "none | input | body"
      },
      {
        "name": "onKeyDown",
        "value": "(e: React.KeyboardEvent<HTMLElement>) => void"
      },
      {
        "name": "disableSearch",
        "value": "boolean"
      },
      {
        "name": "disableClear",
        "value": "boolean"
      },
      {
        "name": "minCharsToSearch",
        "value": "number"
      },
      {
        "name": "prefix",
        "value": "React.ReactNode"
      },
      {
        "name": "suffix",
        "value": "React.ReactNode"
      },
      {
        "name": "selection",
        "value": "DataRowProps<TItem, TId>[]"
      },
      {
        "name": "onClear",
        "value": "(e?: any) => void"
      },
      {
        "name": "isOpen",
        "value": "boolean"
      },
      {
        "name": "isDropdown",
        "value": "boolean"
      },
      {
        "name": "toggleDropdownOpening",
        "value": "(value: boolean) => void"
      },
      {
        "name": "isInteractedOutside",
        "value": "(event: Event) => boolean"
      },
      {
        "name": "ref",
        "value": "React.Ref<any>"
      },
      {
        "name": "caption",
        "value": "any"
      },
      {
        "name": "onClick",
        "value": "(e?: any) => void"
      },
      {
        "name": "value",
        "value": "T"
      },
      {
        "name": "onValueChange",
        "value": "(newValue: T) => void"
      },
      {
        "name": "isInvalid",
        "value": "boolean"
      },
      {
        "name": "validationMessage",
        "value": "string"
      },
      {
        "name": "validationProps",
        "value": "{ [key: string]: ICanBeInvalid; }"
      },
      {
        "name": "isDisabled",
        "value": "boolean"
      },
      {
        "name": "isReadonly",
        "value": "boolean"
      },
      {
        "name": "isRequired",
        "value": "boolean"
      },
      {
        "name": "placeholder",
        "value": "any"
      },
      {
        "name": "onFocus",
        "value": "(e: React.FocusEvent<T>) => void"
      },
      {
        "name": "onBlur",
        "value": "(e: React.FocusEvent<T>) => void"
      },
      {
        "name": "icon",
        "value": "React.FC<any>"
      },
      {
        "name": "iconPosition",
        "value": "left | right"
      },
      {
        "name": "onIconClick",
        "value": "() => void"
      },
      {
        "name": "cx",
        "value": "any"
      },
      {
        "name": "rawProps",
        "value": "any"
      },
      {
        "name": "size",
        "value": "24 | 30 | 36 | 42 | 48"
      },
      {
        "name": "mode",
        "value": "form | cell"
      }
    ],
    "/Users/ihorkorenets/Job/UUI/uui/components/typography/docs/textPlaceholder.doc.tsx": [
      {
        "name": "wordsCount",
        "value": "number"
      },
      {
        "name": "isNotAnimated",
        "value": "boolean"
      }
    ],
    "/Users/ihorkorenets/Job/UUI/epam-promo/components/layout/FlexItems/docs/flexRow.doc.tsx": [
      {
        "name": "cx",
        "value": "any"
      },
      {
        "name": "onClick",
        "value": "(e?: any) => void"
      },
      {
        "name": "key",
        "value": "React.ReactText"
      },
      {
        "name": "rawProps",
        "value": "any"
      },
      {
        "name": "alignItems",
        "value": "top | bottom | center | stretch"
      },
      {
        "name": "children",
        "value": "any"
      },
      {
        "name": "background",
        "value": "none | white | gray5"
      },
      {
        "name": "topShadow",
        "value": "boolean"
      },
      {
        "name": "borderBottom",
        "value": "gray40"
      },
      {
        "name": "padding",
        "value": "24 | 18 | 12 | 6"
      },
      {
        "name": "vPadding",
        "value": "24 | 36 | 48 | 18 | 12"
      },
      {
        "name": "spacing",
        "value": "18 | 12 | 6"
      },
      {
        "name": "margin",
        "value": "24 | 12"
      },
      {
        "name": "size",
        "value": "24 | 30 | 36 | 42 | 48"
      }
    ],
    "/Users/ihorkorenets/Job/UUI/epam-promo/components/layout/FlexItems/docs/panel.doc.tsx": [
      {
        "name": "cx",
        "value": "any"
      },
      {
        "name": "children",
        "value": "React.ReactNode"
      },
      {
        "name": "onClick",
        "value": "(e?: any) => void"
      },
      {
        "name": "rawProps",
        "value": "any"
      },
      {
        "name": "forwardedRef",
        "value": "React.ForwardedRef<T>"
      },
      {
        "name": "clickAnalyticsEvent",
        "value": "{ [key: string]: any; name: string; }"
      },
      {
        "name": "style",
        "value": "React.CSSProperties"
      },
      {
        "name": "shadow",
        "value": "boolean"
      },
      {
        "name": "margin",
        "value": "\"24\""
      },
      {
        "name": "background",
        "value": "white | gray90"
      }
    ],
    "/Users/ihorkorenets/Job/UUI/loveship/components/inputs/Slider/docs/rangeSlider.doc.ts": [
      {
        "name": "min",
        "value": "number"
      },
      {
        "name": "max",
        "value": "number"
      },
      {
        "name": "step",
        "value": "number"
      },
      {
        "name": "splitAt",
        "value": "number"
      },
      {
        "name": "renderLabel",
        "value": "(value: number) => string"
      },
      {
        "name": "showTooltip",
        "value": "boolean"
      },
      {
        "name": "cx",
        "value": "any"
      },
      {
        "name": "value",
        "value": "T"
      },
      {
        "name": "onValueChange",
        "value": "(newValue: T) => void"
      },
      {
        "name": "isInvalid",
        "value": "boolean"
      },
      {
        "name": "validationMessage",
        "value": "string"
      },
      {
        "name": "validationProps",
        "value": "{ [key: string]: ICanBeInvalid; }"
      },
      {
        "name": "isDisabled",
        "value": "boolean"
      },
      {
        "name": "isReadonly",
        "value": "boolean"
      },
      {
        "name": "isRequired",
        "value": "boolean"
      },
      {
        "name": "rawProps",
        "value": "any"
      },
      {
        "name": "forwardedRef",
        "value": "React.ForwardedRef<T>"
      },
      {
        "name": "color",
        "value": "white | fuchsia | sky | grass | sun | fire | carbon | cobalt | lavanda | night50 | night100 | night200 | night300 | night400 | night500 | night600 | night700 | night800 | night900"
      }
    ],
    "/Users/ihorkorenets/Job/UUI/loveship/components/inputs/Slider/docs/slider.doc.ts": [
      {
        "name": "min",
        "value": "number"
      },
      {
        "name": "max",
        "value": "number"
      },
      {
        "name": "step",
        "value": "number"
      },
      {
        "name": "splitAt",
        "value": "number"
      },
      {
        "name": "renderLabel",
        "value": "(value: number) => string"
      },
      {
        "name": "showTooltip",
        "value": "boolean"
      },
      {
        "name": "cx",
        "value": "any"
      },
      {
        "name": "value",
        "value": "T"
      },
      {
        "name": "onValueChange",
        "value": "(newValue: T) => void"
      },
      {
        "name": "isInvalid",
        "value": "boolean"
      },
      {
        "name": "validationMessage",
        "value": "string"
      },
      {
        "name": "validationProps",
        "value": "{ [key: string]: ICanBeInvalid; }"
      },
      {
        "name": "isDisabled",
        "value": "boolean"
      },
      {
        "name": "isReadonly",
        "value": "boolean"
      },
      {
        "name": "isRequired",
        "value": "boolean"
      },
      {
        "name": "rawProps",
        "value": "any"
      },
      {
        "name": "forwardedRef",
        "value": "React.ForwardedRef<T>"
      },
      {
        "name": "color",
        "value": "white | fuchsia | sky | grass | sun | fire | carbon | cobalt | lavanda | night50 | night100 | night200 | night300 | night400 | night500 | night600 | night700 | night800 | night900"
      }
    ],
    "/Users/ihorkorenets/Job/UUI/loveship/components/layout/FlexItems/docs/flexRow.doc.tsx": [
      {
        "name": "cx",
        "value": "any"
      },
      {
        "name": "onClick",
        "value": "(e?: any) => void"
      },
      {
        "name": "key",
        "value": "React.ReactText"
      },
      {
        "name": "rawProps",
        "value": "any"
      },
      {
        "name": "alignItems",
        "value": "top | bottom | center | stretch"
      },
      {
        "name": "children",
        "value": "any"
      },
      {
        "name": "background",
        "value": "none | white | night50 | night100"
      },
      {
        "name": "topShadow",
        "value": "boolean"
      },
      {
        "name": "borderBottom",
        "value": "night50 | night300 | night400 | night700"
      },
      {
        "name": "padding",
        "value": "24 | 18 | 12 | 6"
      },
      {
        "name": "vPadding",
        "value": "24 | 36 | 48 | 18 | 12"
      },
      {
        "name": "spacing",
        "value": "18 | 12 | 6"
      },
      {
        "name": "type",
        "value": "form | panel"
      },
      {
        "name": "margin",
        "value": "24 | 12"
      },
      {
        "name": "size",
        "value": "24 | 30 | 36 | 42 | 48"
      }
    ],
    "/Users/ihorkorenets/Job/UUI/loveship/components/layout/FlexItems/docs/panel.doc.tsx": [
      {
        "name": "cx",
        "value": "any"
      },
      {
        "name": "children",
        "value": "React.ReactNode"
      },
      {
        "name": "onClick",
        "value": "(e?: any) => void"
      },
      {
        "name": "rawProps",
        "value": "any"
      },
      {
        "name": "forwardedRef",
        "value": "React.ForwardedRef<T>"
      },
      {
        "name": "clickAnalyticsEvent",
        "value": "{ [key: string]: any; name: string; }"
      },
      {
        "name": "style",
        "value": "React.CSSProperties"
      },
      {
        "name": "shadow",
        "value": "boolean"
      },
      {
        "name": "margin",
        "value": "\"24\""
      },
      {
        "name": "background",
        "value": "white | night50"
      }
    ]
  }
}