{
 "timestamp": "2023-11-15",
 "docsGenTypes": {
  "@epam/uui-core:AcceptDropParams": {
   "summary": {
    "module": "@epam/uui-core",
    "typeName": {
     "name": "AcceptDropParams",
     "nameFull": "AcceptDropParams<TSrcData, TDstData>"
    },
    "src": "uui-core/src/types/dnd.ts",
    "exported": true
   },
   "details": {
    "kind": 263,
    "typeValue": {
     "raw": "AcceptDropParams<TSrcData, TDstData>",
     "print": [
      "interface AcceptDropParams<TSrcData, TDstData> {",
      "    srcData: TSrcData;",
      "    dstData?: TDstData;",
      "    offsetLeft: number;",
      "    offsetTop: number;",
      "    targetWidth: number;",
      "    targetHeight: number;",
      "}"
     ]
    },
    "props": [
     {
      "uid": 1,
      "name": "srcData",
      "typeValue": {
       "raw": "TSrcData"
      },
      "required": true
     },
     {
      "uid": 2,
      "name": "dstData",
      "typeValue": {
       "raw": "TDstData"
      },
      "required": false
     },
     {
      "uid": 3,
      "name": "offsetLeft",
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "required": true
     },
     {
      "uid": 4,
      "name": "offsetTop",
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "required": true
     },
     {
      "uid": 5,
      "name": "targetWidth",
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "required": true
     },
     {
      "uid": 6,
      "name": "targetHeight",
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "required": true
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui-core:AnalyticsEvent": {
   "summary": {
    "module": "@epam/uui-core",
    "typeName": {
     "name": "AnalyticsEvent",
     "nameFull": "AnalyticsEvent"
    },
    "src": "uui-core/src/types/objects.ts",
    "exported": true
   },
   "details": {
    "kind": 264,
    "typeValue": {
     "raw": "null | { [key: string]: any; name: string; }",
     "print": [
      "type AnalyticsEvent = {",
      "    /** Name of event */",
      "    name: string;",
      "    /** Any data, which will be sent with event */",
      "    [key: string]: any;",
      "} | null;"
     ]
    }
   }
  },
  "@epam/uui-core:ApiCallErrorType": {
   "summary": {
    "module": "@epam/uui-core",
    "typeName": {
     "name": "ApiCallErrorType",
     "nameFull": "ApiCallErrorType"
    },
    "src": "uui-core/src/hooks/useUuiError.ts",
    "exported": true
   },
   "details": {
    "kind": 264,
    "typeValue": {
     "raw": "'permissionDenied' | 'notFound' | 'serverError' | 'serviceUnavailable' | 'default'",
     "print": [
      "type ApiCallErrorType = 'permissionDenied' | 'notFound' | 'serverError' | 'serviceUnavailable' | 'default';"
     ]
    }
   }
  },
  "@epam/uui-core:ApiCallInfo": {
   "summary": {
    "module": "@epam/uui-core",
    "typeName": {
     "name": "ApiCallInfo",
     "nameFull": "ApiCallInfo"
    },
    "src": "uui-core/src/types/contexts.ts",
    "exported": true
   },
   "details": {
    "kind": 263,
    "typeValue": {
     "raw": "ApiCallInfo",
     "print": [
      "interface ApiCallInfo {",
      "    url: string;",
      "    name: string;",
      "    method: string;",
      "    requestData: {};",
      "    options?: ApiCallOptions;",
      "    status: ApiCallStatus;",
      "    httpStatus?: number;",
      "    responseData?: {",
      "        errorMessage?: string;",
      "    };",
      "    errorStatus?: number;",
      "    startedAt?: Date;",
      "    finishedAt?: Date;",
      "    attemptsCount: number;",
      "    dismissError(): void;",
      "}"
     ]
    },
    "props": [
     {
      "uid": 1,
      "name": "url",
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "required": true
     },
     {
      "uid": 2,
      "name": "name",
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "required": true
     },
     {
      "uid": 3,
      "name": "method",
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "required": true
     },
     {
      "uid": 4,
      "name": "requestData",
      "typeValue": {
       "raw": "{}"
      },
      "required": true
     },
     {
      "uid": 5,
      "name": "options",
      "typeValue": {
       "raw": "ApiCallOptions"
      },
      "required": false
     },
     {
      "uid": 6,
      "name": "status",
      "typeValue": {
       "raw": "'scheduled' | 'running' | 'error'"
      },
      "typeValueRef": "@epam/uui-core:ApiCallStatus",
      "editor": {
       "type": "oneOf",
       "options": [
        "scheduled",
        "running",
        "error"
       ]
      },
      "required": true
     },
     {
      "uid": 7,
      "name": "httpStatus",
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "required": false
     },
     {
      "uid": 8,
      "name": "responseData",
      "typeValue": {
       "raw": "{ errorMessage?: string | undefined; }"
      },
      "required": false
     },
     {
      "uid": 9,
      "name": "errorStatus",
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "required": false
     },
     {
      "uid": 10,
      "name": "startedAt",
      "typeValue": {
       "raw": "Date"
      },
      "required": false
     },
     {
      "uid": 11,
      "name": "finishedAt",
      "typeValue": {
       "raw": "Date"
      },
      "required": false
     },
     {
      "uid": 12,
      "name": "attemptsCount",
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "required": true
     },
     {
      "uid": 13,
      "name": "dismissError",
      "typeValue": {
       "raw": "() => void"
      },
      "editor": {
       "type": "func"
      },
      "required": true
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui-core:ApiCallOptions": {
   "summary": {
    "module": "@epam/uui-core",
    "typeName": {
     "name": "ApiCallOptions",
     "nameFull": "ApiCallOptions"
    },
    "src": "uui-core/src/types/contexts.ts",
    "exported": true
   },
   "details": {
    "kind": 263,
    "typeValue": {
     "raw": "ApiCallOptions",
     "print": [
      "interface ApiCallOptions {",
      "    /** Native fetch method options  */",
      "    fetchOptions?: RequestInit;",
      "    /** Defines how to handle request errors:",
      "     * 'page' - displays an error splash screen.",
      "     * 'notification' - shows the error using a notification card without blocking the application.",
      "     * 'manual' - means the API context won't handle the error; you should manage it yourself.",
      "     */",
      "    errorHandling?: 'manual' | 'page' | 'notification';",
      "}"
     ]
    },
    "props": [
     {
      "uid": 1,
      "name": "fetchOptions",
      "comment": {
       "raw": [
        "Native fetch method options"
       ]
      },
      "typeValue": {
       "raw": "RequestInit"
      },
      "required": false
     },
     {
      "uid": 2,
      "name": "errorHandling",
      "comment": {
       "raw": [
        "Defines how to handle request errors:",
        " 'page' - displays an error splash screen.",
        " 'notification' - shows the error using a notification card without blocking the application.",
        " 'manual' - means the API context won't handle the error; you should manage it yourself."
       ]
      },
      "typeValue": {
       "raw": "'manual' | 'page' | 'notification'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "manual",
        "page",
        "notification"
       ]
      },
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui-core:ApiContextProps": {
   "summary": {
    "module": "@epam/uui-core",
    "typeName": {
     "name": "ApiContextProps",
     "nameFull": "ApiContextProps"
    },
    "src": "uui-core/src/services/ApiContext.ts",
    "exported": true
   },
   "details": {
    "kind": 263,
    "typeValue": {
     "raw": "ApiContextProps",
     "print": [
      "interface ApiContextProps {",
      "    apiReloginPath?: string;",
      "    apiPingPath?: string;",
      "    apiServerUrl?: string;",
      "}"
     ]
    },
    "props": [
     {
      "uid": 1,
      "name": "apiReloginPath",
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "required": false
     },
     {
      "uid": 2,
      "name": "apiPingPath",
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "required": false
     },
     {
      "uid": 3,
      "name": "apiServerUrl",
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui-core:ApiExtensions": {
   "summary": {
    "module": "@epam/uui-core",
    "typeName": {
     "name": "ApiExtensions",
     "nameFull": "ApiExtensions<TApi>"
    },
    "src": "uui-core/src/types/contexts.ts",
    "exported": true
   },
   "details": {
    "kind": 263,
    "typeValue": {
     "raw": "ApiExtensions<TApi>",
     "print": [
      "interface ApiExtensions<TApi> {",
      "    withOptions(options: ApiCallOptions): TApi;",
      "}"
     ]
    },
    "props": [
     {
      "uid": 1,
      "name": "withOptions",
      "typeValue": {
       "raw": "(options: ApiCallOptions) => TApi"
      },
      "editor": {
       "type": "func"
      },
      "required": true
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui-core:ApiRecoveryReason": {
   "summary": {
    "module": "@epam/uui-core",
    "typeName": {
     "name": "ApiRecoveryReason",
     "nameFull": "ApiRecoveryReason"
    },
    "src": "uui-core/src/types/contexts.ts",
    "exported": true
   },
   "details": {
    "kind": 264,
    "typeValue": {
     "raw": "null | 'auth-lost' | 'connection-lost' | 'server-overload' | 'maintenance'",
     "print": [
      "type ApiRecoveryReason = 'auth-lost' | 'connection-lost' | 'server-overload' | 'maintenance' | null;"
     ]
    }
   }
  },
  "@epam/uui-core:ApiStatus": {
   "summary": {
    "module": "@epam/uui-core",
    "typeName": {
     "name": "ApiStatus",
     "nameFull": "ApiStatus"
    },
    "src": "uui-core/src/types/contexts.ts",
    "exported": true
   },
   "details": {
    "kind": 264,
    "typeValue": {
     "raw": "'running' | 'error' | 'idle' | 'recovery'",
     "print": [
      "type ApiStatus = 'idle' | 'running' | 'error' | 'recovery';"
     ]
    }
   }
  },
  "@epam/uui-core:ApplyFilterOptions": {
   "summary": {
    "module": "@epam/uui-core",
    "typeName": {
     "name": "ApplyFilterOptions",
     "nameFull": "ApplyFilterOptions<TItem, TId, TFilter>"
    },
    "src": "uui-core/src/data/processing/views/tree/ITree.ts",
    "exported": true
   },
   "details": {
    "kind": 263,
    "typeValue": {
     "raw": "ApplyFilterOptions<TItem, TId, TFilter>",
     "print": [
      "interface ApplyFilterOptions<TItem, TId, TFilter> {",
      "    filter: DataSourceState<TFilter, TId>['filter'];",
      "    getFilter?: (filter: TFilter) => (item: TItem) => boolean;",
      "}"
     ]
    },
    "props": [
     {
      "uid": 1,
      "name": "filter",
      "typeValue": {
       "raw": "TFilter"
      },
      "required": false
     },
     {
      "uid": 2,
      "name": "getFilter",
      "typeValue": {
       "raw": "(filter: TFilter) => (item: TItem) => boolean"
      },
      "editor": {
       "type": "func"
      },
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui-core:ApplySearchOptions": {
   "summary": {
    "module": "@epam/uui-core",
    "typeName": {
     "name": "ApplySearchOptions",
     "nameFull": "ApplySearchOptions<TItem, TId, TFilter>"
    },
    "src": "uui-core/src/data/processing/views/tree/ITree.ts",
    "exported": true
   },
   "details": {
    "kind": 263,
    "typeValue": {
     "raw": "ApplySearchOptions<TItem, TId, TFilter>",
     "print": [
      "interface ApplySearchOptions<TItem, TId, TFilter> {",
      "    search: DataSourceState<TFilter, TId>['search'];",
      "    getSearchFields?: (item: TItem) => string[];",
      "    sortSearchByRelevance?: boolean;",
      "}"
     ]
    },
    "props": [
     {
      "uid": 1,
      "name": "search",
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "required": false
     },
     {
      "uid": 2,
      "name": "getSearchFields",
      "typeValue": {
       "raw": "(item: TItem) => string[]"
      },
      "editor": {
       "type": "func"
      },
      "required": false
     },
     {
      "uid": 3,
      "name": "sortSearchByRelevance",
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui-core:ApplySortOptions": {
   "summary": {
    "module": "@epam/uui-core",
    "typeName": {
     "name": "ApplySortOptions",
     "nameFull": "ApplySortOptions<TItem, TId, TFilter>"
    },
    "src": "uui-core/src/data/processing/views/tree/ITree.ts",
    "exported": true
   },
   "details": {
    "kind": 263,
    "typeValue": {
     "raw": "ApplySortOptions<TItem, TId, TFilter>",
     "print": [
      "interface ApplySortOptions<TItem, TId, TFilter> {",
      "    sorting: DataSourceState<TFilter, TId>['sorting'];",
      "    sortBy?(item: TItem, sorting: SortingOption): any;",
      "}"
     ]
    },
    "props": [
     {
      "uid": 1,
      "name": "sorting",
      "typeValue": {
       "raw": "SortingOption<any>[]"
      },
      "required": false
     },
     {
      "uid": 2,
      "name": "sortBy",
      "typeValue": {
       "raw": "(item: TItem, sorting: SortingOption<any>) => any"
      },
      "editor": {
       "type": "func"
      },
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui-core:ArrayDataSourceProps": {
   "summary": {
    "module": "@epam/uui-core",
    "typeName": {
     "name": "ArrayDataSourceProps",
     "nameFull": "ArrayDataSourceProps<TItem, TId, TFilter>"
    },
    "src": "uui-core/src/data/processing/ArrayDataSource.tsx",
    "exported": true
   },
   "details": {
    "kind": 263,
    "typeValue": {
     "raw": "ArrayDataSourceProps<TItem, TId, TFilter>",
     "print": [
      "interface ArrayDataSourceProps<TItem, TId, TFilter> extends ArrayListViewProps<TItem, TId, TFilter> {",
      "}"
     ]
    },
    "props": [
     {
      "uid": 1,
      "name": "items",
      "comment": {
       "raw": [
        "Data, which should be represented by a DataSource."
       ]
      },
      "typeValue": {
       "raw": "TItem[] | ITree<TItem, TId>"
      },
      "from": "@epam/uui-core:ArrayListViewProps",
      "required": false
     },
     {
      "uid": 2,
      "name": "getSearchFields",
      "comment": {
       "raw": [
        "A pure function that gets search value for each item.",
        "     Default: (item) => item.name."
       ]
      },
      "typeValue": {
       "raw": "(item: TItem) => string[]"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:BaseArrayListViewProps",
      "required": false
     },
     {
      "uid": 3,
      "name": "sortBy",
      "comment": {
       "raw": [
        "A pure function that gets sorting value for current sorting value"
       ]
      },
      "typeValue": {
       "raw": "(item: TItem, sorting: SortingOption<any>) => any"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:BaseArrayListViewProps",
      "required": false
     },
     {
      "uid": 4,
      "name": "getFilter",
      "comment": {
       "raw": [
        "A pure function that returns filter callback to be applied for each item.",
        " The callback should return true, if item passed the filter."
       ]
      },
      "typeValue": {
       "raw": "(filter: TFilter) => (item: TItem) => boolean"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:BaseArrayListViewProps",
      "required": false
     },
     {
      "uid": 5,
      "name": "sortSearchByRelevance",
      "comment": {
       "raw": [
        "Enables sorting of search results by relevance.",
        " - The highest priority has records, which have a full match with a search keyword.",
        " - The lower one has records, which have a search keyword at the 0 position, but not the full match.",
        " - Then, records, which contain a search keyword as a separate word, but not at the beginning.",
        " - And the lowest one - any other match of the search keyword.",
        "",
        " Example:",
        " - `search`: 'some'",
        " - `record string`: 'some word', `rank` = 4",
        " - `record string`: 'someone', `rank` = 3",
        " - `record string`: 'I know some guy', `rank` = 2",
        " - `record string`: 'awesome', `rank` = 1",
        "",
        " @default true"
       ],
       "tags": {
        "@default": true
       }
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:BaseArrayListViewProps",
      "required": false
     },
     {
      "uid": 6,
      "name": "getId",
      "comment": {
       "raw": [
        "Should return unique ID of the TItem",
        " If omitted, we assume that every TItem has and unique id in its 'id' field.",
        " @param item An item to get ID of"
       ]
      },
      "typeValue": {
       "raw": "(item: TItem) => TId"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:BaseListViewProps",
      "required": false
     },
     {
      "uid": 7,
      "name": "complexIds",
      "comment": {
       "raw": [
        "Set to true, if you use IDs which can't act as javascript Map key (objects or arrays).",
        " In this case, IDs will be internally JSON.stringify-ed to be used as Maps keys."
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:BaseListViewProps",
      "required": false
     },
     {
      "uid": 8,
      "name": "getParentId",
      "comment": {
       "raw": [
        "Should return ID of the Item's parent. Usually it's i => i.parentId.",
        " If specified, Data Source will build items hierarchy.",
        "",
        " Also, it is used by LazyDataSource to pre-fetch missing parents of loaded items. This is required in following cases:",
        " - when a child item is pre-selected, but not yet loaded at start. We need to load it's parent chain",
        "   to highlight parents with selected children",
        " - in flattenSearch mode, we usually want to display a path to each item (e.g. Canada/Ontario/Paris),",
        "   We need to load parents with a separate call (if backend doesn't pre-fetch them)"
       ]
      },
      "typeValue": {
       "raw": "(item: TItem) => TId | undefined"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:BaseListViewProps",
      "required": false
     },
     {
      "uid": 9,
      "name": "rowOptions",
      "comment": {
       "raw": [
        "Specifies if rows are selectable, checkable, draggable, clickable, and more.",
        " See DataRowOptions for more details.",
        " If options depends on the item itself, use getRowOptions.",
        " Specifying both rowOptions and getRowOptions might help to render better loading skeletons: we use only rowOptions in this case, as we haven't loaded an item yet.",
        " Make sure all callbacks are properly memoized, as changing them will trigger re-renders or row, which would impact performance",
        " @param item An item to get options for"
       ]
      },
      "typeValue": {
       "raw": "DataRowOptions<TItem, TId>"
      },
      "from": "@epam/uui-core:BaseListViewProps",
      "required": false
     },
     {
      "uid": 10,
      "name": "getRowOptions",
      "comment": {
       "raw": [
        "For each row, specify if row is selectable, editable, checkable, draggable, clickable, have its own set of columns, and more.",
        " To make rows editable, pass IEditable interface to each row. This works the same way as for other editable components.",
        " See DataRowOptions for more details.",
        " If both getRowOptions and rowOptions specified, we'll use getRowOptions for loaded rows, and rowOptions only for loading rows.",
        " Make sure all callbacks are properly memoized, as changing them will trigger re-renders or row, which would impact performance",
        " @param item An item to get options for"
       ]
      },
      "typeValue": {
       "raw": "(item: TItem, index: number) => DataRowOptions<TItem, TId>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:BaseListViewProps",
      "required": false
     },
     {
      "uid": 11,
      "name": "isFoldedByDefault",
      "comment": {
       "raw": [
        "Can be specified to unfold all or some items at start.",
        " If not specified, all rows would be folded."
       ]
      },
      "typeValue": {
       "raw": "(item: TItem) => boolean"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:BaseListViewProps",
      "required": false
     },
     {
      "uid": 12,
      "name": "cascadeSelection",
      "comment": {
       "raw": [
        "Controls how the selection (checking items) of a parent node affects the selection of its all children, and vice versa.",
        " - false: All nodes are selected independently (default).",
        " - true or 'explicit': Selecting a parent node explicitly selects all its children. Unchecking the last parent's child unchecks its parent.",
        " - 'implicit': Selecting a parent node means that all children are considered checked.",
        "   The user sees all these nodes as checked on the UI, but only the selected parent is visible in the PickerInput tags, and only the checked",
        "   parent is present in the Picker's value or DataSourceState.checked array. When the user unchecks the first child of such a parent,",
        "   its parents become unchecked and all children but the unchecked one become checked, making children's selection explicit. If the last",
        "   unchecked child gets checked, all children from the checked are removed, returning to the implicit state when only the parent is checked."
       ]
      },
      "typeValue": {
       "raw": "boolean | 'implicit' | 'explicit'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        false,
        true,
        "implicit",
        "explicit"
       ]
      },
      "from": "@epam/uui-core:BaseListViewProps",
      "required": false
     },
     {
      "uid": 13,
      "name": "selectAll",
      "comment": {
       "raw": [
        "Enables or disables \"select all\" checkbox. Default is true."
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:BaseListViewProps",
      "required": false
     },
     {
      "uid": 14,
      "name": "backgroundReload",
      "comment": {
       "raw": [
        "Enables background reloading of data on search/sort/filter/reload, which turns off the rows placeholders displaying while data loading.",
        " During data reloading, previous data is displayed. To prevent any interaction with visible not actual rows, a blocker/spinner should be displayed.",
        " In UUI components, such as `PickerInput`, `PickerList`, `PickerModal` and `DataTable`, blockers are added.",
        " It is required to add blockers/spinners to the components, built on your own.",
        " If reloading is started, `view.getListProps` returns `isReloading` flag, set to `true`."
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:BaseListViewProps",
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui-core:ArrayElement": {
   "summary": {
    "module": "@epam/uui-core",
    "typeName": {
     "name": "ArrayElement",
     "nameFull": "ArrayElement<ArrayType>"
    },
    "src": "uui-core/src/data/lenses/types.ts",
    "exported": true
   },
   "details": {
    "kind": 264,
    "typeValue": {
     "raw": "ArrayElement<ArrayType>",
     "print": [
      "type ArrayElement<ArrayType> = ArrayType extends (infer ElementType)[] ? ElementType : never;"
     ]
    }
   }
  },
  "@epam/uui-core:ArrayListViewProps": {
   "summary": {
    "module": "@epam/uui-core",
    "typeName": {
     "name": "ArrayListViewProps",
     "nameFull": "ArrayListViewProps<TItem, TId, TFilter>"
    },
    "src": "uui-core/src/data/processing/views/ArrayListView.ts",
    "exported": true
   },
   "details": {
    "kind": 263,
    "typeValue": {
     "raw": "ArrayListViewProps<TItem, TId, TFilter>",
     "print": [
      "interface ArrayListViewProps<TItem, TId, TFilter> extends BaseArrayListViewProps<TItem, TId, TFilter> {",
      "    /** Data, which should be represented by a DataSource. */",
      "    items?: TItem[] | ITree<TItem, TId>;",
      "}"
     ]
    },
    "props": [
     {
      "uid": 1,
      "name": "items",
      "comment": {
       "raw": [
        "Data, which should be represented by a DataSource."
       ]
      },
      "typeValue": {
       "raw": "TItem[] | ITree<TItem, TId>"
      },
      "required": false
     },
     {
      "uid": 2,
      "name": "getSearchFields",
      "comment": {
       "raw": [
        "A pure function that gets search value for each item.",
        "     Default: (item) => item.name."
       ]
      },
      "typeValue": {
       "raw": "(item: TItem) => string[]"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:BaseArrayListViewProps",
      "required": false
     },
     {
      "uid": 3,
      "name": "sortBy",
      "comment": {
       "raw": [
        "A pure function that gets sorting value for current sorting value"
       ]
      },
      "typeValue": {
       "raw": "(item: TItem, sorting: SortingOption<any>) => any"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:BaseArrayListViewProps",
      "required": false
     },
     {
      "uid": 4,
      "name": "getFilter",
      "comment": {
       "raw": [
        "A pure function that returns filter callback to be applied for each item.",
        " The callback should return true, if item passed the filter."
       ]
      },
      "typeValue": {
       "raw": "(filter: TFilter) => (item: TItem) => boolean"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:BaseArrayListViewProps",
      "required": false
     },
     {
      "uid": 5,
      "name": "sortSearchByRelevance",
      "comment": {
       "raw": [
        "Enables sorting of search results by relevance.",
        " - The highest priority has records, which have a full match with a search keyword.",
        " - The lower one has records, which have a search keyword at the 0 position, but not the full match.",
        " - Then, records, which contain a search keyword as a separate word, but not at the beginning.",
        " - And the lowest one - any other match of the search keyword.",
        "",
        " Example:",
        " - `search`: 'some'",
        " - `record string`: 'some word', `rank` = 4",
        " - `record string`: 'someone', `rank` = 3",
        " - `record string`: 'I know some guy', `rank` = 2",
        " - `record string`: 'awesome', `rank` = 1",
        "",
        " @default true"
       ],
       "tags": {
        "@default": true
       }
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:BaseArrayListViewProps",
      "required": false
     },
     {
      "uid": 6,
      "name": "getId",
      "comment": {
       "raw": [
        "Should return unique ID of the TItem",
        " If omitted, we assume that every TItem has and unique id in its 'id' field.",
        " @param item An item to get ID of"
       ]
      },
      "typeValue": {
       "raw": "(item: TItem) => TId"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:BaseListViewProps",
      "required": false
     },
     {
      "uid": 7,
      "name": "complexIds",
      "comment": {
       "raw": [
        "Set to true, if you use IDs which can't act as javascript Map key (objects or arrays).",
        " In this case, IDs will be internally JSON.stringify-ed to be used as Maps keys."
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:BaseListViewProps",
      "required": false
     },
     {
      "uid": 8,
      "name": "getParentId",
      "comment": {
       "raw": [
        "Should return ID of the Item's parent. Usually it's i => i.parentId.",
        " If specified, Data Source will build items hierarchy.",
        "",
        " Also, it is used by LazyDataSource to pre-fetch missing parents of loaded items. This is required in following cases:",
        " - when a child item is pre-selected, but not yet loaded at start. We need to load it's parent chain",
        "   to highlight parents with selected children",
        " - in flattenSearch mode, we usually want to display a path to each item (e.g. Canada/Ontario/Paris),",
        "   We need to load parents with a separate call (if backend doesn't pre-fetch them)"
       ]
      },
      "typeValue": {
       "raw": "(item: TItem) => TId | undefined"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:BaseListViewProps",
      "required": false
     },
     {
      "uid": 9,
      "name": "rowOptions",
      "comment": {
       "raw": [
        "Specifies if rows are selectable, checkable, draggable, clickable, and more.",
        " See DataRowOptions for more details.",
        " If options depends on the item itself, use getRowOptions.",
        " Specifying both rowOptions and getRowOptions might help to render better loading skeletons: we use only rowOptions in this case, as we haven't loaded an item yet.",
        " Make sure all callbacks are properly memoized, as changing them will trigger re-renders or row, which would impact performance",
        " @param item An item to get options for"
       ]
      },
      "typeValue": {
       "raw": "DataRowOptions<TItem, TId>"
      },
      "from": "@epam/uui-core:BaseListViewProps",
      "required": false
     },
     {
      "uid": 10,
      "name": "getRowOptions",
      "comment": {
       "raw": [
        "For each row, specify if row is selectable, editable, checkable, draggable, clickable, have its own set of columns, and more.",
        " To make rows editable, pass IEditable interface to each row. This works the same way as for other editable components.",
        " See DataRowOptions for more details.",
        " If both getRowOptions and rowOptions specified, we'll use getRowOptions for loaded rows, and rowOptions only for loading rows.",
        " Make sure all callbacks are properly memoized, as changing them will trigger re-renders or row, which would impact performance",
        " @param item An item to get options for"
       ]
      },
      "typeValue": {
       "raw": "(item: TItem, index: number) => DataRowOptions<TItem, TId>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:BaseListViewProps",
      "required": false
     },
     {
      "uid": 11,
      "name": "isFoldedByDefault",
      "comment": {
       "raw": [
        "Can be specified to unfold all or some items at start.",
        " If not specified, all rows would be folded."
       ]
      },
      "typeValue": {
       "raw": "(item: TItem) => boolean"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:BaseListViewProps",
      "required": false
     },
     {
      "uid": 12,
      "name": "cascadeSelection",
      "comment": {
       "raw": [
        "Controls how the selection (checking items) of a parent node affects the selection of its all children, and vice versa.",
        " - false: All nodes are selected independently (default).",
        " - true or 'explicit': Selecting a parent node explicitly selects all its children. Unchecking the last parent's child unchecks its parent.",
        " - 'implicit': Selecting a parent node means that all children are considered checked.",
        "   The user sees all these nodes as checked on the UI, but only the selected parent is visible in the PickerInput tags, and only the checked",
        "   parent is present in the Picker's value or DataSourceState.checked array. When the user unchecks the first child of such a parent,",
        "   its parents become unchecked and all children but the unchecked one become checked, making children's selection explicit. If the last",
        "   unchecked child gets checked, all children from the checked are removed, returning to the implicit state when only the parent is checked."
       ]
      },
      "typeValue": {
       "raw": "boolean | 'implicit' | 'explicit'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        false,
        true,
        "implicit",
        "explicit"
       ]
      },
      "from": "@epam/uui-core:BaseListViewProps",
      "required": false
     },
     {
      "uid": 13,
      "name": "selectAll",
      "comment": {
       "raw": [
        "Enables or disables \"select all\" checkbox. Default is true."
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:BaseListViewProps",
      "required": false
     },
     {
      "uid": 14,
      "name": "backgroundReload",
      "comment": {
       "raw": [
        "Enables background reloading of data on search/sort/filter/reload, which turns off the rows placeholders displaying while data loading.",
        " During data reloading, previous data is displayed. To prevent any interaction with visible not actual rows, a blocker/spinner should be displayed.",
        " In UUI components, such as `PickerInput`, `PickerList`, `PickerModal` and `DataTable`, blockers are added.",
        " It is required to add blockers/spinners to the components, built on your own.",
        " If reloading is started, `view.getListProps` returns `isReloading` flag, set to `true`."
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:BaseListViewProps",
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui-core:ArrayPickerProps": {
   "summary": {
    "module": "@epam/uui-core",
    "typeName": {
     "name": "ArrayPickerProps",
     "nameFull": "ArrayPickerProps<TId, TItem>"
    },
    "src": "uui-core/src/types/pickers.ts",
    "exported": true
   },
   "details": {
    "kind": 264,
    "typeValue": {
     "raw": "{ selectionMode: 'multi'; valueType?: 'id' | undefined; emptyValue?: [] | null | undefined; } & IEditable<TId[]> | { selectionMode: 'multi'; valueType: 'entity'; emptyValue?: [] | null | undefined; } & IEditable<TItem[]>",
     "print": [
      "type ArrayPickerProps<TId, TItem> = ({",
      "    /** If 'single' provided - only one item is selected. In case of 'multi' - multiple items are selected */",
      "    selectionMode: 'multi';",
      "    /** Defines what to use in value/onValueChange: 'id' - item id (TId). 'entity' - the item itself (TItem) */",
      "    valueType?: 'id';",
      "    /** Defines what to use as an empty value. If other value provided, it will be assumed as selection.",
      "     */",
      "    emptyValue?: [",
      "    ] | null;",
      "} & IEditable<TId[]>) | ({",
      "    /** If 'single' provided - only one item is selected. In case of 'multi' - multiple items are selected */",
      "    selectionMode: 'multi';",
      "    /** Defines what to use in value/onValueChange: 'id' - item id (TId). 'entity' - the item itself (TItem) */",
      "    valueType: 'entity';",
      "    /** Defines what to use as an empty value. If other value provided, it will be assumed as selection.",
      "     */",
      "    emptyValue?: [",
      "    ] | null;",
      "} & IEditable<TItem[]>);"
     ]
    },
    "props": [
     {
      "uid": 12,
      "name": "selectionMode",
      "comment": {
       "raw": [
        "If 'single' provided - only one item is selected. In case of 'multi' - multiple items are selected"
       ]
      },
      "typeValue": {
       "raw": "'multi'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "multi"
       ]
      },
      "required": true
     },
     {
      "uid": 2,
      "name": "valueType",
      "comment": {
       "raw": [
        "Defines what to use in value/onValueChange: 'id' - item id (TId). 'entity' - the item itself (TItem)"
       ]
      },
      "typeValue": {
       "raw": "'id'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "id"
       ]
      },
      "required": false
     },
     {
      "uid": 14,
      "name": "emptyValue",
      "comment": {
       "raw": [
        "Defines what to use as an empty value. If other value provided, it will be assumed as selection."
       ]
      },
      "typeValue": {
       "raw": "null | []"
      },
      "required": false
     },
     {
      "uid": 4,
      "name": "value",
      "comment": {
       "raw": [
        "The current value of component"
       ]
      },
      "typeValue": {
       "raw": "TId[]"
      },
      "from": "@epam/uui-core:IEditable",
      "required": true
     },
     {
      "uid": 5,
      "name": "onValueChange",
      "comment": {
       "raw": [
        "Called when value needs to be changed (usually due to user interaction)"
       ]
      },
      "typeValue": {
       "raw": "(newValue: TId[]) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IEditable",
      "required": true
     },
     {
      "uid": 17,
      "name": "isInvalid",
      "comment": {
       "raw": [
        "True if component contains invalid input"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:ICanBeInvalid",
      "required": false
     },
     {
      "uid": 18,
      "name": "validationMessage",
      "comment": {
       "raw": [
        "Message describing why the value is invalid"
       ]
      },
      "typeValue": {
       "raw": "null | string | number | boolean | React.ReactElement<any, string | React.JSXElementConstructor<any>> | React.ReactFragment | React.ReactPortal"
      },
      "typeValueRef": "@types/react:ReactNode",
      "from": "@epam/uui-core:ICanBeInvalid",
      "required": false
     },
     {
      "uid": 19,
      "name": "validationProps",
      "comment": {
       "raw": [
        "If T is a complex value (object or array), this property contains validation states of inner items"
       ]
      },
      "typeValue": {
       "raw": "{ [key: string]: ICanBeInvalid; }"
      },
      "from": "@epam/uui-core:ICanBeInvalid",
      "required": false
     },
     {
      "uid": 20,
      "name": "isDisabled",
      "comment": {
       "raw": [
        "Disable editing, and visually de-emphasize value of the component"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:IDisableable",
      "required": false
     },
     {
      "uid": 21,
      "name": "isReadonly",
      "comment": {
       "raw": [
        "Disable editing. Unlike isDisabled, keep component's value readable."
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:ICanBeReadonly",
      "required": false
     },
     {
      "uid": 22,
      "name": "isRequired",
      "comment": {
       "raw": [
        "Marks that component's value is required and shouldn't be empty"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:ICanBeRequired",
      "required": false
     },
     {
      "uid": 13,
      "name": "valueType",
      "comment": {
       "raw": [
        "Defines what to use in value/onValueChange: 'id' - item id (TId). 'entity' - the item itself (TItem)"
       ]
      },
      "typeValue": {
       "raw": "'entity'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "entity"
       ]
      },
      "required": true
     },
     {
      "uid": 15,
      "name": "value",
      "comment": {
       "raw": [
        "The current value of component"
       ]
      },
      "typeValue": {
       "raw": "TItem[]"
      },
      "from": "@epam/uui-core:IEditable",
      "required": true
     },
     {
      "uid": 16,
      "name": "onValueChange",
      "comment": {
       "raw": [
        "Called when value needs to be changed (usually due to user interaction)"
       ]
      },
      "typeValue": {
       "raw": "(newValue: TItem[]) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IEditable",
      "required": true
     }
    ],
    "propsFromUnion": true
   }
  },
  "@epam/uui-core:AsyncDataSourceProps": {
   "summary": {
    "module": "@epam/uui-core",
    "typeName": {
     "name": "AsyncDataSourceProps",
     "nameFull": "AsyncDataSourceProps<TItem, TId, TFilter>"
    },
    "src": "uui-core/src/data/processing/AsyncDataSource.tsx",
    "exported": true
   },
   "details": {
    "kind": 263,
    "typeValue": {
     "raw": "AsyncDataSourceProps<TItem, TId, TFilter>",
     "print": [
      "interface AsyncDataSourceProps<TItem, TId, TFilter> extends AsyncListViewProps<TItem, TId, TFilter> {",
      "}"
     ]
    },
    "props": [
     {
      "uid": 1,
      "name": "api",
      "typeValue": {
       "raw": "() => Promise<TItem[]>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:AsyncListViewProps",
      "required": true
     },
     {
      "uid": 2,
      "name": "getSearchFields",
      "comment": {
       "raw": [
        "A pure function that gets search value for each item.",
        "     Default: (item) => item.name."
       ]
      },
      "typeValue": {
       "raw": "(item: TItem) => string[]"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:BaseArrayListViewProps",
      "required": false
     },
     {
      "uid": 3,
      "name": "sortBy",
      "comment": {
       "raw": [
        "A pure function that gets sorting value for current sorting value"
       ]
      },
      "typeValue": {
       "raw": "(item: TItem, sorting: SortingOption<any>) => any"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:BaseArrayListViewProps",
      "required": false
     },
     {
      "uid": 4,
      "name": "getFilter",
      "comment": {
       "raw": [
        "A pure function that returns filter callback to be applied for each item.",
        " The callback should return true, if item passed the filter."
       ]
      },
      "typeValue": {
       "raw": "(filter: TFilter) => (item: TItem) => boolean"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:BaseArrayListViewProps",
      "required": false
     },
     {
      "uid": 5,
      "name": "sortSearchByRelevance",
      "comment": {
       "raw": [
        "Enables sorting of search results by relevance.",
        " - The highest priority has records, which have a full match with a search keyword.",
        " - The lower one has records, which have a search keyword at the 0 position, but not the full match.",
        " - Then, records, which contain a search keyword as a separate word, but not at the beginning.",
        " - And the lowest one - any other match of the search keyword.",
        "",
        " Example:",
        " - `search`: 'some'",
        " - `record string`: 'some word', `rank` = 4",
        " - `record string`: 'someone', `rank` = 3",
        " - `record string`: 'I know some guy', `rank` = 2",
        " - `record string`: 'awesome', `rank` = 1",
        "",
        " @default true"
       ],
       "tags": {
        "@default": true
       }
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:BaseArrayListViewProps",
      "required": false
     },
     {
      "uid": 6,
      "name": "getId",
      "comment": {
       "raw": [
        "Should return unique ID of the TItem",
        " If omitted, we assume that every TItem has and unique id in its 'id' field.",
        " @param item An item to get ID of"
       ]
      },
      "typeValue": {
       "raw": "(item: TItem) => TId"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:BaseListViewProps",
      "required": false
     },
     {
      "uid": 7,
      "name": "complexIds",
      "comment": {
       "raw": [
        "Set to true, if you use IDs which can't act as javascript Map key (objects or arrays).",
        " In this case, IDs will be internally JSON.stringify-ed to be used as Maps keys."
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:BaseListViewProps",
      "required": false
     },
     {
      "uid": 8,
      "name": "getParentId",
      "comment": {
       "raw": [
        "Should return ID of the Item's parent. Usually it's i => i.parentId.",
        " If specified, Data Source will build items hierarchy.",
        "",
        " Also, it is used by LazyDataSource to pre-fetch missing parents of loaded items. This is required in following cases:",
        " - when a child item is pre-selected, but not yet loaded at start. We need to load it's parent chain",
        "   to highlight parents with selected children",
        " - in flattenSearch mode, we usually want to display a path to each item (e.g. Canada/Ontario/Paris),",
        "   We need to load parents with a separate call (if backend doesn't pre-fetch them)"
       ]
      },
      "typeValue": {
       "raw": "(item: TItem) => TId | undefined"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:BaseListViewProps",
      "required": false
     },
     {
      "uid": 9,
      "name": "rowOptions",
      "comment": {
       "raw": [
        "Specifies if rows are selectable, checkable, draggable, clickable, and more.",
        " See DataRowOptions for more details.",
        " If options depends on the item itself, use getRowOptions.",
        " Specifying both rowOptions and getRowOptions might help to render better loading skeletons: we use only rowOptions in this case, as we haven't loaded an item yet.",
        " Make sure all callbacks are properly memoized, as changing them will trigger re-renders or row, which would impact performance",
        " @param item An item to get options for"
       ]
      },
      "typeValue": {
       "raw": "DataRowOptions<TItem, TId>"
      },
      "from": "@epam/uui-core:BaseListViewProps",
      "required": false
     },
     {
      "uid": 10,
      "name": "getRowOptions",
      "comment": {
       "raw": [
        "For each row, specify if row is selectable, editable, checkable, draggable, clickable, have its own set of columns, and more.",
        " To make rows editable, pass IEditable interface to each row. This works the same way as for other editable components.",
        " See DataRowOptions for more details.",
        " If both getRowOptions and rowOptions specified, we'll use getRowOptions for loaded rows, and rowOptions only for loading rows.",
        " Make sure all callbacks are properly memoized, as changing them will trigger re-renders or row, which would impact performance",
        " @param item An item to get options for"
       ]
      },
      "typeValue": {
       "raw": "(item: TItem, index: number) => DataRowOptions<TItem, TId>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:BaseListViewProps",
      "required": false
     },
     {
      "uid": 11,
      "name": "isFoldedByDefault",
      "comment": {
       "raw": [
        "Can be specified to unfold all or some items at start.",
        " If not specified, all rows would be folded."
       ]
      },
      "typeValue": {
       "raw": "(item: TItem) => boolean"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:BaseListViewProps",
      "required": false
     },
     {
      "uid": 12,
      "name": "cascadeSelection",
      "comment": {
       "raw": [
        "Controls how the selection (checking items) of a parent node affects the selection of its all children, and vice versa.",
        " - false: All nodes are selected independently (default).",
        " - true or 'explicit': Selecting a parent node explicitly selects all its children. Unchecking the last parent's child unchecks its parent.",
        " - 'implicit': Selecting a parent node means that all children are considered checked.",
        "   The user sees all these nodes as checked on the UI, but only the selected parent is visible in the PickerInput tags, and only the checked",
        "   parent is present in the Picker's value or DataSourceState.checked array. When the user unchecks the first child of such a parent,",
        "   its parents become unchecked and all children but the unchecked one become checked, making children's selection explicit. If the last",
        "   unchecked child gets checked, all children from the checked are removed, returning to the implicit state when only the parent is checked."
       ]
      },
      "typeValue": {
       "raw": "boolean | 'implicit' | 'explicit'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        false,
        true,
        "implicit",
        "explicit"
       ]
      },
      "from": "@epam/uui-core:BaseListViewProps",
      "required": false
     },
     {
      "uid": 13,
      "name": "selectAll",
      "comment": {
       "raw": [
        "Enables or disables \"select all\" checkbox. Default is true."
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:BaseListViewProps",
      "required": false
     },
     {
      "uid": 14,
      "name": "backgroundReload",
      "comment": {
       "raw": [
        "Enables background reloading of data on search/sort/filter/reload, which turns off the rows placeholders displaying while data loading.",
        " During data reloading, previous data is displayed. To prevent any interaction with visible not actual rows, a blocker/spinner should be displayed.",
        " In UUI components, such as `PickerInput`, `PickerList`, `PickerModal` and `DataTable`, blockers are added.",
        " It is required to add blockers/spinners to the components, built on your own.",
        " If reloading is started, `view.getListProps` returns `isReloading` flag, set to `true`."
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:BaseListViewProps",
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui-core:AsyncListViewProps": {
   "summary": {
    "module": "@epam/uui-core",
    "typeName": {
     "name": "AsyncListViewProps",
     "nameFull": "AsyncListViewProps<TItem, TId, TFilter>"
    },
    "src": "uui-core/src/data/processing/views/AsyncListView.ts",
    "exported": true
   },
   "details": {
    "kind": 263,
    "typeValue": {
     "raw": "AsyncListViewProps<TItem, TId, TFilter>",
     "print": [
      "interface AsyncListViewProps<TItem, TId, TFilter> extends BaseArrayListViewProps<TItem, TId, TFilter> {",
      "    api(): Promise<TItem[]>;",
      "}"
     ]
    },
    "props": [
     {
      "uid": 1,
      "name": "api",
      "typeValue": {
       "raw": "() => Promise<TItem[]>"
      },
      "editor": {
       "type": "func"
      },
      "required": true
     },
     {
      "uid": 2,
      "name": "getSearchFields",
      "comment": {
       "raw": [
        "A pure function that gets search value for each item.",
        "     Default: (item) => item.name."
       ]
      },
      "typeValue": {
       "raw": "(item: TItem) => string[]"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:BaseArrayListViewProps",
      "required": false
     },
     {
      "uid": 3,
      "name": "sortBy",
      "comment": {
       "raw": [
        "A pure function that gets sorting value for current sorting value"
       ]
      },
      "typeValue": {
       "raw": "(item: TItem, sorting: SortingOption<any>) => any"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:BaseArrayListViewProps",
      "required": false
     },
     {
      "uid": 4,
      "name": "getFilter",
      "comment": {
       "raw": [
        "A pure function that returns filter callback to be applied for each item.",
        " The callback should return true, if item passed the filter."
       ]
      },
      "typeValue": {
       "raw": "(filter: TFilter) => (item: TItem) => boolean"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:BaseArrayListViewProps",
      "required": false
     },
     {
      "uid": 5,
      "name": "sortSearchByRelevance",
      "comment": {
       "raw": [
        "Enables sorting of search results by relevance.",
        " - The highest priority has records, which have a full match with a search keyword.",
        " - The lower one has records, which have a search keyword at the 0 position, but not the full match.",
        " - Then, records, which contain a search keyword as a separate word, but not at the beginning.",
        " - And the lowest one - any other match of the search keyword.",
        "",
        " Example:",
        " - `search`: 'some'",
        " - `record string`: 'some word', `rank` = 4",
        " - `record string`: 'someone', `rank` = 3",
        " - `record string`: 'I know some guy', `rank` = 2",
        " - `record string`: 'awesome', `rank` = 1",
        "",
        " @default true"
       ],
       "tags": {
        "@default": true
       }
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:BaseArrayListViewProps",
      "required": false
     },
     {
      "uid": 6,
      "name": "getId",
      "comment": {
       "raw": [
        "Should return unique ID of the TItem",
        " If omitted, we assume that every TItem has and unique id in its 'id' field.",
        " @param item An item to get ID of"
       ]
      },
      "typeValue": {
       "raw": "(item: TItem) => TId"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:BaseListViewProps",
      "required": false
     },
     {
      "uid": 7,
      "name": "complexIds",
      "comment": {
       "raw": [
        "Set to true, if you use IDs which can't act as javascript Map key (objects or arrays).",
        " In this case, IDs will be internally JSON.stringify-ed to be used as Maps keys."
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:BaseListViewProps",
      "required": false
     },
     {
      "uid": 8,
      "name": "getParentId",
      "comment": {
       "raw": [
        "Should return ID of the Item's parent. Usually it's i => i.parentId.",
        " If specified, Data Source will build items hierarchy.",
        "",
        " Also, it is used by LazyDataSource to pre-fetch missing parents of loaded items. This is required in following cases:",
        " - when a child item is pre-selected, but not yet loaded at start. We need to load it's parent chain",
        "   to highlight parents with selected children",
        " - in flattenSearch mode, we usually want to display a path to each item (e.g. Canada/Ontario/Paris),",
        "   We need to load parents with a separate call (if backend doesn't pre-fetch them)"
       ]
      },
      "typeValue": {
       "raw": "(item: TItem) => TId | undefined"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:BaseListViewProps",
      "required": false
     },
     {
      "uid": 9,
      "name": "rowOptions",
      "comment": {
       "raw": [
        "Specifies if rows are selectable, checkable, draggable, clickable, and more.",
        " See DataRowOptions for more details.",
        " If options depends on the item itself, use getRowOptions.",
        " Specifying both rowOptions and getRowOptions might help to render better loading skeletons: we use only rowOptions in this case, as we haven't loaded an item yet.",
        " Make sure all callbacks are properly memoized, as changing them will trigger re-renders or row, which would impact performance",
        " @param item An item to get options for"
       ]
      },
      "typeValue": {
       "raw": "DataRowOptions<TItem, TId>"
      },
      "from": "@epam/uui-core:BaseListViewProps",
      "required": false
     },
     {
      "uid": 10,
      "name": "getRowOptions",
      "comment": {
       "raw": [
        "For each row, specify if row is selectable, editable, checkable, draggable, clickable, have its own set of columns, and more.",
        " To make rows editable, pass IEditable interface to each row. This works the same way as for other editable components.",
        " See DataRowOptions for more details.",
        " If both getRowOptions and rowOptions specified, we'll use getRowOptions for loaded rows, and rowOptions only for loading rows.",
        " Make sure all callbacks are properly memoized, as changing them will trigger re-renders or row, which would impact performance",
        " @param item An item to get options for"
       ]
      },
      "typeValue": {
       "raw": "(item: TItem, index: number) => DataRowOptions<TItem, TId>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:BaseListViewProps",
      "required": false
     },
     {
      "uid": 11,
      "name": "isFoldedByDefault",
      "comment": {
       "raw": [
        "Can be specified to unfold all or some items at start.",
        " If not specified, all rows would be folded."
       ]
      },
      "typeValue": {
       "raw": "(item: TItem) => boolean"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:BaseListViewProps",
      "required": false
     },
     {
      "uid": 12,
      "name": "cascadeSelection",
      "comment": {
       "raw": [
        "Controls how the selection (checking items) of a parent node affects the selection of its all children, and vice versa.",
        " - false: All nodes are selected independently (default).",
        " - true or 'explicit': Selecting a parent node explicitly selects all its children. Unchecking the last parent's child unchecks its parent.",
        " - 'implicit': Selecting a parent node means that all children are considered checked.",
        "   The user sees all these nodes as checked on the UI, but only the selected parent is visible in the PickerInput tags, and only the checked",
        "   parent is present in the Picker's value or DataSourceState.checked array. When the user unchecks the first child of such a parent,",
        "   its parents become unchecked and all children but the unchecked one become checked, making children's selection explicit. If the last",
        "   unchecked child gets checked, all children from the checked are removed, returning to the implicit state when only the parent is checked."
       ]
      },
      "typeValue": {
       "raw": "boolean | 'implicit' | 'explicit'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        false,
        true,
        "implicit",
        "explicit"
       ]
      },
      "from": "@epam/uui-core:BaseListViewProps",
      "required": false
     },
     {
      "uid": 13,
      "name": "selectAll",
      "comment": {
       "raw": [
        "Enables or disables \"select all\" checkbox. Default is true."
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:BaseListViewProps",
      "required": false
     },
     {
      "uid": 14,
      "name": "backgroundReload",
      "comment": {
       "raw": [
        "Enables background reloading of data on search/sort/filter/reload, which turns off the rows placeholders displaying while data loading.",
        " During data reloading, previous data is displayed. To prevent any interaction with visible not actual rows, a blocker/spinner should be displayed.",
        " In UUI components, such as `PickerInput`, `PickerList`, `PickerModal` and `DataTable`, blockers are added.",
        " It is required to add blockers/spinners to the components, built on your own.",
        " If reloading is started, `view.getListProps` returns `isReloading` flag, set to `true`."
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:BaseListViewProps",
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui-core:BaseArrayListViewProps": {
   "summary": {
    "module": "@epam/uui-core",
    "typeName": {
     "name": "BaseArrayListViewProps",
     "nameFull": "BaseArrayListViewProps<TItem, TId, TFilter>"
    },
    "src": "uui-core/src/data/processing/views/ArrayListView.ts",
    "exported": true
   },
   "details": {
    "kind": 263,
    "typeValue": {
     "raw": "BaseArrayListViewProps<TItem, TId, TFilter>",
     "print": [
      "interface BaseArrayListViewProps<TItem, TId, TFilter> extends BaseListViewProps<TItem, TId, TFilter> {",
      "    /** A pure function that gets search value for each item.",
      "     Default: (item) => item.name.",
      "     */",
      "    getSearchFields?(item: TItem): string[];",
      "    /** A pure function that gets sorting value for current sorting value */",
      "    sortBy?(item: TItem, sorting: SortingOption): any;",
      "    /** A pure function that returns filter callback to be applied for each item.",
      "     * The callback should return true, if item passed the filter.",
      "     *  */",
      "    getFilter?(filter: TFilter): (item: TItem) => boolean;",
      "    /**",
      "     * Enables sorting of search results by relevance.",
      "     * - The highest priority has records, which have a full match with a search keyword.",
      "     * - The lower one has records, which have a search keyword at the 0 position, but not the full match.",
      "     * - Then, records, which contain a search keyword as a separate word, but not at the beginning.",
      "     * - And the lowest one - any other match of the search keyword.",
      "     *",
      "     * Example:",
      "     * - `search`: 'some'",
      "     * - `record string`: 'some word', `rank` = 4",
      "     * - `record string`: 'someone', `rank` = 3",
      "     * - `record string`: 'I know some guy', `rank` = 2",
      "     * - `record string`: 'awesome', `rank` = 1",
      "     *",
      "     * @default true",
      "     */",
      "    sortSearchByRelevance?: boolean;",
      "}"
     ]
    },
    "props": [
     {
      "uid": 1,
      "name": "getSearchFields",
      "comment": {
       "raw": [
        "A pure function that gets search value for each item.",
        "     Default: (item) => item.name."
       ]
      },
      "typeValue": {
       "raw": "(item: TItem) => string[]"
      },
      "editor": {
       "type": "func"
      },
      "required": false
     },
     {
      "uid": 2,
      "name": "sortBy",
      "comment": {
       "raw": [
        "A pure function that gets sorting value for current sorting value"
       ]
      },
      "typeValue": {
       "raw": "(item: TItem, sorting: SortingOption<any>) => any"
      },
      "editor": {
       "type": "func"
      },
      "required": false
     },
     {
      "uid": 3,
      "name": "getFilter",
      "comment": {
       "raw": [
        "A pure function that returns filter callback to be applied for each item.",
        " The callback should return true, if item passed the filter."
       ]
      },
      "typeValue": {
       "raw": "(filter: TFilter) => (item: TItem) => boolean"
      },
      "editor": {
       "type": "func"
      },
      "required": false
     },
     {
      "uid": 4,
      "name": "sortSearchByRelevance",
      "comment": {
       "raw": [
        "Enables sorting of search results by relevance.",
        " - The highest priority has records, which have a full match with a search keyword.",
        " - The lower one has records, which have a search keyword at the 0 position, but not the full match.",
        " - Then, records, which contain a search keyword as a separate word, but not at the beginning.",
        " - And the lowest one - any other match of the search keyword.",
        "",
        " Example:",
        " - `search`: 'some'",
        " - `record string`: 'some word', `rank` = 4",
        " - `record string`: 'someone', `rank` = 3",
        " - `record string`: 'I know some guy', `rank` = 2",
        " - `record string`: 'awesome', `rank` = 1",
        "",
        " @default true"
       ],
       "tags": {
        "@default": true
       }
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "required": false
     },
     {
      "uid": 5,
      "name": "getId",
      "comment": {
       "raw": [
        "Should return unique ID of the TItem",
        " If omitted, we assume that every TItem has and unique id in its 'id' field.",
        " @param item An item to get ID of"
       ]
      },
      "typeValue": {
       "raw": "(item: TItem) => TId"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:BaseListViewProps",
      "required": false
     },
     {
      "uid": 6,
      "name": "complexIds",
      "comment": {
       "raw": [
        "Set to true, if you use IDs which can't act as javascript Map key (objects or arrays).",
        " In this case, IDs will be internally JSON.stringify-ed to be used as Maps keys."
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:BaseListViewProps",
      "required": false
     },
     {
      "uid": 7,
      "name": "getParentId",
      "comment": {
       "raw": [
        "Should return ID of the Item's parent. Usually it's i => i.parentId.",
        " If specified, Data Source will build items hierarchy.",
        "",
        " Also, it is used by LazyDataSource to pre-fetch missing parents of loaded items. This is required in following cases:",
        " - when a child item is pre-selected, but not yet loaded at start. We need to load it's parent chain",
        "   to highlight parents with selected children",
        " - in flattenSearch mode, we usually want to display a path to each item (e.g. Canada/Ontario/Paris),",
        "   We need to load parents with a separate call (if backend doesn't pre-fetch them)"
       ]
      },
      "typeValue": {
       "raw": "(item: TItem) => TId | undefined"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:BaseListViewProps",
      "required": false
     },
     {
      "uid": 8,
      "name": "rowOptions",
      "comment": {
       "raw": [
        "Specifies if rows are selectable, checkable, draggable, clickable, and more.",
        " See DataRowOptions for more details.",
        " If options depends on the item itself, use getRowOptions.",
        " Specifying both rowOptions and getRowOptions might help to render better loading skeletons: we use only rowOptions in this case, as we haven't loaded an item yet.",
        " Make sure all callbacks are properly memoized, as changing them will trigger re-renders or row, which would impact performance",
        " @param item An item to get options for"
       ]
      },
      "typeValue": {
       "raw": "DataRowOptions<TItem, TId>"
      },
      "from": "@epam/uui-core:BaseListViewProps",
      "required": false
     },
     {
      "uid": 9,
      "name": "getRowOptions",
      "comment": {
       "raw": [
        "For each row, specify if row is selectable, editable, checkable, draggable, clickable, have its own set of columns, and more.",
        " To make rows editable, pass IEditable interface to each row. This works the same way as for other editable components.",
        " See DataRowOptions for more details.",
        " If both getRowOptions and rowOptions specified, we'll use getRowOptions for loaded rows, and rowOptions only for loading rows.",
        " Make sure all callbacks are properly memoized, as changing them will trigger re-renders or row, which would impact performance",
        " @param item An item to get options for"
       ]
      },
      "typeValue": {
       "raw": "(item: TItem, index: number) => DataRowOptions<TItem, TId>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:BaseListViewProps",
      "required": false
     },
     {
      "uid": 10,
      "name": "isFoldedByDefault",
      "comment": {
       "raw": [
        "Can be specified to unfold all or some items at start.",
        " If not specified, all rows would be folded."
       ]
      },
      "typeValue": {
       "raw": "(item: TItem) => boolean"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:BaseListViewProps",
      "required": false
     },
     {
      "uid": 11,
      "name": "cascadeSelection",
      "comment": {
       "raw": [
        "Controls how the selection (checking items) of a parent node affects the selection of its all children, and vice versa.",
        " - false: All nodes are selected independently (default).",
        " - true or 'explicit': Selecting a parent node explicitly selects all its children. Unchecking the last parent's child unchecks its parent.",
        " - 'implicit': Selecting a parent node means that all children are considered checked.",
        "   The user sees all these nodes as checked on the UI, but only the selected parent is visible in the PickerInput tags, and only the checked",
        "   parent is present in the Picker's value or DataSourceState.checked array. When the user unchecks the first child of such a parent,",
        "   its parents become unchecked and all children but the unchecked one become checked, making children's selection explicit. If the last",
        "   unchecked child gets checked, all children from the checked are removed, returning to the implicit state when only the parent is checked."
       ]
      },
      "typeValue": {
       "raw": "boolean | 'implicit' | 'explicit'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        false,
        true,
        "implicit",
        "explicit"
       ]
      },
      "from": "@epam/uui-core:BaseListViewProps",
      "required": false
     },
     {
      "uid": 12,
      "name": "selectAll",
      "comment": {
       "raw": [
        "Enables or disables \"select all\" checkbox. Default is true."
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:BaseListViewProps",
      "required": false
     },
     {
      "uid": 13,
      "name": "backgroundReload",
      "comment": {
       "raw": [
        "Enables background reloading of data on search/sort/filter/reload, which turns off the rows placeholders displaying while data loading.",
        " During data reloading, previous data is displayed. To prevent any interaction with visible not actual rows, a blocker/spinner should be displayed.",
        " In UUI components, such as `PickerInput`, `PickerList`, `PickerModal` and `DataTable`, blockers are added.",
        " It is required to add blockers/spinners to the components, built on your own.",
        " If reloading is started, `view.getListProps` returns `isReloading` flag, set to `true`."
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:BaseListViewProps",
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui-core:BaseDatePickerProps": {
   "summary": {
    "module": "@epam/uui-core",
    "typeName": {
     "name": "BaseDatePickerProps",
     "nameFull": "BaseDatePickerProps"
    },
    "src": "uui-core/src/types/components/datePicker/BaseDatePicker.ts",
    "exported": true
   },
   "details": {
    "kind": 263,
    "typeValue": {
     "raw": "BaseDatePickerProps",
     "print": [
      "interface BaseDatePickerProps extends IEditable<string | null>, ICanFocus<HTMLInputElement>, IDisableable, IHasPlaceholder, ICanBeReadonly, IAnalyticableOnChange<string> {",
      "    /** Date format string, see [dayjs docs](@link https://day.js.org/docs/en/display/format) */",
      "    format?: string;",
      "    /** Filter selectable days. Days, for which this callback returns false - will be disabled */",
      "    filter?(day: Dayjs): boolean;",
      "    /** Overrides rendering of picker Target - component which triggers dropdown. Can be used to attach DatePicker to other components, e.g. Buttons */",
      "    renderTarget?(props: IDropdownToggler): ReactNode;",
      "    /** Defines where to place calendar icon */",
      "    iconPosition?: 'left' | 'right';",
      "    /** Disable clearing date value (e.g. via cross icon) */",
      "    disableClear?: boolean;",
      "    /** Overrides rendering of the single day. For example, to highlight certain days */",
      "    renderDay?: (day: Dayjs, onDayClick: (day: Dayjs) => void) => ReactElement<Element>;",
      "    /** If this function returns true, the day will be highlighted as holiday */",
      "    isHoliday?: (day: Dayjs) => boolean;",
      "    /** Called when component lose focus */",
      "    onBlur?: (e?: React.FocusEvent<HTMLInputElement>) => void;",
      "    /** Dropdown position relative to the input. See [Popper Docs](@link https://popper.js.org/) */",
      "    placement?: Placement;",
      "    /** Any HTML attributes (native or 'data-') to put on date picker parts */",
      "    rawProps?: {",
      "        /** Any HTML attributes (native or 'data-') to put on date picker input */",
      "        input?: IHasRawProps<React.HTMLAttributes<HTMLDivElement>>['rawProps'];",
      "        /** Any HTML attributes (native or 'data-') to put on date picker body */",
      "        body?: IHasRawProps<React.HTMLAttributes<HTMLDivElement>>['rawProps'];",
      "    };",
      "    /** CSS class(es) to put on datepicker input */",
      "    inputCx?: CX;",
      "    /** CSS class(es) to put on datepicker body */",
      "    bodyCx?: CX;",
      "}"
     ]
    },
    "props": [
     {
      "uid": 1,
      "name": "format",
      "comment": {
       "raw": [
        "Date format string, see [dayjs docs](@link https://day.js.org/docs/en/display/format)"
       ]
      },
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "required": false
     },
     {
      "uid": 2,
      "name": "filter",
      "comment": {
       "raw": [
        "Filter selectable days. Days, for which this callback returns false - will be disabled"
       ]
      },
      "typeValue": {
       "raw": "(day: Dayjs) => boolean"
      },
      "editor": {
       "type": "func"
      },
      "required": false
     },
     {
      "uid": 3,
      "name": "renderTarget",
      "comment": {
       "raw": [
        "Overrides rendering of picker Target - component which triggers dropdown. Can be used to attach DatePicker to other components, e.g. Buttons"
       ]
      },
      "typeValue": {
       "raw": "(props: IDropdownToggler) => React.ReactNode"
      },
      "editor": {
       "type": "component"
      },
      "required": false
     },
     {
      "uid": 4,
      "name": "iconPosition",
      "comment": {
       "raw": [
        "Defines where to place calendar icon"
       ]
      },
      "typeValue": {
       "raw": "'left' | 'right'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "left",
        "right"
       ]
      },
      "required": false
     },
     {
      "uid": 5,
      "name": "disableClear",
      "comment": {
       "raw": [
        "Disable clearing date value (e.g. via cross icon)"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "required": false
     },
     {
      "uid": 6,
      "name": "renderDay",
      "comment": {
       "raw": [
        "Overrides rendering of the single day. For example, to highlight certain days"
       ]
      },
      "typeValue": {
       "raw": "(day: Dayjs, onDayClick: (day: Dayjs) => void) => React.ReactElement<Element, string | React.JSXElementConstructor<any>>"
      },
      "editor": {
       "type": "component"
      },
      "required": false
     },
     {
      "uid": 7,
      "name": "isHoliday",
      "comment": {
       "raw": [
        "If this function returns true, the day will be highlighted as holiday"
       ]
      },
      "typeValue": {
       "raw": "(day: Dayjs) => boolean"
      },
      "editor": {
       "type": "func"
      },
      "required": false
     },
     {
      "uid": 8,
      "name": "onBlur",
      "comment": {
       "raw": [
        "Called when component lose focus"
       ]
      },
      "typeValue": {
       "raw": "(e?: React.FocusEvent<HTMLInputElement, Element> | undefined) => void"
      },
      "editor": {
       "type": "func"
      },
      "required": false
     },
     {
      "uid": 9,
      "name": "placement",
      "comment": {
       "raw": [
        "Dropdown position relative to the input. See [Popper Docs](@link https://popper.js.org/)"
       ]
      },
      "typeValue": {
       "raw": "'left' | 'right' | 'auto' | 'auto-start' | 'auto-end' | 'top' | 'bottom' | 'top-start' | 'top-end' | 'bottom-start' | 'bottom-end' | 'right-start' | 'right-end' | 'left-start' | 'left-end'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "left",
        "right",
        "auto",
        "auto-start",
        "auto-end",
        "top",
        "bottom",
        "top-start",
        "top-end",
        "bottom-start",
        "bottom-end",
        "right-start",
        "right-end",
        "left-start",
        "left-end"
       ]
      },
      "required": false
     },
     {
      "uid": 10,
      "name": "rawProps",
      "comment": {
       "raw": [
        "Any HTML attributes (native or 'data-') to put on date picker parts"
       ]
      },
      "typeValue": {
       "raw": "{ input?: (React.HTMLAttributes<HTMLDivElement> & Record<`data-${string}`, string>) | undefined; body?: (React.HTMLAttributes<HTMLDivElement> & Record<`data-${string}`, string>) | undefined; }"
      },
      "required": false
     },
     {
      "uid": 11,
      "name": "inputCx",
      "comment": {
       "raw": [
        "CSS class(es) to put on datepicker input"
       ]
      },
      "typeValue": {
       "raw": "null | string | number | boolean | ClassDictionary | ClassArray"
      },
      "typeValueRef": "@epam/uui-core:ClassValue",
      "required": false
     },
     {
      "uid": 12,
      "name": "bodyCx",
      "comment": {
       "raw": [
        "CSS class(es) to put on datepicker body"
       ]
      },
      "typeValue": {
       "raw": "null | string | number | boolean | ClassDictionary | ClassArray"
      },
      "typeValueRef": "@epam/uui-core:ClassValue",
      "required": false
     },
     {
      "uid": 13,
      "name": "value",
      "comment": {
       "raw": [
        "The current value of component"
       ]
      },
      "typeValue": {
       "raw": "null | string"
      },
      "editor": {
       "type": "string"
      },
      "from": "@epam/uui-core:IEditable",
      "required": true
     },
     {
      "uid": 14,
      "name": "onValueChange",
      "comment": {
       "raw": [
        "Called when value needs to be changed (usually due to user interaction)"
       ]
      },
      "typeValue": {
       "raw": "(newValue: string | null) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IEditable",
      "required": true
     },
     {
      "uid": 15,
      "name": "isInvalid",
      "comment": {
       "raw": [
        "True if component contains invalid input"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:ICanBeInvalid",
      "required": false
     },
     {
      "uid": 16,
      "name": "validationMessage",
      "comment": {
       "raw": [
        "Message describing why the value is invalid"
       ]
      },
      "typeValue": {
       "raw": "null | string | number | boolean | React.ReactElement<any, string | React.JSXElementConstructor<any>> | React.ReactFragment | React.ReactPortal"
      },
      "typeValueRef": "@types/react:ReactNode",
      "from": "@epam/uui-core:ICanBeInvalid",
      "required": false
     },
     {
      "uid": 17,
      "name": "validationProps",
      "comment": {
       "raw": [
        "If T is a complex value (object or array), this property contains validation states of inner items"
       ]
      },
      "typeValue": {
       "raw": "{ [key: string]: ICanBeInvalid; }"
      },
      "from": "@epam/uui-core:ICanBeInvalid",
      "required": false
     },
     {
      "uid": 18,
      "name": "isDisabled",
      "comment": {
       "raw": [
        "Disable editing, and visually de-emphasize value of the component"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:IDisableable",
      "required": false
     },
     {
      "uid": 19,
      "name": "isReadonly",
      "comment": {
       "raw": [
        "Disable editing. Unlike isDisabled, keep component's value readable."
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:ICanBeReadonly",
      "required": false
     },
     {
      "uid": 20,
      "name": "isRequired",
      "comment": {
       "raw": [
        "Marks that component's value is required and shouldn't be empty"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:ICanBeRequired",
      "required": false
     },
     {
      "uid": 21,
      "name": "onFocus",
      "comment": {
       "raw": [
        "Called when component gets input focus"
       ]
      },
      "typeValue": {
       "raw": "(e: React.FocusEvent<HTMLInputElement, Element>) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:ICanFocus",
      "required": false
     },
     {
      "uid": 22,
      "name": "placeholder",
      "comment": {
       "raw": [
        "Placeholder to display when empty"
       ]
      },
      "typeValue": {
       "raw": "any"
      },
      "from": "@epam/uui-core:IHasPlaceholder",
      "required": false
     },
     {
      "uid": 23,
      "name": "getValueChangeAnalyticsEvent",
      "comment": {
       "raw": [
        "Given a value, returns an analytics event to send when component is edited.",
        " See [AnalyticsContext](@link https://uui.epam.com/documents?id=analyticsContext&mode=doc&skin=UUI4_promo&category=contexts)."
       ]
      },
      "typeValue": {
       "raw": "(newValue: string | null, oldValue: string | null) => AnalyticsEvent"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IAnalyticableOnChange",
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui-core:BaseListViewProps": {
   "summary": {
    "module": "@epam/uui-core",
    "typeName": {
     "name": "BaseListViewProps",
     "nameFull": "BaseListViewProps<TItem, TId, TFilter>"
    },
    "src": "uui-core/src/types/dataSources.ts",
    "exported": true
   },
   "details": {
    "kind": 263,
    "typeValue": {
     "raw": "BaseListViewProps<TItem, TId, TFilter>",
     "print": [
      "// eslint-disable-next-line @typescript-eslint/no-unused-vars",
      "interface BaseListViewProps<TItem, TId, TFilter> {",
      "    /**",
      "     * Should return unique ID of the TItem",
      "     * If omitted, we assume that every TItem has and unique id in its 'id' field.",
      "     * @param item An item to get ID of",
      "     */",
      "    getId?(item: TItem): TId;",
      "    /**",
      "     * Set to true, if you use IDs which can't act as javascript Map key (objects or arrays).",
      "     * In this case, IDs will be internally JSON.stringify-ed to be used as Maps keys.",
      "     */",
      "    complexIds?: boolean;",
      "    /** Should return ID of the Item's parent. Usually it's i => i.parentId.",
      "     * If specified, Data Source will build items hierarchy.",
      "     *",
      "     * Also, it is used by LazyDataSource to pre-fetch missing parents of loaded items. This is required in following cases:",
      "     * - when a child item is pre-selected, but not yet loaded at start. We need to load it's parent chain",
      "     *   to highlight parents with selected children",
      "     * - in flattenSearch mode, we usually want to display a path to each item (e.g. Canada/Ontario/Paris),",
      "     *   We need to load parents with a separate call (if backend doesn't pre-fetch them)",
      "     */",
      "    getParentId?(item: TItem): TId | undefined;",
      "    /**",
      "     * Specifies if rows are selectable, checkable, draggable, clickable, and more.",
      "     * See DataRowOptions for more details.",
      "     * If options depends on the item itself, use getRowOptions.",
      "     * Specifying both rowOptions and getRowOptions might help to render better loading skeletons: we use only rowOptions in this case, as we haven't loaded an item yet.",
      "     * Make sure all callbacks are properly memoized, as changing them will trigger re-renders or row, which would impact performance",
      "     * @param item An item to get options for",
      "     */",
      "    rowOptions?: DataRowOptions<TItem, TId>;",
      "    /**",
      "     * For each row, specify if row is selectable, editable, checkable, draggable, clickable, have its own set of columns, and more.",
      "     * To make rows editable, pass IEditable interface to each row. This works the same way as for other editable components.",
      "     * See DataRowOptions for more details.",
      "     * If both getRowOptions and rowOptions specified, we'll use getRowOptions for loaded rows, and rowOptions only for loading rows.",
      "     * Make sure all callbacks are properly memoized, as changing them will trigger re-renders or row, which would impact performance",
      "     * @param item An item to get options for",
      "     */",
      "    getRowOptions?(item: TItem, index: number): DataRowOptions<TItem, TId>;",
      "    /**",
      "     * Can be specified to unfold all or some items at start.",
      "     * If not specified, all rows would be folded.",
      "     */",
      "    isFoldedByDefault?(item: TItem): boolean;",
      "    /**",
      "     * Controls how the selection (checking items) of a parent node affects the selection of its all children, and vice versa.",
      "     * - false: All nodes are selected independently (default).",
      "     * - true or 'explicit': Selecting a parent node explicitly selects all its children. Unchecking the last parent's child unchecks its parent.",
      "     * - 'implicit': Selecting a parent node means that all children are considered checked.",
      "     *   The user sees all these nodes as checked on the UI, but only the selected parent is visible in the PickerInput tags, and only the checked",
      "     *   parent is present in the Picker's value or DataSourceState.checked array. When the user unchecks the first child of such a parent,",
      "     *   its parents become unchecked and all children but the unchecked one become checked, making children's selection explicit. If the last",
      "     *   unchecked child gets checked, all children from the checked are removed, returning to the implicit state when only the parent is checked.",
      "     */",
      "    cascadeSelection?: CascadeSelection;",
      "    /**",
      "     * Enables or disables \"select all\" checkbox. Default is true.",
      "     */",
      "    selectAll?: true | false;",
      "    /**",
      "     * Enables background reloading of data on search/sort/filter/reload, which turns off the rows placeholders displaying while data loading.",
      "     * During data reloading, previous data is displayed. To prevent any interaction with visible not actual rows, a blocker/spinner should be displayed.",
      "     * In UUI components, such as `PickerInput`, `PickerList`, `PickerModal` and `DataTable`, blockers are added.",
      "     * It is required to add blockers/spinners to the components, built on your own.",
      "     * If reloading is started, `view.getListProps` returns `isReloading` flag, set to `true`.",
      "     */",
      "    backgroundReload?: boolean;",
      "}"
     ]
    },
    "props": [
     {
      "uid": 1,
      "name": "getId",
      "comment": {
       "raw": [
        "Should return unique ID of the TItem",
        " If omitted, we assume that every TItem has and unique id in its 'id' field.",
        " @param item An item to get ID of"
       ]
      },
      "typeValue": {
       "raw": "(item: TItem) => TId"
      },
      "editor": {
       "type": "func"
      },
      "required": false
     },
     {
      "uid": 2,
      "name": "complexIds",
      "comment": {
       "raw": [
        "Set to true, if you use IDs which can't act as javascript Map key (objects or arrays).",
        " In this case, IDs will be internally JSON.stringify-ed to be used as Maps keys."
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "required": false
     },
     {
      "uid": 3,
      "name": "getParentId",
      "comment": {
       "raw": [
        "Should return ID of the Item's parent. Usually it's i => i.parentId.",
        " If specified, Data Source will build items hierarchy.",
        "",
        " Also, it is used by LazyDataSource to pre-fetch missing parents of loaded items. This is required in following cases:",
        " - when a child item is pre-selected, but not yet loaded at start. We need to load it's parent chain",
        "   to highlight parents with selected children",
        " - in flattenSearch mode, we usually want to display a path to each item (e.g. Canada/Ontario/Paris),",
        "   We need to load parents with a separate call (if backend doesn't pre-fetch them)"
       ]
      },
      "typeValue": {
       "raw": "(item: TItem) => TId | undefined"
      },
      "editor": {
       "type": "func"
      },
      "required": false
     },
     {
      "uid": 4,
      "name": "rowOptions",
      "comment": {
       "raw": [
        "Specifies if rows are selectable, checkable, draggable, clickable, and more.",
        " See DataRowOptions for more details.",
        " If options depends on the item itself, use getRowOptions.",
        " Specifying both rowOptions and getRowOptions might help to render better loading skeletons: we use only rowOptions in this case, as we haven't loaded an item yet.",
        " Make sure all callbacks are properly memoized, as changing them will trigger re-renders or row, which would impact performance",
        " @param item An item to get options for"
       ]
      },
      "typeValue": {
       "raw": "DataRowOptions<TItem, TId>"
      },
      "required": false
     },
     {
      "uid": 5,
      "name": "getRowOptions",
      "comment": {
       "raw": [
        "For each row, specify if row is selectable, editable, checkable, draggable, clickable, have its own set of columns, and more.",
        " To make rows editable, pass IEditable interface to each row. This works the same way as for other editable components.",
        " See DataRowOptions for more details.",
        " If both getRowOptions and rowOptions specified, we'll use getRowOptions for loaded rows, and rowOptions only for loading rows.",
        " Make sure all callbacks are properly memoized, as changing them will trigger re-renders or row, which would impact performance",
        " @param item An item to get options for"
       ]
      },
      "typeValue": {
       "raw": "(item: TItem, index: number) => DataRowOptions<TItem, TId>"
      },
      "editor": {
       "type": "func"
      },
      "required": false
     },
     {
      "uid": 6,
      "name": "isFoldedByDefault",
      "comment": {
       "raw": [
        "Can be specified to unfold all or some items at start.",
        " If not specified, all rows would be folded."
       ]
      },
      "typeValue": {
       "raw": "(item: TItem) => boolean"
      },
      "editor": {
       "type": "func"
      },
      "required": false
     },
     {
      "uid": 7,
      "name": "cascadeSelection",
      "comment": {
       "raw": [
        "Controls how the selection (checking items) of a parent node affects the selection of its all children, and vice versa.",
        " - false: All nodes are selected independently (default).",
        " - true or 'explicit': Selecting a parent node explicitly selects all its children. Unchecking the last parent's child unchecks its parent.",
        " - 'implicit': Selecting a parent node means that all children are considered checked.",
        "   The user sees all these nodes as checked on the UI, but only the selected parent is visible in the PickerInput tags, and only the checked",
        "   parent is present in the Picker's value or DataSourceState.checked array. When the user unchecks the first child of such a parent,",
        "   its parents become unchecked and all children but the unchecked one become checked, making children's selection explicit. If the last",
        "   unchecked child gets checked, all children from the checked are removed, returning to the implicit state when only the parent is checked."
       ]
      },
      "typeValue": {
       "raw": "boolean | 'implicit' | 'explicit'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        false,
        true,
        "implicit",
        "explicit"
       ]
      },
      "required": false
     },
     {
      "uid": 8,
      "name": "selectAll",
      "comment": {
       "raw": [
        "Enables or disables \"select all\" checkbox. Default is true."
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "required": false
     },
     {
      "uid": 9,
      "name": "backgroundReload",
      "comment": {
       "raw": [
        "Enables background reloading of data on search/sort/filter/reload, which turns off the rows placeholders displaying while data loading.",
        " During data reloading, previous data is displayed. To prevent any interaction with visible not actual rows, a blocker/spinner should be displayed.",
        " In UUI components, such as `PickerInput`, `PickerList`, `PickerModal` and `DataTable`, blockers are added.",
        " It is required to add blockers/spinners to the components, built on your own.",
        " If reloading is started, `view.getListProps` returns `isReloading` flag, set to `true`."
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui-core:BaseRangeDatePickerProps": {
   "summary": {
    "module": "@epam/uui-core",
    "typeName": {
     "name": "BaseRangeDatePickerProps",
     "nameFull": "BaseRangeDatePickerProps"
    },
    "src": "uui-core/src/types/components/datePicker/BaseRangeDatePicker.ts",
    "exported": true
   },
   "details": {
    "kind": 263,
    "typeValue": {
     "raw": "BaseRangeDatePickerProps",
     "print": [
      "interface BaseRangeDatePickerProps extends IEditable<RangeDatePickerValue>, IDisableable, ICanBeReadonly, IAnalyticableOnChange<RangeDatePickerValue> {",
      "    /** Date format string, see [dayjs docs](@link https://day.js.org/docs/en/display/format) */",
      "    format?: string;",
      "    /** Filter selectable days. Days, for which this callback returns false - will be disabled */",
      "    filter?(day: Dayjs): boolean;",
      "    /** Overrides rendering of picker Target - component which triggers dropdown. Can be used to attach RangeDatePicker to other components, e.g. Buttons */",
      "    renderTarget?(props: IDropdownToggler): ReactNode;",
      "    /** Allows to add a custom footer to the Picker's dropdown body */",
      "    renderFooter?(value: RangeDatePickerValue): ReactNode;",
      "    /** Overrides rendering of the single day. For example, to highlight certain days */",
      "    renderDay?: (day: Dayjs, onDayClick: (day: Dayjs) => void) => ReactElement<Element>;",
      "    /**",
      "     * Range presets (like 'this week', 'this month', etc.) to display at the right of the Picker's body.",
      "     * UUI provides defaults in the 'rangeDatePickerPresets' exported variable - you can use it as is, or build on top of it (e.g. add your presets)",
      "     */",
      "    presets?: RangeDatePickerPresets;",
      "    /**",
      "     * Disables clearing component (with the cross icon)",
      "     * @default false",
      "     */",
      "    disableClear?: boolean;",
      "    /**",
      "     * Dropdown position relative to the input. See [Popper Docs](@link https://popper.js.org/)",
      "     * @default 'bottom-start'",
      "     */",
      "    placement?: Placement;",
      "    /** If this function returns true, the day will be highlighted as holiday */",
      "    isHoliday?: (day: Dayjs) => boolean;",
      "    /** Called when component gets input focus */",
      "    onFocus?: (e: React.FocusEvent<HTMLInputElement>, inputType: 'from' | 'to') => void;",
      "    /** Called when component looses input focus */",
      "    onBlur?: (e: React.FocusEvent<HTMLInputElement>, inputType: 'from' | 'to') => void;",
      "    /** Called when component is opened/closed */",
      "    onOpenChange?: (isOpen: boolean) => void;",
      "    /** rawProps as HTML attributes */",
      "    rawProps?: {",
      "        from?: IHasRawProps<React.HTMLAttributes<HTMLDivElement>>['rawProps'];",
      "        to?: IHasRawProps<React.HTMLAttributes<HTMLDivElement>>['rawProps'];",
      "        body?: IHasRawProps<React.HTMLAttributes<HTMLDivElement>>['rawProps'];",
      "    };",
      "    /** Styles for input and body components in RangeDatePicker */",
      "    inputCx?: CX;",
      "    bodyCx?: CX;",
      "}"
     ]
    },
    "props": [
     {
      "uid": 1,
      "name": "format",
      "comment": {
       "raw": [
        "Date format string, see [dayjs docs](@link https://day.js.org/docs/en/display/format)"
       ]
      },
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "required": false
     },
     {
      "uid": 2,
      "name": "filter",
      "comment": {
       "raw": [
        "Filter selectable days. Days, for which this callback returns false - will be disabled"
       ]
      },
      "typeValue": {
       "raw": "(day: Dayjs) => boolean"
      },
      "editor": {
       "type": "func"
      },
      "required": false
     },
     {
      "uid": 3,
      "name": "renderTarget",
      "comment": {
       "raw": [
        "Overrides rendering of picker Target - component which triggers dropdown. Can be used to attach RangeDatePicker to other components, e.g. Buttons"
       ]
      },
      "typeValue": {
       "raw": "(props: IDropdownToggler) => React.ReactNode"
      },
      "editor": {
       "type": "component"
      },
      "required": false
     },
     {
      "uid": 4,
      "name": "renderFooter",
      "comment": {
       "raw": [
        "Allows to add a custom footer to the Picker's dropdown body"
       ]
      },
      "typeValue": {
       "raw": "(value: RangeDatePickerValue) => React.ReactNode"
      },
      "editor": {
       "type": "component"
      },
      "required": false
     },
     {
      "uid": 5,
      "name": "renderDay",
      "comment": {
       "raw": [
        "Overrides rendering of the single day. For example, to highlight certain days"
       ]
      },
      "typeValue": {
       "raw": "(day: Dayjs, onDayClick: (day: Dayjs) => void) => React.ReactElement<Element, string | React.JSXElementConstructor<any>>"
      },
      "editor": {
       "type": "component"
      },
      "required": false
     },
     {
      "uid": 6,
      "name": "presets",
      "comment": {
       "raw": [
        "Range presets (like 'this week', 'this month', etc.) to display at the right of the Picker's body.",
        " UUI provides defaults in the 'rangeDatePickerPresets' exported variable - you can use it as is, or build on top of it (e.g. add your presets)"
       ]
      },
      "typeValue": {
       "raw": "RangeDatePickerPresets"
      },
      "required": false
     },
     {
      "uid": 7,
      "name": "disableClear",
      "comment": {
       "raw": [
        "Disables clearing component (with the cross icon)",
        " @default false"
       ],
       "tags": {
        "@default": false
       }
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "required": false
     },
     {
      "uid": 8,
      "name": "placement",
      "comment": {
       "raw": [
        "Dropdown position relative to the input. See [Popper Docs](@link https://popper.js.org/)",
        " @default 'bottom-start'"
       ],
       "tags": {
        "@default": "bottom-start"
       }
      },
      "typeValue": {
       "raw": "'left' | 'right' | 'auto' | 'auto-start' | 'auto-end' | 'top' | 'bottom' | 'top-start' | 'top-end' | 'bottom-start' | 'bottom-end' | 'right-start' | 'right-end' | 'left-start' | 'left-end'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "left",
        "right",
        "auto",
        "auto-start",
        "auto-end",
        "top",
        "bottom",
        "top-start",
        "top-end",
        "bottom-start",
        "bottom-end",
        "right-start",
        "right-end",
        "left-start",
        "left-end"
       ]
      },
      "required": false
     },
     {
      "uid": 9,
      "name": "isHoliday",
      "comment": {
       "raw": [
        "If this function returns true, the day will be highlighted as holiday"
       ]
      },
      "typeValue": {
       "raw": "(day: Dayjs) => boolean"
      },
      "editor": {
       "type": "func"
      },
      "required": false
     },
     {
      "uid": 10,
      "name": "onFocus",
      "comment": {
       "raw": [
        "Called when component gets input focus"
       ]
      },
      "typeValue": {
       "raw": "(e: React.FocusEvent<HTMLInputElement, Element>, inputType: 'from' | 'to') => void"
      },
      "editor": {
       "type": "func"
      },
      "required": false
     },
     {
      "uid": 11,
      "name": "onBlur",
      "comment": {
       "raw": [
        "Called when component looses input focus"
       ]
      },
      "typeValue": {
       "raw": "(e: React.FocusEvent<HTMLInputElement, Element>, inputType: 'from' | 'to') => void"
      },
      "editor": {
       "type": "func"
      },
      "required": false
     },
     {
      "uid": 12,
      "name": "onOpenChange",
      "comment": {
       "raw": [
        "Called when component is opened/closed"
       ]
      },
      "typeValue": {
       "raw": "(isOpen: boolean) => void"
      },
      "editor": {
       "type": "func"
      },
      "required": false
     },
     {
      "uid": 13,
      "name": "rawProps",
      "comment": {
       "raw": [
        "rawProps as HTML attributes"
       ]
      },
      "typeValue": {
       "raw": "{ from?: (React.HTMLAttributes<HTMLDivElement> & Record<`data-${string}`, string>) | undefined; to?: (React.HTMLAttributes<HTMLDivElement> & Record<`data-${string}`, string>) | undefined; body?: (React.HTMLAttributes<HTMLDivElement> & Record<`data-${string}`, string>) | undefined; }"
      },
      "required": false
     },
     {
      "uid": 14,
      "name": "inputCx",
      "comment": {
       "raw": [
        "Styles for input and body components in RangeDatePicker"
       ]
      },
      "typeValue": {
       "raw": "null | string | number | boolean | ClassDictionary | ClassArray"
      },
      "typeValueRef": "@epam/uui-core:ClassValue",
      "required": false
     },
     {
      "uid": 15,
      "name": "bodyCx",
      "typeValue": {
       "raw": "null | string | number | boolean | ClassDictionary | ClassArray"
      },
      "typeValueRef": "@epam/uui-core:ClassValue",
      "required": false
     },
     {
      "uid": 16,
      "name": "value",
      "comment": {
       "raw": [
        "The current value of component"
       ]
      },
      "typeValue": {
       "raw": "RangeDatePickerValue"
      },
      "from": "@epam/uui-core:IEditable",
      "required": true
     },
     {
      "uid": 17,
      "name": "onValueChange",
      "comment": {
       "raw": [
        "Called when value needs to be changed (usually due to user interaction)"
       ]
      },
      "typeValue": {
       "raw": "(newValue: RangeDatePickerValue) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IEditable",
      "required": true
     },
     {
      "uid": 18,
      "name": "isInvalid",
      "comment": {
       "raw": [
        "True if component contains invalid input"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:ICanBeInvalid",
      "required": false
     },
     {
      "uid": 19,
      "name": "validationMessage",
      "comment": {
       "raw": [
        "Message describing why the value is invalid"
       ]
      },
      "typeValue": {
       "raw": "null | string | number | boolean | React.ReactElement<any, string | React.JSXElementConstructor<any>> | React.ReactFragment | React.ReactPortal"
      },
      "typeValueRef": "@types/react:ReactNode",
      "from": "@epam/uui-core:ICanBeInvalid",
      "required": false
     },
     {
      "uid": 20,
      "name": "validationProps",
      "comment": {
       "raw": [
        "If T is a complex value (object or array), this property contains validation states of inner items"
       ]
      },
      "typeValue": {
       "raw": "{ [key: string]: ICanBeInvalid; }"
      },
      "from": "@epam/uui-core:ICanBeInvalid",
      "required": false
     },
     {
      "uid": 21,
      "name": "isDisabled",
      "comment": {
       "raw": [
        "Disable editing, and visually de-emphasize value of the component"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:IDisableable",
      "required": false
     },
     {
      "uid": 22,
      "name": "isReadonly",
      "comment": {
       "raw": [
        "Disable editing. Unlike isDisabled, keep component's value readable."
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:ICanBeReadonly",
      "required": false
     },
     {
      "uid": 23,
      "name": "isRequired",
      "comment": {
       "raw": [
        "Marks that component's value is required and shouldn't be empty"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:ICanBeRequired",
      "required": false
     },
     {
      "uid": 24,
      "name": "getValueChangeAnalyticsEvent",
      "comment": {
       "raw": [
        "Given a value, returns an analytics event to send when component is edited.",
        " See [AnalyticsContext](@link https://uui.epam.com/documents?id=analyticsContext&mode=doc&skin=UUI4_promo&category=contexts)."
       ]
      },
      "typeValue": {
       "raw": "(newValue: RangeDatePickerValue | null, oldValue: RangeDatePickerValue | null) => AnalyticsEvent"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IAnalyticableOnChange",
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui-core:BatchPromiseOptions": {
   "summary": {
    "module": "@epam/uui-core",
    "typeName": {
     "name": "BatchPromiseOptions",
     "nameFull": "BatchPromiseOptions"
    },
    "src": "uui-core/src/helpers/batch.ts",
    "exported": true
   },
   "details": {
    "kind": 263,
    "typeValue": {
     "raw": "BatchPromiseOptions",
     "print": [
      "interface BatchPromiseOptions {",
      "    /** Minimum time (in ms) to pass after the last call, before triggering the batch */",
      "    throttleMs?: number;",
      "}"
     ]
    },
    "props": [
     {
      "uid": 1,
      "name": "throttleMs",
      "comment": {
       "raw": [
        "Minimum time (in ms) to pass after the last call, before triggering the batch"
       ]
      },
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui-core:BlockTypes": {
   "summary": {
    "module": "@epam/uui-core",
    "typeName": {
     "name": "BlockTypes",
     "nameFull": "BlockTypes"
    },
    "src": "uui-core/src/services/ApiContext.ts",
    "exported": true
   },
   "details": {
    "kind": 264,
    "typeValue": {
     "raw": "'attachment' | 'iframe' | 'image'",
     "print": [
      "type BlockTypes = 'attachment' | 'iframe' | 'image';"
     ]
    }
   }
  },
  "@epam/uui-core:ButtonBaseCoreProps": {
   "summary": {
    "module": "@epam/uui-core",
    "typeName": {
     "name": "ButtonBaseCoreProps",
     "nameFull": "ButtonBaseCoreProps"
    },
    "src": "uui-core/src/types/components/Button.ts",
    "exported": true
   },
   "details": {
    "kind": 263,
    "typeValue": {
     "raw": "ButtonBaseCoreProps",
     "print": [
      "interface ButtonBaseCoreProps extends IHasCX, IClickable, ICanRedirect, IDisableable, IHasIcon, IAnalyticableClick, IHasTabIndex, IHasRawProps<React.ButtonHTMLAttributes<HTMLButtonElement>> {",
      "}"
     ]
    },
    "props": [
     {
      "uid": 1,
      "name": "cx",
      "comment": {
       "raw": [
        "CSS class(es) to put on component's root. See {@link https://github.com/JedWatson/classnames#usage} for details"
       ]
      },
      "typeValue": {
       "raw": "null | string | number | boolean | ClassDictionary | ClassArray"
      },
      "typeValueRef": "@epam/uui-core:ClassValue",
      "from": "@epam/uui-core:IHasCX",
      "required": false
     },
     {
      "uid": 2,
      "name": "onClick",
      "comment": {
       "raw": [
        "Called when component is clicked"
       ]
      },
      "typeValue": {
       "raw": "(e?: any) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IClickable",
      "required": false
     },
     {
      "uid": 3,
      "name": "link",
      "comment": {
       "raw": [
        "Link object to redirect to for SPA-redirects"
       ]
      },
      "typeValue": {
       "raw": "Link"
      },
      "from": "@epam/uui-core:ICanRedirect",
      "required": false
     },
     {
      "uid": 4,
      "name": "href",
      "comment": {
       "raw": [
        "Href (URL) to redirect to, for non-SPA redirects"
       ]
      },
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "from": "@epam/uui-core:ICanRedirect",
      "required": false
     },
     {
      "uid": 5,
      "name": "isLinkActive",
      "comment": {
       "raw": [
        "Highlights component to show that link is active (browser is displaying the page to which link is pointing)"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:ICanRedirect",
      "required": false
     },
     {
      "uid": 6,
      "name": "target",
      "comment": {
       "raw": [
        "Controls where the link should be opened"
       ]
      },
      "typeValue": {
       "raw": "'_blank'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "_blank"
       ]
      },
      "from": "@epam/uui-core:ICanRedirect",
      "required": false
     },
     {
      "uid": 7,
      "name": "isDisabled",
      "comment": {
       "raw": [
        "Disable editing, and visually de-emphasize value of the component"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:IDisableable",
      "required": false
     },
     {
      "uid": 8,
      "name": "icon",
      "comment": {
       "raw": [
        "Icon can be a React element (usually an SVG element)"
       ]
      },
      "typeValue": {
       "raw": "Icon"
      },
      "editor": {
       "type": "component"
      },
      "from": "@epam/uui-core:IHasIcon",
      "required": false
     },
     {
      "uid": 9,
      "name": "iconPosition",
      "comment": {
       "raw": [
        "Position of the icon (left of right)"
       ]
      },
      "typeValue": {
       "raw": "'left' | 'right'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "left",
        "right"
       ]
      },
      "from": "@epam/uui-core:IHasIcon",
      "required": false
     },
     {
      "uid": 10,
      "name": "onIconClick",
      "comment": {
       "raw": [
        "Click handler for the icon"
       ]
      },
      "typeValue": {
       "raw": "() => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IHasIcon",
      "required": false
     },
     {
      "uid": 11,
      "name": "clickAnalyticsEvent",
      "comment": {
       "raw": [
        "An analytics event to send (via AnalyticsContext) when component is clicked.",
        " See [AnalyticsContext](@link https://uui.epam.com/documents?id=analyticsContext&mode=doc&skin=UUI4_promo&category=contexts)."
       ]
      },
      "typeValue": {
       "raw": "null | { [key: string]: any; name: string; }"
      },
      "from": "@epam/uui-core:IAnalyticableClick",
      "required": false
     },
     {
      "uid": 12,
      "name": "tabIndex",
      "comment": {
       "raw": [
        "Controls the order of keyboard navigation between components"
       ]
      },
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "from": "@epam/uui-core:IHasTabIndex",
      "required": false
     },
     {
      "uid": 13,
      "name": "rawProps",
      "comment": {
       "raw": [
        "Any HTML attributes (native or 'data-') to put on the underlying component"
       ]
      },
      "typeValue": {
       "raw": "React.ButtonHTMLAttributes<HTMLButtonElement> & Record<`data-${string}`, string>"
      },
      "from": "@epam/uui-core:IHasRawProps",
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui-core:ButtonCoreProps": {
   "summary": {
    "module": "@epam/uui-core",
    "typeName": {
     "name": "ButtonCoreProps",
     "nameFull": "ButtonCoreProps"
    },
    "src": "uui-core/src/types/components/Button.ts",
    "exported": true
   },
   "details": {
    "kind": 263,
    "typeValue": {
     "raw": "ButtonCoreProps",
     "print": [
      "interface ButtonCoreProps extends ButtonBaseCoreProps, IHasCaption, IBasicPickerToggler, IDropdownToggler {",
      "    /** Icon for drop-down toggler */",
      "    dropdownIcon?: Icon;",
      "    /** Position of the dropdown icon ('left' of 'right') */",
      "    dropdownIconPosition?: 'left' | 'right';",
      "    count?: React.ReactNode;",
      "}"
     ]
    },
    "props": [
     {
      "uid": 1,
      "name": "dropdownIcon",
      "comment": {
       "raw": [
        "Icon for drop-down toggler"
       ]
      },
      "typeValue": {
       "raw": "Icon"
      },
      "editor": {
       "type": "component"
      },
      "required": false
     },
     {
      "uid": 2,
      "name": "dropdownIconPosition",
      "comment": {
       "raw": [
        "Position of the dropdown icon ('left' of 'right')"
       ]
      },
      "typeValue": {
       "raw": "'left' | 'right'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "left",
        "right"
       ]
      },
      "required": false
     },
     {
      "uid": 3,
      "name": "count",
      "typeValue": {
       "raw": "null | string | number | boolean | React.ReactElement<any, string | React.JSXElementConstructor<any>> | React.ReactFragment | React.ReactPortal"
      },
      "typeValueRef": "@types/react:ReactNode",
      "required": false
     },
     {
      "uid": 4,
      "name": "cx",
      "comment": {
       "raw": [
        "CSS class(es) to put on component's root. See {@link https://github.com/JedWatson/classnames#usage} for details"
       ]
      },
      "typeValue": {
       "raw": "null | string | number | boolean | ClassDictionary | ClassArray"
      },
      "typeValueRef": "@epam/uui-core:ClassValue",
      "from": "@epam/uui-core:IHasCX",
      "required": false
     },
     {
      "uid": 5,
      "name": "onClick",
      "comment": {
       "raw": [
        "Called when component is clicked"
       ]
      },
      "typeValue": {
       "raw": "(e?: any) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IClickable",
      "required": false
     },
     {
      "uid": 6,
      "name": "link",
      "comment": {
       "raw": [
        "Link object to redirect to for SPA-redirects"
       ]
      },
      "typeValue": {
       "raw": "Link"
      },
      "from": "@epam/uui-core:ICanRedirect",
      "required": false
     },
     {
      "uid": 7,
      "name": "href",
      "comment": {
       "raw": [
        "Href (URL) to redirect to, for non-SPA redirects"
       ]
      },
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "from": "@epam/uui-core:ICanRedirect",
      "required": false
     },
     {
      "uid": 8,
      "name": "isLinkActive",
      "comment": {
       "raw": [
        "Highlights component to show that link is active (browser is displaying the page to which link is pointing)"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:ICanRedirect",
      "required": false
     },
     {
      "uid": 9,
      "name": "target",
      "comment": {
       "raw": [
        "Controls where the link should be opened"
       ]
      },
      "typeValue": {
       "raw": "'_blank'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "_blank"
       ]
      },
      "from": "@epam/uui-core:ICanRedirect",
      "required": false
     },
     {
      "uid": 10,
      "name": "isDisabled",
      "comment": {
       "raw": [
        "Disable editing, and visually de-emphasize value of the component"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:IDisableable",
      "required": false
     },
     {
      "uid": 11,
      "name": "icon",
      "comment": {
       "raw": [
        "Icon can be a React element (usually an SVG element)"
       ]
      },
      "typeValue": {
       "raw": "Icon"
      },
      "editor": {
       "type": "component"
      },
      "from": "@epam/uui-core:IHasIcon",
      "required": false
     },
     {
      "uid": 12,
      "name": "iconPosition",
      "comment": {
       "raw": [
        "Position of the icon (left of right)"
       ]
      },
      "typeValue": {
       "raw": "'left' | 'right'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "left",
        "right"
       ]
      },
      "from": "@epam/uui-core:IHasIcon",
      "required": false
     },
     {
      "uid": 13,
      "name": "onIconClick",
      "comment": {
       "raw": [
        "Click handler for the icon"
       ]
      },
      "typeValue": {
       "raw": "() => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IHasIcon",
      "required": false
     },
     {
      "uid": 14,
      "name": "clickAnalyticsEvent",
      "comment": {
       "raw": [
        "An analytics event to send (via AnalyticsContext) when component is clicked.",
        " See [AnalyticsContext](@link https://uui.epam.com/documents?id=analyticsContext&mode=doc&skin=UUI4_promo&category=contexts)."
       ]
      },
      "typeValue": {
       "raw": "null | { [key: string]: any; name: string; }"
      },
      "from": "@epam/uui-core:IAnalyticableClick",
      "required": false
     },
     {
      "uid": 15,
      "name": "tabIndex",
      "comment": {
       "raw": [
        "Controls the order of keyboard navigation between components"
       ]
      },
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "from": "@epam/uui-core:IHasTabIndex",
      "required": false
     },
     {
      "uid": 16,
      "name": "rawProps",
      "comment": {
       "raw": [
        "Any HTML attributes (native or 'data-') to put on the underlying component"
       ]
      },
      "typeValue": {
       "raw": "React.ButtonHTMLAttributes<HTMLButtonElement> & Record<`data-${string}`, string>"
      },
      "from": "@epam/uui-core:IHasRawProps",
      "required": false
     },
     {
      "uid": 17,
      "name": "caption",
      "comment": {
       "raw": [
        "Caption. Can be a string, or React.Elements. Certain components supports minimal markup (<b>,<i>,<a>) in captions."
       ]
      },
      "typeValue": {
       "raw": "any"
      },
      "from": "@epam/uui-core:IHasCaption",
      "required": false
     },
     {
      "uid": 18,
      "name": "onClear",
      "comment": {
       "raw": [
        "Call to clear toggler value"
       ]
      },
      "typeValue": {
       "raw": "(e?: any) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IBasicPickerToggler",
      "required": false
     },
     {
      "uid": 19,
      "name": "isOpen",
      "comment": {
       "raw": [
        "When isDropdown=true, indicate that dropdown is open with chevron icon"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:IDropdownToggler",
      "required": false
     },
     {
      "uid": 20,
      "name": "isDropdown",
      "comment": {
       "raw": [
        "Shows chevron icon, enabling component to act as dropdown toggler"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:IDropdownToggler",
      "required": false
     },
     {
      "uid": 21,
      "name": "toggleDropdownOpening",
      "comment": {
       "raw": [
        "Called when associated dropdown should open or close"
       ]
      },
      "typeValue": {
       "raw": "(value: boolean) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IDropdownToggler",
      "required": false
     },
     {
      "uid": 22,
      "name": "isInteractedOutside",
      "comment": {
       "raw": [
        "Called when component is interacted outside, to close the dropdown"
       ]
      },
      "typeValue": {
       "raw": "(event: Event) => boolean"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IDropdownToggler",
      "required": false
     },
     {
      "uid": 23,
      "name": "ref",
      "comment": {
       "raw": [
        "Component's ref"
       ]
      },
      "typeValue": {
       "raw": "null | (instance: any) => void | React.RefObject<any>"
      },
      "from": "@epam/uui-core:IDropdownToggler",
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui-core:ButtonSemanticProps": {
   "summary": {
    "module": "@epam/uui-core",
    "typeName": {
     "name": "ButtonSemanticProps",
     "nameFull": "ButtonSemanticProps"
    },
    "src": "uui-core/src/types/components/Button.ts",
    "exported": true
   },
   "details": {
    "kind": 263,
    "typeValue": {
     "raw": "ButtonSemanticProps",
     "print": [
      "interface ButtonSemanticProps {",
      "    type?: 'success' | 'cancel' | 'action';",
      "}"
     ]
    },
    "props": [
     {
      "uid": 1,
      "name": "type",
      "typeValue": {
       "raw": "'success' | 'cancel' | 'action'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "success",
        "cancel",
        "action"
       ]
      },
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui-core:CascadeSelection": {
   "summary": {
    "module": "@epam/uui-core",
    "typeName": {
     "name": "CascadeSelection",
     "nameFull": "CascadeSelection"
    },
    "src": "uui-core/src/types/dataSources.ts",
    "exported": true
   },
   "details": {
    "kind": 264,
    "typeValue": {
     "raw": "boolean | 'implicit' | 'explicit'",
     "print": [
      "type CascadeSelection = boolean | typeof CascadeSelectionTypes.EXPLICIT | typeof CascadeSelectionTypes.IMPLICIT;"
     ]
    }
   }
  },
  "@epam/uui-core:CheckboxCoreProps": {
   "summary": {
    "module": "@epam/uui-core",
    "typeName": {
     "name": "CheckboxCoreProps",
     "nameFull": "CheckboxCoreProps"
    },
    "src": "uui-core/src/types/components/Checkbox.ts",
    "exported": true
   },
   "details": {
    "kind": 263,
    "typeValue": {
     "raw": "CheckboxCoreProps",
     "print": [
      "interface CheckboxCoreProps extends ICheckable, ICanFocus<HTMLInputElement>, IHasCX, ICanBeInvalid, IHasLabel, ICanBeReadonly, IAnalyticableOnChange<boolean>, IHasRawProps<React.LabelHTMLAttributes<HTMLLabelElement>>, IHasForwardedRef<HTMLLabelElement> {",
      "}"
     ]
    },
    "props": [
     {
      "uid": 1,
      "name": "value",
      "comment": {
       "raw": [
        "The current value of component"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:IEditable",
      "required": true
     },
     {
      "uid": 2,
      "name": "onValueChange",
      "comment": {
       "raw": [
        "Called when value needs to be changed (usually due to user interaction)"
       ]
      },
      "typeValue": {
       "raw": "(newValue: boolean) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IEditable",
      "required": true
     },
     {
      "uid": 3,
      "name": "isInvalid",
      "comment": {
       "raw": [
        "True if component contains invalid input"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:ICanBeInvalid",
      "required": false
     },
     {
      "uid": 4,
      "name": "validationMessage",
      "comment": {
       "raw": [
        "Message describing why the value is invalid"
       ]
      },
      "typeValue": {
       "raw": "null | string | number | boolean | React.ReactElement<any, string | React.JSXElementConstructor<any>> | React.ReactFragment | React.ReactPortal"
      },
      "typeValueRef": "@types/react:ReactNode",
      "from": "@epam/uui-core:ICanBeInvalid",
      "required": false
     },
     {
      "uid": 5,
      "name": "validationProps",
      "comment": {
       "raw": [
        "If T is a complex value (object or array), this property contains validation states of inner items"
       ]
      },
      "typeValue": {
       "raw": "{ [key: string]: ICanBeInvalid; }"
      },
      "from": "@epam/uui-core:ICanBeInvalid",
      "required": false
     },
     {
      "uid": 6,
      "name": "isDisabled",
      "comment": {
       "raw": [
        "Disable editing, and visually de-emphasize value of the component"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:IDisableable",
      "required": false
     },
     {
      "uid": 7,
      "name": "isReadonly",
      "comment": {
       "raw": [
        "Disable editing. Unlike isDisabled, keep component's value readable."
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:ICanBeReadonly",
      "required": false
     },
     {
      "uid": 8,
      "name": "isRequired",
      "comment": {
       "raw": [
        "Marks that component's value is required and shouldn't be empty"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:ICanBeRequired",
      "required": false
     },
     {
      "uid": 9,
      "name": "indeterminate",
      "comment": {
       "raw": [
        "Sets checkbox in indeterminate state (neither checked or unchecked), which usually means that children elements has both values"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:ICheckable",
      "required": false
     },
     {
      "uid": 10,
      "name": "onFocus",
      "comment": {
       "raw": [
        "Called when component gets input focus"
       ]
      },
      "typeValue": {
       "raw": "(e: React.FocusEvent<HTMLInputElement, Element>) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:ICanFocus",
      "required": false
     },
     {
      "uid": 11,
      "name": "onBlur",
      "comment": {
       "raw": [
        "Called when component looses input focus"
       ]
      },
      "typeValue": {
       "raw": "(e: React.FocusEvent<HTMLInputElement, Element>) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:ICanFocus",
      "required": false
     },
     {
      "uid": 12,
      "name": "cx",
      "comment": {
       "raw": [
        "CSS class(es) to put on component's root. See {@link https://github.com/JedWatson/classnames#usage} for details"
       ]
      },
      "typeValue": {
       "raw": "null | string | number | boolean | ClassDictionary | ClassArray"
      },
      "typeValueRef": "@epam/uui-core:ClassValue",
      "from": "@epam/uui-core:IHasCX",
      "required": false
     },
     {
      "uid": 13,
      "name": "label",
      "comment": {
       "raw": [
        "Label. Can be a string, or React.Elements. Certain components supports minimal markup (<b>,<i>,<a>) in captions."
       ]
      },
      "typeValue": {
       "raw": "any"
      },
      "from": "@epam/uui-core:IHasLabel",
      "required": false
     },
     {
      "uid": 14,
      "name": "getValueChangeAnalyticsEvent",
      "comment": {
       "raw": [
        "Given a value, returns an analytics event to send when component is edited.",
        " See [AnalyticsContext](@link https://uui.epam.com/documents?id=analyticsContext&mode=doc&skin=UUI4_promo&category=contexts)."
       ]
      },
      "typeValue": {
       "raw": "(newValue: boolean | null, oldValue: boolean | null) => AnalyticsEvent"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IAnalyticableOnChange",
      "required": false
     },
     {
      "uid": 15,
      "name": "rawProps",
      "comment": {
       "raw": [
        "Any HTML attributes (native or 'data-') to put on the underlying component"
       ]
      },
      "typeValue": {
       "raw": "React.LabelHTMLAttributes<HTMLLabelElement> & Record<`data-${string}`, string>"
      },
      "from": "@epam/uui-core:IHasRawProps",
      "required": false
     },
     {
      "uid": 16,
      "name": "forwardedRef",
      "comment": {
       "raw": [
        "this ref is passed to the underlying component"
       ]
      },
      "typeValue": {
       "raw": "null | (instance: HTMLLabelElement | null) => void | React.MutableRefObject<HTMLLabelElement | null>"
      },
      "from": "@epam/uui-core:IHasForwardedRef",
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui-core:ClassValue": {
   "summary": {
    "module": "@epam/uui-core",
    "typeName": {
     "name": "ClassValue",
     "nameFull": "ClassValue"
    },
    "src": "uui-core/src/helpers/cx.ts",
    "exported": true
   },
   "details": {
    "kind": 264,
    "typeValue": {
     "raw": "undefined | null | string | number | boolean | ClassDictionary | ClassArray",
     "print": [
      "/* The ClassValue type is a union type that represents the valid values that can be passed as arguments to the classnames function. It can be one of the following types:",
      "- string: A string representing a class name.",
      "- number: A number representing a class name. This is useful when using CSS modules.",
      "- ClassDictionary: An object whose keys are class names and values are booleans. If the value is true, the corresponding class name will be included in the resulting string, otherwise it will be omitted.",
      "- ClassArray: An array of values of type ClassValue. This allows you to pass multiple class names or class dictionaries as arguments to classnames.",
      "- undefined: If undefined is passed as an argument, it will be ignored.",
      "- null: If null is passed as an argument, it will be ignored.",
      "- boolean: If a boolean value is passed as an argument, it will be ignored if it is false and included if it is true. */",
      "type ClassValue = string | number | ClassDictionary | ClassArray | undefined | null | boolean;"
     ]
    }
   }
  },
  "@epam/uui-core:ColumnsConfig": {
   "summary": {
    "module": "@epam/uui-core",
    "typeName": {
     "name": "ColumnsConfig",
     "nameFull": "ColumnsConfig"
    },
    "src": "uui-core/src/types/tables.ts",
    "exported": true
   },
   "details": {
    "kind": 264,
    "typeValue": {
     "raw": "ColumnsConfig",
     "print": [
      "type ColumnsConfig = {",
      "    /** Config for each column */",
      "    [key: string]: IColumnConfig;",
      "};"
     ]
    },
    "props": [
     {
      "uid": 1,
      "name": "[key: string]",
      "comment": {
       "raw": [
        "Config for each column"
       ]
      },
      "typeValue": {
       "raw": "IColumnConfig"
      },
      "required": true
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui-core:CommonContexts": {
   "summary": {
    "module": "@epam/uui-core",
    "typeName": {
     "name": "CommonContexts",
     "nameFull": "CommonContexts<TApi, TAppContext>"
    },
    "src": "uui-core/src/types/contexts.ts",
    "exported": true
   },
   "details": {
    "kind": 263,
    "typeValue": {
     "raw": "CommonContexts<TApi, TAppContext>",
     "print": [
      "interface CommonContexts<TApi, TAppContext> extends UuiContexts {",
      "    api: TApi & ApiExtensions<TApi>;",
      "    uuiApp: TAppContext;",
      "    history?: IHistory4;",
      "}"
     ]
    },
    "props": [
     {
      "uid": 1,
      "name": "api",
      "typeValue": {
       "raw": "TApi & ApiExtensions<TApi>"
      },
      "required": true
     },
     {
      "uid": 2,
      "name": "uuiApp",
      "typeValue": {
       "raw": "TAppContext"
      },
      "required": true
     },
     {
      "uid": 3,
      "name": "history",
      "typeValue": {
       "raw": "IHistory4"
      },
      "required": false
     },
     {
      "uid": 4,
      "name": "uuiApi",
      "typeValue": {
       "raw": "IApiContext"
      },
      "from": "@epam/uui-core:UuiContexts",
      "required": true
     },
     {
      "uid": 5,
      "name": "uuiRouter",
      "typeValue": {
       "raw": "IRouterContext"
      },
      "from": "@epam/uui-core:UuiContexts",
      "required": true
     },
     {
      "uid": 6,
      "name": "uuiModals",
      "typeValue": {
       "raw": "IModalContext"
      },
      "from": "@epam/uui-core:UuiContexts",
      "required": true
     },
     {
      "uid": 7,
      "name": "uuiDnD",
      "typeValue": {
       "raw": "IDndContext"
      },
      "from": "@epam/uui-core:UuiContexts",
      "required": true
     },
     {
      "uid": 8,
      "name": "uuiUserSettings",
      "typeValue": {
       "raw": "IUserSettingsContext"
      },
      "from": "@epam/uui-core:UuiContexts",
      "required": true
     },
     {
      "uid": 9,
      "name": "uuiAnalytics",
      "typeValue": {
       "raw": "IAnalyticsContext"
      },
      "from": "@epam/uui-core:UuiContexts",
      "required": true
     },
     {
      "uid": 10,
      "name": "uuiErrors",
      "typeValue": {
       "raw": "IErrorContext"
      },
      "from": "@epam/uui-core:UuiContexts",
      "required": true
     },
     {
      "uid": 11,
      "name": "uuiNotifications",
      "typeValue": {
       "raw": "INotificationContext"
      },
      "from": "@epam/uui-core:UuiContexts",
      "required": true
     },
     {
      "uid": 12,
      "name": "uuiLayout",
      "typeValue": {
       "raw": "ILayoutContext"
      },
      "from": "@epam/uui-core:UuiContexts",
      "required": true
     },
     {
      "uid": 13,
      "name": "uuiLocks",
      "typeValue": {
       "raw": "ILockContext"
      },
      "from": "@epam/uui-core:UuiContexts",
      "required": true
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui-core:ContextProviderProps": {
   "summary": {
    "module": "@epam/uui-core",
    "typeName": {
     "name": "ContextProviderProps",
     "nameFull": "ContextProviderProps<TApi, TAppContext>"
    },
    "src": "uui-core/src/services/ContextProvider.tsx",
    "exported": true
   },
   "details": {
    "kind": 263,
    "typeValue": {
     "raw": "ContextProviderProps<TApi, TAppContext>",
     "print": [
      "interface ContextProviderProps<TApi, TAppContext> extends UuiServicesProps<TApi>, IHasChildren {",
      "    loadAppContext?: (api: TApi) => Promise<TAppContext>;",
      "    onInitCompleted(svc: CommonContexts<TApi, TAppContext>): void;",
      "    history?: IHistory4;",
      "    gaCode?: string;",
      "}"
     ]
    },
    "props": [
     {
      "uid": 1,
      "name": "loadAppContext",
      "typeValue": {
       "raw": "(api: TApi) => Promise<TAppContext>"
      },
      "editor": {
       "type": "func"
      },
      "required": false
     },
     {
      "uid": 2,
      "name": "onInitCompleted",
      "typeValue": {
       "raw": "(svc: CommonContexts<TApi, TAppContext>) => void"
      },
      "editor": {
       "type": "func"
      },
      "required": true
     },
     {
      "uid": 3,
      "name": "history",
      "typeValue": {
       "raw": "IHistory4"
      },
      "required": false
     },
     {
      "uid": 4,
      "name": "gaCode",
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "required": false
     },
     {
      "uid": 5,
      "name": "apiDefinition",
      "typeValue": {
       "raw": "(processRequest: IProcessRequest) => TApi"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:UuiServicesProps",
      "required": false
     },
     {
      "uid": 6,
      "name": "apiReloginPath",
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "from": "@epam/uui-core:ApiContextProps",
      "required": false
     },
     {
      "uid": 7,
      "name": "apiPingPath",
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "from": "@epam/uui-core:ApiContextProps",
      "required": false
     },
     {
      "uid": 8,
      "name": "apiServerUrl",
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "from": "@epam/uui-core:ApiContextProps",
      "required": false
     },
     {
      "uid": 9,
      "name": "children",
      "typeValue": {
       "raw": "null | string | number | boolean | React.ReactElement<any, string | React.JSXElementConstructor<any>> | React.ReactFragment | React.ReactPortal"
      },
      "typeValueRef": "@types/react:ReactNode",
      "from": "@epam/uui-core:IHasChildren",
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui-core:CX": {
   "summary": {
    "module": "@epam/uui-core",
    "typeName": {
     "name": "CX",
     "nameFull": "CX"
    },
    "src": "uui-core/src/types/objects.ts",
    "exported": true
   },
   "details": {
    "kind": 264,
    "typeValue": {
     "raw": "undefined | null | string | number | boolean | ClassDictionary | ClassArray",
     "print": [
      "// CX type is a union type that represents the valid values to pass CSS classes",
      "type CX = ClassValue;"
     ]
    }
   }
  },
  "@epam/uui-core:DataColumnProps": {
   "summary": {
    "module": "@epam/uui-core",
    "typeName": {
     "name": "DataColumnProps",
     "nameFull": "DataColumnProps<TItem, TId, TFilter>"
    },
    "src": "uui-core/src/types/tables.ts",
    "exported": true
   },
   "details": {
    "kind": 263,
    "typeValue": {
     "raw": "DataColumnProps<TItem, TId, TFilter>",
     "print": [
      "interface DataColumnProps<TItem = any, TId = any, TFilter = any> extends ICanBeFixed, IHasCX, IClickable, IHasRawProps<HTMLDivElement>, Attributes {",
      "    /**",
      "     * Unique key to identify the column. Used to reference columns, e.g. in ColumnsConfig.",
      "     * Also, used as React key for cells, header cells, and other components inside tables.",
      "     */",
      "    key: string;",
      "    /** Column caption. Can be a plain text, or any React Component */",
      "    caption?: React.ReactNode;",
      "    /**",
      "     * The width of the column. Usually, columns has exact this width.",
      "     * When all columns fit, and there's spare horizontal space, you can use 'grow' prop to use this space for certain columns.",
      "     * DataTable's columns can't shrink below width - table will add horizontal scrolling instead of shrinking columns",
      "     */",
      "    width: number;",
      "    /** Minimal width to which column can be resized manually */",
      "    minWidth?: number;",
      "    /** The flex grow for the column. Allows column to grow in width if there's spare horizontal space */",
      "    grow?: number;",
      "    /** Aligns cell content horizontally */",
      "    textAlign?: 'left' | 'center' | 'right';",
      "    justifyContent?: CSS.JustifyContentProperty;",
      "    /** Align cell content vertically */",
      "    alignSelf?: CSS.AlignSelfProperty;",
      "    /**",
      "     * Enables sorting arrows on the column.",
      "     * Sorting state is kept in DataSourceState.sorting",
      "     */",
      "    isSortable?: boolean;",
      "    /** Disallows to hide column via ColumnsConfiguration */",
      "    isAlwaysVisible?: boolean;",
      "    /** Makes column hidden by default. User can turn it on later, via ColumnsConfiguration */",
      "    isHiddenByDefault?: boolean;",
      "    /** Info tooltip displayed in the table header */",
      "    info?: React.ReactNode;",
      "    /**",
      "     * Should return true, if current filter affects the column.",
      "     * Usually, this prop is filled automatically by the useTableState hook.",
      "     * If you use the useTableState hook, you don't need to specify it manually.",
      "     */",
      "    isFilterActive?: (filter: TFilter, column: DataColumnProps<TItem, TId, TFilter>) => boolean;",
      "    /** A pure function that defines that column value can be copied to the other column. */",
      "    canCopy?: (cell: DataTableSelectedCellData<TItem, TId, TFilter>) => boolean;",
      "    /** A pure function that defines that column accepts copying other column value into it */",
      "    canAcceptCopy?: (from: DataTableSelectedCellData<TItem, TId, TFilter>, to: DataTableSelectedCellData<TItem, TId, TFilter>) => boolean;",
      "    /** Render the cell content. The item props is the value of the whole row (TItem). */",
      "    render?(item: TItem, props: DataRowProps<TItem, TId>): any;",
      "    /** Overrides rendering of the whole cell */",
      "    renderCell?(cellProps: RenderCellProps<TItem, TId>): any;",
      "    /**",
      "     * Renders column header dropdown.",
      "     * Usually, this prop is filled automatically by the useTableState hook.",
      "     * If you use the useTableState hook, you don't need to specify it manually.",
      "     */",
      "    renderDropdown?(): React.ReactNode;",
      "    /**",
      "     * Renders column filter.",
      "     * If you use useTableState hook, and you specify filter for the column, default filter will be rendered automatically.",
      "     * You can use this prop to render a custom filter component.",
      "     */",
      "    renderFilter?(lens: ILens<TFilter>, dropdownProps: IDropdownBodyProps): React.ReactNode;",
      "}"
     ]
    },
    "props": [
     {
      "uid": 1,
      "name": "key",
      "comment": {
       "raw": [
        "Unique key to identify the column. Used to reference columns, e.g. in ColumnsConfig.",
        " Also, used as React key for cells, header cells, and other components inside tables."
       ]
      },
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "required": true
     },
     {
      "uid": 2,
      "name": "caption",
      "comment": {
       "raw": [
        "Column caption. Can be a plain text, or any React Component"
       ]
      },
      "typeValue": {
       "raw": "null | string | number | boolean | React.ReactElement<any, string | React.JSXElementConstructor<any>> | React.ReactFragment | React.ReactPortal"
      },
      "typeValueRef": "@types/react:ReactNode",
      "required": false
     },
     {
      "uid": 3,
      "name": "width",
      "comment": {
       "raw": [
        "The width of the column. Usually, columns has exact this width.",
        " When all columns fit, and there's spare horizontal space, you can use 'grow' prop to use this space for certain columns.",
        " DataTable's columns can't shrink below width - table will add horizontal scrolling instead of shrinking columns"
       ]
      },
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "required": true
     },
     {
      "uid": 4,
      "name": "minWidth",
      "comment": {
       "raw": [
        "Minimal width to which column can be resized manually"
       ]
      },
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "required": false
     },
     {
      "uid": 5,
      "name": "grow",
      "comment": {
       "raw": [
        "The flex grow for the column. Allows column to grow in width if there's spare horizontal space"
       ]
      },
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "required": false
     },
     {
      "uid": 6,
      "name": "textAlign",
      "comment": {
       "raw": [
        "Aligns cell content horizontally"
       ]
      },
      "typeValue": {
       "raw": "'left' | 'right' | 'center'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "left",
        "right",
        "center"
       ]
      },
      "required": false
     },
     {
      "uid": 7,
      "name": "justifyContent",
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "required": false
     },
     {
      "uid": 8,
      "name": "alignSelf",
      "comment": {
       "raw": [
        "Align cell content vertically"
       ]
      },
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "required": false
     },
     {
      "uid": 9,
      "name": "isSortable",
      "comment": {
       "raw": [
        "Enables sorting arrows on the column.",
        " Sorting state is kept in DataSourceState.sorting"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "required": false
     },
     {
      "uid": 10,
      "name": "isAlwaysVisible",
      "comment": {
       "raw": [
        "Disallows to hide column via ColumnsConfiguration"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "required": false
     },
     {
      "uid": 11,
      "name": "isHiddenByDefault",
      "comment": {
       "raw": [
        "Makes column hidden by default. User can turn it on later, via ColumnsConfiguration"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "required": false
     },
     {
      "uid": 12,
      "name": "info",
      "comment": {
       "raw": [
        "Info tooltip displayed in the table header"
       ]
      },
      "typeValue": {
       "raw": "null | string | number | boolean | React.ReactElement<any, string | React.JSXElementConstructor<any>> | React.ReactFragment | React.ReactPortal"
      },
      "typeValueRef": "@types/react:ReactNode",
      "required": false
     },
     {
      "uid": 13,
      "name": "isFilterActive",
      "comment": {
       "raw": [
        "Should return true, if current filter affects the column.",
        " Usually, this prop is filled automatically by the useTableState hook.",
        " If you use the useTableState hook, you don't need to specify it manually."
       ]
      },
      "typeValue": {
       "raw": "(filter: TFilter, column: DataColumnProps<TItem, TId, TFilter>) => boolean"
      },
      "editor": {
       "type": "func"
      },
      "required": false
     },
     {
      "uid": 14,
      "name": "canCopy",
      "comment": {
       "raw": [
        "A pure function that defines that column value can be copied to the other column."
       ]
      },
      "typeValue": {
       "raw": "(cell: DataTableSelectedCellData<TItem, TId, TFilter>) => boolean"
      },
      "editor": {
       "type": "func"
      },
      "required": false
     },
     {
      "uid": 15,
      "name": "canAcceptCopy",
      "comment": {
       "raw": [
        "A pure function that defines that column accepts copying other column value into it"
       ]
      },
      "typeValue": {
       "raw": "(from: DataTableSelectedCellData<TItem, TId, TFilter>, to: DataTableSelectedCellData<TItem, TId, TFilter>) => boolean"
      },
      "editor": {
       "type": "func"
      },
      "required": false
     },
     {
      "uid": 16,
      "name": "render",
      "comment": {
       "raw": [
        "Render the cell content. The item props is the value of the whole row (TItem)."
       ]
      },
      "typeValue": {
       "raw": "(item: TItem, props: DataRowProps<TItem, TId>) => any"
      },
      "editor": {
       "type": "func"
      },
      "required": false
     },
     {
      "uid": 17,
      "name": "renderCell",
      "comment": {
       "raw": [
        "Overrides rendering of the whole cell"
       ]
      },
      "typeValue": {
       "raw": "(cellProps: RenderCellProps<TItem, TId>) => any"
      },
      "editor": {
       "type": "func"
      },
      "required": false
     },
     {
      "uid": 18,
      "name": "renderDropdown",
      "comment": {
       "raw": [
        "Renders column header dropdown.",
        " Usually, this prop is filled automatically by the useTableState hook.",
        " If you use the useTableState hook, you don't need to specify it manually."
       ]
      },
      "typeValue": {
       "raw": "() => React.ReactNode"
      },
      "editor": {
       "type": "component"
      },
      "required": false
     },
     {
      "uid": 19,
      "name": "renderFilter",
      "comment": {
       "raw": [
        "Renders column filter.",
        " If you use useTableState hook, and you specify filter for the column, default filter will be rendered automatically.",
        " You can use this prop to render a custom filter component."
       ]
      },
      "typeValue": {
       "raw": "(lens: ILens<TFilter>, dropdownProps: IDropdownBodyProps) => React.ReactNode"
      },
      "editor": {
       "type": "component"
      },
      "required": false
     },
     {
      "uid": 20,
      "name": "fix",
      "comment": {
       "raw": [
        "If specified, will make column fixed - it would not scroll horizontally"
       ]
      },
      "typeValue": {
       "raw": "'left' | 'right'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "left",
        "right"
       ]
      },
      "from": "@epam/uui-core:ICanBeFixed",
      "required": false
     },
     {
      "uid": 21,
      "name": "cx",
      "comment": {
       "raw": [
        "CSS class(es) to put on component's root. See {@link https://github.com/JedWatson/classnames#usage} for details"
       ]
      },
      "typeValue": {
       "raw": "null | string | number | boolean | ClassDictionary | ClassArray"
      },
      "typeValueRef": "@epam/uui-core:ClassValue",
      "from": "@epam/uui-core:IHasCX",
      "required": false
     },
     {
      "uid": 22,
      "name": "onClick",
      "comment": {
       "raw": [
        "Called when component is clicked"
       ]
      },
      "typeValue": {
       "raw": "(e?: any) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IClickable",
      "required": false
     },
     {
      "uid": 23,
      "name": "rawProps",
      "comment": {
       "raw": [
        "Any HTML attributes (native or 'data-') to put on the underlying component"
       ]
      },
      "typeValue": {
       "raw": "HTMLDivElement & Record<`data-${string}`, string>"
      },
      "from": "@epam/uui-core:IHasRawProps",
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui-core:DataQuery": {
   "summary": {
    "module": "@epam/uui-core",
    "typeName": {
     "name": "DataQuery",
     "nameFull": "DataQuery<T>"
    },
    "src": "uui-core/src/types/dataQuery.ts",
    "exported": true
   },
   "details": {
    "kind": 263,
    "typeValue": {
     "raw": "DataQuery<T>",
     "print": [
      "interface DataQuery<T> extends Pick<LazyDataSourceApiRequest<T>, 'sorting' | 'range' | 'search'> {",
      "    filter?: DataQueryFilter<T>;",
      "}"
     ]
    },
    "props": [
     {
      "uid": 1,
      "name": "filter",
      "typeValue": {
       "raw": "DataQueryFilter<T>"
      },
      "required": false
     },
     {
      "uid": 2,
      "name": "search",
      "comment": {
       "raw": [
        "The search string, by which data should be searched."
       ]
      },
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "from": "@epam/uui-core:LazyDataSourceApiRequest",
      "required": false
     },
     {
      "uid": 3,
      "name": "sorting",
      "comment": {
       "raw": [
        "Sorting options, by which data should be sorted."
       ]
      },
      "typeValue": {
       "raw": "SortingOption<any>[]"
      },
      "from": "@epam/uui-core:LazyDataSourceApiRequest",
      "required": false
     },
     {
      "uid": 4,
      "name": "range",
      "comment": {
       "raw": [
        "Specifies a range of the rows to be retrieved."
       ]
      },
      "typeValue": {
       "raw": "LazyDataSourceApiRequestRange"
      },
      "from": "@epam/uui-core:LazyDataSourceApiRequest",
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui-core:DataQueryFilter": {
   "summary": {
    "module": "@epam/uui-core",
    "typeName": {
     "name": "DataQueryFilter",
     "nameFull": "DataQueryFilter<T>"
    },
    "src": "uui-core/src/types/dataQuery.ts",
    "exported": true
   },
   "details": {
    "kind": 264,
    "typeValue": {
     "raw": "DataQueryFilter<T>",
     "print": [
      "type DataQueryFilter<T> = {",
      "    [TPropName in keyof T]?: DataQueryFilterCondition<T[TPropName]>;",
      "};"
     ]
    }
   }
  },
  "@epam/uui-core:DataQueryFilterCondition": {
   "summary": {
    "module": "@epam/uui-core",
    "typeName": {
     "name": "DataQueryFilterCondition",
     "nameFull": "DataQueryFilterCondition<TField>"
    },
    "src": "uui-core/src/types/dataQuery.ts",
    "exported": true
   },
   "details": {
    "kind": 264,
    "typeValue": {
     "raw": "TField | FilterPredicate<TField>",
     "print": [
      "type DataQueryFilterCondition<TField> = TField | FilterPredicate<TField>;"
     ]
    }
   }
  },
  "@epam/uui-core:DataRowOptions": {
   "summary": {
    "module": "@epam/uui-core",
    "typeName": {
     "name": "DataRowOptions",
     "nameFull": "DataRowOptions<TItem, TId>"
    },
    "src": "uui-core/src/types/dataRows.ts",
    "comment": {
     "raw": [
      "A part of the DataRowProps, which can be configured for each data row via getRowOptions callback.",
      " Other props in DataRowProps are computed when generating rows."
     ]
    },
    "exported": true
   },
   "details": {
    "kind": 263,
    "typeValue": {
     "raw": "DataRowOptions<TItem, TId>",
     "print": [
      "/** A part of the DataRowProps, which can be configured for each data row via getRowOptions callback.",
      " * Other props in DataRowProps are computed when generating rows.",
      " */",
      "interface DataRowOptions<TItem, TId> extends IDisableable, Partial<IEditable<TItem>> {",
      "    /** If row needs a checkbox, this field should be specified and it props can be configured here */",
      "    checkbox?: {",
      "        isVisible: boolean;",
      "    } & IDisableable & ICanBeInvalid;",
      "    /** True if row is selectable (for whole-row single-selection, multi-selection via checkbox are configured with the checkbox prop) */",
      "    isSelectable?: boolean;",
      "    /** Configures row drag-n-drop options - if it can be dragged, can rows can be dropped into it, etc. */",
      "    dnd?: IDndActor<any, any>;",
      "    /** Row click handler */",
      "    onClick?(rowProps: DataRowProps<TItem, TId>): void;",
      "    /** Can be specified to make row act as a link (plain or SPA) */",
      "    link?: Link;",
      "    /**",
      "     * A pure function that gets pinned state for each row.",
      "     * If row pinned, it means that it will be sticky inside their parent section.",
      "     * */",
      "    pin?(rowProps: DataRowProps<TItem, TId>): boolean;",
      "}"
     ]
    },
    "props": [
     {
      "uid": 1,
      "name": "checkbox",
      "comment": {
       "raw": [
        "If row needs a checkbox, this field should be specified and it props can be configured here"
       ]
      },
      "typeValue": {
       "raw": "{ isVisible: boolean; } & IDisableable & ICanBeInvalid"
      },
      "required": false
     },
     {
      "uid": 2,
      "name": "isSelectable",
      "comment": {
       "raw": [
        "True if row is selectable (for whole-row single-selection, multi-selection via checkbox are configured with the checkbox prop)"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "required": false
     },
     {
      "uid": 3,
      "name": "dnd",
      "comment": {
       "raw": [
        "Configures row drag-n-drop options - if it can be dragged, can rows can be dropped into it, etc."
       ]
      },
      "typeValue": {
       "raw": "IDndActor<any, any>"
      },
      "required": false
     },
     {
      "uid": 4,
      "name": "onClick",
      "comment": {
       "raw": [
        "Row click handler"
       ]
      },
      "typeValue": {
       "raw": "(rowProps: DataRowProps<TItem, TId>) => void"
      },
      "editor": {
       "type": "func"
      },
      "required": false
     },
     {
      "uid": 5,
      "name": "link",
      "comment": {
       "raw": [
        "Can be specified to make row act as a link (plain or SPA)"
       ]
      },
      "typeValue": {
       "raw": "Link"
      },
      "required": false
     },
     {
      "uid": 6,
      "name": "pin",
      "comment": {
       "raw": [
        "A pure function that gets pinned state for each row.",
        " If row pinned, it means that it will be sticky inside their parent section."
       ]
      },
      "typeValue": {
       "raw": "(rowProps: DataRowProps<TItem, TId>) => boolean"
      },
      "editor": {
       "type": "func"
      },
      "required": false
     },
     {
      "uid": 7,
      "name": "isDisabled",
      "comment": {
       "raw": [
        "Disable editing, and visually de-emphasize value of the component"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:IDisableable",
      "required": false
     },
     {
      "uid": 8,
      "name": "value",
      "comment": {
       "raw": [
        "The current value of component"
       ]
      },
      "typeValue": {
       "raw": "TItem"
      },
      "from": "@epam/uui-core:IEditable",
      "required": true
     },
     {
      "uid": 9,
      "name": "onValueChange",
      "comment": {
       "raw": [
        "Called when value needs to be changed (usually due to user interaction)"
       ]
      },
      "typeValue": {
       "raw": "(newValue: TItem) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IEditable",
      "required": true
     },
     {
      "uid": 10,
      "name": "isInvalid",
      "comment": {
       "raw": [
        "True if component contains invalid input"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:ICanBeInvalid",
      "required": false
     },
     {
      "uid": 11,
      "name": "validationMessage",
      "comment": {
       "raw": [
        "Message describing why the value is invalid"
       ]
      },
      "typeValue": {
       "raw": "null | string | number | boolean | React.ReactElement<any, string | React.JSXElementConstructor<any>> | React.ReactFragment | React.ReactPortal"
      },
      "from": "@epam/uui-core:ICanBeInvalid",
      "required": false
     },
     {
      "uid": 12,
      "name": "validationProps",
      "comment": {
       "raw": [
        "If T is a complex value (object or array), this property contains validation states of inner items"
       ]
      },
      "typeValue": {
       "raw": "{ [key: string]: ICanBeInvalid; }"
      },
      "from": "@epam/uui-core:ICanBeInvalid",
      "required": false
     },
     {
      "uid": 13,
      "name": "isReadonly",
      "comment": {
       "raw": [
        "Disable editing. Unlike isDisabled, keep component's value readable."
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:ICanBeReadonly",
      "required": false
     },
     {
      "uid": 14,
      "name": "isRequired",
      "comment": {
       "raw": [
        "Marks that component's value is required and shouldn't be empty"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:ICanBeRequired",
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui-core:DataRowPathItem": {
   "summary": {
    "module": "@epam/uui-core",
    "typeName": {
     "name": "DataRowPathItem",
     "nameFull": "DataRowPathItem<TId, TItem>"
    },
    "src": "uui-core/src/types/dataRows.ts",
    "comment": {
     "raw": [
      "Holds parent info for data rows"
     ]
    },
    "exported": true
   },
   "details": {
    "kind": 263,
    "typeValue": {
     "raw": "DataRowPathItem<TId, TItem>",
     "print": [
      "/** Holds parent info for data rows */",
      "interface DataRowPathItem<TId, TItem> {",
      "    id: TId;",
      "    value: TItem;",
      "    isLastChild: boolean;",
      "}"
     ]
    },
    "props": [
     {
      "uid": 1,
      "name": "id",
      "typeValue": {
       "raw": "TId"
      },
      "required": true
     },
     {
      "uid": 2,
      "name": "value",
      "typeValue": {
       "raw": "TItem"
      },
      "required": true
     },
     {
      "uid": 3,
      "name": "isLastChild",
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "required": true
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui-core:DataRowProps": {
   "summary": {
    "module": "@epam/uui-core",
    "typeName": {
     "name": "DataRowProps",
     "nameFull": "DataRowProps<TItem, TId>"
    },
    "src": "uui-core/src/types/dataRows.ts",
    "comment": {
     "raw": [
      "DataRowProps is a base shape of props, passed to items in various lists or trees.",
      "",
      " Despite 'Row' in it's name, it doesn't directly connected to a table.",
      " We use DataRowProps as a base for DataTableRowProps and DataPickerRowProps.",
      " But it can also be used for any user-built list, tree, custom picker rows, or even a grid of cards.",
      "",
      " Array of DataRowProps describes a part of hierarchical list, while still being a flat array (not a tree of some kind).",
      " We use depth, indent, path, and other props to show row's place in the hierarchy.",
      " This is very handy to handle rendering, especially in virtual scrolling scenarios.",
      "",
      " DataSources primary job is to convert various data stores into arrays of DataRowProps."
     ]
    },
    "exported": true
   },
   "details": {
    "kind": 264,
    "typeValue": {
     "raw": "DataRowProps<TItem, TId>",
     "print": [
      "/** DataRowProps is a base shape of props, passed to items in various lists or trees.",
      " *",
      " * Despite 'Row' in it's name, it doesn't directly connected to a table.",
      " * We use DataRowProps as a base for DataTableRowProps and DataPickerRowProps.",
      " * But it can also be used for any user-built list, tree, custom picker rows, or even a grid of cards.",
      " *",
      " * Array of DataRowProps describes a part of hierarchical list, while still being a flat array (not a tree of some kind).",
      " * We use depth, indent, path, and other props to show row's place in the hierarchy.",
      " * This is very handy to handle rendering, especially in virtual scrolling scenarios.",
      " *",
      " * DataSources primary job is to convert various data stores into arrays of DataRowProps.",
      " */",
      "type DataRowProps<TItem, TId> = FlexRowProps & DataRowOptions<TItem, TId> & {",
      "    /** ID of the TItem rows displays */",
      "    id: TId;",
      "    /** Key to be used as component's key when rendering. Usually, it's stringified ID */",
      "    rowKey: string;",
      "    /** Index of the row, from the top of the list. This doesn't account any hierarchy. */",
      "    index: number;",
      "    /** The data item (TItem) row displays. Will be undefined if isLoading = true. */",
      "    value: TItem | undefined;",
      "    /** ID of the parent TItem */",
      "    parentId?: TId;",
      "    /** Hierarchical path from the root node to the item (excluding the item itself) */",
      "    path?: DataRowPathItem<TId, TItem>[];",
      "    /* visual */",
      "    /** Depth of the row in tree, 0 for the top-level */",
      "    depth?: number;",
      "    /** Indent of the item, to show hierarchy.",
      "         *  Unlike depth, it contains additional logic, to not add unnecessary indents:",
      "         *  if all children of node has no children, all nodes would get the same indent as parent.",
      "         */",
      "    indent?: number;",
      "    /** True if row is in loading state. 'value' is empty in this case */",
      "    isLoading?: boolean;",
      "    isUnknown?: boolean;",
      "    /** True if row be folded or unfolded (usually because it contains children) */",
      "    isFoldable?: boolean;",
      "    /** True if row is currently folded */",
      "    isFolded?: boolean;",
      "    /** True if row is checked with checkbox */",
      "    isChecked?: boolean;",
      "    /** True if row has checkbox and can be checkable */",
      "    isCheckable?: boolean;",
      "    /** True if some of row's children are checked.",
      "         * Used to show 'indefinite' checkbox state, to show user that something inside is checked */",
      "    isChildrenChecked?: boolean;",
      "    /** True if row is selected (in single-select mode, or in case when interface use both single row selection and checkboxes) */",
      "    isSelected?: boolean;",
      "    /** True if any of row's children is selected. */",
      "    isChildrenSelected?: boolean;",
      "    /** True if row is focused. Focus can be changed via keyboard arrow keys, or by hovering mouse on top of the row */",
      "    isFocused?: boolean;",
      "    /** True if row is the last child of his parent */",
      "    isLastChild?: boolean;",
      "    /* events */",
      "    /** Handles row folding change.",
      "         * We demand to pass the row as well, to avoid creating closures for each row.",
      "         */",
      "    onFold?(rowProps: DataRowProps<TItem, TId>): void;",
      "    /** Handles row click.",
      "         * We demand to pass the row as well, to avoid creating closures for each row.",
      "         */",
      "    onClick?(rowProps: DataRowProps<TItem, TId>): void;",
      "    /** Handles row checkbox change.",
      "         * We demand to pass the row as well, to avoid creating closures for each row.",
      "         */",
      "    onCheck?(rowProps: DataRowProps<TItem, TId>): void;",
      "    /** Handles row selection.",
      "         * We demand to pass the row as well, to avoid creating closures for each row.",
      "         */",
      "    onSelect?(rowProps: DataRowProps<TItem, TId>): void;",
      "    /** Handles row focusing.",
      "         */",
      "    onFocus?(focusedIndex: number): void;",
      "    isPinned?: boolean;",
      "};"
     ]
    },
    "props": [
     {
      "uid": 1,
      "name": "cx",
      "comment": {
       "raw": [
        "CSS class(es) to put on component's root. See {@link https://github.com/JedWatson/classnames#usage} for details"
       ]
      },
      "typeValue": {
       "raw": "null | string | number | boolean | ClassDictionary | ClassArray"
      },
      "typeValueRef": "@epam/uui-core:ClassValue",
      "from": "@epam/uui-core:IHasCX",
      "required": false
     },
     {
      "uid": 2,
      "name": "onClick",
      "comment": {
       "raw": [
        "Called when component is clicked"
       ]
      },
      "typeValue": {
       "raw": "((e?: any) => void) & ((rowProps: DataRowProps<TItem, TId>) => void) & ((rowProps: DataRowProps<TItem, TId>) => void)"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IClickable",
      "required": false
     },
     {
      "uid": 3,
      "name": "key",
      "typeValue": {
       "raw": "null | string | number"
      },
      "from": "@types/react:Attributes",
      "required": false
     },
     {
      "uid": 4,
      "name": "children",
      "typeValue": {
       "raw": "null | string | number | boolean | React.ReactElement<any, string | React.JSXElementConstructor<any>> | React.ReactFragment | React.ReactPortal"
      },
      "typeValueRef": "@types/react:ReactNode",
      "from": "@epam/uui-core:IHasChildren",
      "required": false
     },
     {
      "uid": 5,
      "name": "rawProps",
      "comment": {
       "raw": [
        "Any HTML attributes (native or 'data-') to put on the underlying component"
       ]
      },
      "typeValue": {
       "raw": "React.HTMLAttributes<HTMLDivElement> & Record<`data-${string}`, string>"
      },
      "from": "@epam/uui-core:IHasRawProps",
      "required": false
     },
     {
      "uid": 6,
      "name": "alignItems",
      "comment": {
       "raw": [
        "Flexbox align-items property [Flexbox Guide](https://css-tricks.com/snippets/css/a-guide-to-flexbox/)"
       ]
      },
      "typeValue": {
       "raw": "'top' | 'bottom' | 'center' | 'stretch'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "top",
        "bottom",
        "center",
        "stretch"
       ]
      },
      "from": "@epam/uui-core:FlexRowProps",
      "required": false
     },
     {
      "uid": 7,
      "name": "columnGap",
      "comment": {
       "raw": [
        "Flexbox column gap property [Flexbox Guide](https://css-tricks.com/snippets/css/a-guide-to-flexbox/#aa-gap-row-gap-column-gap)"
       ]
      },
      "typeValue": {
       "raw": "number | '6' | '12' | '18' | '24' | '36'"
      },
      "from": "@epam/uui-core:FlexRowProps",
      "required": false
     },
     {
      "uid": 8,
      "name": "rowGap",
      "comment": {
       "raw": [
        "Flexbox row gap property [Flexbox Guide](https://css-tricks.com/snippets/css/a-guide-to-flexbox/#aa-gap-row-gap-column-gap)"
       ]
      },
      "typeValue": {
       "raw": "number | '6' | '12' | '18' | '24' | '36'"
      },
      "from": "@epam/uui-core:FlexRowProps",
      "required": false
     },
     {
      "uid": 9,
      "name": "checkbox",
      "comment": {
       "raw": [
        "If row needs a checkbox, this field should be specified and it props can be configured here"
       ]
      },
      "typeValue": {
       "raw": "{ isVisible: boolean; } & IDisableable & ICanBeInvalid"
      },
      "from": "@epam/uui-core:DataRowOptions",
      "required": false
     },
     {
      "uid": 10,
      "name": "isSelectable",
      "comment": {
       "raw": [
        "True if row is selectable (for whole-row single-selection, multi-selection via checkbox are configured with the checkbox prop)"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:DataRowOptions",
      "required": false
     },
     {
      "uid": 11,
      "name": "dnd",
      "comment": {
       "raw": [
        "Configures row drag-n-drop options - if it can be dragged, can rows can be dropped into it, etc."
       ]
      },
      "typeValue": {
       "raw": "IDndActor<any, any>"
      },
      "from": "@epam/uui-core:DataRowOptions",
      "required": false
     },
     {
      "uid": 12,
      "name": "link",
      "comment": {
       "raw": [
        "Can be specified to make row act as a link (plain or SPA)"
       ]
      },
      "typeValue": {
       "raw": "Link"
      },
      "from": "@epam/uui-core:DataRowOptions",
      "required": false
     },
     {
      "uid": 13,
      "name": "pin",
      "comment": {
       "raw": [
        "A pure function that gets pinned state for each row.",
        " If row pinned, it means that it will be sticky inside their parent section."
       ]
      },
      "typeValue": {
       "raw": "(rowProps: DataRowProps<TItem, TId>) => boolean"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:DataRowOptions",
      "required": false
     },
     {
      "uid": 14,
      "name": "isDisabled",
      "comment": {
       "raw": [
        "Disable editing, and visually de-emphasize value of the component"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:IDisableable",
      "required": false
     },
     {
      "uid": 15,
      "name": "value",
      "comment": {
       "raw": [
        "The current value of component"
       ]
      },
      "typeValue": {
       "raw": "TItem"
      },
      "from": "@epam/uui-core:IEditable",
      "required": true
     },
     {
      "uid": 16,
      "name": "onValueChange",
      "comment": {
       "raw": [
        "Called when value needs to be changed (usually due to user interaction)"
       ]
      },
      "typeValue": {
       "raw": "(newValue: TItem) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IEditable",
      "required": true
     },
     {
      "uid": 17,
      "name": "isInvalid",
      "comment": {
       "raw": [
        "True if component contains invalid input"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:ICanBeInvalid",
      "required": false
     },
     {
      "uid": 18,
      "name": "validationMessage",
      "comment": {
       "raw": [
        "Message describing why the value is invalid"
       ]
      },
      "typeValue": {
       "raw": "null | string | number | boolean | React.ReactElement<any, string | React.JSXElementConstructor<any>> | React.ReactFragment | React.ReactPortal"
      },
      "from": "@epam/uui-core:ICanBeInvalid",
      "required": false
     },
     {
      "uid": 19,
      "name": "validationProps",
      "comment": {
       "raw": [
        "If T is a complex value (object or array), this property contains validation states of inner items"
       ]
      },
      "typeValue": {
       "raw": "{ [key: string]: ICanBeInvalid; }"
      },
      "from": "@epam/uui-core:ICanBeInvalid",
      "required": false
     },
     {
      "uid": 20,
      "name": "isReadonly",
      "comment": {
       "raw": [
        "Disable editing. Unlike isDisabled, keep component's value readable."
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:ICanBeReadonly",
      "required": false
     },
     {
      "uid": 21,
      "name": "isRequired",
      "comment": {
       "raw": [
        "Marks that component's value is required and shouldn't be empty"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:ICanBeRequired",
      "required": false
     },
     {
      "uid": 22,
      "name": "id",
      "comment": {
       "raw": [
        "ID of the TItem rows displays"
       ]
      },
      "typeValue": {
       "raw": "TId"
      },
      "required": true
     },
     {
      "uid": 23,
      "name": "rowKey",
      "comment": {
       "raw": [
        "Key to be used as component's key when rendering. Usually, it's stringified ID"
       ]
      },
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "required": true
     },
     {
      "uid": 24,
      "name": "index",
      "comment": {
       "raw": [
        "Index of the row, from the top of the list. This doesn't account any hierarchy."
       ]
      },
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "required": true
     },
     {
      "uid": 25,
      "name": "parentId",
      "comment": {
       "raw": [
        "ID of the parent TItem"
       ]
      },
      "typeValue": {
       "raw": "TId"
      },
      "required": false
     },
     {
      "uid": 26,
      "name": "path",
      "comment": {
       "raw": [
        "Hierarchical path from the root node to the item (excluding the item itself)"
       ]
      },
      "typeValue": {
       "raw": "DataRowPathItem<TId, TItem>[]"
      },
      "required": false
     },
     {
      "uid": 27,
      "name": "depth",
      "comment": {
       "raw": [
        "Depth of the row in tree, 0 for the top-level"
       ]
      },
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "required": false
     },
     {
      "uid": 28,
      "name": "indent",
      "comment": {
       "raw": [
        "Indent of the item, to show hierarchy.",
        "  Unlike depth, it contains additional logic, to not add unnecessary indents:",
        "  if all children of node has no children, all nodes would get the same indent as parent."
       ]
      },
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "required": false
     },
     {
      "uid": 29,
      "name": "isLoading",
      "comment": {
       "raw": [
        "True if row is in loading state. 'value' is empty in this case"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "required": false
     },
     {
      "uid": 30,
      "name": "isUnknown",
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "required": false
     },
     {
      "uid": 31,
      "name": "isFoldable",
      "comment": {
       "raw": [
        "True if row be folded or unfolded (usually because it contains children)"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "required": false
     },
     {
      "uid": 32,
      "name": "isFolded",
      "comment": {
       "raw": [
        "True if row is currently folded"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "required": false
     },
     {
      "uid": 33,
      "name": "isChecked",
      "comment": {
       "raw": [
        "True if row is checked with checkbox"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "required": false
     },
     {
      "uid": 34,
      "name": "isCheckable",
      "comment": {
       "raw": [
        "True if row has checkbox and can be checkable"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "required": false
     },
     {
      "uid": 35,
      "name": "isChildrenChecked",
      "comment": {
       "raw": [
        "True if some of row's children are checked.",
        " Used to show 'indefinite' checkbox state, to show user that something inside is checked"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "required": false
     },
     {
      "uid": 36,
      "name": "isSelected",
      "comment": {
       "raw": [
        "True if row is selected (in single-select mode, or in case when interface use both single row selection and checkboxes)"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "required": false
     },
     {
      "uid": 37,
      "name": "isChildrenSelected",
      "comment": {
       "raw": [
        "True if any of row's children is selected."
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "required": false
     },
     {
      "uid": 38,
      "name": "isFocused",
      "comment": {
       "raw": [
        "True if row is focused. Focus can be changed via keyboard arrow keys, or by hovering mouse on top of the row"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "required": false
     },
     {
      "uid": 39,
      "name": "isLastChild",
      "comment": {
       "raw": [
        "True if row is the last child of his parent"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "required": false
     },
     {
      "uid": 40,
      "name": "onFold",
      "comment": {
       "raw": [
        "Handles row folding change.",
        " We demand to pass the row as well, to avoid creating closures for each row."
       ]
      },
      "typeValue": {
       "raw": "(rowProps: DataRowProps<TItem, TId>) => void"
      },
      "editor": {
       "type": "func"
      },
      "required": false
     },
     {
      "uid": 41,
      "name": "onCheck",
      "comment": {
       "raw": [
        "Handles row checkbox change.",
        " We demand to pass the row as well, to avoid creating closures for each row."
       ]
      },
      "typeValue": {
       "raw": "(rowProps: DataRowProps<TItem, TId>) => void"
      },
      "editor": {
       "type": "func"
      },
      "required": false
     },
     {
      "uid": 42,
      "name": "onSelect",
      "comment": {
       "raw": [
        "Handles row selection.",
        " We demand to pass the row as well, to avoid creating closures for each row."
       ]
      },
      "typeValue": {
       "raw": "(rowProps: DataRowProps<TItem, TId>) => void"
      },
      "editor": {
       "type": "func"
      },
      "required": false
     },
     {
      "uid": 43,
      "name": "onFocus",
      "comment": {
       "raw": [
        "Handles row focusing."
       ]
      },
      "typeValue": {
       "raw": "(focusedIndex: number) => void"
      },
      "editor": {
       "type": "func"
      },
      "required": false
     },
     {
      "uid": 44,
      "name": "isPinned",
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui-core:DataSourceListCounts": {
   "summary": {
    "module": "@epam/uui-core",
    "typeName": {
     "name": "DataSourceListCounts",
     "nameFull": "DataSourceListCounts"
    },
    "src": "uui-core/src/types/dataSources.ts",
    "exported": true
   },
   "details": {
    "kind": 264,
    "typeValue": {
     "raw": "DataSourceListCounts",
     "print": [
      "type DataSourceListCounts = {",
      "    /**",
      "     * Count of rows, after applying filter, and folding on tree nodes.",
      "     * Obsolete! Please switch to exactRowsCount / knownRowsCount",
      "     */",
      "    rowsCount?: number;",
      "    /** Count of rows, if all rows loaded. Can be null while initial loading, or if API doesn't return count  */",
      "    exactRowsCount?: number;",
      "    /**",
      "     * There's at least knownRowsCount rows. There can be more if list is lazy loaded.",
      "     * Equals to exactRowsCount if all rows are loaded, or if API returns rows count",
      "     * Otherwise, exactRowsCount will be null, and knownRowsCount will specify number of loaded rows.",
      "     */",
      "    knownRowsCount?: number;",
      "    /** Total count of items, before applying the filter. If there's a tree, it counts all nodes, including folded children  */",
      "    totalCount?: number;",
      "};"
     ]
    },
    "props": [
     {
      "uid": 1,
      "name": "rowsCount",
      "comment": {
       "raw": [
        "Count of rows, after applying filter, and folding on tree nodes.",
        " Obsolete! Please switch to exactRowsCount / knownRowsCount"
       ]
      },
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "required": false
     },
     {
      "uid": 2,
      "name": "exactRowsCount",
      "comment": {
       "raw": [
        "Count of rows, if all rows loaded. Can be null while initial loading, or if API doesn't return count"
       ]
      },
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "required": false
     },
     {
      "uid": 3,
      "name": "knownRowsCount",
      "comment": {
       "raw": [
        "There's at least knownRowsCount rows. There can be more if list is lazy loaded.",
        " Equals to exactRowsCount if all rows are loaded, or if API returns rows count",
        " Otherwise, exactRowsCount will be null, and knownRowsCount will specify number of loaded rows."
       ]
      },
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "required": false
     },
     {
      "uid": 4,
      "name": "totalCount",
      "comment": {
       "raw": [
        "Total count of items, before applying the filter. If there's a tree, it counts all nodes, including folded children"
       ]
      },
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui-core:DataSourceListProps": {
   "summary": {
    "module": "@epam/uui-core",
    "typeName": {
     "name": "DataSourceListProps",
     "nameFull": "DataSourceListProps"
    },
    "src": "uui-core/src/types/dataSources.ts",
    "exported": true
   },
   "details": {
    "kind": 263,
    "typeValue": {
     "raw": "DataSourceListProps",
     "print": [
      "interface DataSourceListProps extends DataSourceListCounts {",
      "    /**",
      "     * ICheckable object for Select All behavior.",
      "     * If omitted, Select All action will be absent.",
      "     * */",
      "    selectAll?: ICheckable;",
      "    /** Signals that data is reloading on search/sort/filter/reload. */",
      "    isReloading?: boolean;",
      "}"
     ]
    },
    "props": [
     {
      "uid": 1,
      "name": "selectAll",
      "comment": {
       "raw": [
        "ICheckable object for Select All behavior.",
        " If omitted, Select All action will be absent."
       ]
      },
      "typeValue": {
       "raw": "ICheckable"
      },
      "required": false
     },
     {
      "uid": 2,
      "name": "isReloading",
      "comment": {
       "raw": [
        "Signals that data is reloading on search/sort/filter/reload."
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "required": false
     },
     {
      "uid": 3,
      "name": "rowsCount",
      "comment": {
       "raw": [
        "Count of rows, after applying filter, and folding on tree nodes.",
        " Obsolete! Please switch to exactRowsCount / knownRowsCount"
       ]
      },
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "from": "@epam/uui-core:DataSourceListCounts",
      "required": false
     },
     {
      "uid": 4,
      "name": "exactRowsCount",
      "comment": {
       "raw": [
        "Count of rows, if all rows loaded. Can be null while initial loading, or if API doesn't return count"
       ]
      },
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "from": "@epam/uui-core:DataSourceListCounts",
      "required": false
     },
     {
      "uid": 5,
      "name": "knownRowsCount",
      "comment": {
       "raw": [
        "There's at least knownRowsCount rows. There can be more if list is lazy loaded.",
        " Equals to exactRowsCount if all rows are loaded, or if API returns rows count",
        " Otherwise, exactRowsCount will be null, and knownRowsCount will specify number of loaded rows."
       ]
      },
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "from": "@epam/uui-core:DataSourceListCounts",
      "required": false
     },
     {
      "uid": 6,
      "name": "totalCount",
      "comment": {
       "raw": [
        "Total count of items, before applying the filter. If there's a tree, it counts all nodes, including folded children"
       ]
      },
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "from": "@epam/uui-core:DataSourceListCounts",
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui-core:DataSourceState": {
   "summary": {
    "module": "@epam/uui-core",
    "typeName": {
     "name": "DataSourceState",
     "nameFull": "DataSourceState<TFilter, TId>"
    },
    "src": "uui-core/src/types/dataSources.ts",
    "comment": {
     "raw": [
      "Holds state of a components displaying lists - like tables. Holds virtual list position, filter, search, selection, etc."
     ]
    },
    "exported": true
   },
   "details": {
    "kind": 263,
    "typeValue": {
     "raw": "DataSourceState<TFilter, TId>",
     "print": [
      "/** Holds state of a components displaying lists - like tables. Holds virtual list position, filter, search, selection, etc. */",
      "interface DataSourceState<TFilter = Record<string, any>, TId = any> extends VirtualListState {",
      "    /**",
      "     * Search value, used to filter data based on it.",
      "     * Included in the API request object when using a LazyDataSource.",
      "     * For Array and Async data sources, searching is performed internally by the datasource.",
      "     * */",
      "    search?: string;",
      "    /** Array of checked items IDs */",
      "    checked?: TId[];",
      "    /**",
      "     * A map of item IDs to their folding state.",
      "     * If an item ID is present with a `true` value, it's folded; otherwise, it's not folded.",
      "     * */",
      "    folded?: Record<string, boolean>;",
      "    /**",
      "     * Filter value used to filter data based on it.",
      "     * Included in the API request object when using a LazyDataSource.",
      "     * For Array and Async data sources, filtering is performed internally by the datasource.",
      "     * */",
      "    filter?: TFilter;",
      "    /**",
      "     * Sorting value, used to sort data based on it.",
      "     * Included in the API request object when using a LazyDataSource.",
      "     * For Array and Async data sources, sorting is performed internally by the datasource.",
      "     * */",
      "    sorting?: SortingOption[];",
      "    /** ID of selected item. It can be only one selected item at the moment. */",
      "    selectedId?: TId;",
      "    /** Index of currently focused item */",
      "    focusedIndex?: number;",
      "    /** Current page number */",
      "    page?: number;",
      "    /** The amount of items per page */",
      "    pageSize?: number;",
      "}"
     ]
    },
    "props": [
     {
      "uid": 1,
      "name": "search",
      "comment": {
       "raw": [
        "Search value, used to filter data based on it.",
        " Included in the API request object when using a LazyDataSource.",
        " For Array and Async data sources, searching is performed internally by the datasource."
       ]
      },
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "required": false
     },
     {
      "uid": 2,
      "name": "checked",
      "comment": {
       "raw": [
        "Array of checked items IDs"
       ]
      },
      "typeValue": {
       "raw": "TId[]"
      },
      "required": false
     },
     {
      "uid": 3,
      "name": "folded",
      "comment": {
       "raw": [
        "A map of item IDs to their folding state.",
        " If an item ID is present with a `true` value, it's folded; otherwise, it's not folded."
       ]
      },
      "typeValue": {
       "raw": "Record<string, boolean>"
      },
      "required": false
     },
     {
      "uid": 4,
      "name": "filter",
      "comment": {
       "raw": [
        "Filter value used to filter data based on it.",
        " Included in the API request object when using a LazyDataSource.",
        " For Array and Async data sources, filtering is performed internally by the datasource."
       ]
      },
      "typeValue": {
       "raw": "TFilter"
      },
      "required": false
     },
     {
      "uid": 5,
      "name": "sorting",
      "comment": {
       "raw": [
        "Sorting value, used to sort data based on it.",
        " Included in the API request object when using a LazyDataSource.",
        " For Array and Async data sources, sorting is performed internally by the datasource."
       ]
      },
      "typeValue": {
       "raw": "SortingOption<any>[]"
      },
      "required": false
     },
     {
      "uid": 6,
      "name": "selectedId",
      "comment": {
       "raw": [
        "ID of selected item. It can be only one selected item at the moment."
       ]
      },
      "typeValue": {
       "raw": "TId"
      },
      "required": false
     },
     {
      "uid": 7,
      "name": "focusedIndex",
      "comment": {
       "raw": [
        "Index of currently focused item"
       ]
      },
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "required": false
     },
     {
      "uid": 8,
      "name": "page",
      "comment": {
       "raw": [
        "Current page number"
       ]
      },
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "required": false
     },
     {
      "uid": 9,
      "name": "pageSize",
      "comment": {
       "raw": [
        "The amount of items per page"
       ]
      },
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "required": false
     },
     {
      "uid": 10,
      "name": "scrollTo",
      "comment": {
       "raw": [
        "Virtual list ensures that row with this Index is within the visible area, if not Virtual List .",
        " Virtual list updates this value on scroll to null when appear in the visible area.",
        " If this value is updated manually, Virtual List would scroll to the specified items.",
        " It would attempt to put scroll so this item will be at the top of the list."
       ]
      },
      "typeValue": {
       "raw": "ScrollToConfig"
      },
      "from": "@epam/uui-core:VirtualListState",
      "required": false
     },
     {
      "uid": 11,
      "name": "topIndex",
      "comment": {
       "raw": [
        "Index of the topmost item, in rendered batch.",
        " Note - this item might not be visible, as Virtual List maintain some reserve of rows on top / at the bottom of the list"
       ]
      },
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "from": "@epam/uui-core:VirtualListRange",
      "required": false
     },
     {
      "uid": 12,
      "name": "visibleCount",
      "comment": {
       "raw": [
        "Number of currently rendered items.",
        " Virtual list updates this value automatically, if it too small.",
        " Note Virtual List renders more items, that actually visible,",
        " as it need maintain some reserve of rows on top / at the bottom of the list."
       ]
      },
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "from": "@epam/uui-core:VirtualListRange",
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui-core:DataTableCellOptions": {
   "summary": {
    "module": "@epam/uui-core",
    "typeName": {
     "name": "DataTableCellOptions",
     "nameFull": "DataTableCellOptions<TItem, TId>"
    },
    "src": "uui-core/src/types/tables.ts",
    "exported": true
   },
   "details": {
    "kind": 263,
    "typeValue": {
     "raw": "DataTableCellOptions<TItem, TId>",
     "print": [
      "interface DataTableCellOptions<TItem = any, TId = any> {",
      "    /** Key to use as component's key */",
      "    key: string;",
      "    /** DataTableRowsProps object for the table row the cell is at */",
      "    rowProps: DataTableRowProps<TItem, TId>;",
      "    /** DataColumnProps object for the column the cell is at */",
      "    column: DataColumnProps<TItem, TId>;",
      "    /** Column index in table  */",
      "    index?: number;",
      "    /** True if the cell is in the first column */",
      "    isFirstColumn: boolean;",
      "    /** True if the cell is in the last column */",
      "    isLastColumn: boolean;",
      "    /** HTML tabIndex attribute to set on the cell */",
      "    tabIndex?: React.HTMLAttributes<HTMLElement>['tabIndex'];",
      "}"
     ]
    },
    "props": [
     {
      "uid": 1,
      "name": "key",
      "comment": {
       "raw": [
        "Key to use as component's key"
       ]
      },
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "required": true
     },
     {
      "uid": 2,
      "name": "rowProps",
      "comment": {
       "raw": [
        "DataTableRowsProps object for the table row the cell is at"
       ]
      },
      "typeValue": {
       "raw": "DataTableRowProps<TItem, TId>"
      },
      "required": true
     },
     {
      "uid": 3,
      "name": "column",
      "comment": {
       "raw": [
        "DataColumnProps object for the column the cell is at"
       ]
      },
      "typeValue": {
       "raw": "DataColumnProps<TItem, TId, any>"
      },
      "required": true
     },
     {
      "uid": 4,
      "name": "index",
      "comment": {
       "raw": [
        "Column index in table"
       ]
      },
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "required": false
     },
     {
      "uid": 5,
      "name": "isFirstColumn",
      "comment": {
       "raw": [
        "True if the cell is in the first column"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "required": true
     },
     {
      "uid": 6,
      "name": "isLastColumn",
      "comment": {
       "raw": [
        "True if the cell is in the last column"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "required": true
     },
     {
      "uid": 7,
      "name": "tabIndex",
      "comment": {
       "raw": [
        "HTML tabIndex attribute to set on the cell"
       ]
      },
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui-core:DataTableCellProps": {
   "summary": {
    "module": "@epam/uui-core",
    "typeName": {
     "name": "DataTableCellProps",
     "nameFull": "DataTableCellProps<TItem, TId, TCellValue>"
    },
    "src": "uui-core/src/types/tables.ts",
    "exported": true
   },
   "details": {
    "kind": 263,
    "typeValue": {
     "raw": "DataTableCellProps<TItem, TId, TCellValue>",
     "print": [
      "interface DataTableCellProps<TItem = any, TId = any, TCellValue = any> extends DataTableCellOptions<TItem, TId>, IHasCX, Partial<IEditable<TCellValue>> {",
      "    /** Add-on controls to put before the cell content (folding arrow, checkbox, etc.) */",
      "    addons?: React.ReactNode;",
      "    /** Overrides default loading placeholder ('skeleton') rendering  */",
      "    renderPlaceholder?(cellProps: DataTableCellProps<TItem, TId, TCellValue>): React.ReactNode;",
      "    renderUnknown?(cellProps: DataTableCellProps<TItem, TId, TCellValue>): React.ReactNode;",
      "    /**",
      "     * If passed, the cell is rendered as editable - receives focus, show validation errors.",
      "     * All necessary props for the editor are passed as argument:",
      "     * - props implements IEditable and can be passed directly to suitable component (like TextInput)",
      "     * - ICanFocus props are passed as well. Component should implement it so cell focus highlight works properly",
      "     * - mode='cell' prop is passed to render UUI components in 'cell' mode",
      "     * - rowProps is passed, so you depend on additional info about the row itself",
      "     */",
      "    renderEditor?(props: RenderEditorProps<TItem, TId, TCellValue>): React.ReactNode;",
      "    /** Overrides default tooltip, used to show validation message if the cell is invalid */",
      "    renderTooltip?: (props: ICanBeInvalid & TooltipCoreProps) => React.ReactElement;",
      "}"
     ]
    },
    "props": [
     {
      "uid": 1,
      "name": "addons",
      "comment": {
       "raw": [
        "Add-on controls to put before the cell content (folding arrow, checkbox, etc.)"
       ]
      },
      "typeValue": {
       "raw": "null | string | number | boolean | React.ReactElement<any, string | React.JSXElementConstructor<any>> | React.ReactFragment | React.ReactPortal"
      },
      "typeValueRef": "@types/react:ReactNode",
      "required": false
     },
     {
      "uid": 2,
      "name": "renderPlaceholder",
      "comment": {
       "raw": [
        "Overrides default loading placeholder ('skeleton') rendering"
       ]
      },
      "typeValue": {
       "raw": "(cellProps: DataTableCellProps<TItem, TId, TCellValue>) => React.ReactNode"
      },
      "editor": {
       "type": "component"
      },
      "required": false
     },
     {
      "uid": 3,
      "name": "renderUnknown",
      "typeValue": {
       "raw": "(cellProps: DataTableCellProps<TItem, TId, TCellValue>) => React.ReactNode"
      },
      "editor": {
       "type": "component"
      },
      "required": false
     },
     {
      "uid": 4,
      "name": "renderEditor",
      "comment": {
       "raw": [
        "If passed, the cell is rendered as editable - receives focus, show validation errors.",
        " All necessary props for the editor are passed as argument:",
        " - props implements IEditable and can be passed directly to suitable component (like TextInput)",
        " - ICanFocus props are passed as well. Component should implement it so cell focus highlight works properly",
        " - mode='cell' prop is passed to render UUI components in 'cell' mode",
        " - rowProps is passed, so you depend on additional info about the row itself"
       ]
      },
      "typeValue": {
       "raw": "(props: RenderEditorProps<TItem, TId, TCellValue>) => React.ReactNode"
      },
      "editor": {
       "type": "component"
      },
      "required": false
     },
     {
      "uid": 5,
      "name": "renderTooltip",
      "comment": {
       "raw": [
        "Overrides default tooltip, used to show validation message if the cell is invalid"
       ]
      },
      "typeValue": {
       "raw": "(props: ICanBeInvalid & TooltipCoreProps) => React.ReactElement<any, string | React.JSXElementConstructor<any>>"
      },
      "editor": {
       "type": "component"
      },
      "required": false
     },
     {
      "uid": 6,
      "name": "key",
      "comment": {
       "raw": [
        "Key to use as component's key"
       ]
      },
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "from": "@epam/uui-core:DataTableCellOptions",
      "required": true
     },
     {
      "uid": 7,
      "name": "rowProps",
      "comment": {
       "raw": [
        "DataTableRowsProps object for the table row the cell is at"
       ]
      },
      "typeValue": {
       "raw": "DataTableRowProps<TItem, TId>"
      },
      "from": "@epam/uui-core:DataTableCellOptions",
      "required": true
     },
     {
      "uid": 8,
      "name": "column",
      "comment": {
       "raw": [
        "DataColumnProps object for the column the cell is at"
       ]
      },
      "typeValue": {
       "raw": "DataColumnProps<TItem, TId, any>"
      },
      "from": "@epam/uui-core:DataTableCellOptions",
      "required": true
     },
     {
      "uid": 9,
      "name": "index",
      "comment": {
       "raw": [
        "Column index in table"
       ]
      },
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "from": "@epam/uui-core:DataTableCellOptions",
      "required": false
     },
     {
      "uid": 10,
      "name": "isFirstColumn",
      "comment": {
       "raw": [
        "True if the cell is in the first column"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:DataTableCellOptions",
      "required": true
     },
     {
      "uid": 11,
      "name": "isLastColumn",
      "comment": {
       "raw": [
        "True if the cell is in the last column"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:DataTableCellOptions",
      "required": true
     },
     {
      "uid": 12,
      "name": "tabIndex",
      "comment": {
       "raw": [
        "HTML tabIndex attribute to set on the cell"
       ]
      },
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "from": "@epam/uui-core:DataTableCellOptions",
      "required": false
     },
     {
      "uid": 13,
      "name": "cx",
      "comment": {
       "raw": [
        "CSS class(es) to put on component's root. See {@link https://github.com/JedWatson/classnames#usage} for details"
       ]
      },
      "typeValue": {
       "raw": "null | string | number | boolean | ClassDictionary | ClassArray"
      },
      "typeValueRef": "@epam/uui-core:ClassValue",
      "from": "@epam/uui-core:IHasCX",
      "required": false
     },
     {
      "uid": 14,
      "name": "value",
      "comment": {
       "raw": [
        "The current value of component"
       ]
      },
      "typeValue": {
       "raw": "TCellValue"
      },
      "from": "@epam/uui-core:IEditable",
      "required": true
     },
     {
      "uid": 15,
      "name": "onValueChange",
      "comment": {
       "raw": [
        "Called when value needs to be changed (usually due to user interaction)"
       ]
      },
      "typeValue": {
       "raw": "(newValue: TCellValue) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IEditable",
      "required": true
     },
     {
      "uid": 16,
      "name": "isInvalid",
      "comment": {
       "raw": [
        "True if component contains invalid input"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:ICanBeInvalid",
      "required": false
     },
     {
      "uid": 17,
      "name": "validationMessage",
      "comment": {
       "raw": [
        "Message describing why the value is invalid"
       ]
      },
      "typeValue": {
       "raw": "null | string | number | boolean | React.ReactElement<any, string | React.JSXElementConstructor<any>> | React.ReactFragment | React.ReactPortal"
      },
      "from": "@epam/uui-core:ICanBeInvalid",
      "required": false
     },
     {
      "uid": 18,
      "name": "validationProps",
      "comment": {
       "raw": [
        "If T is a complex value (object or array), this property contains validation states of inner items"
       ]
      },
      "typeValue": {
       "raw": "{ [key: string]: ICanBeInvalid; }"
      },
      "from": "@epam/uui-core:ICanBeInvalid",
      "required": false
     },
     {
      "uid": 19,
      "name": "isDisabled",
      "comment": {
       "raw": [
        "Disable editing, and visually de-emphasize value of the component"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:IDisableable",
      "required": false
     },
     {
      "uid": 20,
      "name": "isReadonly",
      "comment": {
       "raw": [
        "Disable editing. Unlike isDisabled, keep component's value readable."
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:ICanBeReadonly",
      "required": false
     },
     {
      "uid": 21,
      "name": "isRequired",
      "comment": {
       "raw": [
        "Marks that component's value is required and shouldn't be empty"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:ICanBeRequired",
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui-core:DataTableColumnsConfigOptions": {
   "summary": {
    "module": "@epam/uui-core",
    "typeName": {
     "name": "DataTableColumnsConfigOptions",
     "nameFull": "DataTableColumnsConfigOptions"
    },
    "src": "uui-core/src/types/tables.ts",
    "exported": true
   },
   "details": {
    "kind": 263,
    "typeValue": {
     "raw": "DataTableColumnsConfigOptions",
     "print": [
      "interface DataTableColumnsConfigOptions {",
      "    /** If true, allows user to change columns order",
      "     * @default false",
      "     * */",
      "    allowColumnsReordering?: boolean;",
      "    /** If true, allows user to change columns width",
      "     * @default false",
      "     * */",
      "    allowColumnsResizing?: boolean;",
      "}"
     ]
    },
    "props": [
     {
      "uid": 1,
      "name": "allowColumnsReordering",
      "comment": {
       "raw": [
        "If true, allows user to change columns order",
        " @default false"
       ],
       "tags": {
        "@default": false
       }
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "required": false
     },
     {
      "uid": 2,
      "name": "allowColumnsResizing",
      "comment": {
       "raw": [
        "If true, allows user to change columns width",
        " @default false"
       ],
       "tags": {
        "@default": false
       }
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui-core:DataTableConfigModalParams": {
   "summary": {
    "module": "@epam/uui-core",
    "typeName": {
     "name": "DataTableConfigModalParams",
     "nameFull": "DataTableConfigModalParams"
    },
    "src": "uui-core/src/types/tables.ts",
    "exported": true
   },
   "details": {
    "kind": 264,
    "typeValue": {
     "raw": "DataTableConfigModalParams",
     "print": [
      "type DataTableConfigModalParams = IEditable<DataSourceState> & {",
      "    columns: DataColumnProps[];",
      "};"
     ]
    },
    "props": [
     {
      "uid": 1,
      "name": "value",
      "comment": {
       "raw": [
        "The current value of component"
       ]
      },
      "typeValue": {
       "raw": "DataSourceState<Record<string, any>, any>"
      },
      "from": "@epam/uui-core:IEditable",
      "required": true
     },
     {
      "uid": 2,
      "name": "onValueChange",
      "comment": {
       "raw": [
        "Called when value needs to be changed (usually due to user interaction)"
       ]
      },
      "typeValue": {
       "raw": "(newValue: DataSourceState<Record<string, any>, any>) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IEditable",
      "required": true
     },
     {
      "uid": 3,
      "name": "isInvalid",
      "comment": {
       "raw": [
        "True if component contains invalid input"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:ICanBeInvalid",
      "required": false
     },
     {
      "uid": 4,
      "name": "validationMessage",
      "comment": {
       "raw": [
        "Message describing why the value is invalid"
       ]
      },
      "typeValue": {
       "raw": "null | string | number | boolean | React.ReactElement<any, string | React.JSXElementConstructor<any>> | React.ReactFragment | React.ReactPortal"
      },
      "typeValueRef": "@types/react:ReactNode",
      "from": "@epam/uui-core:ICanBeInvalid",
      "required": false
     },
     {
      "uid": 5,
      "name": "validationProps",
      "comment": {
       "raw": [
        "If T is a complex value (object or array), this property contains validation states of inner items"
       ]
      },
      "typeValue": {
       "raw": "{ [key: string]: ICanBeInvalid; }"
      },
      "from": "@epam/uui-core:ICanBeInvalid",
      "required": false
     },
     {
      "uid": 6,
      "name": "isDisabled",
      "comment": {
       "raw": [
        "Disable editing, and visually de-emphasize value of the component"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:IDisableable",
      "required": false
     },
     {
      "uid": 7,
      "name": "isReadonly",
      "comment": {
       "raw": [
        "Disable editing. Unlike isDisabled, keep component's value readable."
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:ICanBeReadonly",
      "required": false
     },
     {
      "uid": 8,
      "name": "isRequired",
      "comment": {
       "raw": [
        "Marks that component's value is required and shouldn't be empty"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:ICanBeRequired",
      "required": false
     },
     {
      "uid": 9,
      "name": "columns",
      "typeValue": {
       "raw": "DataColumnProps<any, any, any>[]"
      },
      "required": true
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui-core:DataTableHeaderCellProps": {
   "summary": {
    "module": "@epam/uui-core",
    "typeName": {
     "name": "DataTableHeaderCellProps",
     "nameFull": "DataTableHeaderCellProps<TItem, TId>"
    },
    "src": "uui-core/src/types/tables.ts",
    "exported": true
   },
   "details": {
    "kind": 263,
    "typeValue": {
     "raw": "DataTableHeaderCellProps<TItem, TId>",
     "print": [
      "interface DataTableHeaderCellProps<TItem = any, TId = any> extends IEditable<DataTableState>, IDropdownToggler, IHasCX, DataTableColumnsConfigOptions {",
      "    key: string;",
      "    column: DataColumnProps<TItem, TId>;",
      "    isFirstColumn: boolean;",
      "    isLastColumn: boolean;",
      "    selectAll?: ICheckable;",
      "    isFilterActive?: boolean;",
      "    sortDirection?: SortDirection;",
      "    onSort(dir: SortDirection): void;",
      "    onDrop?(params: DropParams<DataColumnProps<TItem, TId>, DataColumnProps<TItem, TId>>): void;",
      "    renderFilter?: (dropdownProps: IDropdownBodyProps) => React.ReactNode;",
      "}"
     ]
    },
    "props": [
     {
      "uid": 1,
      "name": "key",
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "required": true
     },
     {
      "uid": 2,
      "name": "column",
      "typeValue": {
       "raw": "DataColumnProps<TItem, TId, any>"
      },
      "required": true
     },
     {
      "uid": 3,
      "name": "isFirstColumn",
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "required": true
     },
     {
      "uid": 4,
      "name": "isLastColumn",
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "required": true
     },
     {
      "uid": 5,
      "name": "selectAll",
      "typeValue": {
       "raw": "ICheckable"
      },
      "required": false
     },
     {
      "uid": 6,
      "name": "isFilterActive",
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "required": false
     },
     {
      "uid": 7,
      "name": "sortDirection",
      "typeValue": {
       "raw": "'asc' | 'desc'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "asc",
        "desc"
       ]
      },
      "required": false
     },
     {
      "uid": 8,
      "name": "onSort",
      "typeValue": {
       "raw": "(dir: SortDirection) => void"
      },
      "editor": {
       "type": "func"
      },
      "required": true
     },
     {
      "uid": 9,
      "name": "onDrop",
      "typeValue": {
       "raw": "(params: DropParams<DataColumnProps<TItem, TId, any>, DataColumnProps<TItem, TId, any>>) => void"
      },
      "editor": {
       "type": "func"
      },
      "required": false
     },
     {
      "uid": 10,
      "name": "renderFilter",
      "typeValue": {
       "raw": "(dropdownProps: IDropdownBodyProps) => React.ReactNode"
      },
      "editor": {
       "type": "component"
      },
      "required": false
     },
     {
      "uid": 11,
      "name": "value",
      "comment": {
       "raw": [
        "The current value of component"
       ]
      },
      "typeValue": {
       "raw": "DataTableState<any, any>"
      },
      "from": "@epam/uui-core:IEditable",
      "required": true
     },
     {
      "uid": 12,
      "name": "onValueChange",
      "comment": {
       "raw": [
        "Called when value needs to be changed (usually due to user interaction)"
       ]
      },
      "typeValue": {
       "raw": "(newValue: DataTableState<any, any>) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IEditable",
      "required": true
     },
     {
      "uid": 13,
      "name": "isInvalid",
      "comment": {
       "raw": [
        "True if component contains invalid input"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:ICanBeInvalid",
      "required": false
     },
     {
      "uid": 14,
      "name": "validationMessage",
      "comment": {
       "raw": [
        "Message describing why the value is invalid"
       ]
      },
      "typeValue": {
       "raw": "null | string | number | boolean | React.ReactElement<any, string | React.JSXElementConstructor<any>> | React.ReactFragment | React.ReactPortal"
      },
      "typeValueRef": "@types/react:ReactNode",
      "from": "@epam/uui-core:ICanBeInvalid",
      "required": false
     },
     {
      "uid": 15,
      "name": "validationProps",
      "comment": {
       "raw": [
        "If T is a complex value (object or array), this property contains validation states of inner items"
       ]
      },
      "typeValue": {
       "raw": "{ [key: string]: ICanBeInvalid; }"
      },
      "from": "@epam/uui-core:ICanBeInvalid",
      "required": false
     },
     {
      "uid": 16,
      "name": "isDisabled",
      "comment": {
       "raw": [
        "Disable editing, and visually de-emphasize value of the component"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:IDisableable",
      "required": false
     },
     {
      "uid": 17,
      "name": "isReadonly",
      "comment": {
       "raw": [
        "Disable editing. Unlike isDisabled, keep component's value readable."
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:ICanBeReadonly",
      "required": false
     },
     {
      "uid": 18,
      "name": "isRequired",
      "comment": {
       "raw": [
        "Marks that component's value is required and shouldn't be empty"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:ICanBeRequired",
      "required": false
     },
     {
      "uid": 19,
      "name": "isOpen",
      "comment": {
       "raw": [
        "When isDropdown=true, indicate that dropdown is open with chevron icon"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:IDropdownToggler",
      "required": false
     },
     {
      "uid": 20,
      "name": "isDropdown",
      "comment": {
       "raw": [
        "Shows chevron icon, enabling component to act as dropdown toggler"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:IDropdownToggler",
      "required": false
     },
     {
      "uid": 21,
      "name": "toggleDropdownOpening",
      "comment": {
       "raw": [
        "Called when associated dropdown should open or close"
       ]
      },
      "typeValue": {
       "raw": "(value: boolean) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IDropdownToggler",
      "required": false
     },
     {
      "uid": 22,
      "name": "isInteractedOutside",
      "comment": {
       "raw": [
        "Called when component is interacted outside, to close the dropdown"
       ]
      },
      "typeValue": {
       "raw": "(event: Event) => boolean"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IDropdownToggler",
      "required": false
     },
     {
      "uid": 23,
      "name": "ref",
      "comment": {
       "raw": [
        "Component's ref"
       ]
      },
      "typeValue": {
       "raw": "null | (instance: any) => void | React.RefObject<any>"
      },
      "from": "@epam/uui-core:IDropdownToggler",
      "required": false
     },
     {
      "uid": 24,
      "name": "caption",
      "comment": {
       "raw": [
        "Caption. Can be a string, or React.Elements. Certain components supports minimal markup (<b>,<i>,<a>) in captions."
       ]
      },
      "typeValue": {
       "raw": "any"
      },
      "from": "@epam/uui-core:IHasCaption",
      "required": false
     },
     {
      "uid": 25,
      "name": "onClick",
      "comment": {
       "raw": [
        "Called when component is clicked"
       ]
      },
      "typeValue": {
       "raw": "(e?: any) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IClickable",
      "required": false
     },
     {
      "uid": 26,
      "name": "cx",
      "comment": {
       "raw": [
        "CSS class(es) to put on component's root. See {@link https://github.com/JedWatson/classnames#usage} for details"
       ]
      },
      "typeValue": {
       "raw": "null | string | number | boolean | ClassDictionary | ClassArray"
      },
      "typeValueRef": "@epam/uui-core:ClassValue",
      "from": "@epam/uui-core:IHasCX",
      "required": false
     },
     {
      "uid": 27,
      "name": "allowColumnsReordering",
      "comment": {
       "raw": [
        "If true, allows user to change columns order",
        " @default false"
       ],
       "tags": {
        "@default": false
       }
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:DataTableColumnsConfigOptions",
      "required": false
     },
     {
      "uid": 28,
      "name": "allowColumnsResizing",
      "comment": {
       "raw": [
        "If true, allows user to change columns width",
        " @default false"
       ],
       "tags": {
        "@default": false
       }
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:DataTableColumnsConfigOptions",
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui-core:DataTableHeaderRowProps": {
   "summary": {
    "module": "@epam/uui-core",
    "typeName": {
     "name": "DataTableHeaderRowProps",
     "nameFull": "DataTableHeaderRowProps<TItem, TId>"
    },
    "src": "uui-core/src/types/tables.ts",
    "exported": true
   },
   "details": {
    "kind": 263,
    "typeValue": {
     "raw": "DataTableHeaderRowProps<TItem, TId>",
     "print": [
      "interface DataTableHeaderRowProps<TItem = any, TId = any> extends IEditable<DataTableState>, IHasCX, DataTableColumnsConfigOptions {",
      "    columns: DataColumnProps<TItem, TId>[];",
      "    selectAll?: ICheckable;",
      "    onConfigButtonClick?: (params: DataTableConfigModalParams) => any;",
      "    renderCell?: (props: DataTableHeaderCellProps<TItem, TId>) => React.ReactNode;",
      "    renderConfigButton?: () => React.ReactNode;",
      "}"
     ]
    },
    "props": [
     {
      "uid": 1,
      "name": "columns",
      "typeValue": {
       "raw": "DataColumnProps<TItem, TId, any>[]"
      },
      "required": true
     },
     {
      "uid": 2,
      "name": "selectAll",
      "typeValue": {
       "raw": "ICheckable"
      },
      "required": false
     },
     {
      "uid": 3,
      "name": "onConfigButtonClick",
      "typeValue": {
       "raw": "(params: DataTableConfigModalParams) => any"
      },
      "editor": {
       "type": "func"
      },
      "required": false
     },
     {
      "uid": 4,
      "name": "renderCell",
      "typeValue": {
       "raw": "(props: DataTableHeaderCellProps<TItem, TId>) => React.ReactNode"
      },
      "editor": {
       "type": "component"
      },
      "required": false
     },
     {
      "uid": 5,
      "name": "renderConfigButton",
      "typeValue": {
       "raw": "() => React.ReactNode"
      },
      "editor": {
       "type": "component"
      },
      "required": false
     },
     {
      "uid": 6,
      "name": "value",
      "comment": {
       "raw": [
        "The current value of component"
       ]
      },
      "typeValue": {
       "raw": "DataTableState<any, any>"
      },
      "from": "@epam/uui-core:IEditable",
      "required": true
     },
     {
      "uid": 7,
      "name": "onValueChange",
      "comment": {
       "raw": [
        "Called when value needs to be changed (usually due to user interaction)"
       ]
      },
      "typeValue": {
       "raw": "(newValue: DataTableState<any, any>) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IEditable",
      "required": true
     },
     {
      "uid": 8,
      "name": "isInvalid",
      "comment": {
       "raw": [
        "True if component contains invalid input"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:ICanBeInvalid",
      "required": false
     },
     {
      "uid": 9,
      "name": "validationMessage",
      "comment": {
       "raw": [
        "Message describing why the value is invalid"
       ]
      },
      "typeValue": {
       "raw": "null | string | number | boolean | React.ReactElement<any, string | React.JSXElementConstructor<any>> | React.ReactFragment | React.ReactPortal"
      },
      "typeValueRef": "@types/react:ReactNode",
      "from": "@epam/uui-core:ICanBeInvalid",
      "required": false
     },
     {
      "uid": 10,
      "name": "validationProps",
      "comment": {
       "raw": [
        "If T is a complex value (object or array), this property contains validation states of inner items"
       ]
      },
      "typeValue": {
       "raw": "{ [key: string]: ICanBeInvalid; }"
      },
      "from": "@epam/uui-core:ICanBeInvalid",
      "required": false
     },
     {
      "uid": 11,
      "name": "isDisabled",
      "comment": {
       "raw": [
        "Disable editing, and visually de-emphasize value of the component"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:IDisableable",
      "required": false
     },
     {
      "uid": 12,
      "name": "isReadonly",
      "comment": {
       "raw": [
        "Disable editing. Unlike isDisabled, keep component's value readable."
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:ICanBeReadonly",
      "required": false
     },
     {
      "uid": 13,
      "name": "isRequired",
      "comment": {
       "raw": [
        "Marks that component's value is required and shouldn't be empty"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:ICanBeRequired",
      "required": false
     },
     {
      "uid": 14,
      "name": "cx",
      "comment": {
       "raw": [
        "CSS class(es) to put on component's root. See {@link https://github.com/JedWatson/classnames#usage} for details"
       ]
      },
      "typeValue": {
       "raw": "null | string | number | boolean | ClassDictionary | ClassArray"
      },
      "typeValueRef": "@epam/uui-core:ClassValue",
      "from": "@epam/uui-core:IHasCX",
      "required": false
     },
     {
      "uid": 15,
      "name": "allowColumnsReordering",
      "comment": {
       "raw": [
        "If true, allows user to change columns order",
        " @default false"
       ],
       "tags": {
        "@default": false
       }
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:DataTableColumnsConfigOptions",
      "required": false
     },
     {
      "uid": 16,
      "name": "allowColumnsResizing",
      "comment": {
       "raw": [
        "If true, allows user to change columns width",
        " @default false"
       ],
       "tags": {
        "@default": false
       }
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:DataTableColumnsConfigOptions",
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui-core:DataTableRowProps": {
   "summary": {
    "module": "@epam/uui-core",
    "typeName": {
     "name": "DataTableRowProps",
     "nameFull": "DataTableRowProps<TItem, TId>"
    },
    "src": "uui-core/src/types/tables.ts",
    "exported": true
   },
   "details": {
    "kind": 263,
    "typeValue": {
     "raw": "DataTableRowProps<TItem, TId>",
     "print": [
      "interface DataTableRowProps<TItem = any, TId = any> extends DataRowProps<TItem, TId> {",
      "    /** Array of visible columns */",
      "    columns?: DataColumnProps<TItem, TId>[];",
      "    /**",
      "     * Render callback for each cell at row.",
      "     * If omitted, default cell renderer will be used.",
      "     * */",
      "    renderCell?: (props: DataTableCellProps<TItem, TId, any>) => ReactNode;",
      "    /**",
      "     * Render callback for the drop marker. Rendered only if 'dnd' option was provided via getRowProps.",
      "     * If omitted, default renderer will be used.",
      "     * */",
      "    renderDropMarkers?: (props: DndActorRenderParams) => ReactNode;",
      "}"
     ]
    },
    "props": [
     {
      "uid": 1,
      "name": "columns",
      "comment": {
       "raw": [
        "Array of visible columns"
       ]
      },
      "typeValue": {
       "raw": "DataColumnProps<TItem, TId, any>[]"
      },
      "required": false
     },
     {
      "uid": 2,
      "name": "renderCell",
      "comment": {
       "raw": [
        "Render callback for each cell at row.",
        " If omitted, default cell renderer will be used."
       ]
      },
      "typeValue": {
       "raw": "(props: DataTableCellProps<TItem, TId, any>) => React.ReactNode"
      },
      "editor": {
       "type": "component"
      },
      "required": false
     },
     {
      "uid": 3,
      "name": "renderDropMarkers",
      "comment": {
       "raw": [
        "Render callback for the drop marker. Rendered only if 'dnd' option was provided via getRowProps.",
        " If omitted, default renderer will be used."
       ]
      },
      "typeValue": {
       "raw": "(props: DndActorRenderParams) => React.ReactNode"
      },
      "editor": {
       "type": "component"
      },
      "required": false
     },
     {
      "uid": 4,
      "name": "cx",
      "comment": {
       "raw": [
        "CSS class(es) to put on component's root. See {@link https://github.com/JedWatson/classnames#usage} for details"
       ]
      },
      "typeValue": {
       "raw": "null | string | number | boolean | ClassDictionary | ClassArray"
      },
      "typeValueRef": "@epam/uui-core:ClassValue",
      "from": "@epam/uui-core:IHasCX",
      "required": false
     },
     {
      "uid": 5,
      "name": "onClick",
      "comment": {
       "raw": [
        "Called when component is clicked"
       ]
      },
      "typeValue": {
       "raw": "((e?: any) => void) & ((rowProps: DataRowProps<TItem, TId>) => void) & ((rowProps: DataRowProps<TItem, TId>) => void)"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IClickable",
      "required": false
     },
     {
      "uid": 6,
      "name": "key",
      "typeValue": {
       "raw": "null | string | number"
      },
      "from": "@types/react:Attributes",
      "required": false
     },
     {
      "uid": 7,
      "name": "children",
      "typeValue": {
       "raw": "null | string | number | boolean | React.ReactElement<any, string | React.JSXElementConstructor<any>> | React.ReactFragment | React.ReactPortal"
      },
      "typeValueRef": "@types/react:ReactNode",
      "from": "@epam/uui-core:IHasChildren",
      "required": false
     },
     {
      "uid": 8,
      "name": "rawProps",
      "comment": {
       "raw": [
        "Any HTML attributes (native or 'data-') to put on the underlying component"
       ]
      },
      "typeValue": {
       "raw": "React.HTMLAttributes<HTMLDivElement> & Record<`data-${string}`, string>"
      },
      "from": "@epam/uui-core:IHasRawProps",
      "required": false
     },
     {
      "uid": 9,
      "name": "alignItems",
      "comment": {
       "raw": [
        "Flexbox align-items property [Flexbox Guide](https://css-tricks.com/snippets/css/a-guide-to-flexbox/)"
       ]
      },
      "typeValue": {
       "raw": "'top' | 'bottom' | 'center' | 'stretch'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "top",
        "bottom",
        "center",
        "stretch"
       ]
      },
      "from": "@epam/uui-core:FlexRowProps",
      "required": false
     },
     {
      "uid": 10,
      "name": "columnGap",
      "comment": {
       "raw": [
        "Flexbox column gap property [Flexbox Guide](https://css-tricks.com/snippets/css/a-guide-to-flexbox/#aa-gap-row-gap-column-gap)"
       ]
      },
      "typeValue": {
       "raw": "number | '6' | '12' | '18' | '24' | '36'"
      },
      "from": "@epam/uui-core:FlexRowProps",
      "required": false
     },
     {
      "uid": 11,
      "name": "rowGap",
      "comment": {
       "raw": [
        "Flexbox row gap property [Flexbox Guide](https://css-tricks.com/snippets/css/a-guide-to-flexbox/#aa-gap-row-gap-column-gap)"
       ]
      },
      "typeValue": {
       "raw": "number | '6' | '12' | '18' | '24' | '36'"
      },
      "from": "@epam/uui-core:FlexRowProps",
      "required": false
     },
     {
      "uid": 12,
      "name": "checkbox",
      "comment": {
       "raw": [
        "If row needs a checkbox, this field should be specified and it props can be configured here"
       ]
      },
      "typeValue": {
       "raw": "{ isVisible: boolean; } & IDisableable & ICanBeInvalid"
      },
      "from": "@epam/uui-core:DataRowOptions",
      "required": false
     },
     {
      "uid": 13,
      "name": "isSelectable",
      "comment": {
       "raw": [
        "True if row is selectable (for whole-row single-selection, multi-selection via checkbox are configured with the checkbox prop)"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:DataRowOptions",
      "required": false
     },
     {
      "uid": 14,
      "name": "dnd",
      "comment": {
       "raw": [
        "Configures row drag-n-drop options - if it can be dragged, can rows can be dropped into it, etc."
       ]
      },
      "typeValue": {
       "raw": "IDndActor<any, any>"
      },
      "from": "@epam/uui-core:DataRowOptions",
      "required": false
     },
     {
      "uid": 15,
      "name": "link",
      "comment": {
       "raw": [
        "Can be specified to make row act as a link (plain or SPA)"
       ]
      },
      "typeValue": {
       "raw": "Link"
      },
      "from": "@epam/uui-core:DataRowOptions",
      "required": false
     },
     {
      "uid": 16,
      "name": "pin",
      "comment": {
       "raw": [
        "A pure function that gets pinned state for each row.",
        " If row pinned, it means that it will be sticky inside their parent section."
       ]
      },
      "typeValue": {
       "raw": "(rowProps: DataRowProps<TItem, TId>) => boolean"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:DataRowOptions",
      "required": false
     },
     {
      "uid": 17,
      "name": "isDisabled",
      "comment": {
       "raw": [
        "Disable editing, and visually de-emphasize value of the component"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:IDisableable",
      "required": false
     },
     {
      "uid": 18,
      "name": "value",
      "comment": {
       "raw": [
        "The current value of component"
       ]
      },
      "typeValue": {
       "raw": "TItem"
      },
      "from": "@epam/uui-core:IEditable",
      "required": true
     },
     {
      "uid": 19,
      "name": "onValueChange",
      "comment": {
       "raw": [
        "Called when value needs to be changed (usually due to user interaction)"
       ]
      },
      "typeValue": {
       "raw": "(newValue: TItem) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IEditable",
      "required": true
     },
     {
      "uid": 20,
      "name": "isInvalid",
      "comment": {
       "raw": [
        "True if component contains invalid input"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:ICanBeInvalid",
      "required": false
     },
     {
      "uid": 21,
      "name": "validationMessage",
      "comment": {
       "raw": [
        "Message describing why the value is invalid"
       ]
      },
      "typeValue": {
       "raw": "null | string | number | boolean | React.ReactElement<any, string | React.JSXElementConstructor<any>> | React.ReactFragment | React.ReactPortal"
      },
      "from": "@epam/uui-core:ICanBeInvalid",
      "required": false
     },
     {
      "uid": 22,
      "name": "validationProps",
      "comment": {
       "raw": [
        "If T is a complex value (object or array), this property contains validation states of inner items"
       ]
      },
      "typeValue": {
       "raw": "{ [key: string]: ICanBeInvalid; }"
      },
      "from": "@epam/uui-core:ICanBeInvalid",
      "required": false
     },
     {
      "uid": 23,
      "name": "isReadonly",
      "comment": {
       "raw": [
        "Disable editing. Unlike isDisabled, keep component's value readable."
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:ICanBeReadonly",
      "required": false
     },
     {
      "uid": 24,
      "name": "isRequired",
      "comment": {
       "raw": [
        "Marks that component's value is required and shouldn't be empty"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:ICanBeRequired",
      "required": false
     },
     {
      "uid": 25,
      "name": "id",
      "comment": {
       "raw": [
        "ID of the TItem rows displays"
       ]
      },
      "typeValue": {
       "raw": "TId"
      },
      "from": "@epam/uui-core:DataRowProps",
      "required": true
     },
     {
      "uid": 26,
      "name": "rowKey",
      "comment": {
       "raw": [
        "Key to be used as component's key when rendering. Usually, it's stringified ID"
       ]
      },
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "from": "@epam/uui-core:DataRowProps",
      "required": true
     },
     {
      "uid": 27,
      "name": "index",
      "comment": {
       "raw": [
        "Index of the row, from the top of the list. This doesn't account any hierarchy."
       ]
      },
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "from": "@epam/uui-core:DataRowProps",
      "required": true
     },
     {
      "uid": 28,
      "name": "parentId",
      "comment": {
       "raw": [
        "ID of the parent TItem"
       ]
      },
      "typeValue": {
       "raw": "TId"
      },
      "from": "@epam/uui-core:DataRowProps",
      "required": false
     },
     {
      "uid": 29,
      "name": "path",
      "comment": {
       "raw": [
        "Hierarchical path from the root node to the item (excluding the item itself)"
       ]
      },
      "typeValue": {
       "raw": "DataRowPathItem<TId, TItem>[]"
      },
      "from": "@epam/uui-core:DataRowProps",
      "required": false
     },
     {
      "uid": 30,
      "name": "depth",
      "comment": {
       "raw": [
        "Depth of the row in tree, 0 for the top-level"
       ]
      },
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "from": "@epam/uui-core:DataRowProps",
      "required": false
     },
     {
      "uid": 31,
      "name": "indent",
      "comment": {
       "raw": [
        "Indent of the item, to show hierarchy.",
        "  Unlike depth, it contains additional logic, to not add unnecessary indents:",
        "  if all children of node has no children, all nodes would get the same indent as parent."
       ]
      },
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "from": "@epam/uui-core:DataRowProps",
      "required": false
     },
     {
      "uid": 32,
      "name": "isLoading",
      "comment": {
       "raw": [
        "True if row is in loading state. 'value' is empty in this case"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:DataRowProps",
      "required": false
     },
     {
      "uid": 33,
      "name": "isUnknown",
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:DataRowProps",
      "required": false
     },
     {
      "uid": 34,
      "name": "isFoldable",
      "comment": {
       "raw": [
        "True if row be folded or unfolded (usually because it contains children)"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:DataRowProps",
      "required": false
     },
     {
      "uid": 35,
      "name": "isFolded",
      "comment": {
       "raw": [
        "True if row is currently folded"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:DataRowProps",
      "required": false
     },
     {
      "uid": 36,
      "name": "isChecked",
      "comment": {
       "raw": [
        "True if row is checked with checkbox"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:DataRowProps",
      "required": false
     },
     {
      "uid": 37,
      "name": "isCheckable",
      "comment": {
       "raw": [
        "True if row has checkbox and can be checkable"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:DataRowProps",
      "required": false
     },
     {
      "uid": 38,
      "name": "isChildrenChecked",
      "comment": {
       "raw": [
        "True if some of row's children are checked.",
        " Used to show 'indefinite' checkbox state, to show user that something inside is checked"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:DataRowProps",
      "required": false
     },
     {
      "uid": 39,
      "name": "isSelected",
      "comment": {
       "raw": [
        "True if row is selected (in single-select mode, or in case when interface use both single row selection and checkboxes)"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:DataRowProps",
      "required": false
     },
     {
      "uid": 40,
      "name": "isChildrenSelected",
      "comment": {
       "raw": [
        "True if any of row's children is selected."
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:DataRowProps",
      "required": false
     },
     {
      "uid": 41,
      "name": "isFocused",
      "comment": {
       "raw": [
        "True if row is focused. Focus can be changed via keyboard arrow keys, or by hovering mouse on top of the row"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:DataRowProps",
      "required": false
     },
     {
      "uid": 42,
      "name": "isLastChild",
      "comment": {
       "raw": [
        "True if row is the last child of his parent"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:DataRowProps",
      "required": false
     },
     {
      "uid": 43,
      "name": "onFold",
      "comment": {
       "raw": [
        "Handles row folding change.",
        " We demand to pass the row as well, to avoid creating closures for each row."
       ]
      },
      "typeValue": {
       "raw": "(rowProps: DataRowProps<TItem, TId>) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:DataRowProps",
      "required": false
     },
     {
      "uid": 44,
      "name": "onCheck",
      "comment": {
       "raw": [
        "Handles row checkbox change.",
        " We demand to pass the row as well, to avoid creating closures for each row."
       ]
      },
      "typeValue": {
       "raw": "(rowProps: DataRowProps<TItem, TId>) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:DataRowProps",
      "required": false
     },
     {
      "uid": 45,
      "name": "onSelect",
      "comment": {
       "raw": [
        "Handles row selection.",
        " We demand to pass the row as well, to avoid creating closures for each row."
       ]
      },
      "typeValue": {
       "raw": "(rowProps: DataRowProps<TItem, TId>) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:DataRowProps",
      "required": false
     },
     {
      "uid": 46,
      "name": "onFocus",
      "comment": {
       "raw": [
        "Handles row focusing."
       ]
      },
      "typeValue": {
       "raw": "(focusedIndex: number) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:DataRowProps",
      "required": false
     },
     {
      "uid": 47,
      "name": "isPinned",
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:DataRowProps",
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui-core:DataTableSelectedCellData": {
   "summary": {
    "module": "@epam/uui-core",
    "typeName": {
     "name": "DataTableSelectedCellData",
     "nameFull": "DataTableSelectedCellData<TItem, TId, TFilter>"
    },
    "src": "uui-core/src/types/tables.ts",
    "exported": true
   },
   "details": {
    "kind": 263,
    "typeValue": {
     "raw": "DataTableSelectedCellData<TItem, TId, TFilter>",
     "print": [
      "interface DataTableSelectedCellData<TItem = any, TId = any, TFilter = any> {",
      "    /** Column props of the selected cell */",
      "    column: DataColumnProps<TItem, TId, TFilter>;",
      "    /** Row props of the selected cell */",
      "    row: DataRowProps<TItem, TId>;",
      "}"
     ]
    },
    "props": [
     {
      "uid": 1,
      "name": "column",
      "comment": {
       "raw": [
        "Column props of the selected cell"
       ]
      },
      "typeValue": {
       "raw": "DataColumnProps<TItem, TId, TFilter>"
      },
      "required": true
     },
     {
      "uid": 2,
      "name": "row",
      "comment": {
       "raw": [
        "Row props of the selected cell"
       ]
      },
      "typeValue": {
       "raw": "DataRowProps<TItem, TId>"
      },
      "typeValueRef": "@epam/uui-core:DataRowProps",
      "required": true
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui-core:DataTableState": {
   "summary": {
    "module": "@epam/uui-core",
    "typeName": {
     "name": "DataTableState",
     "nameFull": "DataTableState<TFilter, TViewState>"
    },
    "src": "uui-core/src/types/tables.ts",
    "exported": true
   },
   "details": {
    "kind": 263,
    "typeValue": {
     "raw": "DataTableState<TFilter, TViewState>",
     "print": [
      "interface DataTableState<TFilter = any, TViewState = any> extends DataSourceState<TFilter> {",
      "    /** Configuration of columns at the DataTable. Used to define column visibility, width and order */",
      "    columnsConfig?: ColumnsConfig;",
      "    /** Configuration of filter at the FilterPanel. Used to define filter visibility and order */",
      "    filtersConfig?: FiltersConfig;",
      "    /** ID of currently selected preset */",
      "    presetId?: number | null;",
      "    /** State which will not trigger data reloading, but will be stored in presets or URL */",
      "    viewState?: TViewState;",
      "}"
     ]
    },
    "props": [
     {
      "uid": 1,
      "name": "columnsConfig",
      "comment": {
       "raw": [
        "Configuration of columns at the DataTable. Used to define column visibility, width and order"
       ]
      },
      "typeValue": {
       "raw": "ColumnsConfig"
      },
      "required": false
     },
     {
      "uid": 2,
      "name": "filtersConfig",
      "comment": {
       "raw": [
        "Configuration of filter at the FilterPanel. Used to define filter visibility and order"
       ]
      },
      "typeValue": {
       "raw": "FiltersConfig<any>"
      },
      "required": false
     },
     {
      "uid": 3,
      "name": "presetId",
      "comment": {
       "raw": [
        "ID of currently selected preset"
       ]
      },
      "typeValue": {
       "raw": "null | number"
      },
      "editor": {
       "type": "number"
      },
      "required": false
     },
     {
      "uid": 4,
      "name": "viewState",
      "comment": {
       "raw": [
        "State which will not trigger data reloading, but will be stored in presets or URL"
       ]
      },
      "typeValue": {
       "raw": "TViewState"
      },
      "required": false
     },
     {
      "uid": 5,
      "name": "search",
      "comment": {
       "raw": [
        "Search value, used to filter data based on it.",
        " Included in the API request object when using a LazyDataSource.",
        " For Array and Async data sources, searching is performed internally by the datasource."
       ]
      },
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "from": "@epam/uui-core:DataSourceState",
      "required": false
     },
     {
      "uid": 6,
      "name": "checked",
      "comment": {
       "raw": [
        "Array of checked items IDs"
       ]
      },
      "typeValue": {
       "raw": "any[]"
      },
      "from": "@epam/uui-core:DataSourceState",
      "required": false
     },
     {
      "uid": 7,
      "name": "folded",
      "comment": {
       "raw": [
        "A map of item IDs to their folding state.",
        " If an item ID is present with a `true` value, it's folded; otherwise, it's not folded."
       ]
      },
      "typeValue": {
       "raw": "Record<string, boolean>"
      },
      "from": "@epam/uui-core:DataSourceState",
      "required": false
     },
     {
      "uid": 8,
      "name": "filter",
      "comment": {
       "raw": [
        "Filter value used to filter data based on it.",
        " Included in the API request object when using a LazyDataSource.",
        " For Array and Async data sources, filtering is performed internally by the datasource."
       ]
      },
      "typeValue": {
       "raw": "TFilter"
      },
      "from": "@epam/uui-core:DataSourceState",
      "required": false
     },
     {
      "uid": 9,
      "name": "sorting",
      "comment": {
       "raw": [
        "Sorting value, used to sort data based on it.",
        " Included in the API request object when using a LazyDataSource.",
        " For Array and Async data sources, sorting is performed internally by the datasource."
       ]
      },
      "typeValue": {
       "raw": "SortingOption<any>[]"
      },
      "from": "@epam/uui-core:DataSourceState",
      "required": false
     },
     {
      "uid": 10,
      "name": "selectedId",
      "comment": {
       "raw": [
        "ID of selected item. It can be only one selected item at the moment."
       ]
      },
      "typeValue": {
       "raw": "any"
      },
      "from": "@epam/uui-core:DataSourceState",
      "required": false
     },
     {
      "uid": 11,
      "name": "focusedIndex",
      "comment": {
       "raw": [
        "Index of currently focused item"
       ]
      },
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "from": "@epam/uui-core:DataSourceState",
      "required": false
     },
     {
      "uid": 12,
      "name": "page",
      "comment": {
       "raw": [
        "Current page number"
       ]
      },
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "from": "@epam/uui-core:DataSourceState",
      "required": false
     },
     {
      "uid": 13,
      "name": "pageSize",
      "comment": {
       "raw": [
        "The amount of items per page"
       ]
      },
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "from": "@epam/uui-core:DataSourceState",
      "required": false
     },
     {
      "uid": 14,
      "name": "scrollTo",
      "comment": {
       "raw": [
        "Virtual list ensures that row with this Index is within the visible area, if not Virtual List .",
        " Virtual list updates this value on scroll to null when appear in the visible area.",
        " If this value is updated manually, Virtual List would scroll to the specified items.",
        " It would attempt to put scroll so this item will be at the top of the list."
       ]
      },
      "typeValue": {
       "raw": "ScrollToConfig"
      },
      "from": "@epam/uui-core:VirtualListState",
      "required": false
     },
     {
      "uid": 15,
      "name": "topIndex",
      "comment": {
       "raw": [
        "Index of the topmost item, in rendered batch.",
        " Note - this item might not be visible, as Virtual List maintain some reserve of rows on top / at the bottom of the list"
       ]
      },
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "from": "@epam/uui-core:VirtualListRange",
      "required": false
     },
     {
      "uid": 16,
      "name": "visibleCount",
      "comment": {
       "raw": [
        "Number of currently rendered items.",
        " Virtual list updates this value automatically, if it too small.",
        " Note Virtual List renders more items, that actually visible,",
        " as it need maintain some reserve of rows on top / at the bottom of the list."
       ]
      },
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "from": "@epam/uui-core:VirtualListRange",
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui-core:DatePickerCoreProps": {
   "summary": {
    "module": "@epam/uui-core",
    "typeName": {
     "name": "DatePickerCoreProps",
     "nameFull": "DatePickerCoreProps"
    },
    "src": "uui-core/src/types/components/datePicker/DatePicker.ts",
    "exported": true
   },
   "details": {
    "kind": 263,
    "typeValue": {
     "raw": "DatePickerCoreProps",
     "print": [
      "interface DatePickerCoreProps extends BaseDatePickerProps {",
      "    /** render prop to add a custom footer inside the DatePicker dropdown body */",
      "    renderFooter?(): ReactNode;",
      "}"
     ]
    },
    "props": [
     {
      "uid": 1,
      "name": "renderFooter",
      "comment": {
       "raw": [
        "render prop to add a custom footer inside the DatePicker dropdown body"
       ]
      },
      "typeValue": {
       "raw": "() => React.ReactNode"
      },
      "editor": {
       "type": "component"
      },
      "required": false
     },
     {
      "uid": 2,
      "name": "format",
      "comment": {
       "raw": [
        "Date format string, see [dayjs docs](@link https://day.js.org/docs/en/display/format)"
       ]
      },
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "from": "@epam/uui-core:BaseDatePickerProps",
      "required": false
     },
     {
      "uid": 3,
      "name": "filter",
      "comment": {
       "raw": [
        "Filter selectable days. Days, for which this callback returns false - will be disabled"
       ]
      },
      "typeValue": {
       "raw": "(day: Dayjs) => boolean"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:BaseDatePickerProps",
      "required": false
     },
     {
      "uid": 4,
      "name": "renderTarget",
      "comment": {
       "raw": [
        "Overrides rendering of picker Target - component which triggers dropdown. Can be used to attach DatePicker to other components, e.g. Buttons"
       ]
      },
      "typeValue": {
       "raw": "(props: IDropdownToggler) => React.ReactNode"
      },
      "editor": {
       "type": "component"
      },
      "from": "@epam/uui-core:BaseDatePickerProps",
      "required": false
     },
     {
      "uid": 5,
      "name": "iconPosition",
      "comment": {
       "raw": [
        "Defines where to place calendar icon"
       ]
      },
      "typeValue": {
       "raw": "'left' | 'right'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "left",
        "right"
       ]
      },
      "from": "@epam/uui-core:BaseDatePickerProps",
      "required": false
     },
     {
      "uid": 6,
      "name": "disableClear",
      "comment": {
       "raw": [
        "Disable clearing date value (e.g. via cross icon)"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:BaseDatePickerProps",
      "required": false
     },
     {
      "uid": 7,
      "name": "renderDay",
      "comment": {
       "raw": [
        "Overrides rendering of the single day. For example, to highlight certain days"
       ]
      },
      "typeValue": {
       "raw": "(day: Dayjs, onDayClick: (day: Dayjs) => void) => React.ReactElement<Element, string | React.JSXElementConstructor<any>>"
      },
      "editor": {
       "type": "component"
      },
      "from": "@epam/uui-core:BaseDatePickerProps",
      "required": false
     },
     {
      "uid": 8,
      "name": "isHoliday",
      "comment": {
       "raw": [
        "If this function returns true, the day will be highlighted as holiday"
       ]
      },
      "typeValue": {
       "raw": "(day: Dayjs) => boolean"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:BaseDatePickerProps",
      "required": false
     },
     {
      "uid": 9,
      "name": "onBlur",
      "comment": {
       "raw": [
        "Called when component lose focus"
       ]
      },
      "typeValue": {
       "raw": "(e?: React.FocusEvent<HTMLInputElement, Element> | undefined) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:BaseDatePickerProps",
      "required": false
     },
     {
      "uid": 10,
      "name": "placement",
      "comment": {
       "raw": [
        "Dropdown position relative to the input. See [Popper Docs](@link https://popper.js.org/)"
       ]
      },
      "typeValue": {
       "raw": "'left' | 'right' | 'auto' | 'auto-start' | 'auto-end' | 'top' | 'bottom' | 'top-start' | 'top-end' | 'bottom-start' | 'bottom-end' | 'right-start' | 'right-end' | 'left-start' | 'left-end'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "left",
        "right",
        "auto",
        "auto-start",
        "auto-end",
        "top",
        "bottom",
        "top-start",
        "top-end",
        "bottom-start",
        "bottom-end",
        "right-start",
        "right-end",
        "left-start",
        "left-end"
       ]
      },
      "from": "@epam/uui-core:BaseDatePickerProps",
      "required": false
     },
     {
      "uid": 11,
      "name": "rawProps",
      "comment": {
       "raw": [
        "Any HTML attributes (native or 'data-') to put on date picker parts"
       ]
      },
      "typeValue": {
       "raw": "{ input?: (React.HTMLAttributes<HTMLDivElement> & Record<`data-${string}`, string>) | undefined; body?: (React.HTMLAttributes<HTMLDivElement> & Record<`data-${string}`, string>) | undefined; }"
      },
      "from": "@epam/uui-core:BaseDatePickerProps",
      "required": false
     },
     {
      "uid": 12,
      "name": "inputCx",
      "comment": {
       "raw": [
        "CSS class(es) to put on datepicker input"
       ]
      },
      "typeValue": {
       "raw": "null | string | number | boolean | ClassDictionary | ClassArray"
      },
      "typeValueRef": "@epam/uui-core:ClassValue",
      "from": "@epam/uui-core:BaseDatePickerProps",
      "required": false
     },
     {
      "uid": 13,
      "name": "bodyCx",
      "comment": {
       "raw": [
        "CSS class(es) to put on datepicker body"
       ]
      },
      "typeValue": {
       "raw": "null | string | number | boolean | ClassDictionary | ClassArray"
      },
      "typeValueRef": "@epam/uui-core:ClassValue",
      "from": "@epam/uui-core:BaseDatePickerProps",
      "required": false
     },
     {
      "uid": 14,
      "name": "value",
      "comment": {
       "raw": [
        "The current value of component"
       ]
      },
      "typeValue": {
       "raw": "null | string"
      },
      "editor": {
       "type": "string"
      },
      "from": "@epam/uui-core:IEditable",
      "required": true
     },
     {
      "uid": 15,
      "name": "onValueChange",
      "comment": {
       "raw": [
        "Called when value needs to be changed (usually due to user interaction)"
       ]
      },
      "typeValue": {
       "raw": "(newValue: string | null) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IEditable",
      "required": true
     },
     {
      "uid": 16,
      "name": "isInvalid",
      "comment": {
       "raw": [
        "True if component contains invalid input"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:ICanBeInvalid",
      "required": false
     },
     {
      "uid": 17,
      "name": "validationMessage",
      "comment": {
       "raw": [
        "Message describing why the value is invalid"
       ]
      },
      "typeValue": {
       "raw": "null | string | number | boolean | React.ReactElement<any, string | React.JSXElementConstructor<any>> | React.ReactFragment | React.ReactPortal"
      },
      "typeValueRef": "@types/react:ReactNode",
      "from": "@epam/uui-core:ICanBeInvalid",
      "required": false
     },
     {
      "uid": 18,
      "name": "validationProps",
      "comment": {
       "raw": [
        "If T is a complex value (object or array), this property contains validation states of inner items"
       ]
      },
      "typeValue": {
       "raw": "{ [key: string]: ICanBeInvalid; }"
      },
      "from": "@epam/uui-core:ICanBeInvalid",
      "required": false
     },
     {
      "uid": 19,
      "name": "isDisabled",
      "comment": {
       "raw": [
        "Disable editing, and visually de-emphasize value of the component"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:IDisableable",
      "required": false
     },
     {
      "uid": 20,
      "name": "isReadonly",
      "comment": {
       "raw": [
        "Disable editing. Unlike isDisabled, keep component's value readable."
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:ICanBeReadonly",
      "required": false
     },
     {
      "uid": 21,
      "name": "isRequired",
      "comment": {
       "raw": [
        "Marks that component's value is required and shouldn't be empty"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:ICanBeRequired",
      "required": false
     },
     {
      "uid": 22,
      "name": "onFocus",
      "comment": {
       "raw": [
        "Called when component gets input focus"
       ]
      },
      "typeValue": {
       "raw": "(e: React.FocusEvent<HTMLInputElement, Element>) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:ICanFocus",
      "required": false
     },
     {
      "uid": 23,
      "name": "placeholder",
      "comment": {
       "raw": [
        "Placeholder to display when empty"
       ]
      },
      "typeValue": {
       "raw": "any"
      },
      "from": "@epam/uui-core:IHasPlaceholder",
      "required": false
     },
     {
      "uid": 24,
      "name": "getValueChangeAnalyticsEvent",
      "comment": {
       "raw": [
        "Given a value, returns an analytics event to send when component is edited.",
        " See [AnalyticsContext](@link https://uui.epam.com/documents?id=analyticsContext&mode=doc&skin=UUI4_promo&category=contexts)."
       ]
      },
      "typeValue": {
       "raw": "(newValue: string | null, oldValue: string | null) => AnalyticsEvent"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IAnalyticableOnChange",
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui-core:DndActorProps": {
   "summary": {
    "module": "@epam/uui-core",
    "typeName": {
     "name": "DndActorProps",
     "nameFull": "DndActorProps<TSrcData, TDstData>"
    },
    "src": "uui-core/src/services/dnd/DndActor.tsx",
    "exported": true
   },
   "details": {
    "kind": 263,
    "typeValue": {
     "raw": "DndActorProps<TSrcData, TDstData>",
     "print": [
      "interface DndActorProps<TSrcData, TDstData> extends IDndActor<TSrcData, TDstData> {",
      "    render(props: DndActorRenderParams): React.ReactNode;",
      "}"
     ]
    },
    "props": [
     {
      "uid": 1,
      "name": "render",
      "typeValue": {
       "raw": "(props: DndActorRenderParams) => React.ReactNode"
      },
      "editor": {
       "type": "component"
      },
      "required": true
     },
     {
      "uid": 2,
      "name": "srcData",
      "comment": {
       "raw": [
        "Data used when this component acts as a drag source.",
        " If provided, it means this component can be dragged. Can be used in combination with dstData."
       ]
      },
      "typeValue": {
       "raw": "TSrcData"
      },
      "from": "@epam/uui-core:IDndActor",
      "required": false
     },
     {
      "uid": 3,
      "name": "dstData",
      "comment": {
       "raw": [
        "Data used when this component acts as a drop destination.",
        " If provided, it means something can be dragged onto this component. Can be used in combination with srcData."
       ]
      },
      "typeValue": {
       "raw": "TDstData"
      },
      "from": "@epam/uui-core:IDndActor",
      "required": false
     },
     {
      "uid": 4,
      "name": "canAcceptDrop",
      "comment": {
       "raw": [
        "A pure function that gets permitted positions for a drop action"
       ]
      },
      "typeValue": {
       "raw": "(params: AcceptDropParams<TSrcData, TDstData>) => Partial<Record<DropPosition, boolean>> | null"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IDndActor",
      "required": false
     },
     {
      "uid": 5,
      "name": "onDrop",
      "comment": {
       "raw": [
        "Called when accepted drop action performed on this actor. Usually used to reorder and update items"
       ]
      },
      "typeValue": {
       "raw": "(data: DropParams<TSrcData, TDstData>) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IDndActor",
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui-core:DndActorRenderParams": {
   "summary": {
    "module": "@epam/uui-core",
    "typeName": {
     "name": "DndActorRenderParams",
     "nameFull": "DndActorRenderParams"
    },
    "src": "uui-core/src/types/dnd.ts",
    "exported": true
   },
   "details": {
    "kind": 263,
    "typeValue": {
     "raw": "DndActorRenderParams",
     "print": [
      "interface DndActorRenderParams {",
      "    /** True, if the element can be dragged. Doesn't mean that DnD is active. */",
      "    isDraggable: boolean;",
      "    /** True, if the element is dragged out. True for placeholder left when it's element it dragged out. False for Drag Ghost. */",
      "    isDraggedOut: boolean;",
      "    /** True, if the element is rendered as Drag Ghost. All other flags are false for drag ghost. */",
      "    isDragGhost: boolean;",
      "    /** True, if the element is being dragged over, even if drop is not accepted by the element (canAcceptDrop returned false) */",
      "    isDraggedOver: boolean;",
      "    /** True, if the element is being dragged over, and drop on it is accepted - canAcceptDrop returned true */",
      "    isDropAccepted: boolean;",
      "    /** True if any drag and drop operation is in progress, even if the element not being dragged */",
      "    isDndInProgress: boolean;",
      "    /** Drag data associated with the element. Specified always, even if there is no DnD operation happening. */",
      "    dragData?: any;",
      "    /** Drop position. Chosen from accepted drop positions according to pointer coordinates */",
      "    position?: DropPosition;",
      "    /**",
      "     * Event handlers. Component is expected to pass these events to the top element it renders.",
      "     * As onClick event on the element will be overwritten, use DndActorProps.onClick to receive click events on the element",
      "     */",
      "    eventHandlers: {",
      "        onTouchStart?(e: React.TouchEvent): void;",
      "        onPointerDown?(e: React.PointerEvent): void;",
      "        onPointerEnter?(e: React.PointerEvent<any>): void;",
      "        onPointerMove?(e: React.PointerEvent<any>): void;",
      "        onPointerLeave?(e: React.PointerEvent<any>): void;",
      "        onPointerUp?(e: React.PointerEvent<any>): void;",
      "    };",
      "    /**",
      "     * CSS class names to add to the element.",
      "     * Some of these markers are used by the DndActor internally, so they must be added even if no used by component itself to apply styles.",
      "     */",
      "    classNames: string[];",
      "    /** Ref to the DOM element to perform DnD actions */",
      "    ref?: React.Ref<any>;",
      "}"
     ]
    },
    "props": [
     {
      "uid": 1,
      "name": "isDraggable",
      "comment": {
       "raw": [
        "True, if the element can be dragged. Doesn't mean that DnD is active."
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "required": true
     },
     {
      "uid": 2,
      "name": "isDraggedOut",
      "comment": {
       "raw": [
        "True, if the element is dragged out. True for placeholder left when it's element it dragged out. False for Drag Ghost."
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "required": true
     },
     {
      "uid": 3,
      "name": "isDragGhost",
      "comment": {
       "raw": [
        "True, if the element is rendered as Drag Ghost. All other flags are false for drag ghost."
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "required": true
     },
     {
      "uid": 4,
      "name": "isDraggedOver",
      "comment": {
       "raw": [
        "True, if the element is being dragged over, even if drop is not accepted by the element (canAcceptDrop returned false)"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "required": true
     },
     {
      "uid": 5,
      "name": "isDropAccepted",
      "comment": {
       "raw": [
        "True, if the element is being dragged over, and drop on it is accepted - canAcceptDrop returned true"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "required": true
     },
     {
      "uid": 6,
      "name": "isDndInProgress",
      "comment": {
       "raw": [
        "True if any drag and drop operation is in progress, even if the element not being dragged"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "required": true
     },
     {
      "uid": 7,
      "name": "dragData",
      "comment": {
       "raw": [
        "Drag data associated with the element. Specified always, even if there is no DnD operation happening."
       ]
      },
      "typeValue": {
       "raw": "any"
      },
      "required": false
     },
     {
      "uid": 8,
      "name": "position",
      "comment": {
       "raw": [
        "Drop position. Chosen from accepted drop positions according to pointer coordinates"
       ]
      },
      "typeValue": {
       "raw": "'left' | 'right' | 'top' | 'bottom' | 'inside'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "left",
        "right",
        "top",
        "bottom",
        "inside"
       ]
      },
      "required": false
     },
     {
      "uid": 9,
      "name": "eventHandlers",
      "comment": {
       "raw": [
        "Event handlers. Component is expected to pass these events to the top element it renders.",
        " As onClick event on the element will be overwritten, use DndActorProps.onClick to receive click events on the element"
       ]
      },
      "typeValue": {
       "raw": "{ onTouchStart?(e: React.TouchEvent<Element>): void; onPointerDown?(e: React.PointerEvent<Element>): void; onPointerEnter?(e: React.PointerEvent<any>): void; onPointerMove?(e: React.PointerEvent<any>): void; onPointerLeave?(e: React.PointerEvent<any>): void; onPointerUp?(e: React.PointerEvent<any>): void; }"
      },
      "required": true
     },
     {
      "uid": 10,
      "name": "classNames",
      "comment": {
       "raw": [
        "CSS class names to add to the element.",
        " Some of these markers are used by the DndActor internally, so they must be added even if no used by component itself to apply styles."
       ]
      },
      "typeValue": {
       "raw": "string[]"
      },
      "required": true
     },
     {
      "uid": 11,
      "name": "ref",
      "comment": {
       "raw": [
        "Ref to the DOM element to perform DnD actions"
       ]
      },
      "typeValue": {
       "raw": "null | (instance: any) => void | React.RefObject<any>"
      },
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui-core:DndContextState": {
   "summary": {
    "module": "@epam/uui-core",
    "typeName": {
     "name": "DndContextState",
     "nameFull": "DndContextState"
    },
    "src": "uui-core/src/services/dnd/DndContext.tsx",
    "exported": true
   },
   "details": {
    "kind": 263,
    "typeValue": {
     "raw": "DndContextState",
     "print": [
      "interface DndContextState {",
      "    isDragging: boolean;",
      "    ghostOffsetX?: number;",
      "    ghostOffsetY?: number;",
      "    ghostWidth?: number;",
      "    renderGhost?(): React.ReactNode;",
      "}"
     ]
    },
    "props": [
     {
      "uid": 1,
      "name": "isDragging",
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "required": true
     },
     {
      "uid": 2,
      "name": "ghostOffsetX",
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "required": false
     },
     {
      "uid": 3,
      "name": "ghostOffsetY",
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "required": false
     },
     {
      "uid": 4,
      "name": "ghostWidth",
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "required": false
     },
     {
      "uid": 5,
      "name": "renderGhost",
      "typeValue": {
       "raw": "() => React.ReactNode"
      },
      "editor": {
       "type": "component"
      },
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui-core:DragGhostProps": {
   "summary": {
    "module": "@epam/uui-core",
    "typeName": {
     "name": "DragGhostProps",
     "nameFull": "DragGhostProps"
    },
    "src": "uui-core/src/services/dnd/DragGhost.tsx",
    "exported": true
   },
   "details": {
    "kind": 263,
    "typeValue": {
     "raw": "DragGhostProps",
     "print": [
      "interface DragGhostProps {",
      "}"
     ]
    }
   }
  },
  "@epam/uui-core:DropdownBodyProps": {
   "summary": {
    "module": "@epam/uui-core",
    "typeName": {
     "name": "DropdownBodyProps",
     "nameFull": "DropdownBodyProps"
    },
    "src": "uui-core/src/types/components/Dropdown.ts",
    "exported": true
   },
   "details": {
    "kind": 263,
    "typeValue": {
     "raw": "DropdownBodyProps",
     "print": [
      "interface DropdownBodyProps extends IDropdownBodyProps {",
      "}"
     ]
    },
    "props": [
     {
      "uid": 1,
      "name": "onClose",
      "comment": {
       "raw": [
        "Call to close the Dropdown body"
       ]
      },
      "typeValue": {
       "raw": "() => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IDropdownBodyProps",
      "required": false
     },
     {
      "uid": 2,
      "name": "togglerWidth",
      "comment": {
       "raw": [
        "The width of the toggler, which can be used to adjust the body width to it"
       ]
      },
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "from": "@epam/uui-core:IDropdownBodyProps",
      "required": false
     },
     {
      "uid": 3,
      "name": "togglerHeight",
      "comment": {
       "raw": [
        "The height of the toggler"
       ]
      },
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "from": "@epam/uui-core:IDropdownBodyProps",
      "required": false
     },
     {
      "uid": 4,
      "name": "scheduleUpdate",
      "comment": {
       "raw": [
        "Call to force recompute dropdown position"
       ]
      },
      "typeValue": {
       "raw": "() => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IDropdownBodyProps",
      "required": false
     },
     {
      "uid": 5,
      "name": "isOpen",
      "comment": {
       "raw": [
        "Indicates that dropdown is open"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:IDropdownBodyProps",
      "required": false
     },
     {
      "uid": 6,
      "name": "arrowProps",
      "comment": {
       "raw": [
        "Props that should be provided to the arrow component"
       ]
      },
      "typeValue": {
       "raw": "PopperArrowProps"
      },
      "from": "@epam/uui-core:IDropdownBodyProps",
      "required": false
     },
     {
      "uid": 7,
      "name": "placement",
      "comment": {
       "raw": [
        "Dropdown position relative to the input. See [Popper Docs](@link https://popper.js.org/)"
       ]
      },
      "typeValue": {
       "raw": "'left' | 'right' | 'auto' | 'auto-start' | 'auto-end' | 'top' | 'bottom' | 'top-start' | 'top-end' | 'bottom-start' | 'bottom-end' | 'right-start' | 'right-end' | 'left-start' | 'left-end'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "left",
        "right",
        "auto",
        "auto-start",
        "auto-end",
        "top",
        "bottom",
        "top-start",
        "top-end",
        "bottom-start",
        "bottom-end",
        "right-start",
        "right-end",
        "left-start",
        "left-end"
       ]
      },
      "from": "@epam/uui-core:IDropdownBodyProps",
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui-core:DropdownPlacement": {
   "summary": {
    "module": "@epam/uui-core",
    "typeName": {
     "name": "DropdownPlacement",
     "nameFull": "DropdownPlacement"
    },
    "src": "uui-core/src/types/components/Dropdown.ts",
    "exported": true
   },
   "details": {
    "kind": 264,
    "typeValue": {
     "raw": "Placement",
     "print": [
      "type DropdownPlacement = Placement;"
     ]
    }
   }
  },
  "@epam/uui-core:DropdownProps": {
   "summary": {
    "module": "@epam/uui-core",
    "typeName": {
     "name": "DropdownProps",
     "nameFull": "DropdownProps"
    },
    "src": "uui-core/src/types/components/Dropdown.ts",
    "exported": true
   },
   "details": {
    "kind": 263,
    "typeValue": {
     "raw": "DropdownProps",
     "print": [
      "interface DropdownProps extends Partial<IEditable<boolean>> {",
      "    renderTarget: (props: IDropdownToggler) => React.ReactNode;",
      "    renderBody: (props: DropdownBodyProps) => React.ReactNode;",
      "    onClose?: () => void;",
      "    isNotUnfoldable?: boolean;",
      "    zIndex?: number;",
      "    placement?: DropdownPlacement;",
      "    modifiers?: Modifier<any>[];",
      "    /** Should we close dropdown on click on the Toggler, if it's already open? Default is true. */",
      "    /** @default 0 */",
      "    openDelay?: number;",
      "    /** @default 0 */",
      "    closeDelay?: number;",
      "    /**",
      "     * @default true",
      "     */",
      "    openOnClick?: boolean;",
      "    /** @default false */",
      "    openOnHover?: boolean;",
      "    /** @default true */",
      "    closeOnTargetClick?: boolean;",
      "    /** @default true */",
      "    closeOnClickOutside?: boolean;",
      "    /** @default false */",
      "    closeOnMouseLeave?: 'toggler' | 'boundary' | false;",
      "    portalTarget?: HTMLElement;",
      "    boundaryElement?: Boundary;",
      "    /** @default true */",
      "    closeBodyOnTogglerHidden?: boolean; // default: true; Set false if you do not want to hide the dropdown body in case Toggler is out of the viewport",
      "}"
     ]
    },
    "props": [
     {
      "uid": 1,
      "name": "renderTarget",
      "typeValue": {
       "raw": "(props: IDropdownToggler) => React.ReactNode"
      },
      "editor": {
       "type": "component"
      },
      "required": true
     },
     {
      "uid": 2,
      "name": "renderBody",
      "typeValue": {
       "raw": "(props: DropdownBodyProps) => React.ReactNode"
      },
      "editor": {
       "type": "component"
      },
      "required": true
     },
     {
      "uid": 3,
      "name": "onClose",
      "typeValue": {
       "raw": "() => void"
      },
      "editor": {
       "type": "func"
      },
      "required": false
     },
     {
      "uid": 4,
      "name": "isNotUnfoldable",
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "required": false
     },
     {
      "uid": 5,
      "name": "zIndex",
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "required": false
     },
     {
      "uid": 6,
      "name": "placement",
      "typeValue": {
       "raw": "'left' | 'right' | 'auto' | 'auto-start' | 'auto-end' | 'top' | 'bottom' | 'top-start' | 'top-end' | 'bottom-start' | 'bottom-end' | 'right-start' | 'right-end' | 'left-start' | 'left-end'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "left",
        "right",
        "auto",
        "auto-start",
        "auto-end",
        "top",
        "bottom",
        "top-start",
        "top-end",
        "bottom-start",
        "bottom-end",
        "right-start",
        "right-end",
        "left-start",
        "left-end"
       ]
      },
      "required": false
     },
     {
      "uid": 7,
      "name": "modifiers",
      "typeValue": {
       "raw": "(StrictModifier<any> | Partial<Modifier<any, object>>)[]"
      },
      "required": false
     },
     {
      "uid": 8,
      "name": "openDelay",
      "comment": {
       "raw": [
        "@default 0"
       ],
       "tags": {
        "@default": 0
       }
      },
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "required": false
     },
     {
      "uid": 9,
      "name": "closeDelay",
      "comment": {
       "raw": [
        "@default 0"
       ],
       "tags": {
        "@default": 0
       }
      },
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "required": false
     },
     {
      "uid": 10,
      "name": "openOnClick",
      "comment": {
       "raw": [
        "@default true"
       ],
       "tags": {
        "@default": true
       }
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "required": false
     },
     {
      "uid": 11,
      "name": "openOnHover",
      "comment": {
       "raw": [
        "@default false"
       ],
       "tags": {
        "@default": false
       }
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "required": false
     },
     {
      "uid": 12,
      "name": "closeOnTargetClick",
      "comment": {
       "raw": [
        "@default true"
       ],
       "tags": {
        "@default": true
       }
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "required": false
     },
     {
      "uid": 13,
      "name": "closeOnClickOutside",
      "comment": {
       "raw": [
        "@default true"
       ],
       "tags": {
        "@default": true
       }
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "required": false
     },
     {
      "uid": 14,
      "name": "closeOnMouseLeave",
      "comment": {
       "raw": [
        "@default false"
       ],
       "tags": {
        "@default": false
       }
      },
      "typeValue": {
       "raw": "false | 'toggler' | 'boundary'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        false,
        "toggler",
        "boundary"
       ]
      },
      "required": false
     },
     {
      "uid": 15,
      "name": "portalTarget",
      "typeValue": {
       "raw": "HTMLElement"
      },
      "required": false
     },
     {
      "uid": 16,
      "name": "boundaryElement",
      "typeValue": {
       "raw": "HTMLElement | HTMLElement[] | 'clippingParents'"
      },
      "required": false
     },
     {
      "uid": 17,
      "name": "closeBodyOnTogglerHidden",
      "comment": {
       "raw": [
        "@default true"
       ],
       "tags": {
        "@default": true
       }
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "required": false
     },
     {
      "uid": 18,
      "name": "value",
      "comment": {
       "raw": [
        "The current value of component"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:IEditable",
      "required": true
     },
     {
      "uid": 19,
      "name": "onValueChange",
      "comment": {
       "raw": [
        "Called when value needs to be changed (usually due to user interaction)"
       ]
      },
      "typeValue": {
       "raw": "(newValue: boolean) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IEditable",
      "required": true
     },
     {
      "uid": 20,
      "name": "isInvalid",
      "comment": {
       "raw": [
        "True if component contains invalid input"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:ICanBeInvalid",
      "required": false
     },
     {
      "uid": 21,
      "name": "validationMessage",
      "comment": {
       "raw": [
        "Message describing why the value is invalid"
       ]
      },
      "typeValue": {
       "raw": "null | string | number | boolean | React.ReactElement<any, string | React.JSXElementConstructor<any>> | React.ReactFragment | React.ReactPortal"
      },
      "from": "@epam/uui-core:ICanBeInvalid",
      "required": false
     },
     {
      "uid": 22,
      "name": "validationProps",
      "comment": {
       "raw": [
        "If T is a complex value (object or array), this property contains validation states of inner items"
       ]
      },
      "typeValue": {
       "raw": "{ [key: string]: ICanBeInvalid; }"
      },
      "from": "@epam/uui-core:ICanBeInvalid",
      "required": false
     },
     {
      "uid": 23,
      "name": "isDisabled",
      "comment": {
       "raw": [
        "Disable editing, and visually de-emphasize value of the component"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:IDisableable",
      "required": false
     },
     {
      "uid": 24,
      "name": "isReadonly",
      "comment": {
       "raw": [
        "Disable editing. Unlike isDisabled, keep component's value readable."
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:ICanBeReadonly",
      "required": false
     },
     {
      "uid": 25,
      "name": "isRequired",
      "comment": {
       "raw": [
        "Marks that component's value is required and shouldn't be empty"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:ICanBeRequired",
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui-core:DropParams": {
   "summary": {
    "module": "@epam/uui-core",
    "typeName": {
     "name": "DropParams",
     "nameFull": "DropParams<TSrcData, TDstData>"
    },
    "src": "uui-core/src/types/dnd.ts",
    "exported": true
   },
   "details": {
    "kind": 263,
    "typeValue": {
     "raw": "DropParams<TSrcData, TDstData>",
     "print": [
      "interface DropParams<TSrcData, TDstData> extends AcceptDropParams<TSrcData, TDstData> {",
      "    position: DropPosition;",
      "}"
     ]
    },
    "props": [
     {
      "uid": 1,
      "name": "position",
      "typeValue": {
       "raw": "'left' | 'right' | 'top' | 'bottom' | 'inside'"
      },
      "typeValueRef": "@epam/uui-core:DropPosition",
      "editor": {
       "type": "oneOf",
       "options": [
        "left",
        "right",
        "top",
        "bottom",
        "inside"
       ]
      },
      "required": true
     },
     {
      "uid": 2,
      "name": "srcData",
      "typeValue": {
       "raw": "TSrcData"
      },
      "from": "@epam/uui-core:AcceptDropParams",
      "required": true
     },
     {
      "uid": 3,
      "name": "dstData",
      "typeValue": {
       "raw": "TDstData"
      },
      "from": "@epam/uui-core:AcceptDropParams",
      "required": false
     },
     {
      "uid": 4,
      "name": "offsetLeft",
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "from": "@epam/uui-core:AcceptDropParams",
      "required": true
     },
     {
      "uid": 5,
      "name": "offsetTop",
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "from": "@epam/uui-core:AcceptDropParams",
      "required": true
     },
     {
      "uid": 6,
      "name": "targetWidth",
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "from": "@epam/uui-core:AcceptDropParams",
      "required": true
     },
     {
      "uid": 7,
      "name": "targetHeight",
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "from": "@epam/uui-core:AcceptDropParams",
      "required": true
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui-core:DropPosition": {
   "summary": {
    "module": "@epam/uui-core",
    "typeName": {
     "name": "DropPosition",
     "nameFull": "DropPosition"
    },
    "src": "uui-core/src/types/dnd.ts",
    "exported": true
   },
   "details": {
    "kind": 264,
    "typeValue": {
     "raw": "'left' | 'right' | 'top' | 'bottom' | 'inside'",
     "print": [
      "type DropPosition = 'top' | 'bottom' | 'left' | 'right' | 'inside';"
     ]
    }
   }
  },
  "@epam/uui-core:DropPositionOptions": {
   "summary": {
    "module": "@epam/uui-core",
    "typeName": {
     "name": "DropPositionOptions",
     "nameFull": "DropPositionOptions<__type>"
    },
    "src": "uui-core/src/types/dnd.ts",
    "exported": true
   },
   "details": {
    "kind": 264,
    "typeValue": {
     "raw": "Partial<Record<DropPosition, boolean>>",
     "print": [
      "type DropPositionOptions = Partial<Record<DropPosition, boolean>>;"
     ]
    }
   }
  },
  "@epam/uui-core:ErrorPageInfo": {
   "summary": {
    "module": "@epam/uui-core",
    "typeName": {
     "name": "ErrorPageInfo",
     "nameFull": "ErrorPageInfo"
    },
    "src": "uui-core/src/services/ErrorContext.ts",
    "exported": true
   },
   "details": {
    "kind": 263,
    "typeValue": {
     "raw": "ErrorPageInfo",
     "print": [
      "interface ErrorPageInfo {",
      "    /** Error status code */",
      "    status?: number;",
      "    title?: React.ReactNode;",
      "    subtitle?: React.ReactNode;",
      "    imageUrl?: string;",
      "    mobileImageUrl?: string;",
      "}"
     ]
    },
    "props": [
     {
      "uid": 1,
      "name": "status",
      "comment": {
       "raw": [
        "Error status code"
       ]
      },
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "required": false
     },
     {
      "uid": 2,
      "name": "title",
      "typeValue": {
       "raw": "null | string | number | boolean | React.ReactElement<any, string | React.JSXElementConstructor<any>> | React.ReactFragment | React.ReactPortal"
      },
      "typeValueRef": "@types/react:ReactNode",
      "required": false
     },
     {
      "uid": 3,
      "name": "subtitle",
      "typeValue": {
       "raw": "null | string | number | boolean | React.ReactElement<any, string | React.JSXElementConstructor<any>> | React.ReactFragment | React.ReactPortal"
      },
      "typeValueRef": "@types/react:ReactNode",
      "required": false
     },
     {
      "uid": 4,
      "name": "imageUrl",
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "required": false
     },
     {
      "uid": 5,
      "name": "mobileImageUrl",
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui-core:FileUploadOptions": {
   "summary": {
    "module": "@epam/uui-core",
    "typeName": {
     "name": "FileUploadOptions",
     "nameFull": "FileUploadOptions"
    },
    "src": "uui-core/src/services/ApiContext.ts",
    "exported": true
   },
   "details": {
    "kind": 263,
    "typeValue": {
     "raw": "FileUploadOptions",
     "print": [
      "interface FileUploadOptions {",
      "    onProgress?: (progress: number) => any;",
      "    getXHR?: (xhr: XMLHttpRequest) => any; // get xhr to be able to cancel the request",
      "}"
     ]
    },
    "props": [
     {
      "uid": 1,
      "name": "onProgress",
      "typeValue": {
       "raw": "(progress: number) => any"
      },
      "editor": {
       "type": "func"
      },
      "required": false
     },
     {
      "uid": 2,
      "name": "getXHR",
      "typeValue": {
       "raw": "(xhr: XMLHttpRequest) => any"
      },
      "editor": {
       "type": "func"
      },
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui-core:FileUploadResponse": {
   "summary": {
    "module": "@epam/uui-core",
    "typeName": {
     "name": "FileUploadResponse",
     "nameFull": "FileUploadResponse"
    },
    "src": "uui-core/src/services/ApiContext.ts",
    "exported": true
   },
   "details": {
    "kind": 263,
    "typeValue": {
     "raw": "FileUploadResponse",
     "print": [
      "interface FileUploadResponse {",
      "    id: number;",
      "    name: string;",
      "    size: number;",
      "    path?: string;",
      "    type?: BlockTypes;",
      "    extension?: string;",
      "    error?: {",
      "        isError: boolean;",
      "        message?: string;",
      "    };",
      "}"
     ]
    },
    "props": [
     {
      "uid": 1,
      "name": "id",
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "required": true
     },
     {
      "uid": 2,
      "name": "name",
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "required": true
     },
     {
      "uid": 3,
      "name": "size",
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "required": true
     },
     {
      "uid": 4,
      "name": "path",
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "required": false
     },
     {
      "uid": 5,
      "name": "type",
      "typeValue": {
       "raw": "'attachment' | 'iframe' | 'image'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "attachment",
        "iframe",
        "image"
       ]
      },
      "required": false
     },
     {
      "uid": 6,
      "name": "extension",
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "required": false
     },
     {
      "uid": 7,
      "name": "error",
      "typeValue": {
       "raw": "{ isError: boolean; message?: string | undefined; }"
      },
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui-core:FilterPredicate": {
   "summary": {
    "module": "@epam/uui-core",
    "typeName": {
     "name": "FilterPredicate",
     "nameFull": "FilterPredicate<TField>"
    },
    "src": "uui-core/src/types/dataQuery.ts",
    "exported": true
   },
   "details": {
    "kind": 264,
    "typeValue": {
     "raw": "FilterPredicate<TField>",
     "print": [
      "type FilterPredicate<TField> = {",
      "    in?: TField[];",
      "    nin?: TField[];",
      "    isNull?: boolean;",
      "    gt?: TField;",
      "    gte?: TField;",
      "    lt?: TField;",
      "    lte?: TField;",
      "    inRange?: RangeValue;",
      "    notInRange?: RangeValue;",
      "    eq?: TField;",
      "    neq?: TField;",
      "    not?: FilterPredicate<TField>;",
      "};"
     ]
    },
    "props": [
     {
      "uid": 1,
      "name": "in",
      "typeValue": {
       "raw": "TField[]"
      },
      "required": false
     },
     {
      "uid": 2,
      "name": "nin",
      "typeValue": {
       "raw": "TField[]"
      },
      "required": false
     },
     {
      "uid": 3,
      "name": "isNull",
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "required": false
     },
     {
      "uid": 4,
      "name": "gt",
      "typeValue": {
       "raw": "TField"
      },
      "required": false
     },
     {
      "uid": 5,
      "name": "gte",
      "typeValue": {
       "raw": "TField"
      },
      "required": false
     },
     {
      "uid": 6,
      "name": "lt",
      "typeValue": {
       "raw": "TField"
      },
      "required": false
     },
     {
      "uid": 7,
      "name": "lte",
      "typeValue": {
       "raw": "TField"
      },
      "required": false
     },
     {
      "uid": 8,
      "name": "inRange",
      "typeValue": {
       "raw": "RangeValue"
      },
      "required": false
     },
     {
      "uid": 9,
      "name": "notInRange",
      "typeValue": {
       "raw": "RangeValue"
      },
      "required": false
     },
     {
      "uid": 10,
      "name": "eq",
      "typeValue": {
       "raw": "TField"
      },
      "required": false
     },
     {
      "uid": 11,
      "name": "neq",
      "typeValue": {
       "raw": "TField"
      },
      "required": false
     },
     {
      "uid": 12,
      "name": "not",
      "typeValue": {
       "raw": "FilterPredicate<TField>"
      },
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui-core:FilterPredicateName": {
   "summary": {
    "module": "@epam/uui-core",
    "typeName": {
     "name": "FilterPredicateName",
     "nameFull": "FilterPredicateName"
    },
    "src": "uui-core/src/types/dataQuery.ts",
    "exported": true
   },
   "details": {
    "kind": 264,
    "typeValue": {
     "raw": "'in' | 'nin' | 'isNull' | 'gt' | 'gte' | 'lt' | 'lte' | 'inRange' | 'notInRange' | 'eq' | 'neq' | 'not'",
     "print": [
      "type FilterPredicateName = keyof FilterPredicate<any>;"
     ]
    }
   }
  },
  "@epam/uui-core:FiltersConfig": {
   "summary": {
    "module": "@epam/uui-core",
    "typeName": {
     "name": "FiltersConfig",
     "nameFull": "FiltersConfig<TFilter>"
    },
    "src": "uui-core/src/types/tables.ts",
    "exported": true
   },
   "details": {
    "kind": 264,
    "typeValue": {
     "raw": "FiltersConfig<TFilter>",
     "print": [
      "type FiltersConfig<TFilter = any> = {",
      "    [key in keyof TFilter]: IFilterConfig;",
      "};"
     ]
    }
   }
  },
  "@epam/uui-core:FlexCellProps": {
   "summary": {
    "module": "@epam/uui-core",
    "typeName": {
     "name": "FlexCellProps",
     "nameFull": "FlexCellProps"
    },
    "src": "uui-core/src/types/props.ts",
    "exported": true
   },
   "details": {
    "kind": 264,
    "typeValue": {
     "raw": "FlexCellProps",
     "print": [
      "type FlexCellProps = IHasCX & IClickable & IHasRawProps<HTMLAttributes<HTMLDivElement>> & Attributes & IHasChildren & {",
      "    /** CSS width. Set to 'auto' to make FlexCell resize to it's content */",
      "    width?: number | 'auto' | '100%';",
      "    /** CSS min-width */",
      "    minWidth?: number;",
      "    /** Flexbox flex-grow property [Flexbox Guide](https://css-tricks.com/snippets/css/a-guide-to-flexbox/#aa-flex-grow) */",
      "    grow?: number;",
      "    /** Flexbox shrink property [Flexbox Guide](https://css-tricks.com/snippets/css/a-guide-to-flexbox/#aa-flex-shrink) */",
      "    shrink?: number;",
      "    /** CSS text-align property */",
      "    textAlign?: 'left' | 'center' | 'right';",
      "    /** Flexbox align-self property. Aligns items vertically for horizontal flexbox. [Flexbox Guide](https://css-tricks.com/snippets/css/a-guide-to-flexbox/#aa-align-self) */",
      "    alignSelf?: CSS.AlignSelfProperty;",
      "    /** Standard style attribute. Styles are added to element style, overriding supplied flex styles */",
      "    style?: React.CSSProperties;",
      "};"
     ]
    },
    "props": [
     {
      "uid": 1,
      "name": "cx",
      "comment": {
       "raw": [
        "CSS class(es) to put on component's root. See {@link https://github.com/JedWatson/classnames#usage} for details"
       ]
      },
      "typeValue": {
       "raw": "null | string | number | boolean | ClassDictionary | ClassArray"
      },
      "typeValueRef": "@epam/uui-core:ClassValue",
      "from": "@epam/uui-core:IHasCX",
      "required": false
     },
     {
      "uid": 2,
      "name": "onClick",
      "comment": {
       "raw": [
        "Called when component is clicked"
       ]
      },
      "typeValue": {
       "raw": "(e?: any) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IClickable",
      "required": false
     },
     {
      "uid": 3,
      "name": "rawProps",
      "comment": {
       "raw": [
        "Any HTML attributes (native or 'data-') to put on the underlying component"
       ]
      },
      "typeValue": {
       "raw": "React.HTMLAttributes<HTMLDivElement> & Record<`data-${string}`, string>"
      },
      "from": "@epam/uui-core:IHasRawProps",
      "required": false
     },
     {
      "uid": 4,
      "name": "key",
      "typeValue": {
       "raw": "null | string | number"
      },
      "from": "@types/react:Attributes",
      "required": false
     },
     {
      "uid": 5,
      "name": "children",
      "typeValue": {
       "raw": "null | string | number | boolean | React.ReactElement<any, string | React.JSXElementConstructor<any>> | React.ReactFragment | React.ReactPortal"
      },
      "typeValueRef": "@types/react:ReactNode",
      "from": "@epam/uui-core:IHasChildren",
      "required": false
     },
     {
      "uid": 6,
      "name": "width",
      "comment": {
       "raw": [
        "CSS width. Set to 'auto' to make FlexCell resize to it's content"
       ]
      },
      "typeValue": {
       "raw": "number | 'auto' | '100%'"
      },
      "required": false
     },
     {
      "uid": 7,
      "name": "minWidth",
      "comment": {
       "raw": [
        "CSS min-width"
       ]
      },
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "required": false
     },
     {
      "uid": 8,
      "name": "grow",
      "comment": {
       "raw": [
        "Flexbox flex-grow property [Flexbox Guide](https://css-tricks.com/snippets/css/a-guide-to-flexbox/#aa-flex-grow)"
       ]
      },
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "required": false
     },
     {
      "uid": 9,
      "name": "shrink",
      "comment": {
       "raw": [
        "Flexbox shrink property [Flexbox Guide](https://css-tricks.com/snippets/css/a-guide-to-flexbox/#aa-flex-shrink)"
       ]
      },
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "required": false
     },
     {
      "uid": 10,
      "name": "textAlign",
      "comment": {
       "raw": [
        "CSS text-align property"
       ]
      },
      "typeValue": {
       "raw": "'left' | 'right' | 'center'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "left",
        "right",
        "center"
       ]
      },
      "required": false
     },
     {
      "uid": 11,
      "name": "alignSelf",
      "comment": {
       "raw": [
        "Flexbox align-self property. Aligns items vertically for horizontal flexbox. [Flexbox Guide](https://css-tricks.com/snippets/css/a-guide-to-flexbox/#aa-align-self)"
       ]
      },
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "required": false
     },
     {
      "uid": 12,
      "name": "style",
      "comment": {
       "raw": [
        "Standard style attribute. Styles are added to element style, overriding supplied flex styles"
       ]
      },
      "typeValue": {
       "raw": "React.CSSProperties"
      },
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui-core:FlexRowProps": {
   "summary": {
    "module": "@epam/uui-core",
    "typeName": {
     "name": "FlexRowProps",
     "nameFull": "FlexRowProps"
    },
    "src": "uui-core/src/types/props.ts",
    "exported": true
   },
   "details": {
    "kind": 264,
    "typeValue": {
     "raw": "FlexRowProps",
     "print": [
      "type FlexRowProps = IHasCX & IClickable & Attributes & IHasChildren & IHasRawProps<HTMLAttributes<HTMLDivElement>> & {",
      "    /** Flexbox align-items property [Flexbox Guide](https://css-tricks.com/snippets/css/a-guide-to-flexbox/) */",
      "    alignItems?: 'top' | 'center' | 'bottom' | 'stretch';",
      "    /** Flexbox column gap property [Flexbox Guide](https://css-tricks.com/snippets/css/a-guide-to-flexbox/#aa-gap-row-gap-column-gap) */",
      "    columnGap?: number | '6' | '12' | '18' | '24' | '36';",
      "    /** Flexbox row gap property [Flexbox Guide](https://css-tricks.com/snippets/css/a-guide-to-flexbox/#aa-gap-row-gap-column-gap) */",
      "    rowGap?: number | '6' | '12' | '18' | '24' | '36';",
      "};"
     ]
    },
    "props": [
     {
      "uid": 1,
      "name": "cx",
      "comment": {
       "raw": [
        "CSS class(es) to put on component's root. See {@link https://github.com/JedWatson/classnames#usage} for details"
       ]
      },
      "typeValue": {
       "raw": "null | string | number | boolean | ClassDictionary | ClassArray"
      },
      "typeValueRef": "@epam/uui-core:ClassValue",
      "from": "@epam/uui-core:IHasCX",
      "required": false
     },
     {
      "uid": 2,
      "name": "onClick",
      "comment": {
       "raw": [
        "Called when component is clicked"
       ]
      },
      "typeValue": {
       "raw": "(e?: any) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IClickable",
      "required": false
     },
     {
      "uid": 3,
      "name": "key",
      "typeValue": {
       "raw": "null | string | number"
      },
      "from": "@types/react:Attributes",
      "required": false
     },
     {
      "uid": 4,
      "name": "children",
      "typeValue": {
       "raw": "null | string | number | boolean | React.ReactElement<any, string | React.JSXElementConstructor<any>> | React.ReactFragment | React.ReactPortal"
      },
      "typeValueRef": "@types/react:ReactNode",
      "from": "@epam/uui-core:IHasChildren",
      "required": false
     },
     {
      "uid": 5,
      "name": "rawProps",
      "comment": {
       "raw": [
        "Any HTML attributes (native or 'data-') to put on the underlying component"
       ]
      },
      "typeValue": {
       "raw": "React.HTMLAttributes<HTMLDivElement> & Record<`data-${string}`, string>"
      },
      "from": "@epam/uui-core:IHasRawProps",
      "required": false
     },
     {
      "uid": 6,
      "name": "alignItems",
      "comment": {
       "raw": [
        "Flexbox align-items property [Flexbox Guide](https://css-tricks.com/snippets/css/a-guide-to-flexbox/)"
       ]
      },
      "typeValue": {
       "raw": "'top' | 'bottom' | 'center' | 'stretch'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "top",
        "bottom",
        "center",
        "stretch"
       ]
      },
      "required": false
     },
     {
      "uid": 7,
      "name": "columnGap",
      "comment": {
       "raw": [
        "Flexbox column gap property [Flexbox Guide](https://css-tricks.com/snippets/css/a-guide-to-flexbox/#aa-gap-row-gap-column-gap)"
       ]
      },
      "typeValue": {
       "raw": "number | '6' | '12' | '18' | '24' | '36'"
      },
      "required": false
     },
     {
      "uid": 8,
      "name": "rowGap",
      "comment": {
       "raw": [
        "Flexbox row gap property [Flexbox Guide](https://css-tricks.com/snippets/css/a-guide-to-flexbox/#aa-gap-row-gap-column-gap)"
       ]
      },
      "typeValue": {
       "raw": "number | '6' | '12' | '18' | '24' | '36'"
      },
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui-core:FormProps": {
   "summary": {
    "module": "@epam/uui-core",
    "typeName": {
     "name": "FormProps",
     "nameFull": "FormProps<T>"
    },
    "src": "uui-core/src/data/forms/Form.tsx",
    "exported": true
   },
   "details": {
    "kind": 263,
    "typeValue": {
     "raw": "FormProps<T>",
     "print": [
      "interface FormProps<T> {",
      "    /** Current value of the form state */",
      "    value: T;",
      "    /**",
      "     * Render the form body, provided by form state",
      "     * */",
      "    renderForm: (props: IFormApi<T>) => ReactNode;",
      "    /**",
      "     * Returns form metadata - information used to validate the form.",
      "     * @param state Metadata can depend on state, and will be re-computed on updates",
      "     */",
      "    getMetadata?(state: T): Metadata<T>;",
      "    /**",
      "     * Occurs when 'save' function is called on Form.",
      "     * Should save form data (usually with API call to server).",
      "     * Server can also reject form, and provide validation errors in response.",
      "     * @param state Form state to save",
      "     */",
      "    onSave(state: T): Promise<FormSaveResponse<T> | void>;",
      "    /**",
      "     * Called when form is unmounted, but user still have unsaved changes.",
      "     * Accepts a Promise<boolean> to be returned. If promise resolves to true - save procedure is performed.",
      "     * The common use-case is to show a modal with \"Save Changes?\" dialog",
      "     * Skins usually implement this as default behavior. To prevent it, you can pass null to this prop to override it.",
      "     */",
      "    beforeLeave?: (() => Promise<boolean>) | null;",
      "    /**",
      "     * Used to restore unsaved user edits from the last session (usually to localstorage, via uuiUserSettings context)",
      "     * If unsaved changes are detected, this callback is called. If it is resolved - the form restores unsaved edits.",
      "     * The common use-case is to show a modal with \"You have unsaved changes, restore them?\" dialog",
      "     * Skins usually implement this as default behavior. To prevent it, you can pass null to this prop to override it.",
      "     */",
      "    loadUnsavedChanges?: () => Promise<void>;",
      "    /**",
      "     * Called after successful save.",
      "     * @param state Saved state",
      "     * @param isSavedBeforeLeave true, if save is triggered via leaving the page, and \"Save Changes?\" dialog",
      "     */",
      "    onSuccess?(state: T, isSavedBeforeLeave?: boolean): any;",
      "    /** Called when save fails */",
      "    onError?(error: any): any;",
      "    /**",
      "     * The key, under which form save unsaved state usually to localstorage, via uuiUserSettings context)",
      "     */",
      "    settingsKey?: string;",
      "    /**",
      "     * Controls when form validation occurs:",
      "     * save (default, recommended) - form is validated on save. If form is invalid - it will be revalidated on every change, until become valid",
      "     * change - form is validated on every user change. Only fields changes in current edit session are validated",
      "     */",
      "    validationOn?: ValidationMode;",
      "}"
     ]
    },
    "props": [
     {
      "uid": 1,
      "name": "value",
      "comment": {
       "raw": [
        "Current value of the form state"
       ]
      },
      "typeValue": {
       "raw": "T"
      },
      "required": true
     },
     {
      "uid": 2,
      "name": "renderForm",
      "comment": {
       "raw": [
        "Render the form body, provided by form state"
       ]
      },
      "typeValue": {
       "raw": "(props: IFormApi<T>) => React.ReactNode"
      },
      "editor": {
       "type": "component"
      },
      "required": true
     },
     {
      "uid": 3,
      "name": "getMetadata",
      "comment": {
       "raw": [
        "Returns form metadata - information used to validate the form.",
        " @param state Metadata can depend on state, and will be re-computed on updates"
       ]
      },
      "typeValue": {
       "raw": "(state: T) => Metadata<T>"
      },
      "editor": {
       "type": "func"
      },
      "required": false
     },
     {
      "uid": 4,
      "name": "onSave",
      "comment": {
       "raw": [
        "Occurs when 'save' function is called on Form.",
        " Should save form data (usually with API call to server).",
        " Server can also reject form, and provide validation errors in response.",
        " @param state Form state to save"
       ]
      },
      "typeValue": {
       "raw": "(state: T) => Promise<void | FormSaveResponse<T>>"
      },
      "editor": {
       "type": "func"
      },
      "required": true
     },
     {
      "uid": 5,
      "name": "beforeLeave",
      "comment": {
       "raw": [
        "Called when form is unmounted, but user still have unsaved changes.",
        " Accepts a Promise<boolean> to be returned. If promise resolves to true - save procedure is performed.",
        " The common use-case is to show a modal with \"Save Changes?\" dialog",
        " Skins usually implement this as default behavior. To prevent it, you can pass null to this prop to override it."
       ]
      },
      "typeValue": {
       "raw": "null | () => Promise<boolean>"
      },
      "editor": {
       "type": "func"
      },
      "required": false
     },
     {
      "uid": 6,
      "name": "loadUnsavedChanges",
      "comment": {
       "raw": [
        "Used to restore unsaved user edits from the last session (usually to localstorage, via uuiUserSettings context)",
        " If unsaved changes are detected, this callback is called. If it is resolved - the form restores unsaved edits.",
        " The common use-case is to show a modal with \"You have unsaved changes, restore them?\" dialog",
        " Skins usually implement this as default behavior. To prevent it, you can pass null to this prop to override it."
       ]
      },
      "typeValue": {
       "raw": "() => Promise<void>"
      },
      "editor": {
       "type": "func"
      },
      "required": false
     },
     {
      "uid": 7,
      "name": "onSuccess",
      "comment": {
       "raw": [
        "Called after successful save.",
        " @param state Saved state",
        " @param isSavedBeforeLeave true, if save is triggered via leaving the page, and \"Save Changes?\" dialog"
       ]
      },
      "typeValue": {
       "raw": "(state: T, isSavedBeforeLeave?: boolean | undefined) => any"
      },
      "editor": {
       "type": "func"
      },
      "required": false
     },
     {
      "uid": 8,
      "name": "onError",
      "comment": {
       "raw": [
        "Called when save fails"
       ]
      },
      "typeValue": {
       "raw": "(error: any) => any"
      },
      "editor": {
       "type": "func"
      },
      "required": false
     },
     {
      "uid": 9,
      "name": "settingsKey",
      "comment": {
       "raw": [
        "The key, under which form save unsaved state usually to localstorage, via uuiUserSettings context)"
       ]
      },
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "required": false
     },
     {
      "uid": 10,
      "name": "validationOn",
      "comment": {
       "raw": [
        "Controls when form validation occurs:",
        " save (default, recommended) - form is validated on save. If form is invalid - it will be revalidated on every change, until become valid",
        " change - form is validated on every user change. Only fields changes in current edit session are validated"
       ]
      },
      "typeValue": {
       "raw": "'change' | 'save'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "change",
        "save"
       ]
      },
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui-core:FormSaveResponse": {
   "summary": {
    "module": "@epam/uui-core",
    "typeName": {
     "name": "FormSaveResponse",
     "nameFull": "FormSaveResponse<T>"
    },
    "src": "uui-core/src/data/forms/Form.tsx",
    "exported": true
   },
   "details": {
    "kind": 263,
    "typeValue": {
     "raw": "FormSaveResponse<T>",
     "print": [
      "interface FormSaveResponse<T> {",
      "    form?: T;",
      "    validation?: ICanBeInvalid;",
      "}"
     ]
    },
    "props": [
     {
      "uid": 1,
      "name": "form",
      "typeValue": {
       "raw": "T"
      },
      "required": false
     },
     {
      "uid": 2,
      "name": "validation",
      "typeValue": {
       "raw": "ICanBeInvalid"
      },
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui-core:FormState": {
   "summary": {
    "module": "@epam/uui-core",
    "typeName": {
     "name": "FormState",
     "nameFull": "FormState<T>"
    },
    "src": "uui-core/src/data/forms/useForm.ts",
    "exported": true
   },
   "details": {
    "kind": 263,
    "typeValue": {
     "raw": "FormState<T>",
     "print": [
      "interface FormState<T> {",
      "    form: T;",
      "    validationState: ICanBeInvalid;",
      "    serverValidationState: ICanBeInvalid;",
      "    lastSentForm?: T;",
      "    isChanged: boolean;",
      "    formHistory: T[];",
      "    historyIndex: number;",
      "    isInProgress: boolean;",
      "    isInSaveMode: boolean;",
      "}"
     ]
    },
    "props": [
     {
      "uid": 1,
      "name": "form",
      "typeValue": {
       "raw": "T"
      },
      "required": true
     },
     {
      "uid": 2,
      "name": "validationState",
      "typeValue": {
       "raw": "ICanBeInvalid"
      },
      "required": true
     },
     {
      "uid": 3,
      "name": "serverValidationState",
      "typeValue": {
       "raw": "ICanBeInvalid"
      },
      "required": true
     },
     {
      "uid": 4,
      "name": "lastSentForm",
      "typeValue": {
       "raw": "T"
      },
      "required": false
     },
     {
      "uid": 5,
      "name": "isChanged",
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "required": true
     },
     {
      "uid": 6,
      "name": "formHistory",
      "typeValue": {
       "raw": "T[]"
      },
      "required": true
     },
     {
      "uid": 7,
      "name": "historyIndex",
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "required": true
     },
     {
      "uid": 8,
      "name": "isInProgress",
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "required": true
     },
     {
      "uid": 9,
      "name": "isInSaveMode",
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "required": true
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui-core:IAdaptiveItem": {
   "summary": {
    "module": "@epam/uui-core",
    "typeName": {
     "name": "IAdaptiveItem",
     "nameFull": "IAdaptiveItem"
    },
    "src": "uui-core/src/types/props.ts",
    "exported": true
   },
   "details": {
    "kind": 263,
    "typeValue": {
     "raw": "IAdaptiveItem",
     "print": [
      "// TBD: remove when MainMenu old api of items providing will be removed",
      "interface IAdaptiveItem {",
      "    estimatedWidth?: number;",
      "    priority?: number;",
      "    showInBurgerMenu?: boolean;",
      "    collapseToMore?: boolean;",
      "    collapsedContainer?: boolean;",
      "}"
     ]
    },
    "props": [
     {
      "uid": 1,
      "name": "estimatedWidth",
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "required": false
     },
     {
      "uid": 2,
      "name": "priority",
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "required": false
     },
     {
      "uid": 3,
      "name": "showInBurgerMenu",
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "required": false
     },
     {
      "uid": 4,
      "name": "collapseToMore",
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "required": false
     },
     {
      "uid": 5,
      "name": "collapsedContainer",
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui-core:IAnalyticableClick": {
   "summary": {
    "module": "@epam/uui-core",
    "typeName": {
     "name": "IAnalyticableClick",
     "nameFull": "IAnalyticableClick"
    },
    "src": "uui-core/src/types/props.ts",
    "exported": true
   },
   "details": {
    "kind": 263,
    "typeValue": {
     "raw": "IAnalyticableClick",
     "print": [
      "interface IAnalyticableClick {",
      "    /**",
      "     * An analytics event to send (via AnalyticsContext) when component is clicked.",
      "     * See [AnalyticsContext](@link https://uui.epam.com/documents?id=analyticsContext&mode=doc&skin=UUI4_promo&category=contexts).",
      "     */",
      "    clickAnalyticsEvent?: AnalyticsEvent;",
      "}"
     ]
    },
    "props": [
     {
      "uid": 1,
      "name": "clickAnalyticsEvent",
      "comment": {
       "raw": [
        "An analytics event to send (via AnalyticsContext) when component is clicked.",
        " See [AnalyticsContext](@link https://uui.epam.com/documents?id=analyticsContext&mode=doc&skin=UUI4_promo&category=contexts)."
       ]
      },
      "typeValue": {
       "raw": "null | { [key: string]: any; name: string; }"
      },
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui-core:IAnalyticableOnChange": {
   "summary": {
    "module": "@epam/uui-core",
    "typeName": {
     "name": "IAnalyticableOnChange",
     "nameFull": "IAnalyticableOnChange<T>"
    },
    "src": "uui-core/src/types/props.ts",
    "exported": true
   },
   "details": {
    "kind": 263,
    "typeValue": {
     "raw": "IAnalyticableOnChange<T>",
     "print": [
      "interface IAnalyticableOnChange<T> {",
      "    /**",
      "     * Given a value, returns an analytics event to send when component is edited.",
      "     * See [AnalyticsContext](@link https://uui.epam.com/documents?id=analyticsContext&mode=doc&skin=UUI4_promo&category=contexts).",
      "     */",
      "    getValueChangeAnalyticsEvent?: (newValue: T | null, oldValue: T | null) => AnalyticsEvent;",
      "}"
     ]
    },
    "props": [
     {
      "uid": 1,
      "name": "getValueChangeAnalyticsEvent",
      "comment": {
       "raw": [
        "Given a value, returns an analytics event to send when component is edited.",
        " See [AnalyticsContext](@link https://uui.epam.com/documents?id=analyticsContext&mode=doc&skin=UUI4_promo&category=contexts)."
       ]
      },
      "typeValue": {
       "raw": "(newValue: T | null, oldValue: T | null) => AnalyticsEvent"
      },
      "editor": {
       "type": "func"
      },
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui-core:IAnalyticsContext": {
   "summary": {
    "module": "@epam/uui-core",
    "typeName": {
     "name": "IAnalyticsContext",
     "nameFull": "IAnalyticsContext"
    },
    "src": "uui-core/src/types/contexts.ts",
    "exported": true
   },
   "details": {
    "kind": 263,
    "typeValue": {
     "raw": "IAnalyticsContext",
     "print": [
      "interface IAnalyticsContext {",
      "    /** Sends event to the all listeners */",
      "    sendEvent(event?: AnalyticsEvent): void;",
      "    /** Adds analytic event listener */",
      "    addListener(listener: IAnalyticsListener): void;",
      "}"
     ]
    },
    "props": [
     {
      "uid": 1,
      "name": "sendEvent",
      "comment": {
       "raw": [
        "Sends event to the all listeners"
       ]
      },
      "typeValue": {
       "raw": "(event?: AnalyticsEvent | undefined) => void"
      },
      "editor": {
       "type": "func"
      },
      "required": true
     },
     {
      "uid": 2,
      "name": "addListener",
      "comment": {
       "raw": [
        "Adds analytic event listener"
       ]
      },
      "typeValue": {
       "raw": "(listener: IAnalyticsListener) => void"
      },
      "editor": {
       "type": "func"
      },
      "required": true
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui-core:IAnalyticsListener": {
   "summary": {
    "module": "@epam/uui-core",
    "typeName": {
     "name": "IAnalyticsListener",
     "nameFull": "IAnalyticsListener"
    },
    "src": "uui-core/src/types/contexts.ts",
    "exported": true
   },
   "details": {
    "kind": 263,
    "typeValue": {
     "raw": "IAnalyticsListener",
     "print": [
      "interface IAnalyticsListener {",
      "    /** Defines how to send event to the analytics system */",
      "    sendEvent(event: AnalyticsEvent, parameters: Omit<AnalyticsEvent, 'name'>, eventType?: 'event' | 'pageView' | 'apiTiming'): void;",
      "}"
     ]
    },
    "props": [
     {
      "uid": 1,
      "name": "sendEvent",
      "comment": {
       "raw": [
        "Defines how to send event to the analytics system"
       ]
      },
      "typeValue": {
       "raw": "(event: AnalyticsEvent, parameters: Omit<AnalyticsEvent, 'name'>, eventType?: 'event' | 'pageView' | 'apiTiming' | undefined) => void"
      },
      "editor": {
       "type": "func"
      },
      "required": true
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui-core:IApiContext": {
   "summary": {
    "module": "@epam/uui-core",
    "typeName": {
     "name": "IApiContext",
     "nameFull": "IApiContext"
    },
    "src": "uui-core/src/types/contexts.ts",
    "exported": true
   },
   "details": {
    "kind": 263,
    "typeValue": {
     "raw": "IApiContext",
     "print": [
      "interface IApiContext extends IBaseContext {",
      "    /** Current status of api service.",
      "     * idle - service do nothing and ready to process new requests",
      "     * running - service is currently processing requests",
      "     * error - service received an error and stop processing requests, due to this error will be discarded",
      "     * recovery - service trying to restore connection and recover latest requests",
      "     * */",
      "    readonly status: ApiStatus;",
      "    readonly recoveryReason: ApiRecoveryReason | null;",
      "    /** Returns currently processing or failed requests */",
      "    getActiveCalls(status?: ApiCallStatus): ApiCallInfo[];",
      "    /** Resets all errors */",
      "    reset(): void;",
      "    /** Starts fetch call with providing params */",
      "    processRequest(url: string, method: string, data?: any, options?: ApiCallOptions): Promise<any>;",
      "    /** Starts file uploading using FormData */",
      "    uploadFile(url: string, file: File, options: FileUploadOptions): Promise<FileUploadResponse>;",
      "}"
     ]
    },
    "props": [
     {
      "uid": 1,
      "name": "status",
      "comment": {
       "raw": [
        "Current status of api service.",
        " idle - service do nothing and ready to process new requests",
        " running - service is currently processing requests",
        " error - service received an error and stop processing requests, due to this error will be discarded",
        " recovery - service trying to restore connection and recover latest requests"
       ]
      },
      "typeValue": {
       "raw": "'running' | 'error' | 'idle' | 'recovery'"
      },
      "typeValueRef": "@epam/uui-core:ApiStatus",
      "editor": {
       "type": "oneOf",
       "options": [
        "running",
        "error",
        "idle",
        "recovery"
       ]
      },
      "required": true
     },
     {
      "uid": 2,
      "name": "recoveryReason",
      "typeValue": {
       "raw": "null | 'auth-lost' | 'connection-lost' | 'server-overload' | 'maintenance'"
      },
      "typeValueRef": "@epam/uui-core:ApiRecoveryReason",
      "editor": {
       "type": "oneOf",
       "options": [
        "auth-lost",
        "connection-lost",
        "server-overload",
        "maintenance",
        null
       ]
      },
      "required": false
     },
     {
      "uid": 3,
      "name": "getActiveCalls",
      "comment": {
       "raw": [
        "Returns currently processing or failed requests"
       ]
      },
      "typeValue": {
       "raw": "(status?: ApiCallStatus | undefined) => ApiCallInfo[]"
      },
      "editor": {
       "type": "func"
      },
      "required": true
     },
     {
      "uid": 4,
      "name": "reset",
      "comment": {
       "raw": [
        "Resets all errors"
       ]
      },
      "typeValue": {
       "raw": "() => void"
      },
      "editor": {
       "type": "func"
      },
      "required": true
     },
     {
      "uid": 5,
      "name": "processRequest",
      "comment": {
       "raw": [
        "Starts fetch call with providing params"
       ]
      },
      "typeValue": {
       "raw": "(url: string, method: string, data?: any, options?: ApiCallOptions | undefined) => Promise<any>"
      },
      "editor": {
       "type": "func"
      },
      "required": true
     },
     {
      "uid": 6,
      "name": "uploadFile",
      "comment": {
       "raw": [
        "Starts file uploading using FormData"
       ]
      },
      "typeValue": {
       "raw": "(url: string, file: File, options: FileUploadOptions) => Promise<FileUploadResponse>"
      },
      "editor": {
       "type": "func"
      },
      "required": true
     },
     {
      "uid": 7,
      "name": "subscribe",
      "typeValue": {
       "raw": "(handler: (state: {}) => void) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IBaseContext",
      "required": true
     },
     {
      "uid": 8,
      "name": "unsubscribe",
      "typeValue": {
       "raw": "(handler: (state: {}) => void) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IBaseContext",
      "required": true
     },
     {
      "uid": 9,
      "name": "destroyContext",
      "typeValue": {
       "raw": "() => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IBaseContext",
      "required": true
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui-core:IBaseContext": {
   "summary": {
    "module": "@epam/uui-core",
    "typeName": {
     "name": "IBaseContext",
     "nameFull": "IBaseContext<TState>"
    },
    "src": "uui-core/src/types/contexts.ts",
    "exported": true
   },
   "details": {
    "kind": 263,
    "typeValue": {
     "raw": "IBaseContext<TState>",
     "print": [
      "interface IBaseContext<TState = {}> {",
      "    subscribe(handler: (state: TState) => void): void;",
      "    unsubscribe(handler: (state: TState) => void): void;",
      "    destroyContext: () => void;",
      "}"
     ]
    },
    "props": [
     {
      "uid": 1,
      "name": "subscribe",
      "typeValue": {
       "raw": "(handler: (state: TState) => void) => void"
      },
      "editor": {
       "type": "func"
      },
      "required": true
     },
     {
      "uid": 2,
      "name": "unsubscribe",
      "typeValue": {
       "raw": "(handler: (state: TState) => void) => void"
      },
      "editor": {
       "type": "func"
      },
      "required": true
     },
     {
      "uid": 3,
      "name": "destroyContext",
      "typeValue": {
       "raw": "() => void"
      },
      "editor": {
       "type": "func"
      },
      "required": true
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui-core:IBasicPickerToggler": {
   "summary": {
    "module": "@epam/uui-core",
    "typeName": {
     "name": "IBasicPickerToggler",
     "nameFull": "IBasicPickerToggler"
    },
    "src": "uui-core/src/types/pickers.ts",
    "comment": {
     "raw": [
      "Component can be used as Toggler control for pickers.",
      " This interface is enough for basic pickers.",
      " Picker togglers with search or advanced selection display should implement IPickerToggler interface"
     ]
    },
    "exported": true
   },
   "details": {
    "kind": 263,
    "typeValue": {
     "raw": "IBasicPickerToggler",
     "print": [
      "/**",
      " * Component can be used as Toggler control for pickers.",
      " * This interface is enough for basic pickers.",
      " * Picker togglers with search or advanced selection display should implement IPickerToggler interface",
      " */",
      "interface IBasicPickerToggler extends IDropdownToggler {",
      "    /** Call to clear toggler value */",
      "    onClear?(e?: any): void;",
      "}"
     ]
    },
    "props": [
     {
      "uid": 1,
      "name": "onClear",
      "comment": {
       "raw": [
        "Call to clear toggler value"
       ]
      },
      "typeValue": {
       "raw": "(e?: any) => void"
      },
      "editor": {
       "type": "func"
      },
      "required": false
     },
     {
      "uid": 2,
      "name": "isOpen",
      "comment": {
       "raw": [
        "When isDropdown=true, indicate that dropdown is open with chevron icon"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:IDropdownToggler",
      "required": false
     },
     {
      "uid": 3,
      "name": "isDropdown",
      "comment": {
       "raw": [
        "Shows chevron icon, enabling component to act as dropdown toggler"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:IDropdownToggler",
      "required": false
     },
     {
      "uid": 4,
      "name": "toggleDropdownOpening",
      "comment": {
       "raw": [
        "Called when associated dropdown should open or close"
       ]
      },
      "typeValue": {
       "raw": "(value: boolean) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IDropdownToggler",
      "required": false
     },
     {
      "uid": 5,
      "name": "isInteractedOutside",
      "comment": {
       "raw": [
        "Called when component is interacted outside, to close the dropdown"
       ]
      },
      "typeValue": {
       "raw": "(event: Event) => boolean"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IDropdownToggler",
      "required": false
     },
     {
      "uid": 6,
      "name": "ref",
      "comment": {
       "raw": [
        "Component's ref"
       ]
      },
      "typeValue": {
       "raw": "null | (instance: any) => void | React.RefObject<any>"
      },
      "from": "@epam/uui-core:IDropdownToggler",
      "required": false
     },
     {
      "uid": 7,
      "name": "isDisabled",
      "comment": {
       "raw": [
        "Disables component"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:IDropdownToggler",
      "required": false
     },
     {
      "uid": 8,
      "name": "caption",
      "comment": {
       "raw": [
        "Caption. Can be a string, or React.Elements. Certain components supports minimal markup (<b>,<i>,<a>) in captions."
       ]
      },
      "typeValue": {
       "raw": "any"
      },
      "from": "@epam/uui-core:IHasCaption",
      "required": false
     },
     {
      "uid": 9,
      "name": "onClick",
      "comment": {
       "raw": [
        "Called when component is clicked"
       ]
      },
      "typeValue": {
       "raw": "(e?: any) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IClickable",
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui-core:ICanBeFixed": {
   "summary": {
    "module": "@epam/uui-core",
    "typeName": {
     "name": "ICanBeFixed",
     "nameFull": "ICanBeFixed"
    },
    "src": "uui-core/src/types/tables.ts",
    "exported": true
   },
   "details": {
    "kind": 264,
    "typeValue": {
     "raw": "ICanBeFixed",
     "print": [
      "type ICanBeFixed = {",
      "    /** If specified, will make column fixed - it would not scroll horizontally */",
      "    fix?: 'left' | 'right';",
      "};"
     ]
    },
    "props": [
     {
      "uid": 1,
      "name": "fix",
      "comment": {
       "raw": [
        "If specified, will make column fixed - it would not scroll horizontally"
       ]
      },
      "typeValue": {
       "raw": "'left' | 'right'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "left",
        "right"
       ]
      },
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui-core:ICanBeInvalid": {
   "summary": {
    "module": "@epam/uui-core",
    "typeName": {
     "name": "ICanBeInvalid",
     "nameFull": "ICanBeInvalid"
    },
    "src": "uui-core/src/types/props.ts",
    "comment": {
     "raw": [
      "Component value can be invalid"
     ]
    },
    "exported": true
   },
   "details": {
    "kind": 263,
    "typeValue": {
     "raw": "ICanBeInvalid",
     "print": [
      "/** Component value can be invalid */",
      "interface ICanBeInvalid {",
      "    /** True if component contains invalid input */",
      "    isInvalid?: boolean;",
      "    /** Message describing why the value is invalid */",
      "    validationMessage?: ReactNode;",
      "    /** If T is a complex value (object or array), this property contains validation states of inner items */",
      "    validationProps?: {",
      "        [key: string]: ICanBeInvalid;",
      "    };",
      "}"
     ]
    },
    "props": [
     {
      "uid": 1,
      "name": "isInvalid",
      "comment": {
       "raw": [
        "True if component contains invalid input"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "required": false
     },
     {
      "uid": 2,
      "name": "validationMessage",
      "comment": {
       "raw": [
        "Message describing why the value is invalid"
       ]
      },
      "typeValue": {
       "raw": "null | string | number | boolean | React.ReactElement<any, string | React.JSXElementConstructor<any>> | React.ReactFragment | React.ReactPortal"
      },
      "typeValueRef": "@types/react:ReactNode",
      "required": false
     },
     {
      "uid": 3,
      "name": "validationProps",
      "comment": {
       "raw": [
        "If T is a complex value (object or array), this property contains validation states of inner items"
       ]
      },
      "typeValue": {
       "raw": "{ [key: string]: ICanBeInvalid; }"
      },
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui-core:ICanBeReadonly": {
   "summary": {
    "module": "@epam/uui-core",
    "typeName": {
     "name": "ICanBeReadonly",
     "nameFull": "ICanBeReadonly"
    },
    "src": "uui-core/src/types/props.ts",
    "comment": {
     "raw": [
      "Component can be made read-only"
     ]
    },
    "exported": true
   },
   "details": {
    "kind": 263,
    "typeValue": {
     "raw": "ICanBeReadonly",
     "print": [
      "/** Component can be made read-only */",
      "interface ICanBeReadonly {",
      "    /** Disable editing. Unlike isDisabled, keep component's value readable. */",
      "    isReadonly?: boolean;",
      "}"
     ]
    },
    "props": [
     {
      "uid": 1,
      "name": "isReadonly",
      "comment": {
       "raw": [
        "Disable editing. Unlike isDisabled, keep component's value readable."
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui-core:ICanBeRequired": {
   "summary": {
    "module": "@epam/uui-core",
    "typeName": {
     "name": "ICanBeRequired",
     "nameFull": "ICanBeRequired"
    },
    "src": "uui-core/src/types/props.ts",
    "exported": true
   },
   "details": {
    "kind": 263,
    "typeValue": {
     "raw": "ICanBeRequired",
     "print": [
      "interface ICanBeRequired {",
      "    /** Marks that component's value is required and shouldn't be empty */",
      "    isRequired?: boolean;",
      "}"
     ]
    },
    "props": [
     {
      "uid": 1,
      "name": "isRequired",
      "comment": {
       "raw": [
        "Marks that component's value is required and shouldn't be empty"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui-core:ICanFocus": {
   "summary": {
    "module": "@epam/uui-core",
    "typeName": {
     "name": "ICanFocus",
     "nameFull": "ICanFocus<T>"
    },
    "src": "uui-core/src/types/props.ts",
    "comment": {
     "raw": [
      "Component can get input focus"
     ]
    },
    "exported": true
   },
   "details": {
    "kind": 263,
    "typeValue": {
     "raw": "ICanFocus<T>",
     "print": [
      "/** Component can get input focus */",
      "interface ICanFocus<T> {",
      "    /** Called when component gets input focus */",
      "    onFocus?: (e: React.FocusEvent<T>) => void;",
      "    /** Called when component looses input focus */",
      "    onBlur?: (e: React.FocusEvent<T>) => void;",
      "}"
     ]
    },
    "props": [
     {
      "uid": 1,
      "name": "onFocus",
      "comment": {
       "raw": [
        "Called when component gets input focus"
       ]
      },
      "typeValue": {
       "raw": "(e: React.FocusEvent<T, Element>) => void"
      },
      "editor": {
       "type": "func"
      },
      "required": false
     },
     {
      "uid": 2,
      "name": "onBlur",
      "comment": {
       "raw": [
        "Called when component looses input focus"
       ]
      },
      "typeValue": {
       "raw": "(e: React.FocusEvent<T, Element>) => void"
      },
      "editor": {
       "type": "func"
      },
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui-core:ICanRedirect": {
   "summary": {
    "module": "@epam/uui-core",
    "typeName": {
     "name": "ICanRedirect",
     "nameFull": "ICanRedirect"
    },
    "src": "uui-core/src/types/props.ts",
    "comment": {
     "raw": [
      "Component acts as a link, and can redirect"
     ]
    },
    "exported": true
   },
   "details": {
    "kind": 263,
    "typeValue": {
     "raw": "ICanRedirect",
     "print": [
      "/** Component acts as a link, and can redirect */",
      "interface ICanRedirect {",
      "    /** Link object to redirect to for SPA-redirects */",
      "    link?: Link;",
      "    /** Href (URL) to redirect to, for non-SPA redirects */",
      "    href?: string;",
      "    /** Highlights component to show that link is active (browser is displaying the page to which link is pointing) */",
      "    isLinkActive?: boolean;",
      "    /** Controls where the link should be opened */",
      "    target?: '_blank';",
      "}"
     ]
    },
    "props": [
     {
      "uid": 1,
      "name": "link",
      "comment": {
       "raw": [
        "Link object to redirect to for SPA-redirects"
       ]
      },
      "typeValue": {
       "raw": "Link"
      },
      "required": false
     },
     {
      "uid": 2,
      "name": "href",
      "comment": {
       "raw": [
        "Href (URL) to redirect to, for non-SPA redirects"
       ]
      },
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "required": false
     },
     {
      "uid": 3,
      "name": "isLinkActive",
      "comment": {
       "raw": [
        "Highlights component to show that link is active (browser is displaying the page to which link is pointing)"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "required": false
     },
     {
      "uid": 4,
      "name": "target",
      "comment": {
       "raw": [
        "Controls where the link should be opened"
       ]
      },
      "typeValue": {
       "raw": "'_blank'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "_blank"
       ]
      },
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui-core:ICheckable": {
   "summary": {
    "module": "@epam/uui-core",
    "typeName": {
     "name": "ICheckable",
     "nameFull": "ICheckable"
    },
    "src": "uui-core/src/types/props.ts",
    "exported": true
   },
   "details": {
    "kind": 264,
    "typeValue": {
     "raw": "ICheckable",
     "print": [
      "type ICheckable = IEditable<boolean> & IDisableable & {",
      "    /** Sets checkbox in indeterminate state (neither checked or unchecked), which usually means that children elements has both values */",
      "    indeterminate?: boolean;",
      "};"
     ]
    },
    "props": [
     {
      "uid": 1,
      "name": "value",
      "comment": {
       "raw": [
        "The current value of component"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:IEditable",
      "required": true
     },
     {
      "uid": 2,
      "name": "onValueChange",
      "comment": {
       "raw": [
        "Called when value needs to be changed (usually due to user interaction)"
       ]
      },
      "typeValue": {
       "raw": "(newValue: boolean) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IEditable",
      "required": true
     },
     {
      "uid": 3,
      "name": "isInvalid",
      "comment": {
       "raw": [
        "True if component contains invalid input"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:ICanBeInvalid",
      "required": false
     },
     {
      "uid": 4,
      "name": "validationMessage",
      "comment": {
       "raw": [
        "Message describing why the value is invalid"
       ]
      },
      "typeValue": {
       "raw": "null | string | number | boolean | React.ReactElement<any, string | React.JSXElementConstructor<any>> | React.ReactFragment | React.ReactPortal"
      },
      "typeValueRef": "@types/react:ReactNode",
      "from": "@epam/uui-core:ICanBeInvalid",
      "required": false
     },
     {
      "uid": 5,
      "name": "validationProps",
      "comment": {
       "raw": [
        "If T is a complex value (object or array), this property contains validation states of inner items"
       ]
      },
      "typeValue": {
       "raw": "{ [key: string]: ICanBeInvalid; }"
      },
      "from": "@epam/uui-core:ICanBeInvalid",
      "required": false
     },
     {
      "uid": 6,
      "name": "isDisabled",
      "comment": {
       "raw": [
        "Disable editing, and visually de-emphasize value of the component"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:IDisableable",
      "required": false
     },
     {
      "uid": 7,
      "name": "isReadonly",
      "comment": {
       "raw": [
        "Disable editing. Unlike isDisabled, keep component's value readable."
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:ICanBeReadonly",
      "required": false
     },
     {
      "uid": 8,
      "name": "isRequired",
      "comment": {
       "raw": [
        "Marks that component's value is required and shouldn't be empty"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:ICanBeRequired",
      "required": false
     },
     {
      "uid": 9,
      "name": "indeterminate",
      "comment": {
       "raw": [
        "Sets checkbox in indeterminate state (neither checked or unchecked), which usually means that children elements has both values"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui-core:IClickable": {
   "summary": {
    "module": "@epam/uui-core",
    "typeName": {
     "name": "IClickable",
     "nameFull": "IClickable"
    },
    "src": "uui-core/src/types/props.ts",
    "comment": {
     "raw": [
      "Component supports click action"
     ]
    },
    "exported": true
   },
   "details": {
    "kind": 263,
    "typeValue": {
     "raw": "IClickable",
     "print": [
      "/** Component supports click action */",
      "interface IClickable {",
      "    /** Called when component is clicked */",
      "    onClick?(e?: any): void;",
      "}"
     ]
    },
    "props": [
     {
      "uid": 1,
      "name": "onClick",
      "comment": {
       "raw": [
        "Called when component is clicked"
       ]
      },
      "typeValue": {
       "raw": "(e?: any) => void"
      },
      "editor": {
       "type": "func"
      },
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui-core:IColumnConfig": {
   "summary": {
    "module": "@epam/uui-core",
    "typeName": {
     "name": "IColumnConfig",
     "nameFull": "IColumnConfig"
    },
    "src": "uui-core/src/types/tables.ts",
    "exported": true
   },
   "details": {
    "kind": 264,
    "typeValue": {
     "raw": "IColumnConfig",
     "print": [
      "type IColumnConfig = {",
      "    /** If true, the column will be shown in the FiltersPanel */",
      "    isVisible?: boolean;",
      "    /**",
      "     * Determines the order in which this column should appear in the table.",
      "     * The columns are sorted in ascending alphabetical order.",
      "     */",
      "    order?: string;",
      "    /** The width of the column */",
      "    width?: number;",
      "} & ICanBeFixed;"
     ]
    },
    "props": [
     {
      "uid": 1,
      "name": "isVisible",
      "comment": {
       "raw": [
        "If true, the column will be shown in the FiltersPanel"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "required": false
     },
     {
      "uid": 2,
      "name": "order",
      "comment": {
       "raw": [
        "Determines the order in which this column should appear in the table.",
        " The columns are sorted in ascending alphabetical order."
       ]
      },
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "required": false
     },
     {
      "uid": 3,
      "name": "width",
      "comment": {
       "raw": [
        "The width of the column"
       ]
      },
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "required": false
     },
     {
      "uid": 4,
      "name": "fix",
      "comment": {
       "raw": [
        "If specified, will make column fixed - it would not scroll horizontally"
       ]
      },
      "typeValue": {
       "raw": "'left' | 'right'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "left",
        "right"
       ]
      },
      "from": "@epam/uui-core:ICanBeFixed",
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui-core:Icon": {
   "summary": {
    "module": "@epam/uui-core",
    "typeName": {
     "name": "Icon",
     "nameFull": "Icon<any>"
    },
    "src": "uui-core/src/types/objects.ts",
    "exported": true
   },
   "details": {
    "kind": 264,
    "typeValue": {
     "raw": "Icon",
     "print": [
      "type Icon = React.FC<any>;"
     ]
    }
   }
  },
  "@epam/uui-core:IContextProviderSsrProps": {
   "summary": {
    "module": "@epam/uui-core",
    "typeName": {
     "name": "IContextProviderSsrProps",
     "nameFull": "IContextProviderSsrProps<TApi, TAppContext>"
    },
    "src": "uui-core/src/ssr/useUuiServicesSsr.tsx",
    "exported": true
   },
   "details": {
    "kind": 263,
    "typeValue": {
     "raw": "IContextProviderSsrProps<TApi, TAppContext>",
     "print": [
      "interface IContextProviderSsrProps<TApi, TAppContext> extends UseUuiServicesProps<TApi, TAppContext> {",
      "    router: any;",
      "}"
     ]
    },
    "props": [
     {
      "uid": 1,
      "name": "router",
      "typeValue": {
       "raw": "any"
      },
      "required": true
     },
     {
      "uid": 2,
      "name": "appContext",
      "typeValue": {
       "raw": "TAppContext"
      },
      "from": "@epam/uui-core:UseUuiServicesProps",
      "required": false
     },
     {
      "uid": 3,
      "name": "apiDefinition",
      "typeValue": {
       "raw": "(processRequest: IProcessRequest) => TApi"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:UuiServicesProps",
      "required": false
     },
     {
      "uid": 4,
      "name": "apiReloginPath",
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "from": "@epam/uui-core:ApiContextProps",
      "required": false
     },
     {
      "uid": 5,
      "name": "apiPingPath",
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "from": "@epam/uui-core:ApiContextProps",
      "required": false
     },
     {
      "uid": 6,
      "name": "apiServerUrl",
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "from": "@epam/uui-core:ApiContextProps",
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui-core:IDataSource": {
   "summary": {
    "module": "@epam/uui-core",
    "typeName": {
     "name": "IDataSource",
     "nameFull": "IDataSource<TItem, TId, TFilter>"
    },
    "src": "uui-core/src/types/dataSources.ts",
    "exported": true
   },
   "details": {
    "kind": 263,
    "typeValue": {
     "raw": "IDataSource<TItem, TId, TFilter>",
     "print": [
      "interface IDataSource<TItem, TId, TFilter> {",
      "    getId(item: TItem): TId;",
      "    getById(id: TId): TItem | void;",
      "    setItem(item: TItem): void;",
      "    getView(value: DataSourceState<any, TId>, onValueChange: (val: DataSourceState<any, TId>) => any, options?: any): IDataSourceView<TItem, TId, TFilter>;",
      "    useView(value: DataSourceState<any, TId>, onValueChange: (val: DataSourceState<any, TId>) => any, options?: any, deps?: any[]): IDataSourceView<TItem, TId, TFilter>;",
      "    unsubscribeView(onValueChange: (val: DataSourceState<any, TId>) => any): void;",
      "}"
     ]
    },
    "props": [
     {
      "uid": 1,
      "name": "getId",
      "typeValue": {
       "raw": "(item: TItem) => TId"
      },
      "editor": {
       "type": "func"
      },
      "required": true
     },
     {
      "uid": 2,
      "name": "getById",
      "typeValue": {
       "raw": "(id: TId) => void | TItem"
      },
      "editor": {
       "type": "func"
      },
      "required": true
     },
     {
      "uid": 3,
      "name": "setItem",
      "typeValue": {
       "raw": "(item: TItem) => void"
      },
      "editor": {
       "type": "func"
      },
      "required": true
     },
     {
      "uid": 4,
      "name": "getView",
      "typeValue": {
       "raw": "(value: DataSourceState<any, TId>, onValueChange: (val: DataSourceState<any, TId>) => any, options?: any) => IDataSourceView<TItem, TId, TFilter>"
      },
      "editor": {
       "type": "func"
      },
      "required": true
     },
     {
      "uid": 5,
      "name": "useView",
      "typeValue": {
       "raw": "(value: DataSourceState<any, TId>, onValueChange: (val: DataSourceState<any, TId>) => any, options?: any, deps?: any[] | undefined) => IDataSourceView<TItem, TId, TFilter>"
      },
      "editor": {
       "type": "func"
      },
      "required": true
     },
     {
      "uid": 6,
      "name": "unsubscribeView",
      "typeValue": {
       "raw": "(onValueChange: (val: DataSourceState<any, TId>) => any) => void"
      },
      "editor": {
       "type": "func"
      },
      "required": true
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui-core:IDataSourceView": {
   "summary": {
    "module": "@epam/uui-core",
    "typeName": {
     "name": "IDataSourceView",
     "nameFull": "IDataSourceView<TItem, TId, TFilter>"
    },
    "src": "uui-core/src/types/dataSources.ts",
    "exported": true
   },
   "details": {
    "kind": 264,
    "typeValue": {
     "raw": "IDataSourceView<TItem, TId, TFilter>",
     "print": [
      "// eslint-disable-next-line @typescript-eslint/no-unused-vars",
      "type IDataSourceView<TItem, TId, TFilter> = {",
      "    getById(id: TId, index: number): DataRowProps<TItem, TId>;",
      "    getListProps(): DataSourceListProps;",
      "    getVisibleRows(): DataRowProps<TItem, TId>[];",
      "    getSelectedRows(range?: VirtualListRange): DataRowProps<TItem, TId>[];",
      "    getSelectedRowsCount(): number;",
      "    reload(): void;",
      "    destroy(): void;",
      "    loadData(): void;",
      "    _forceUpdate(): void;",
      "    selectAll?: ICheckable;",
      "};"
     ]
    },
    "props": [
     {
      "uid": 1,
      "name": "getById",
      "typeValue": {
       "raw": "(id: TId, index: number) => DataRowProps<TItem, TId>"
      },
      "editor": {
       "type": "func"
      },
      "required": true
     },
     {
      "uid": 2,
      "name": "getListProps",
      "typeValue": {
       "raw": "() => DataSourceListProps"
      },
      "editor": {
       "type": "func"
      },
      "required": true
     },
     {
      "uid": 3,
      "name": "getVisibleRows",
      "typeValue": {
       "raw": "() => DataRowProps<TItem, TId>[]"
      },
      "editor": {
       "type": "func"
      },
      "required": true
     },
     {
      "uid": 4,
      "name": "getSelectedRows",
      "typeValue": {
       "raw": "(range?: VirtualListRange | undefined) => DataRowProps<TItem, TId>[]"
      },
      "editor": {
       "type": "func"
      },
      "required": true
     },
     {
      "uid": 5,
      "name": "getSelectedRowsCount",
      "typeValue": {
       "raw": "() => number"
      },
      "editor": {
       "type": "func"
      },
      "required": true
     },
     {
      "uid": 6,
      "name": "reload",
      "typeValue": {
       "raw": "() => void"
      },
      "editor": {
       "type": "func"
      },
      "required": true
     },
     {
      "uid": 7,
      "name": "destroy",
      "typeValue": {
       "raw": "() => void"
      },
      "editor": {
       "type": "func"
      },
      "required": true
     },
     {
      "uid": 8,
      "name": "loadData",
      "typeValue": {
       "raw": "() => void"
      },
      "editor": {
       "type": "func"
      },
      "required": true
     },
     {
      "uid": 9,
      "name": "_forceUpdate",
      "typeValue": {
       "raw": "() => void"
      },
      "editor": {
       "type": "func"
      },
      "required": true
     },
     {
      "uid": 10,
      "name": "selectAll",
      "typeValue": {
       "raw": "ICheckable"
      },
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui-core:IDisableable": {
   "summary": {
    "module": "@epam/uui-core",
    "typeName": {
     "name": "IDisableable",
     "nameFull": "IDisableable"
    },
    "src": "uui-core/src/types/props.ts",
    "comment": {
     "raw": [
      "Component can be disabled"
     ]
    },
    "exported": true
   },
   "details": {
    "kind": 263,
    "typeValue": {
     "raw": "IDisableable",
     "print": [
      "/** Component can be disabled */",
      "interface IDisableable {",
      "    /** Disable editing, and visually de-emphasize value of the component */",
      "    isDisabled?: boolean;",
      "}"
     ]
    },
    "props": [
     {
      "uid": 1,
      "name": "isDisabled",
      "comment": {
       "raw": [
        "Disable editing, and visually de-emphasize value of the component"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui-core:IDndActor": {
   "summary": {
    "module": "@epam/uui-core",
    "typeName": {
     "name": "IDndActor",
     "nameFull": "IDndActor<TSrcData, TDstData>"
    },
    "src": "uui-core/src/types/dnd.ts",
    "exported": true
   },
   "details": {
    "kind": 263,
    "typeValue": {
     "raw": "IDndActor<TSrcData, TDstData>",
     "print": [
      "interface IDndActor<TSrcData, TDstData> {",
      "    /** Data used when this component acts as a drag source.",
      "     * If provided, it means this component can be dragged. Can be used in combination with dstData.",
      "     */",
      "    srcData?: TSrcData;",
      "    /** Data used when this component acts as a drop destination.",
      "     * If provided, it means something can be dragged onto this component. Can be used in combination with srcData.",
      "     */",
      "    dstData?: TDstData;",
      "    /** A pure function that gets permitted positions for a drop action */",
      "    canAcceptDrop?(params: AcceptDropParams<TSrcData, TDstData>): DropPositionOptions | null;",
      "    /** Called when accepted drop action performed on this actor. Usually used to reorder and update items */",
      "    onDrop?(data: DropParams<TSrcData, TDstData>): void;",
      "}"
     ]
    },
    "props": [
     {
      "uid": 1,
      "name": "srcData",
      "comment": {
       "raw": [
        "Data used when this component acts as a drag source.",
        " If provided, it means this component can be dragged. Can be used in combination with dstData."
       ]
      },
      "typeValue": {
       "raw": "TSrcData"
      },
      "required": false
     },
     {
      "uid": 2,
      "name": "dstData",
      "comment": {
       "raw": [
        "Data used when this component acts as a drop destination.",
        " If provided, it means something can be dragged onto this component. Can be used in combination with srcData."
       ]
      },
      "typeValue": {
       "raw": "TDstData"
      },
      "required": false
     },
     {
      "uid": 3,
      "name": "canAcceptDrop",
      "comment": {
       "raw": [
        "A pure function that gets permitted positions for a drop action"
       ]
      },
      "typeValue": {
       "raw": "(params: AcceptDropParams<TSrcData, TDstData>) => Partial<Record<DropPosition, boolean>> | null"
      },
      "editor": {
       "type": "func"
      },
      "required": false
     },
     {
      "uid": 4,
      "name": "onDrop",
      "comment": {
       "raw": [
        "Called when accepted drop action performed on this actor. Usually used to reorder and update items"
       ]
      },
      "typeValue": {
       "raw": "(data: DropParams<TSrcData, TDstData>) => void"
      },
      "editor": {
       "type": "func"
      },
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui-core:IDndContext": {
   "summary": {
    "module": "@epam/uui-core",
    "typeName": {
     "name": "IDndContext",
     "nameFull": "IDndContext"
    },
    "src": "uui-core/src/types/contexts.ts",
    "exported": true
   },
   "details": {
    "kind": 263,
    "typeValue": {
     "raw": "IDndContext",
     "print": [
      "interface IDndContext extends IBaseContext<DndContextState> {",
      "    startDrag(node: Node, data: any, renderGhost: () => React.ReactNode): void;",
      "    endDrag(): void;",
      "    /** Indicates that drag in progress */",
      "    isDragging: boolean;",
      "    dragData?: any;",
      "    getMouseCoords: () => TMouseCoords;",
      "}"
     ]
    },
    "props": [
     {
      "uid": 1,
      "name": "startDrag",
      "typeValue": {
       "raw": "(node: Node, data: any, renderGhost: () => React.ReactNode) => void"
      },
      "editor": {
       "type": "func"
      },
      "required": true
     },
     {
      "uid": 2,
      "name": "endDrag",
      "typeValue": {
       "raw": "() => void"
      },
      "editor": {
       "type": "func"
      },
      "required": true
     },
     {
      "uid": 3,
      "name": "isDragging",
      "comment": {
       "raw": [
        "Indicates that drag in progress"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "required": true
     },
     {
      "uid": 4,
      "name": "dragData",
      "typeValue": {
       "raw": "any"
      },
      "required": false
     },
     {
      "uid": 5,
      "name": "getMouseCoords",
      "typeValue": {
       "raw": "() => TMouseCoords"
      },
      "editor": {
       "type": "func"
      },
      "required": true
     },
     {
      "uid": 6,
      "name": "subscribe",
      "typeValue": {
       "raw": "(handler: (state: DndContextState) => void) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IBaseContext",
      "required": true
     },
     {
      "uid": 7,
      "name": "unsubscribe",
      "typeValue": {
       "raw": "(handler: (state: DndContextState) => void) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IBaseContext",
      "required": true
     },
     {
      "uid": 8,
      "name": "destroyContext",
      "typeValue": {
       "raw": "() => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IBaseContext",
      "required": true
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui-core:IDropdownBodyProps": {
   "summary": {
    "module": "@epam/uui-core",
    "typeName": {
     "name": "IDropdownBodyProps",
     "nameFull": "IDropdownBodyProps"
    },
    "src": "uui-core/src/types/props.ts",
    "exported": true
   },
   "details": {
    "kind": 263,
    "typeValue": {
     "raw": "IDropdownBodyProps",
     "print": [
      "interface IDropdownBodyProps {",
      "    /** Call to close the Dropdown body */",
      "    onClose?: () => void;",
      "    /** The width of the toggler, which can be used to adjust the body width to it */",
      "    togglerWidth?: number;",
      "    /** The height of the toggler */",
      "    togglerHeight?: number;",
      "    /** Call to force recompute dropdown position */",
      "    scheduleUpdate?: () => void;",
      "    /** Indicates that dropdown is open */",
      "    isOpen?: boolean;",
      "    /** Props that should be provided to the arrow component */",
      "    arrowProps?: PopperArrowProps;",
      "    /** Dropdown position relative to the input. See [Popper Docs](@link https://popper.js.org/) */",
      "    placement?: Placement;",
      "}"
     ]
    },
    "props": [
     {
      "uid": 1,
      "name": "onClose",
      "comment": {
       "raw": [
        "Call to close the Dropdown body"
       ]
      },
      "typeValue": {
       "raw": "() => void"
      },
      "editor": {
       "type": "func"
      },
      "required": false
     },
     {
      "uid": 2,
      "name": "togglerWidth",
      "comment": {
       "raw": [
        "The width of the toggler, which can be used to adjust the body width to it"
       ]
      },
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "required": false
     },
     {
      "uid": 3,
      "name": "togglerHeight",
      "comment": {
       "raw": [
        "The height of the toggler"
       ]
      },
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "required": false
     },
     {
      "uid": 4,
      "name": "scheduleUpdate",
      "comment": {
       "raw": [
        "Call to force recompute dropdown position"
       ]
      },
      "typeValue": {
       "raw": "() => void"
      },
      "editor": {
       "type": "func"
      },
      "required": false
     },
     {
      "uid": 5,
      "name": "isOpen",
      "comment": {
       "raw": [
        "Indicates that dropdown is open"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "required": false
     },
     {
      "uid": 6,
      "name": "arrowProps",
      "comment": {
       "raw": [
        "Props that should be provided to the arrow component"
       ]
      },
      "typeValue": {
       "raw": "PopperArrowProps"
      },
      "required": false
     },
     {
      "uid": 7,
      "name": "placement",
      "comment": {
       "raw": [
        "Dropdown position relative to the input. See [Popper Docs](@link https://popper.js.org/)"
       ]
      },
      "typeValue": {
       "raw": "'left' | 'right' | 'auto' | 'auto-start' | 'auto-end' | 'top' | 'bottom' | 'top-start' | 'top-end' | 'bottom-start' | 'bottom-end' | 'right-start' | 'right-end' | 'left-start' | 'left-end'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "left",
        "right",
        "auto",
        "auto-start",
        "auto-end",
        "top",
        "bottom",
        "top-start",
        "top-end",
        "bottom-start",
        "bottom-end",
        "right-start",
        "right-end",
        "left-start",
        "left-end"
       ]
      },
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui-core:IDropdownToggler": {
   "summary": {
    "module": "@epam/uui-core",
    "typeName": {
     "name": "IDropdownToggler",
     "nameFull": "IDropdownToggler"
    },
    "src": "uui-core/src/types/props.ts",
    "comment": {
     "raw": [
      "Component can be used as Toggler control for dropdown menus"
     ]
    },
    "exported": true
   },
   "details": {
    "kind": 263,
    "typeValue": {
     "raw": "IDropdownToggler",
     "print": [
      "/** Component can be used as Toggler control for dropdown menus */",
      "interface IDropdownToggler extends IHasCaption, IClickable {",
      "    /** When isDropdown=true, indicate that dropdown is open with chevron icon */",
      "    isOpen?: boolean;",
      "    /** Shows chevron icon, enabling component to act as dropdown toggler */",
      "    isDropdown?: boolean;",
      "    /** Called when associated dropdown should open or close  */",
      "    toggleDropdownOpening?: (value: boolean) => void;",
      "    /** Called when component is interacted outside, to close the dropdown */",
      "    isInteractedOutside?: (event: Event) => boolean;",
      "    /** Component's ref */",
      "    ref?: React.Ref<any>;",
      "    /** Disables component */",
      "    isDisabled?: boolean;",
      "}"
     ]
    },
    "props": [
     {
      "uid": 1,
      "name": "isOpen",
      "comment": {
       "raw": [
        "When isDropdown=true, indicate that dropdown is open with chevron icon"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "required": false
     },
     {
      "uid": 2,
      "name": "isDropdown",
      "comment": {
       "raw": [
        "Shows chevron icon, enabling component to act as dropdown toggler"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "required": false
     },
     {
      "uid": 3,
      "name": "toggleDropdownOpening",
      "comment": {
       "raw": [
        "Called when associated dropdown should open or close"
       ]
      },
      "typeValue": {
       "raw": "(value: boolean) => void"
      },
      "editor": {
       "type": "func"
      },
      "required": false
     },
     {
      "uid": 4,
      "name": "isInteractedOutside",
      "comment": {
       "raw": [
        "Called when component is interacted outside, to close the dropdown"
       ]
      },
      "typeValue": {
       "raw": "(event: Event) => boolean"
      },
      "editor": {
       "type": "func"
      },
      "required": false
     },
     {
      "uid": 5,
      "name": "ref",
      "comment": {
       "raw": [
        "Component's ref"
       ]
      },
      "typeValue": {
       "raw": "null | (instance: any) => void | React.RefObject<any>"
      },
      "required": false
     },
     {
      "uid": 6,
      "name": "isDisabled",
      "comment": {
       "raw": [
        "Disables component"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "required": false
     },
     {
      "uid": 7,
      "name": "caption",
      "comment": {
       "raw": [
        "Caption. Can be a string, or React.Elements. Certain components supports minimal markup (<b>,<i>,<a>) in captions."
       ]
      },
      "typeValue": {
       "raw": "any"
      },
      "from": "@epam/uui-core:IHasCaption",
      "required": false
     },
     {
      "uid": 8,
      "name": "onClick",
      "comment": {
       "raw": [
        "Called when component is clicked"
       ]
      },
      "typeValue": {
       "raw": "(e?: any) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IClickable",
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui-core:IEditable": {
   "summary": {
    "module": "@epam/uui-core",
    "typeName": {
     "name": "IEditable",
     "nameFull": "IEditable<T>"
    },
    "src": "uui-core/src/types/props.ts",
    "comment": {
     "raw": [
      "Component displays an editable value. Text Input is a basic example."
     ]
    },
    "exported": true
   },
   "details": {
    "kind": 263,
    "typeValue": {
     "raw": "IEditable<T>",
     "print": [
      "/** Component displays an editable value. Text Input is a basic example. */",
      "interface IEditable<T> extends ICanBeInvalid, IDisableable, ICanBeReadonly, ICanBeRequired {",
      "    /** The current value of component */",
      "    value: T;",
      "    /** Called when value needs to be changed (usually due to user interaction) */",
      "    onValueChange(newValue: T): void;",
      "}"
     ]
    },
    "props": [
     {
      "uid": 1,
      "name": "value",
      "comment": {
       "raw": [
        "The current value of component"
       ]
      },
      "typeValue": {
       "raw": "T"
      },
      "required": true
     },
     {
      "uid": 2,
      "name": "onValueChange",
      "comment": {
       "raw": [
        "Called when value needs to be changed (usually due to user interaction)"
       ]
      },
      "typeValue": {
       "raw": "(newValue: T) => void"
      },
      "editor": {
       "type": "func"
      },
      "required": true
     },
     {
      "uid": 3,
      "name": "isInvalid",
      "comment": {
       "raw": [
        "True if component contains invalid input"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:ICanBeInvalid",
      "required": false
     },
     {
      "uid": 4,
      "name": "validationMessage",
      "comment": {
       "raw": [
        "Message describing why the value is invalid"
       ]
      },
      "typeValue": {
       "raw": "null | string | number | boolean | React.ReactElement<any, string | React.JSXElementConstructor<any>> | React.ReactFragment | React.ReactPortal"
      },
      "typeValueRef": "@types/react:ReactNode",
      "from": "@epam/uui-core:ICanBeInvalid",
      "required": false
     },
     {
      "uid": 5,
      "name": "validationProps",
      "comment": {
       "raw": [
        "If T is a complex value (object or array), this property contains validation states of inner items"
       ]
      },
      "typeValue": {
       "raw": "{ [key: string]: ICanBeInvalid; }"
      },
      "from": "@epam/uui-core:ICanBeInvalid",
      "required": false
     },
     {
      "uid": 6,
      "name": "isDisabled",
      "comment": {
       "raw": [
        "Disable editing, and visually de-emphasize value of the component"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:IDisableable",
      "required": false
     },
     {
      "uid": 7,
      "name": "isReadonly",
      "comment": {
       "raw": [
        "Disable editing. Unlike isDisabled, keep component's value readable."
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:ICanBeReadonly",
      "required": false
     },
     {
      "uid": 8,
      "name": "isRequired",
      "comment": {
       "raw": [
        "Marks that component's value is required and shouldn't be empty"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:ICanBeRequired",
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui-core:IEditableDebouncerOptions": {
   "summary": {
    "module": "@epam/uui-core",
    "typeName": {
     "name": "IEditableDebouncerOptions",
     "nameFull": "IEditableDebouncerOptions"
    },
    "src": "uui-core/src/helpers/IEditableDebouncer.ts",
    "comment": {
     "raw": [
      "IEditableDebouncer component options."
     ]
    },
    "exported": true
   },
   "details": {
    "kind": 263,
    "typeValue": {
     "raw": "IEditableDebouncerOptions",
     "print": [
      "/**",
      " * IEditableDebouncer component options.",
      " */",
      "interface IEditableDebouncerOptions {",
      "    /** Pass true to disable debouncing */",
      "    disableDebounce?: boolean;",
      "    /** Debounce delay in ms. Default value is 500ms */",
      "    debounceDelay?: number;",
      "}"
     ]
    },
    "props": [
     {
      "uid": 1,
      "name": "disableDebounce",
      "comment": {
       "raw": [
        "Pass true to disable debouncing"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "required": false
     },
     {
      "uid": 2,
      "name": "debounceDelay",
      "comment": {
       "raw": [
        "Debounce delay in ms. Default value is 500ms"
       ]
      },
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui-core:IEditableDebouncerProps": {
   "summary": {
    "module": "@epam/uui-core",
    "typeName": {
     "name": "IEditableDebouncerProps",
     "nameFull": "IEditableDebouncerProps<T>"
    },
    "src": "uui-core/src/helpers/IEditableDebouncer.ts",
    "comment": {
     "raw": [
      "IEditableDebouncer component props."
     ]
    },
    "exported": true
   },
   "details": {
    "kind": 263,
    "typeValue": {
     "raw": "IEditableDebouncerProps<T>",
     "print": [
      "/**",
      " * IEditableDebouncer component props.",
      " */",
      "interface IEditableDebouncerProps<T> extends IEditable<T>, IEditableDebouncerOptions, IAnalyticableOnChange<T> {",
      "    /**",
      "     * Render wrapped component.",
      "     */",
      "    render: (props: IEditable<T>) => React.ReactNode;",
      "}"
     ]
    },
    "props": [
     {
      "uid": 1,
      "name": "render",
      "comment": {
       "raw": [
        "Render wrapped component."
       ]
      },
      "typeValue": {
       "raw": "(props: IEditable<T>) => React.ReactNode"
      },
      "editor": {
       "type": "component"
      },
      "required": true
     },
     {
      "uid": 2,
      "name": "value",
      "comment": {
       "raw": [
        "The current value of component"
       ]
      },
      "typeValue": {
       "raw": "T"
      },
      "from": "@epam/uui-core:IEditable",
      "required": true
     },
     {
      "uid": 3,
      "name": "onValueChange",
      "comment": {
       "raw": [
        "Called when value needs to be changed (usually due to user interaction)"
       ]
      },
      "typeValue": {
       "raw": "(newValue: T) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IEditable",
      "required": true
     },
     {
      "uid": 4,
      "name": "isInvalid",
      "comment": {
       "raw": [
        "True if component contains invalid input"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:ICanBeInvalid",
      "required": false
     },
     {
      "uid": 5,
      "name": "validationMessage",
      "comment": {
       "raw": [
        "Message describing why the value is invalid"
       ]
      },
      "typeValue": {
       "raw": "null | string | number | boolean | React.ReactElement<any, string | React.JSXElementConstructor<any>> | React.ReactFragment | React.ReactPortal"
      },
      "typeValueRef": "@types/react:ReactNode",
      "from": "@epam/uui-core:ICanBeInvalid",
      "required": false
     },
     {
      "uid": 6,
      "name": "validationProps",
      "comment": {
       "raw": [
        "If T is a complex value (object or array), this property contains validation states of inner items"
       ]
      },
      "typeValue": {
       "raw": "{ [key: string]: ICanBeInvalid; }"
      },
      "from": "@epam/uui-core:ICanBeInvalid",
      "required": false
     },
     {
      "uid": 7,
      "name": "isDisabled",
      "comment": {
       "raw": [
        "Disable editing, and visually de-emphasize value of the component"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:IDisableable",
      "required": false
     },
     {
      "uid": 8,
      "name": "isReadonly",
      "comment": {
       "raw": [
        "Disable editing. Unlike isDisabled, keep component's value readable."
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:ICanBeReadonly",
      "required": false
     },
     {
      "uid": 9,
      "name": "isRequired",
      "comment": {
       "raw": [
        "Marks that component's value is required and shouldn't be empty"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:ICanBeRequired",
      "required": false
     },
     {
      "uid": 10,
      "name": "disableDebounce",
      "comment": {
       "raw": [
        "Pass true to disable debouncing"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:IEditableDebouncerOptions",
      "required": false
     },
     {
      "uid": 11,
      "name": "debounceDelay",
      "comment": {
       "raw": [
        "Debounce delay in ms. Default value is 500ms"
       ]
      },
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "from": "@epam/uui-core:IEditableDebouncerOptions",
      "required": false
     },
     {
      "uid": 12,
      "name": "getValueChangeAnalyticsEvent",
      "comment": {
       "raw": [
        "Given a value, returns an analytics event to send when component is edited.",
        " See [AnalyticsContext](@link https://uui.epam.com/documents?id=analyticsContext&mode=doc&skin=UUI4_promo&category=contexts)."
       ]
      },
      "typeValue": {
       "raw": "(newValue: T | null, oldValue: T | null) => AnalyticsEvent"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IAnalyticableOnChange",
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui-core:IErrorContext": {
   "summary": {
    "module": "@epam/uui-core",
    "typeName": {
     "name": "IErrorContext",
     "nameFull": "IErrorContext"
    },
    "src": "uui-core/src/types/contexts.ts",
    "exported": true
   },
   "details": {
    "kind": 263,
    "typeValue": {
     "raw": "IErrorContext",
     "print": [
      "interface IErrorContext extends IBaseContext {",
      "    /** Current error */",
      "    currentError?: Error;",
      "    /** Reports error to context */",
      "    reportError(error: Error): void;",
      "    /** Sets an error handler callback */",
      "    onError(callback: Function): void;",
      "    /** Discard current error */",
      "    discardError(): void;",
      "    /** Discard errors and refresh app */",
      "    recover(): void;",
      "}"
     ]
    },
    "props": [
     {
      "uid": 1,
      "name": "currentError",
      "comment": {
       "raw": [
        "Current error"
       ]
      },
      "typeValue": {
       "raw": "Error"
      },
      "required": false
     },
     {
      "uid": 2,
      "name": "reportError",
      "comment": {
       "raw": [
        "Reports error to context"
       ]
      },
      "typeValue": {
       "raw": "(error: Error) => void"
      },
      "editor": {
       "type": "func"
      },
      "required": true
     },
     {
      "uid": 3,
      "name": "onError",
      "comment": {
       "raw": [
        "Sets an error handler callback"
       ]
      },
      "typeValue": {
       "raw": "(callback: Function) => void"
      },
      "editor": {
       "type": "func"
      },
      "required": true
     },
     {
      "uid": 4,
      "name": "discardError",
      "comment": {
       "raw": [
        "Discard current error"
       ]
      },
      "typeValue": {
       "raw": "() => void"
      },
      "editor": {
       "type": "func"
      },
      "required": true
     },
     {
      "uid": 5,
      "name": "recover",
      "comment": {
       "raw": [
        "Discard errors and refresh app"
       ]
      },
      "typeValue": {
       "raw": "() => void"
      },
      "editor": {
       "type": "func"
      },
      "required": true
     },
     {
      "uid": 6,
      "name": "subscribe",
      "typeValue": {
       "raw": "(handler: (state: {}) => void) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IBaseContext",
      "required": true
     },
     {
      "uid": 7,
      "name": "unsubscribe",
      "typeValue": {
       "raw": "(handler: (state: {}) => void) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IBaseContext",
      "required": true
     },
     {
      "uid": 8,
      "name": "destroyContext",
      "typeValue": {
       "raw": "() => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IBaseContext",
      "required": true
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui-core:IFilterConfig": {
   "summary": {
    "module": "@epam/uui-core",
    "typeName": {
     "name": "IFilterConfig",
     "nameFull": "IFilterConfig"
    },
    "src": "uui-core/src/types/tables.ts",
    "exported": true
   },
   "details": {
    "kind": 264,
    "typeValue": {
     "raw": "IFilterConfig",
     "print": [
      "type IFilterConfig = {",
      "    /** If true, the filter will be shown in the FiltersPanel */",
      "    isVisible: boolean;",
      "    /**",
      "     * Determines the order in which this filter should appear in the filters list.",
      "     * The filters are sorted in ascending alphabetical order.",
      "     */",
      "    order?: string;",
      "};"
     ]
    },
    "props": [
     {
      "uid": 1,
      "name": "isVisible",
      "comment": {
       "raw": [
        "If true, the filter will be shown in the FiltersPanel"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "required": true
     },
     {
      "uid": 2,
      "name": "order",
      "comment": {
       "raw": [
        "Determines the order in which this filter should appear in the filters list.",
        " The filters are sorted in ascending alphabetical order."
       ]
      },
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui-core:IFilterItemBodyProps": {
   "summary": {
    "module": "@epam/uui-core",
    "typeName": {
     "name": "IFilterItemBodyProps",
     "nameFull": "IFilterItemBodyProps<TFilter>"
    },
    "src": "uui-core/src/types/components/filterItemBody.ts",
    "exported": true
   },
   "details": {
    "kind": 264,
    "typeValue": {
     "raw": "FilterConfigBase<TFilter> & Pick<PickerBaseOptions<any, any>, 'dataSource' | 'getName' | 'renderRow'> & { type: 'singlePicker' | 'multiPicker'; showSearch?: boolean | undefined; } & IEditable<any> & IDropdownBodyProps & { selectedPredicate?: string | undefined; } | FilterConfigBase<TFilter> & Pick<BaseDatePickerProps, 'filter' | 'format'> & { type: 'datePicker'; } & IEditable<any> & IDropdownBodyProps & { selectedPredicate?: string | undefined; } | FilterConfigBase<TFilter> & { type: 'numeric'; } & IEditable<any> & IDropdownBodyProps & { selectedPredicate?: string | undefined; } | FilterConfigBase<TFilter> & Pick<BaseDatePickerProps, 'filter' | 'format'> & { type: 'rangeDatePicker'; } & IEditable<any> & IDropdownBodyProps & { selectedPredicate?: string | undefined; } | FilterConfigBase<TFilter> & { type: 'custom'; render: (props: IFilterItemBodyProps<any>) => React.ReactElement<any, string | React.JSXElementConstructor<any>>; getTogglerValue: (props: IFilterItemBodyProps<any>) => React.ReactNode; } & IEditable<any> & IDropdownBodyProps & { selectedPredicate?: string | undefined; }",
     "print": [
      "type IFilterItemBodyProps<TFilter> = TableFiltersConfig<TFilter> & IEditable<any> & IDropdownBodyProps & {",
      "    selectedPredicate?: string;",
      "};"
     ]
    },
    "props": [
     {
      "uid": 101,
      "name": "title",
      "comment": {
       "raw": [
        "Title of the filter, displayed in filter toggler and filter body"
       ]
      },
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "from": "@epam/uui-core:FilterConfigBase",
      "required": true
     },
     {
      "uid": 102,
      "name": "field",
      "comment": {
       "raw": [
        "Field of filters object, where store the filter value"
       ]
      },
      "typeValue": {
       "raw": "keyof TFilter"
      },
      "from": "@epam/uui-core:FilterConfigBase",
      "required": true
     },
     {
      "uid": 103,
      "name": "columnKey",
      "comment": {
       "raw": [
        "Key of the column to which the filter is attached.",
        " If omitted, filter won't be attached to the column."
       ]
      },
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "from": "@epam/uui-core:FilterConfigBase",
      "required": false
     },
     {
      "uid": 104,
      "name": "isAlwaysVisible",
      "comment": {
       "raw": [
        "Pass true to make filter always visible in FilterPanel. User can't hide it via 'Add filter' dropdown"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:FilterConfigBase",
      "required": false
     },
     {
      "uid": 105,
      "name": "predicates",
      "comment": {
       "raw": [
        "Array of available predicates for the filter. This predicated can be chosen by user and applied to the filter value."
       ]
      },
      "typeValue": {
       "raw": "IFilterPredicate[]"
      },
      "from": "@epam/uui-core:FilterConfigBase",
      "required": false
     },
     {
      "uid": 106,
      "name": "maxCount",
      "comment": {
       "raw": [
        "Count of words to show in the Filter toggler. By default, 2 item will be shown."
       ]
      },
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "from": "@epam/uui-core:FilterConfigBase",
      "required": false
     },
     {
      "uid": 7,
      "name": "dataSource",
      "comment": {
       "raw": [
        "Datasource to get data for the picker"
       ]
      },
      "typeValue": {
       "raw": "IDataSource<any, any, any>"
      },
      "from": "@epam/uui-core:PickerBaseOptions",
      "required": true
     },
     {
      "uid": 8,
      "name": "getName",
      "comment": {
       "raw": [
        "A pure function that gets entity name from entity object.",
        "     Default: (item) => item.name."
       ]
      },
      "typeValue": {
       "raw": "(item: any) => string"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:PickerBaseOptions",
      "required": false
     },
     {
      "uid": 9,
      "name": "renderRow",
      "comment": {
       "raw": [
        "Allow to customize how each selectable row is rendered. Can be used to add subtitles, avatars, etc."
       ]
      },
      "typeValue": {
       "raw": "(props: DataRowProps<any, any>, dataSourceState: DataSourceState<Record<string, any>, any>) => React.ReactNode"
      },
      "editor": {
       "type": "component"
      },
      "from": "@epam/uui-core:PickerBaseOptions",
      "required": false
     },
     {
      "uid": 10,
      "name": "type",
      "comment": {
       "raw": [
        "Type of the filter"
       ]
      },
      "typeValue": {
       "raw": "'singlePicker' | 'multiPicker'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "singlePicker",
        "multiPicker"
       ]
      },
      "from": "@epam/uui-core:PickerFilterConfig",
      "required": true
     },
     {
      "uid": 11,
      "name": "showSearch",
      "comment": {
       "raw": [
        "Pass false to hide search in picker body.",
        " If omitted, true value will be used."
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:PickerFilterConfig",
      "required": false
     },
     {
      "uid": 110,
      "name": "value",
      "comment": {
       "raw": [
        "The current value of component"
       ]
      },
      "typeValue": {
       "raw": "any"
      },
      "from": "@epam/uui-core:IEditable",
      "required": true
     },
     {
      "uid": 111,
      "name": "onValueChange",
      "comment": {
       "raw": [
        "Called when value needs to be changed (usually due to user interaction)"
       ]
      },
      "typeValue": {
       "raw": "(newValue: any) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IEditable",
      "required": true
     },
     {
      "uid": 112,
      "name": "isInvalid",
      "comment": {
       "raw": [
        "True if component contains invalid input"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:ICanBeInvalid",
      "required": false
     },
     {
      "uid": 113,
      "name": "validationMessage",
      "comment": {
       "raw": [
        "Message describing why the value is invalid"
       ]
      },
      "typeValue": {
       "raw": "null | string | number | boolean | React.ReactElement<any, string | React.JSXElementConstructor<any>> | React.ReactFragment | React.ReactPortal"
      },
      "typeValueRef": "@types/react:ReactNode",
      "from": "@epam/uui-core:ICanBeInvalid",
      "required": false
     },
     {
      "uid": 114,
      "name": "validationProps",
      "comment": {
       "raw": [
        "If T is a complex value (object or array), this property contains validation states of inner items"
       ]
      },
      "typeValue": {
       "raw": "{ [key: string]: ICanBeInvalid; }"
      },
      "from": "@epam/uui-core:ICanBeInvalid",
      "required": false
     },
     {
      "uid": 115,
      "name": "isDisabled",
      "comment": {
       "raw": [
        "Disable editing, and visually de-emphasize value of the component"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:IDisableable",
      "required": false
     },
     {
      "uid": 116,
      "name": "isReadonly",
      "comment": {
       "raw": [
        "Disable editing. Unlike isDisabled, keep component's value readable."
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:ICanBeReadonly",
      "required": false
     },
     {
      "uid": 117,
      "name": "isRequired",
      "comment": {
       "raw": [
        "Marks that component's value is required and shouldn't be empty"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:ICanBeRequired",
      "required": false
     },
     {
      "uid": 118,
      "name": "onClose",
      "comment": {
       "raw": [
        "Call to close the Dropdown body"
       ]
      },
      "typeValue": {
       "raw": "() => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IDropdownBodyProps",
      "required": false
     },
     {
      "uid": 119,
      "name": "togglerWidth",
      "comment": {
       "raw": [
        "The width of the toggler, which can be used to adjust the body width to it"
       ]
      },
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "from": "@epam/uui-core:IDropdownBodyProps",
      "required": false
     },
     {
      "uid": 120,
      "name": "togglerHeight",
      "comment": {
       "raw": [
        "The height of the toggler"
       ]
      },
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "from": "@epam/uui-core:IDropdownBodyProps",
      "required": false
     },
     {
      "uid": 121,
      "name": "scheduleUpdate",
      "comment": {
       "raw": [
        "Call to force recompute dropdown position"
       ]
      },
      "typeValue": {
       "raw": "() => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IDropdownBodyProps",
      "required": false
     },
     {
      "uid": 122,
      "name": "isOpen",
      "comment": {
       "raw": [
        "Indicates that dropdown is open"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:IDropdownBodyProps",
      "required": false
     },
     {
      "uid": 123,
      "name": "arrowProps",
      "comment": {
       "raw": [
        "Props that should be provided to the arrow component"
       ]
      },
      "typeValue": {
       "raw": "PopperArrowProps"
      },
      "from": "@epam/uui-core:IDropdownBodyProps",
      "required": false
     },
     {
      "uid": 124,
      "name": "placement",
      "comment": {
       "raw": [
        "Dropdown position relative to the input. See [Popper Docs](@link https://popper.js.org/)"
       ]
      },
      "typeValue": {
       "raw": "'left' | 'right' | 'auto' | 'auto-start' | 'auto-end' | 'top' | 'bottom' | 'top-start' | 'top-end' | 'bottom-start' | 'bottom-end' | 'right-start' | 'right-end' | 'left-start' | 'left-end'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "left",
        "right",
        "auto",
        "auto-start",
        "auto-end",
        "top",
        "bottom",
        "top-start",
        "top-end",
        "bottom-start",
        "bottom-end",
        "right-start",
        "right-end",
        "left-start",
        "left-end"
       ]
      },
      "from": "@epam/uui-core:IDropdownBodyProps",
      "required": false
     },
     {
      "uid": 125,
      "name": "selectedPredicate",
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "required": false
     },
     {
      "uid": 82,
      "name": "filter",
      "comment": {
       "raw": [
        "Filter selectable days. Days, for which this callback returns false - will be disabled"
       ]
      },
      "typeValue": {
       "raw": "(day: Dayjs) => boolean"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:BaseDatePickerProps",
      "required": false
     },
     {
      "uid": 83,
      "name": "format",
      "comment": {
       "raw": [
        "Date format string, see [dayjs docs](@link https://day.js.org/docs/en/display/format)"
       ]
      },
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "from": "@epam/uui-core:BaseDatePickerProps",
      "required": false
     },
     {
      "uid": 36,
      "name": "type",
      "comment": {
       "raw": [
        "Type of the filter"
       ]
      },
      "typeValue": {
       "raw": "'datePicker'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "datePicker"
       ]
      },
      "from": "@epam/uui-core:DatePickerFilterConfig",
      "required": true
     },
     {
      "uid": 59,
      "name": "type",
      "comment": {
       "raw": [
        "Type of the filter"
       ]
      },
      "typeValue": {
       "raw": "'numeric'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "numeric"
       ]
      },
      "from": "@epam/uui-core:NumericFilterConfig",
      "required": true
     },
     {
      "uid": 84,
      "name": "type",
      "comment": {
       "raw": [
        "Type of the filter"
       ]
      },
      "typeValue": {
       "raw": "'rangeDatePicker'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "rangeDatePicker"
       ]
      },
      "from": "@epam/uui-core:RangeDatePickerFilterConfig",
      "required": true
     },
     {
      "uid": 107,
      "name": "type",
      "comment": {
       "raw": [
        "Type of the filter"
       ]
      },
      "typeValue": {
       "raw": "'custom'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "custom"
       ]
      },
      "from": "@epam/uui-core:CustomFilterConfig",
      "required": true
     },
     {
      "uid": 108,
      "name": "render",
      "comment": {
       "raw": [
        "Render callback for filter body"
       ]
      },
      "typeValue": {
       "raw": "(props: IFilterItemBodyProps<any>) => React.ReactElement<any, string | React.JSXElementConstructor<any>>"
      },
      "editor": {
       "type": "component"
      },
      "from": "@epam/uui-core:CustomFilterConfig",
      "required": true
     },
     {
      "uid": 109,
      "name": "getTogglerValue",
      "comment": {
       "raw": [
        "A pure function that gets value to display in filter toggler"
       ]
      },
      "typeValue": {
       "raw": "(props: IFilterItemBodyProps<any>) => React.ReactNode"
      },
      "editor": {
       "type": "component"
      },
      "from": "@epam/uui-core:CustomFilterConfig",
      "required": true
     }
    ],
    "propsFromUnion": true
   }
  },
  "@epam/uui-core:IFilterPredicate": {
   "summary": {
    "module": "@epam/uui-core",
    "typeName": {
     "name": "IFilterPredicate",
     "nameFull": "IFilterPredicate"
    },
    "src": "uui-core/src/types/tables.ts",
    "exported": true
   },
   "details": {
    "kind": 264,
    "typeValue": {
     "raw": "IFilterPredicate",
     "print": [
      "type IFilterPredicate = {",
      "    /** Name of the predicate, used to display */",
      "    name: string;",
      "    /** Predicate key, which wraps filter value.",
      "     *  E.g. your have 'in' predicate for locationIds filter, the resulted filter object will be:",
      "     *  filter: {",
      "     *      locationIds: {",
      "     *          in: [/selected location ids/]",
      "     *      }",
      "     *  }",
      "     *  */",
      "    predicate: FilterPredicateName;",
      "    /** Pass true to make this predicate selected by default */",
      "    isDefault?: boolean;",
      "};"
     ]
    },
    "props": [
     {
      "uid": 1,
      "name": "name",
      "comment": {
       "raw": [
        "Name of the predicate, used to display"
       ]
      },
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "required": true
     },
     {
      "uid": 2,
      "name": "predicate",
      "comment": {
       "raw": [
        "Predicate key, which wraps filter value.",
        "  E.g. your have 'in' predicate for locationIds filter, the resulted filter object will be:",
        "  filter: {",
        "      locationIds: {",
        "          in: [/selected location ids/]",
        "      }",
        "  }"
       ]
      },
      "typeValue": {
       "raw": "'in' | 'nin' | 'isNull' | 'gt' | 'gte' | 'lt' | 'lte' | 'inRange' | 'notInRange' | 'eq' | 'neq' | 'not'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "in",
        "nin",
        "isNull",
        "gt",
        "gte",
        "lt",
        "lte",
        "inRange",
        "notInRange",
        "eq",
        "neq",
        "not"
       ]
      },
      "required": true
     },
     {
      "uid": 3,
      "name": "isDefault",
      "comment": {
       "raw": [
        "Pass true to make this predicate selected by default"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui-core:IFormApi": {
   "summary": {
    "module": "@epam/uui-core",
    "typeName": {
     "name": "IFormApi",
     "nameFull": "IFormApi<T>"
    },
    "src": "uui-core/src/data/forms/Form.tsx",
    "exported": true
   },
   "details": {
    "kind": 263,
    "typeValue": {
     "raw": "IFormApi<T>",
     "print": [
      "interface IFormApi<T> extends IEditable<T>, ICanBeInvalid {",
      "    /**",
      "     * Lens - a helper to split parts of the form state, validation, and setState callbacks, and pass this to components",
      "     */",
      "    lens: ILens<T>;",
      "    /**",
      "     * Sets form value. The signature is the same for setState in React.useState - either new value, or callback to update the value.",
      "     * The change is threated as user input - sets isChanged and creates undo endpoint",
      "     */",
      "    setValue: (s: React.SetStateAction<T>) => void;",
      "    /**",
      "     * Replaces form value. The signature is the same for setState in React.useState - either new value, or callback to update the value.",
      "     * The change is not threated as user input - it replaces last changed state, and doesn't create undo checkpoint.",
      "     */",
      "    replaceValue: (s: React.SetStateAction<T>) => void;",
      "    /**",
      "     * Triggers save procedure - validation, calling props.onSave, and processing results",
      "     */",
      "    save(): void;",
      "    /**",
      "     * Undo to last checkpoint",
      "     */",
      "    undo(): void;",
      "    /**",
      "     * Redo last action",
      "     */",
      "    redo(): void;",
      "    /**",
      "     * Reverts all changes up to the initial or last saved state",
      "     */",
      "    revert(): void;",
      "    /**",
      "     * Try to leave form and ask to save unsaved changes",
      "     */",
      "    close(): Promise<any>;",
      "    /**",
      "     * Forces form to validate value.",
      "     * Validation is usually done automatically, according to validationOn prop.",
      "     * Use this method only in corner cases.",
      "     */",
      "    validate(): ICanBeInvalid;",
      "    /** True if there are changes to undo */",
      "    canUndo: boolean;",
      "    /** True if there are changes to redo */",
      "    canRedo: boolean;",
      "    /** True if there are changes to revers */",
      "    canRevert: boolean;",
      "    /** True if form is changed since the initial state, or the last save */",
      "    isChanged: boolean;",
      "    /** True if save is in progress */",
      "    isInProgress: boolean;",
      "}"
     ]
    },
    "props": [
     {
      "uid": 1,
      "name": "lens",
      "comment": {
       "raw": [
        "Lens - a helper to split parts of the form state, validation, and setState callbacks, and pass this to components"
       ]
      },
      "typeValue": {
       "raw": "ILens<T>"
      },
      "required": true
     },
     {
      "uid": 2,
      "name": "setValue",
      "comment": {
       "raw": [
        "Sets form value. The signature is the same for setState in React.useState - either new value, or callback to update the value.",
        " The change is threated as user input - sets isChanged and creates undo endpoint"
       ]
      },
      "typeValue": {
       "raw": "(s: React.SetStateAction<T>) => void"
      },
      "editor": {
       "type": "func"
      },
      "required": true
     },
     {
      "uid": 3,
      "name": "replaceValue",
      "comment": {
       "raw": [
        "Replaces form value. The signature is the same for setState in React.useState - either new value, or callback to update the value.",
        " The change is not threated as user input - it replaces last changed state, and doesn't create undo checkpoint."
       ]
      },
      "typeValue": {
       "raw": "(s: React.SetStateAction<T>) => void"
      },
      "editor": {
       "type": "func"
      },
      "required": true
     },
     {
      "uid": 4,
      "name": "save",
      "comment": {
       "raw": [
        "Triggers save procedure - validation, calling props.onSave, and processing results"
       ]
      },
      "typeValue": {
       "raw": "() => void"
      },
      "editor": {
       "type": "func"
      },
      "required": true
     },
     {
      "uid": 5,
      "name": "undo",
      "comment": {
       "raw": [
        "Undo to last checkpoint"
       ]
      },
      "typeValue": {
       "raw": "() => void"
      },
      "editor": {
       "type": "func"
      },
      "required": true
     },
     {
      "uid": 6,
      "name": "redo",
      "comment": {
       "raw": [
        "Redo last action"
       ]
      },
      "typeValue": {
       "raw": "() => void"
      },
      "editor": {
       "type": "func"
      },
      "required": true
     },
     {
      "uid": 7,
      "name": "revert",
      "comment": {
       "raw": [
        "Reverts all changes up to the initial or last saved state"
       ]
      },
      "typeValue": {
       "raw": "() => void"
      },
      "editor": {
       "type": "func"
      },
      "required": true
     },
     {
      "uid": 8,
      "name": "close",
      "comment": {
       "raw": [
        "Try to leave form and ask to save unsaved changes"
       ]
      },
      "typeValue": {
       "raw": "() => Promise<any>"
      },
      "editor": {
       "type": "func"
      },
      "required": true
     },
     {
      "uid": 9,
      "name": "validate",
      "comment": {
       "raw": [
        "Forces form to validate value.",
        " Validation is usually done automatically, according to validationOn prop.",
        " Use this method only in corner cases."
       ]
      },
      "typeValue": {
       "raw": "() => ICanBeInvalid"
      },
      "editor": {
       "type": "func"
      },
      "required": true
     },
     {
      "uid": 10,
      "name": "canUndo",
      "comment": {
       "raw": [
        "True if there are changes to undo"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "required": true
     },
     {
      "uid": 11,
      "name": "canRedo",
      "comment": {
       "raw": [
        "True if there are changes to redo"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "required": true
     },
     {
      "uid": 12,
      "name": "canRevert",
      "comment": {
       "raw": [
        "True if there are changes to revers"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "required": true
     },
     {
      "uid": 13,
      "name": "isChanged",
      "comment": {
       "raw": [
        "True if form is changed since the initial state, or the last save"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "required": true
     },
     {
      "uid": 14,
      "name": "isInProgress",
      "comment": {
       "raw": [
        "True if save is in progress"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "required": true
     },
     {
      "uid": 15,
      "name": "value",
      "comment": {
       "raw": [
        "The current value of component"
       ]
      },
      "typeValue": {
       "raw": "T"
      },
      "from": "@epam/uui-core:IEditable",
      "required": true
     },
     {
      "uid": 16,
      "name": "onValueChange",
      "comment": {
       "raw": [
        "Called when value needs to be changed (usually due to user interaction)"
       ]
      },
      "typeValue": {
       "raw": "(newValue: T) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IEditable",
      "required": true
     },
     {
      "uid": 17,
      "name": "isInvalid",
      "comment": {
       "raw": [
        "True if component contains invalid input"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:ICanBeInvalid",
      "required": false
     },
     {
      "uid": 18,
      "name": "validationMessage",
      "comment": {
       "raw": [
        "Message describing why the value is invalid"
       ]
      },
      "typeValue": {
       "raw": "null | string | number | boolean | React.ReactElement<any, string | React.JSXElementConstructor<any>> | React.ReactFragment | React.ReactPortal"
      },
      "typeValueRef": "@types/react:ReactNode",
      "from": "@epam/uui-core:ICanBeInvalid",
      "required": false
     },
     {
      "uid": 19,
      "name": "validationProps",
      "comment": {
       "raw": [
        "If T is a complex value (object or array), this property contains validation states of inner items"
       ]
      },
      "typeValue": {
       "raw": "{ [key: string]: ICanBeInvalid; }"
      },
      "from": "@epam/uui-core:ICanBeInvalid",
      "required": false
     },
     {
      "uid": 20,
      "name": "isDisabled",
      "comment": {
       "raw": [
        "Disable editing, and visually de-emphasize value of the component"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:IDisableable",
      "required": false
     },
     {
      "uid": 21,
      "name": "isReadonly",
      "comment": {
       "raw": [
        "Disable editing. Unlike isDisabled, keep component's value readable."
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:ICanBeReadonly",
      "required": false
     },
     {
      "uid": 22,
      "name": "isRequired",
      "comment": {
       "raw": [
        "Marks that component's value is required and shouldn't be empty"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:ICanBeRequired",
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui-core:IHasCaption": {
   "summary": {
    "module": "@epam/uui-core",
    "typeName": {
     "name": "IHasCaption",
     "nameFull": "IHasCaption"
    },
    "src": "uui-core/src/types/props.ts",
    "comment": {
     "raw": [
      "Component has a caption. E.g. Button"
     ]
    },
    "exported": true
   },
   "details": {
    "kind": 263,
    "typeValue": {
     "raw": "IHasCaption",
     "print": [
      "/** Component has a caption. E.g. Button */",
      "interface IHasCaption {",
      "    /** Caption. Can be a string, or React.Elements. Certain components supports minimal markup (<b>,<i>,<a>) in captions. */",
      "    caption?: any;",
      "}"
     ]
    },
    "props": [
     {
      "uid": 1,
      "name": "caption",
      "comment": {
       "raw": [
        "Caption. Can be a string, or React.Elements. Certain components supports minimal markup (<b>,<i>,<a>) in captions."
       ]
      },
      "typeValue": {
       "raw": "any"
      },
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui-core:IHasChildren": {
   "summary": {
    "module": "@epam/uui-core",
    "typeName": {
     "name": "IHasChildren",
     "nameFull": "IHasChildren"
    },
    "src": "uui-core/src/types/props.ts",
    "comment": {
     "raw": [
      "Component can have child components"
     ]
    },
    "exported": true
   },
   "details": {
    "kind": 263,
    "typeValue": {
     "raw": "IHasChildren",
     "print": [
      "/** Component can have child components */",
      "interface IHasChildren {",
      "    children?: ReactNode;",
      "}"
     ]
    },
    "props": [
     {
      "uid": 1,
      "name": "children",
      "typeValue": {
       "raw": "null | string | number | boolean | React.ReactElement<any, string | React.JSXElementConstructor<any>> | React.ReactFragment | React.ReactPortal"
      },
      "typeValueRef": "@types/react:ReactNode",
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui-core:IHasCX": {
   "summary": {
    "module": "@epam/uui-core",
    "typeName": {
     "name": "IHasCX",
     "nameFull": "IHasCX"
    },
    "src": "uui-core/src/types/props.ts",
    "comment": {
     "raw": [
      "Component can accept cx property, allowing to pass classes to put on component.",
      " CX is a shortcut for 'classnames'.",
      " The props accept string, arrays, object, recursively. All falsy values are thrown away. Examples:",
      " - 'red' => 'red'",
      " - ['red', 0, false, 'blue' ] => 'red blue'",
      " - { 'red': true, 'blue': false, ['green', 'white']} => 'red green white'"
     ]
    },
    "exported": true
   },
   "details": {
    "kind": 263,
    "typeValue": {
     "raw": "IHasCX",
     "print": [
      "/**",
      " * Component can accept cx property, allowing to pass classes to put on component.",
      " * CX is a shortcut for 'classnames'.",
      " * The props accept string, arrays, object, recursively. All falsy values are thrown away. Examples:",
      " * - 'red' => 'red'",
      " * - ['red', 0, false, 'blue' ] => 'red blue'",
      " * - { 'red': true, 'blue': false, ['green', 'white']} => 'red green white'",
      " */",
      "interface IHasCX {",
      "    /** CSS class(es) to put on component's root. See {@link https://github.com/JedWatson/classnames#usage} for details */",
      "    cx?: CX;",
      "}"
     ]
    },
    "props": [
     {
      "uid": 1,
      "name": "cx",
      "comment": {
       "raw": [
        "CSS class(es) to put on component's root. See {@link https://github.com/JedWatson/classnames#usage} for details"
       ]
      },
      "typeValue": {
       "raw": "null | string | number | boolean | ClassDictionary | ClassArray"
      },
      "typeValueRef": "@epam/uui-core:ClassValue",
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui-core:IHasDirection": {
   "summary": {
    "module": "@epam/uui-core",
    "typeName": {
     "name": "IHasDirection",
     "nameFull": "IHasDirection"
    },
    "src": "uui-core/src/types/props.ts",
    "comment": {
     "raw": [
      "Component has direction of child components."
     ]
    },
    "exported": true
   },
   "details": {
    "kind": 263,
    "typeValue": {
     "raw": "IHasDirection",
     "print": [
      "/** Component has direction of child components. */",
      "interface IHasDirection {",
      "    direction?: 'vertical' | 'horizontal';",
      "}"
     ]
    },
    "props": [
     {
      "uid": 1,
      "name": "direction",
      "typeValue": {
       "raw": "'vertical' | 'horizontal'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "vertical",
        "horizontal"
       ]
      },
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui-core:IHasForwardedRef": {
   "summary": {
    "module": "@epam/uui-core",
    "typeName": {
     "name": "IHasForwardedRef",
     "nameFull": "IHasForwardedRef<T>"
    },
    "src": "uui-core/src/types/props.ts",
    "exported": true
   },
   "details": {
    "kind": 263,
    "typeValue": {
     "raw": "IHasForwardedRef<T>",
     "print": [
      "interface IHasForwardedRef<T extends HTMLOrSVGElement> {",
      "    /** this ref is passed to the underlying component */",
      "    forwardedRef?: ForwardedRef<T>;",
      "}"
     ]
    },
    "props": [
     {
      "uid": 1,
      "name": "forwardedRef",
      "comment": {
       "raw": [
        "this ref is passed to the underlying component"
       ]
      },
      "typeValue": {
       "raw": "null | (instance: T | null) => void | React.MutableRefObject<T | null>"
      },
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui-core:IHasIcon": {
   "summary": {
    "module": "@epam/uui-core",
    "typeName": {
     "name": "IHasIcon",
     "nameFull": "IHasIcon"
    },
    "src": "uui-core/src/types/props.ts",
    "comment": {
     "raw": [
      "An icon can be added to component"
     ]
    },
    "exported": true
   },
   "details": {
    "kind": 263,
    "typeValue": {
     "raw": "IHasIcon",
     "print": [
      "/** An icon can be added to component */",
      "interface IHasIcon {",
      "    /** Icon can be a React element (usually an SVG element) */",
      "    icon?: Icon;",
      "    /** Position of the icon (left of right) */",
      "    iconPosition?: 'left' | 'right';",
      "    /** Click handler for the icon */",
      "    onIconClick?(): void;",
      "}"
     ]
    },
    "props": [
     {
      "uid": 1,
      "name": "icon",
      "comment": {
       "raw": [
        "Icon can be a React element (usually an SVG element)"
       ]
      },
      "typeValue": {
       "raw": "Icon"
      },
      "editor": {
       "type": "component"
      },
      "required": false
     },
     {
      "uid": 2,
      "name": "iconPosition",
      "comment": {
       "raw": [
        "Position of the icon (left of right)"
       ]
      },
      "typeValue": {
       "raw": "'left' | 'right'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "left",
        "right"
       ]
      },
      "required": false
     },
     {
      "uid": 3,
      "name": "onIconClick",
      "comment": {
       "raw": [
        "Click handler for the icon"
       ]
      },
      "typeValue": {
       "raw": "() => void"
      },
      "editor": {
       "type": "func"
      },
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui-core:IHasLabel": {
   "summary": {
    "module": "@epam/uui-core",
    "typeName": {
     "name": "IHasLabel",
     "nameFull": "IHasLabel"
    },
    "src": "uui-core/src/types/props.ts",
    "comment": {
     "raw": [
      "Component has label. E.g. User Name"
     ]
    },
    "exported": true
   },
   "details": {
    "kind": 263,
    "typeValue": {
     "raw": "IHasLabel",
     "print": [
      "/** Component has label. E.g. User Name */",
      "interface IHasLabel {",
      "    /** Label. Can be a string, or React.Elements. Certain components supports minimal markup (<b>,<i>,<a>) in captions. */",
      "    label?: any;",
      "}"
     ]
    },
    "props": [
     {
      "uid": 1,
      "name": "label",
      "comment": {
       "raw": [
        "Label. Can be a string, or React.Elements. Certain components supports minimal markup (<b>,<i>,<a>) in captions."
       ]
      },
      "typeValue": {
       "raw": "any"
      },
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui-core:IHasPlaceholder": {
   "summary": {
    "module": "@epam/uui-core",
    "typeName": {
     "name": "IHasPlaceholder",
     "nameFull": "IHasPlaceholder"
    },
    "src": "uui-core/src/types/props.ts",
    "exported": true
   },
   "details": {
    "kind": 263,
    "typeValue": {
     "raw": "IHasPlaceholder",
     "print": [
      "interface IHasPlaceholder {",
      "    /** Placeholder to display when empty */",
      "    placeholder?: any;",
      "}"
     ]
    },
    "props": [
     {
      "uid": 1,
      "name": "placeholder",
      "comment": {
       "raw": [
        "Placeholder to display when empty"
       ]
      },
      "typeValue": {
       "raw": "any"
      },
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui-core:IHasRawProps": {
   "summary": {
    "module": "@epam/uui-core",
    "typeName": {
     "name": "IHasRawProps",
     "nameFull": "IHasRawProps<T>"
    },
    "src": "uui-core/src/types/props.ts",
    "exported": true
   },
   "details": {
    "kind": 264,
    "typeValue": {
     "raw": "IHasRawProps<T>",
     "print": [
      "// Component allows to pass raw HTML props to put on the DOM element",
      "type IHasRawProps<T> = {",
      "    /** Any HTML attributes (native or 'data-') to put on the underlying component */",
      "    rawProps?: T & Record<`data-${string}`, string>;",
      "};"
     ]
    },
    "props": [
     {
      "uid": 1,
      "name": "rawProps",
      "comment": {
       "raw": [
        "Any HTML attributes (native or 'data-') to put on the underlying component"
       ]
      },
      "typeValue": {
       "raw": "T & Record<`data-${string}`, string>"
      },
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui-core:IHasTabIndex": {
   "summary": {
    "module": "@epam/uui-core",
    "typeName": {
     "name": "IHasTabIndex",
     "nameFull": "IHasTabIndex"
    },
    "src": "uui-core/src/types/props.ts",
    "exported": true
   },
   "details": {
    "kind": 263,
    "typeValue": {
     "raw": "IHasTabIndex",
     "print": [
      "// TBD: merge with ICanFocus?",
      "interface IHasTabIndex {",
      "    /** Controls the order of keyboard navigation between components */",
      "    tabIndex?: React.HTMLAttributes<HTMLElement>['tabIndex'];",
      "}"
     ]
    },
    "props": [
     {
      "uid": 1,
      "name": "tabIndex",
      "comment": {
       "raw": [
        "Controls the order of keyboard navigation between components"
       ]
      },
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui-core:IHistory4": {
   "summary": {
    "module": "@epam/uui-core",
    "typeName": {
     "name": "IHistory4",
     "nameFull": "IHistory4"
    },
    "src": "uui-core/src/services/routing/HistoryAdaptedRouter.tsx",
    "exported": true
   },
   "details": {
    "kind": 263,
    "typeValue": {
     "raw": "IHistory4",
     "print": [
      "interface IHistory4 {",
      "    location: Link;",
      "    push(link: Link): void;",
      "    replace(link: Link): void;",
      "    createHref(link: Link): string;",
      "    listen(listener: (location: Link) => void): () => void;",
      "    block(listener: (args: any) => any): () => void;",
      "}"
     ]
    },
    "props": [
     {
      "uid": 1,
      "name": "location",
      "typeValue": {
       "raw": "Link"
      },
      "required": true
     },
     {
      "uid": 2,
      "name": "push",
      "typeValue": {
       "raw": "(link: Link) => void"
      },
      "editor": {
       "type": "func"
      },
      "required": true
     },
     {
      "uid": 3,
      "name": "replace",
      "typeValue": {
       "raw": "(link: Link) => void"
      },
      "editor": {
       "type": "func"
      },
      "required": true
     },
     {
      "uid": 4,
      "name": "createHref",
      "typeValue": {
       "raw": "(link: Link) => string"
      },
      "editor": {
       "type": "func"
      },
      "required": true
     },
     {
      "uid": 5,
      "name": "listen",
      "typeValue": {
       "raw": "(listener: (location: Link) => void) => () => void"
      },
      "editor": {
       "type": "func"
      },
      "required": true
     },
     {
      "uid": 6,
      "name": "block",
      "typeValue": {
       "raw": "(listener: (args: any) => any) => () => void"
      },
      "editor": {
       "type": "func"
      },
      "required": true
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui-core:ILayoutContext": {
   "summary": {
    "module": "@epam/uui-core",
    "typeName": {
     "name": "ILayoutContext",
     "nameFull": "ILayoutContext"
    },
    "src": "uui-core/src/types/contexts.ts",
    "exported": true
   },
   "details": {
    "kind": 263,
    "typeValue": {
     "raw": "ILayoutContext",
     "print": [
      "interface ILayoutContext {",
      "    /** Returns the new layer. This layer will be higher than previous. */",
      "    getLayer(): LayoutLayer;",
      "    /** Removes provided layer from layers list */",
      "    releaseLayer(layer: LayoutLayer): void;",
      "    /**",
      "     * Returns portal root node.",
      "     * In simple cases it will be node with 'main' or 'root' id or document.body.",
      "     * Or it will return node with portalRootId.",
      "     */",
      "    getPortalRoot(): HTMLElement;",
      "    /**",
      "     * Returns unique id, which can be used as id for portal root.",
      "     * Usually used for cases with shadow DOM, to be able to find this portal root element if it's located under shadow DOM",
      "     */",
      "    getPortalRootId(): string;",
      "}"
     ]
    },
    "props": [
     {
      "uid": 1,
      "name": "getLayer",
      "comment": {
       "raw": [
        "Returns the new layer. This layer will be higher than previous."
       ]
      },
      "typeValue": {
       "raw": "() => LayoutLayer"
      },
      "editor": {
       "type": "func"
      },
      "required": true
     },
     {
      "uid": 2,
      "name": "releaseLayer",
      "comment": {
       "raw": [
        "Removes provided layer from layers list"
       ]
      },
      "typeValue": {
       "raw": "(layer: LayoutLayer) => void"
      },
      "editor": {
       "type": "func"
      },
      "required": true
     },
     {
      "uid": 3,
      "name": "getPortalRoot",
      "comment": {
       "raw": [
        "Returns portal root node.",
        " In simple cases it will be node with 'main' or 'root' id or document.body.",
        " Or it will return node with portalRootId."
       ]
      },
      "typeValue": {
       "raw": "() => HTMLElement"
      },
      "editor": {
       "type": "func"
      },
      "required": true
     },
     {
      "uid": 4,
      "name": "getPortalRootId",
      "comment": {
       "raw": [
        "Returns unique id, which can be used as id for portal root.",
        " Usually used for cases with shadow DOM, to be able to find this portal root element if it's located under shadow DOM"
       ]
      },
      "typeValue": {
       "raw": "() => string"
      },
      "editor": {
       "type": "func"
      },
      "required": true
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui-core:ILens": {
   "summary": {
    "module": "@epam/uui-core",
    "typeName": {
     "name": "ILens",
     "nameFull": "ILens<TFocused>"
    },
    "src": "uui-core/src/data/lenses/types.ts",
    "exported": true
   },
   "details": {
    "kind": 263,
    "typeValue": {
     "raw": "ILens<TFocused>",
     "print": [
      "interface ILens<TFocused> {",
      "    get(): TFocused;",
      "    set(value: TFocused): void;",
      "    update(fn: (current: TFocused) => TFocused): void;",
      "    prop<K extends keyof TFocused>(name: K): ILens<NonNullable<TFocused[K]>>;",
      "    index(index: number): ILens<ArrayElement<TFocused>>;",
      "    onChange(fn: (oldValue: TFocused, newValue: TFocused) => TFocused): ILens<TFocused>;",
      "    default(value: TFocused): ILens<TFocused>;",
      "    toProps(): IEditable<TFocused>;",
      "}"
     ]
    },
    "props": [
     {
      "uid": 1,
      "name": "get",
      "typeValue": {
       "raw": "() => TFocused"
      },
      "editor": {
       "type": "func"
      },
      "required": true
     },
     {
      "uid": 2,
      "name": "set",
      "typeValue": {
       "raw": "(value: TFocused) => void"
      },
      "editor": {
       "type": "func"
      },
      "required": true
     },
     {
      "uid": 3,
      "name": "update",
      "typeValue": {
       "raw": "(fn: (current: TFocused) => TFocused) => void"
      },
      "editor": {
       "type": "func"
      },
      "required": true
     },
     {
      "uid": 4,
      "name": "prop",
      "typeValue": {
       "raw": "<K extends keyof TFocused>(name: K) => ILens<NonNullable<TFocused[K]>>"
      },
      "editor": {
       "type": "func"
      },
      "required": true
     },
     {
      "uid": 5,
      "name": "index",
      "typeValue": {
       "raw": "(index: number) => ILens<ArrayElement<TFocused>>"
      },
      "editor": {
       "type": "func"
      },
      "required": true
     },
     {
      "uid": 6,
      "name": "onChange",
      "typeValue": {
       "raw": "(fn: (oldValue: TFocused, newValue: TFocused) => TFocused) => ILens<TFocused>"
      },
      "editor": {
       "type": "func"
      },
      "required": true
     },
     {
      "uid": 7,
      "name": "default",
      "typeValue": {
       "raw": "(value: TFocused) => ILens<TFocused>"
      },
      "editor": {
       "type": "func"
      },
      "required": true
     },
     {
      "uid": 8,
      "name": "toProps",
      "typeValue": {
       "raw": "() => IEditable<TFocused>"
      },
      "editor": {
       "type": "func"
      },
      "required": true
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui-core:ILockContext": {
   "summary": {
    "module": "@epam/uui-core",
    "typeName": {
     "name": "ILockContext",
     "nameFull": "ILockContext"
    },
    "src": "uui-core/src/types/contexts.ts",
    "exported": true
   },
   "details": {
    "kind": 263,
    "typeValue": {
     "raw": "ILockContext",
     "print": [
      "interface ILockContext {",
      "    /**",
      "     * Tries to take a lock, and sets tryRelease callback, which will be invoked when something tries to take control over.",
      "     * If a lock already exists, it tries to release the current lock and then set a new one",
      "     */",
      "    acquire(tryRelease: () => Promise<any>): Promise<object>;",
      "    /** Releases lock without calling tryRelease callback */",
      "    release(lock: object): void;",
      "    /** Tries to acquire a lock for the time while the action is being executed. */",
      "    withLock(action: () => Promise<any>): Promise<object>;",
      "    /** Returns currently active lock */",
      "    getCurrentLock: () => Lock | null;",
      "}"
     ]
    },
    "props": [
     {
      "uid": 1,
      "name": "acquire",
      "comment": {
       "raw": [
        "Tries to take a lock, and sets tryRelease callback, which will be invoked when something tries to take control over.",
        " If a lock already exists, it tries to release the current lock and then set a new one"
       ]
      },
      "typeValue": {
       "raw": "(tryRelease: () => Promise<any>) => Promise<object>"
      },
      "editor": {
       "type": "func"
      },
      "required": true
     },
     {
      "uid": 2,
      "name": "release",
      "comment": {
       "raw": [
        "Releases lock without calling tryRelease callback"
       ]
      },
      "typeValue": {
       "raw": "(lock: object) => void"
      },
      "editor": {
       "type": "func"
      },
      "required": true
     },
     {
      "uid": 3,
      "name": "withLock",
      "comment": {
       "raw": [
        "Tries to acquire a lock for the time while the action is being executed."
       ]
      },
      "typeValue": {
       "raw": "(action: () => Promise<any>) => Promise<object>"
      },
      "editor": {
       "type": "func"
      },
      "required": true
     },
     {
      "uid": 4,
      "name": "getCurrentLock",
      "comment": {
       "raw": [
        "Returns currently active lock"
       ]
      },
      "typeValue": {
       "raw": "() => Lock | null"
      },
      "editor": {
       "type": "func"
      },
      "required": true
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui-core:IMap": {
   "summary": {
    "module": "@epam/uui-core",
    "typeName": {
     "name": "IMap",
     "nameFull": "IMap<TKey, TValue>"
    },
    "src": "uui-core/src/types/objects.ts",
    "exported": true
   },
   "details": {
    "kind": 263,
    "typeValue": {
     "raw": "IMap<TKey, TValue>",
     "print": [
      "interface IMap<TKey, TValue> {",
      "    constructor: Function;",
      "    [Symbol.iterator](): IterableIterator<[",
      "        TKey,",
      "        TValue",
      "    ]>;",
      "    get(key: TKey): TValue;",
      "    set(key: TKey, value: TValue): IMap<TKey, TValue>;",
      "    has(key: TKey): boolean;",
      "    delete(key: TKey): boolean;",
      "    size: number;",
      "}"
     ]
    },
    "props": [
     {
      "uid": 1,
      "name": "constructor",
      "typeValue": {
       "raw": "Function"
      },
      "required": true
     },
     {
      "uid": 2,
      "name": "get",
      "typeValue": {
       "raw": "(key: TKey) => TValue"
      },
      "editor": {
       "type": "func"
      },
      "required": true
     },
     {
      "uid": 3,
      "name": "set",
      "typeValue": {
       "raw": "(key: TKey, value: TValue) => IMap<TKey, TValue>"
      },
      "editor": {
       "type": "func"
      },
      "required": true
     },
     {
      "uid": 4,
      "name": "has",
      "typeValue": {
       "raw": "(key: TKey) => boolean"
      },
      "editor": {
       "type": "func"
      },
      "required": true
     },
     {
      "uid": 5,
      "name": "delete",
      "typeValue": {
       "raw": "(key: TKey) => boolean"
      },
      "editor": {
       "type": "func"
      },
      "required": true
     },
     {
      "uid": 6,
      "name": "size",
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "required": true
     },
     {
      "uid": 7,
      "name": "[Symbol.iterator]",
      "typeValue": {
       "raw": "() => IterableIterator<[TKey, TValue]>"
      },
      "editor": {
       "type": "func"
      },
      "required": true
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui-core:IModal": {
   "summary": {
    "module": "@epam/uui-core",
    "typeName": {
     "name": "IModal",
     "nameFull": "IModal<TResult, TParameters>"
    },
    "src": "uui-core/src/types/props.ts",
    "exported": true
   },
   "details": {
    "kind": 263,
    "typeValue": {
     "raw": "IModal<TResult, TParameters>",
     "print": [
      "interface IModal<TResult, TParameters = any> {",
      "    /** Indicates whether the modal is currently displayed */",
      "    isActive?: boolean;",
      "    /** Unique key of the modal */",
      "    key: string;",
      "    /** Modal zIndex value. Calculated via LayoutContext. */",
      "    zIndex: number;",
      "    /** Call to successfully close the modal. It's resolves `modalContext.show()` promise with provided value. */",
      "    success(result: TResult): void;",
      "    /** Call to close the modal with abort action. It's rejects `modalContext.show()` promise with provided value. */",
      "    abort(result?: any): void;",
      "    /** Parameters that provided via second param of `modalContext.show` method */",
      "    parameters?: TParameters;",
      "    /** Depth of current modal layer */",
      "    depth?: number;",
      "}"
     ]
    },
    "props": [
     {
      "uid": 1,
      "name": "isActive",
      "comment": {
       "raw": [
        "Indicates whether the modal is currently displayed"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "required": false
     },
     {
      "uid": 2,
      "name": "key",
      "comment": {
       "raw": [
        "Unique key of the modal"
       ]
      },
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "required": true
     },
     {
      "uid": 3,
      "name": "zIndex",
      "comment": {
       "raw": [
        "Modal zIndex value. Calculated via LayoutContext."
       ]
      },
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "required": true
     },
     {
      "uid": 4,
      "name": "success",
      "comment": {
       "raw": [
        "Call to successfully close the modal. It's resolves `modalContext.show()` promise with provided value."
       ]
      },
      "typeValue": {
       "raw": "(result: TResult) => void"
      },
      "editor": {
       "type": "func"
      },
      "required": true
     },
     {
      "uid": 5,
      "name": "abort",
      "comment": {
       "raw": [
        "Call to close the modal with abort action. It's rejects `modalContext.show()` promise with provided value."
       ]
      },
      "typeValue": {
       "raw": "(result?: any) => void"
      },
      "editor": {
       "type": "func"
      },
      "required": true
     },
     {
      "uid": 6,
      "name": "parameters",
      "comment": {
       "raw": [
        "Parameters that provided via second param of `modalContext.show` method"
       ]
      },
      "typeValue": {
       "raw": "TParameters"
      },
      "required": false
     },
     {
      "uid": 7,
      "name": "depth",
      "comment": {
       "raw": [
        "Depth of current modal layer"
       ]
      },
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui-core:IModalContext": {
   "summary": {
    "module": "@epam/uui-core",
    "typeName": {
     "name": "IModalContext",
     "nameFull": "IModalContext"
    },
    "src": "uui-core/src/types/contexts.ts",
    "exported": true
   },
   "details": {
    "kind": 263,
    "typeValue": {
     "raw": "IModalContext",
     "print": [
      "interface IModalContext extends IBaseContext {",
      "    /** Shows provided modal component with defined params  */",
      "    show<TResult, TParameters = {}>(render: (props: IModal<TResult>) => React.ReactNode, parameters?: TParameters): Promise<TResult>;",
      "    /** Removes all active modals */",
      "    closeAll(): void;",
      "    /** Returns true, if some modal displayed */",
      "    isModalOperationActive(): boolean;",
      "    /** Returns all active modals */",
      "    getOperations(): ModalOperation[];",
      "}"
     ]
    },
    "props": [
     {
      "uid": 1,
      "name": "show",
      "comment": {
       "raw": [
        "Shows provided modal component with defined params"
       ]
      },
      "typeValue": {
       "raw": "<TResult, TParameters = {}>(render: (props: IModal<TResult, any>) => React.ReactNode, parameters?: TParameters | undefined) => Promise<TResult>"
      },
      "editor": {
       "type": "func"
      },
      "required": true
     },
     {
      "uid": 2,
      "name": "closeAll",
      "comment": {
       "raw": [
        "Removes all active modals"
       ]
      },
      "typeValue": {
       "raw": "() => void"
      },
      "editor": {
       "type": "func"
      },
      "required": true
     },
     {
      "uid": 3,
      "name": "isModalOperationActive",
      "comment": {
       "raw": [
        "Returns true, if some modal displayed"
       ]
      },
      "typeValue": {
       "raw": "() => boolean"
      },
      "editor": {
       "type": "func"
      },
      "required": true
     },
     {
      "uid": 4,
      "name": "getOperations",
      "comment": {
       "raw": [
        "Returns all active modals"
       ]
      },
      "typeValue": {
       "raw": "() => ModalOperation[]"
      },
      "editor": {
       "type": "func"
      },
      "required": true
     },
     {
      "uid": 5,
      "name": "subscribe",
      "typeValue": {
       "raw": "(handler: (state: {}) => void) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IBaseContext",
      "required": true
     },
     {
      "uid": 6,
      "name": "unsubscribe",
      "typeValue": {
       "raw": "(handler: (state: {}) => void) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IBaseContext",
      "required": true
     },
     {
      "uid": 7,
      "name": "destroyContext",
      "typeValue": {
       "raw": "() => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IBaseContext",
      "required": true
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui-core:INotification": {
   "summary": {
    "module": "@epam/uui-core",
    "typeName": {
     "name": "INotification",
     "nameFull": "INotification"
    },
    "src": "uui-core/src/types/props.ts",
    "exported": true
   },
   "details": {
    "kind": 263,
    "typeValue": {
     "raw": "INotification",
     "print": [
      "interface INotification {",
      "    /** Call to close the notification with abort action. It's rejects `notificationContext.show()` promise. */",
      "    onClose?(): void;",
      "    /** Call to close the notification with success action. It's resolved `notificationContext.show()` promise. */",
      "    onSuccess?(): void;",
      "    /** Cancel notification closing timer */",
      "    clearTimer?(): void;",
      "    /** Reinitialize notification closing timer. It will be set to the provided notification duration.  */",
      "    refreshTimer?(): void;",
      "    /** Unique id of the notification */",
      "    id: number;",
      "    /** Unique key of the notification */",
      "    key: string;",
      "}"
     ]
    },
    "props": [
     {
      "uid": 1,
      "name": "onClose",
      "comment": {
       "raw": [
        "Call to close the notification with abort action. It's rejects `notificationContext.show()` promise."
       ]
      },
      "typeValue": {
       "raw": "() => void"
      },
      "editor": {
       "type": "func"
      },
      "required": false
     },
     {
      "uid": 2,
      "name": "onSuccess",
      "comment": {
       "raw": [
        "Call to close the notification with success action. It's resolved `notificationContext.show()` promise."
       ]
      },
      "typeValue": {
       "raw": "() => void"
      },
      "editor": {
       "type": "func"
      },
      "required": false
     },
     {
      "uid": 3,
      "name": "clearTimer",
      "comment": {
       "raw": [
        "Cancel notification closing timer"
       ]
      },
      "typeValue": {
       "raw": "() => void"
      },
      "editor": {
       "type": "func"
      },
      "required": false
     },
     {
      "uid": 4,
      "name": "refreshTimer",
      "comment": {
       "raw": [
        "Reinitialize notification closing timer. It will be set to the provided notification duration."
       ]
      },
      "typeValue": {
       "raw": "() => void"
      },
      "editor": {
       "type": "func"
      },
      "required": false
     },
     {
      "uid": 5,
      "name": "id",
      "comment": {
       "raw": [
        "Unique id of the notification"
       ]
      },
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "required": true
     },
     {
      "uid": 6,
      "name": "key",
      "comment": {
       "raw": [
        "Unique key of the notification"
       ]
      },
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "required": true
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui-core:INotificationContext": {
   "summary": {
    "module": "@epam/uui-core",
    "typeName": {
     "name": "INotificationContext",
     "nameFull": "INotificationContext"
    },
    "src": "uui-core/src/types/contexts.ts",
    "exported": true
   },
   "details": {
    "kind": 263,
    "typeValue": {
     "raw": "INotificationContext",
     "print": [
      "interface INotificationContext extends IBaseContext {",
      "    /** Shows provided notification component with defined params  */",
      "    show(render: (props: INotification) => React.ReactNode, notificationParams?: NotificationParams): Promise<void>;",
      "    /** Returns all active notifications */",
      "    getNotifications(): NotificationOperation[];",
      "    /** Removes notification by their id */",
      "    remove(id: number): void;",
      "    /** Removes all active notification */",
      "    clearAll(): void;",
      "}"
     ]
    },
    "props": [
     {
      "uid": 1,
      "name": "show",
      "comment": {
       "raw": [
        "Shows provided notification component with defined params"
       ]
      },
      "typeValue": {
       "raw": "(render: (props: INotification) => React.ReactNode, notificationParams?: NotificationParams | undefined) => Promise<void>"
      },
      "editor": {
       "type": "func"
      },
      "required": true
     },
     {
      "uid": 2,
      "name": "getNotifications",
      "comment": {
       "raw": [
        "Returns all active notifications"
       ]
      },
      "typeValue": {
       "raw": "() => NotificationOperation[]"
      },
      "editor": {
       "type": "func"
      },
      "required": true
     },
     {
      "uid": 3,
      "name": "remove",
      "comment": {
       "raw": [
        "Removes notification by their id"
       ]
      },
      "typeValue": {
       "raw": "(id: number) => void"
      },
      "editor": {
       "type": "func"
      },
      "required": true
     },
     {
      "uid": 4,
      "name": "clearAll",
      "comment": {
       "raw": [
        "Removes all active notification"
       ]
      },
      "typeValue": {
       "raw": "() => void"
      },
      "editor": {
       "type": "func"
      },
      "required": true
     },
     {
      "uid": 5,
      "name": "subscribe",
      "typeValue": {
       "raw": "(handler: (state: {}) => void) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IBaseContext",
      "required": true
     },
     {
      "uid": 6,
      "name": "unsubscribe",
      "typeValue": {
       "raw": "(handler: (state: {}) => void) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IBaseContext",
      "required": true
     },
     {
      "uid": 7,
      "name": "destroyContext",
      "typeValue": {
       "raw": "() => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IBaseContext",
      "required": true
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui-core:IPickerToggler": {
   "summary": {
    "module": "@epam/uui-core",
    "typeName": {
     "name": "IPickerToggler",
     "nameFull": "IPickerToggler<TItem, TId>"
    },
    "src": "uui-core/src/types/pickers.ts",
    "comment": {
     "raw": [
      "Component can be used as Toggler control for pickers.",
      " Only IDropdownToggler implementation is necessary for the picker to function.",
      " Other props can be implemented for full-featured picker togglers."
     ]
    },
    "exported": true
   },
   "details": {
    "kind": 263,
    "typeValue": {
     "raw": "IPickerToggler<TItem, TId>",
     "print": [
      "/**",
      " * Component can be used as Toggler control for pickers.",
      " * Only IDropdownToggler implementation is necessary for the picker to function.",
      " * Other props can be implemented for full-featured picker togglers.",
      " */",
      "interface IPickerToggler<TItem = any, TId = any> extends IBasicPickerToggler, Partial<IEditable<string>>, Partial<IHasPlaceholder>, Partial<IDisableable>, Partial<ICanBeInvalid> {",
      "    /** Array of selected rows */",
      "    selection?: DataRowProps<TItem, TId>[];",
      "    /** Amount of selected items */",
      "    selectedRowsCount?: number;",
      "}"
     ]
    },
    "props": [
     {
      "uid": 1,
      "name": "selection",
      "comment": {
       "raw": [
        "Array of selected rows"
       ]
      },
      "typeValue": {
       "raw": "DataRowProps<TItem, TId>[]"
      },
      "required": false
     },
     {
      "uid": 2,
      "name": "selectedRowsCount",
      "comment": {
       "raw": [
        "Amount of selected items"
       ]
      },
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "required": false
     },
     {
      "uid": 3,
      "name": "onClear",
      "comment": {
       "raw": [
        "Call to clear toggler value"
       ]
      },
      "typeValue": {
       "raw": "(e?: any) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IBasicPickerToggler",
      "required": false
     },
     {
      "uid": 4,
      "name": "isOpen",
      "comment": {
       "raw": [
        "When isDropdown=true, indicate that dropdown is open with chevron icon"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:IDropdownToggler",
      "required": false
     },
     {
      "uid": 5,
      "name": "isDropdown",
      "comment": {
       "raw": [
        "Shows chevron icon, enabling component to act as dropdown toggler"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:IDropdownToggler",
      "required": false
     },
     {
      "uid": 6,
      "name": "toggleDropdownOpening",
      "comment": {
       "raw": [
        "Called when associated dropdown should open or close"
       ]
      },
      "typeValue": {
       "raw": "(value: boolean) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IDropdownToggler",
      "required": false
     },
     {
      "uid": 7,
      "name": "isInteractedOutside",
      "comment": {
       "raw": [
        "Called when component is interacted outside, to close the dropdown"
       ]
      },
      "typeValue": {
       "raw": "(event: Event) => boolean"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IDropdownToggler",
      "required": false
     },
     {
      "uid": 8,
      "name": "ref",
      "comment": {
       "raw": [
        "Component's ref"
       ]
      },
      "typeValue": {
       "raw": "null | (instance: any) => void | React.RefObject<any>"
      },
      "from": "@epam/uui-core:IDropdownToggler",
      "required": false
     },
     {
      "uid": 9,
      "name": "isDisabled",
      "comment": {
       "raw": [
        "Disables component"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:IDropdownToggler",
      "required": false
     },
     {
      "uid": 10,
      "name": "caption",
      "comment": {
       "raw": [
        "Caption. Can be a string, or React.Elements. Certain components supports minimal markup (<b>,<i>,<a>) in captions."
       ]
      },
      "typeValue": {
       "raw": "any"
      },
      "from": "@epam/uui-core:IHasCaption",
      "required": false
     },
     {
      "uid": 11,
      "name": "onClick",
      "comment": {
       "raw": [
        "Called when component is clicked"
       ]
      },
      "typeValue": {
       "raw": "(e?: any) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IClickable",
      "required": false
     },
     {
      "uid": 12,
      "name": "value",
      "comment": {
       "raw": [
        "The current value of component"
       ]
      },
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "from": "@epam/uui-core:IEditable",
      "required": true
     },
     {
      "uid": 13,
      "name": "onValueChange",
      "comment": {
       "raw": [
        "Called when value needs to be changed (usually due to user interaction)"
       ]
      },
      "typeValue": {
       "raw": "(newValue: string) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IEditable",
      "required": true
     },
     {
      "uid": 14,
      "name": "isInvalid",
      "comment": {
       "raw": [
        "True if component contains invalid input"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:ICanBeInvalid",
      "required": false
     },
     {
      "uid": 15,
      "name": "validationMessage",
      "comment": {
       "raw": [
        "Message describing why the value is invalid"
       ]
      },
      "typeValue": {
       "raw": "null | string | number | boolean | React.ReactElement<any, string | React.JSXElementConstructor<any>> | React.ReactFragment | React.ReactPortal"
      },
      "from": "@epam/uui-core:ICanBeInvalid",
      "required": false
     },
     {
      "uid": 16,
      "name": "validationProps",
      "comment": {
       "raw": [
        "If T is a complex value (object or array), this property contains validation states of inner items"
       ]
      },
      "typeValue": {
       "raw": "{ [key: string]: ICanBeInvalid; }"
      },
      "from": "@epam/uui-core:ICanBeInvalid",
      "required": false
     },
     {
      "uid": 17,
      "name": "isReadonly",
      "comment": {
       "raw": [
        "Disable editing. Unlike isDisabled, keep component's value readable."
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:ICanBeReadonly",
      "required": false
     },
     {
      "uid": 18,
      "name": "isRequired",
      "comment": {
       "raw": [
        "Marks that component's value is required and shouldn't be empty"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:ICanBeRequired",
      "required": false
     },
     {
      "uid": 19,
      "name": "placeholder",
      "comment": {
       "raw": [
        "Placeholder to display when empty"
       ]
      },
      "typeValue": {
       "raw": "any"
      },
      "from": "@epam/uui-core:IHasPlaceholder",
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui-core:IPresetsApi": {
   "summary": {
    "module": "@epam/uui-core",
    "typeName": {
     "name": "IPresetsApi",
     "nameFull": "IPresetsApi<TFilter, TViewState>"
    },
    "src": "uui-core/src/types/tables.ts",
    "exported": true
   },
   "details": {
    "kind": 263,
    "typeValue": {
     "raw": "IPresetsApi<TFilter, TViewState>",
     "print": [
      "interface IPresetsApi<TFilter = any, TViewState = any> {",
      "    /** ID of selected preset */",
      "    activePresetId: number | null;",
      "    /** Function that selects given preset  */",
      "    choosePreset(preset: ITablePreset<TFilter, TViewState>): void;",
      "    /** Function that gives preset name and create new preset with this name and current table state  */",
      "    createNewPreset(name: string): Promise<number>;",
      "    /** Function that gives preset and return if this preset changed or not  */",
      "    hasPresetChanged(preset: ITablePreset<TFilter, TViewState>): boolean;",
      "    /** Function that gives the preset and creat their duplicate  */",
      "    duplicatePreset(preset: ITablePreset<TFilter, TViewState>): void;",
      "    /** Function that deletes given preset  */",
      "    deletePreset(preset: ITablePreset<TFilter, TViewState>): Promise<void>;",
      "    /** Function that updates given preset  */",
      "    updatePreset(preset: ITablePreset<TFilter, TViewState>): Promise<void>;",
      "    /** Function that gives preset and return URL link on given preset  */",
      "    getPresetLink(preset: ITablePreset<TFilter, TViewState>): string;",
      "    /** Array of presets  */",
      "    presets: ITablePreset<TFilter, TViewState>[];",
      "}"
     ]
    },
    "props": [
     {
      "uid": 1,
      "name": "activePresetId",
      "comment": {
       "raw": [
        "ID of selected preset"
       ]
      },
      "typeValue": {
       "raw": "null | number"
      },
      "editor": {
       "type": "number"
      },
      "required": false
     },
     {
      "uid": 2,
      "name": "choosePreset",
      "comment": {
       "raw": [
        "Function that selects given preset"
       ]
      },
      "typeValue": {
       "raw": "(preset: ITablePreset<TFilter, TViewState>) => void"
      },
      "editor": {
       "type": "func"
      },
      "required": true
     },
     {
      "uid": 3,
      "name": "createNewPreset",
      "comment": {
       "raw": [
        "Function that gives preset name and create new preset with this name and current table state"
       ]
      },
      "typeValue": {
       "raw": "(name: string) => Promise<number>"
      },
      "editor": {
       "type": "func"
      },
      "required": true
     },
     {
      "uid": 4,
      "name": "hasPresetChanged",
      "comment": {
       "raw": [
        "Function that gives preset and return if this preset changed or not"
       ]
      },
      "typeValue": {
       "raw": "(preset: ITablePreset<TFilter, TViewState>) => boolean"
      },
      "editor": {
       "type": "func"
      },
      "required": true
     },
     {
      "uid": 5,
      "name": "duplicatePreset",
      "comment": {
       "raw": [
        "Function that gives the preset and creat their duplicate"
       ]
      },
      "typeValue": {
       "raw": "(preset: ITablePreset<TFilter, TViewState>) => void"
      },
      "editor": {
       "type": "func"
      },
      "required": true
     },
     {
      "uid": 6,
      "name": "deletePreset",
      "comment": {
       "raw": [
        "Function that deletes given preset"
       ]
      },
      "typeValue": {
       "raw": "(preset: ITablePreset<TFilter, TViewState>) => Promise<void>"
      },
      "editor": {
       "type": "func"
      },
      "required": true
     },
     {
      "uid": 7,
      "name": "updatePreset",
      "comment": {
       "raw": [
        "Function that updates given preset"
       ]
      },
      "typeValue": {
       "raw": "(preset: ITablePreset<TFilter, TViewState>) => Promise<void>"
      },
      "editor": {
       "type": "func"
      },
      "required": true
     },
     {
      "uid": 8,
      "name": "getPresetLink",
      "comment": {
       "raw": [
        "Function that gives preset and return URL link on given preset"
       ]
      },
      "typeValue": {
       "raw": "(preset: ITablePreset<TFilter, TViewState>) => string"
      },
      "editor": {
       "type": "func"
      },
      "required": true
     },
     {
      "uid": 9,
      "name": "presets",
      "comment": {
       "raw": [
        "Array of presets"
       ]
      },
      "typeValue": {
       "raw": "ITablePreset<TFilter, TViewState>[]"
      },
      "required": true
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui-core:IProcessRequest": {
   "summary": {
    "module": "@epam/uui-core",
    "typeName": {
     "name": "IProcessRequest",
     "nameFull": "IProcessRequest"
    },
    "src": "uui-core/src/services/ApiContext.ts",
    "exported": true
   },
   "details": {
    "kind": 264,
    "typeValue": {
     "raw": "IProcessRequest",
     "print": [
      "type IProcessRequest = (url: string, method: string, data?: any, options?: ApiCallOptions) => Promise<any>;"
     ]
    }
   }
  },
  "@epam/uui-core:IRouter6": {
   "summary": {
    "module": "@epam/uui-core",
    "typeName": {
     "name": "IRouter6",
     "nameFull": "IRouter6"
    },
    "src": "uui-core/src/services/routing/interfaces/IRouter6.ts",
    "comment": {
     "raw": [
      "From: react-router version 6.14.0",
      "",
      " The type definition of the IRouter6 is not complete (It's OK as long as we only use a subset of its API)",
      "",
      " NOTE: Complete definitions of the router is located in @remix-run/router:",
      " https://github.com/remix-run/react-router/blob/main/packages/router/router.ts#L57"
     ]
    },
    "exported": true
   },
   "details": {
    "kind": 264,
    "typeValue": {
     "raw": "IRouter6",
     "print": [
      "/**",
      " * From: react-router version 6.14.0",
      " *",
      " * The type definition of the IRouter6 is not complete (It's OK as long as we only use a subset of its API)",
      " *",
      " * NOTE: Complete definitions of the router is located in @remix-run/router:",
      " * https://github.com/remix-run/react-router/blob/main/packages/router/router.ts#L57",
      " */",
      "type IRouter6 = {",
      "    state: RouterState;",
      "    navigate(to: To | null, opts?: RouterNavigateOptions): Promise<void>;",
      "    navigate(to: number): Promise<void>;",
      "    getBlocker: (key: string, fn: BlockerFunction) => unknown;",
      "    subscribe: (fn: (state: RouterState) => void) => () => void;",
      "    deleteBlocker: (key: string) => void;",
      "    createHref(location: Location | URL): string;",
      "};"
     ]
    },
    "props": [
     {
      "uid": 1,
      "name": "state",
      "typeValue": {
       "raw": "RouterState"
      },
      "typeValueRef": "@epam/uui-core:RouterState",
      "required": true
     },
     {
      "uid": 2,
      "name": "navigate",
      "typeValue": {
       "raw": "{ (to: To | null, opts?: RouterNavigateOptions | undefined): Promise<void>; (to: number): Promise<void>; }"
      },
      "editor": {
       "type": "func"
      },
      "required": true
     },
     {
      "uid": 3,
      "name": "getBlocker",
      "typeValue": {
       "raw": "(key: string, fn: BlockerFunction) => unknown"
      },
      "editor": {
       "type": "func"
      },
      "required": true
     },
     {
      "uid": 4,
      "name": "subscribe",
      "typeValue": {
       "raw": "(fn: (state: RouterState) => void) => () => void"
      },
      "editor": {
       "type": "func"
      },
      "required": true
     },
     {
      "uid": 5,
      "name": "deleteBlocker",
      "typeValue": {
       "raw": "(key: string) => void"
      },
      "editor": {
       "type": "func"
      },
      "required": true
     },
     {
      "uid": 6,
      "name": "createHref",
      "typeValue": {
       "raw": "(location: Location | URL) => string"
      },
      "editor": {
       "type": "func"
      },
      "required": true
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui-core:IRouterContext": {
   "summary": {
    "module": "@epam/uui-core",
    "typeName": {
     "name": "IRouterContext",
     "nameFull": "IRouterContext"
    },
    "src": "uui-core/src/types/contexts.ts",
    "exported": true
   },
   "details": {
    "kind": 263,
    "typeValue": {
     "raw": "IRouterContext",
     "print": [
      "interface IRouterContext {",
      "    /** Returns current location link */",
      "    getCurrentLink(): Link;",
      "    /** Makes a SPA redirect to the provided link */",
      "    redirect(link?: Link | string): void;",
      "    /** Makes a SPA redirect to the provided link. Replaces the current entry in the history stack with a new one */",
      "    transfer(link: Link): void;",
      "    /** Returns true, if provided link match current location */",
      "    isActive(link: Link): boolean;",
      "    /** Creates href string based on provided link */",
      "    createHref(link: Link): string;",
      "    /** Subscribes to the router updates */",
      "    listen(listener: (link: Link) => void): () => void;",
      "    /**",
      "     * Blocks router changes. Can be used to show confirmation dialogs before the redirect.",
      "     * If block callback provide, all router changes will be blocked, you need to unblock and to retry them by yourself.",
      "     * */",
      "    block(callback: (link: Link) => void): () => void;",
      "}"
     ]
    },
    "props": [
     {
      "uid": 1,
      "name": "getCurrentLink",
      "comment": {
       "raw": [
        "Returns current location link"
       ]
      },
      "typeValue": {
       "raw": "() => Link"
      },
      "editor": {
       "type": "func"
      },
      "required": true
     },
     {
      "uid": 2,
      "name": "redirect",
      "comment": {
       "raw": [
        "Makes a SPA redirect to the provided link"
       ]
      },
      "typeValue": {
       "raw": "(link?: string | Link | undefined) => void"
      },
      "editor": {
       "type": "func"
      },
      "required": true
     },
     {
      "uid": 3,
      "name": "transfer",
      "comment": {
       "raw": [
        "Makes a SPA redirect to the provided link. Replaces the current entry in the history stack with a new one"
       ]
      },
      "typeValue": {
       "raw": "(link: Link) => void"
      },
      "editor": {
       "type": "func"
      },
      "required": true
     },
     {
      "uid": 4,
      "name": "isActive",
      "comment": {
       "raw": [
        "Returns true, if provided link match current location"
       ]
      },
      "typeValue": {
       "raw": "(link: Link) => boolean"
      },
      "editor": {
       "type": "func"
      },
      "required": true
     },
     {
      "uid": 5,
      "name": "createHref",
      "comment": {
       "raw": [
        "Creates href string based on provided link"
       ]
      },
      "typeValue": {
       "raw": "(link: Link) => string"
      },
      "editor": {
       "type": "func"
      },
      "required": true
     },
     {
      "uid": 6,
      "name": "listen",
      "comment": {
       "raw": [
        "Subscribes to the router updates"
       ]
      },
      "typeValue": {
       "raw": "(listener: (link: Link) => void) => () => void"
      },
      "editor": {
       "type": "func"
      },
      "required": true
     },
     {
      "uid": 7,
      "name": "block",
      "comment": {
       "raw": [
        "Blocks router changes. Can be used to show confirmation dialogs before the redirect.",
        " If block callback provide, all router changes will be blocked, you need to unblock and to retry them by yourself."
       ]
      },
      "typeValue": {
       "raw": "(callback: (link: Link) => void) => () => void"
      },
      "editor": {
       "type": "func"
      },
      "required": true
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui-core:ITablePreset": {
   "summary": {
    "module": "@epam/uui-core",
    "typeName": {
     "name": "ITablePreset",
     "nameFull": "ITablePreset<TFilter, TViewState>"
    },
    "src": "uui-core/src/types/tables.ts",
    "exported": true
   },
   "details": {
    "kind": 263,
    "typeValue": {
     "raw": "ITablePreset<TFilter, TViewState>",
     "print": [
      "interface ITablePreset<TFilter = any, TViewState = any> {",
      "    /** Name of the filter */",
      "    name: string;",
      "    /** Unique Id of the filter */",
      "    id: number | null;",
      "    /** If true, this preset can't be deleted or modified */",
      "    isReadonly?: boolean;",
      "    /**",
      "     * Determines the order in which this preset should appear in the presets list.",
      "     * The columns are sorted in ascending alphabetical order.",
      "     */",
      "    order?: string;",
      "    /** Filter value stored in the preset */",
      "    filter?: TFilter;",
      "    /** Columns config value stored in the preset */",
      "    columnsConfig?: ColumnsConfig;",
      "    /** Filters config value stored in the preset */",
      "    filtersConfig?: FiltersConfig;",
      "    /** Sorting value stored in the preset */",
      "    sorting?: SortingOption[];",
      "    /** View state value stored in the preset */",
      "    viewState?: TViewState;",
      "}"
     ]
    },
    "props": [
     {
      "uid": 1,
      "name": "name",
      "comment": {
       "raw": [
        "Name of the filter"
       ]
      },
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "required": true
     },
     {
      "uid": 2,
      "name": "id",
      "comment": {
       "raw": [
        "Unique Id of the filter"
       ]
      },
      "typeValue": {
       "raw": "null | number"
      },
      "editor": {
       "type": "number"
      },
      "required": false
     },
     {
      "uid": 3,
      "name": "isReadonly",
      "comment": {
       "raw": [
        "If true, this preset can't be deleted or modified"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "required": false
     },
     {
      "uid": 4,
      "name": "order",
      "comment": {
       "raw": [
        "Determines the order in which this preset should appear in the presets list.",
        " The columns are sorted in ascending alphabetical order."
       ]
      },
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "required": false
     },
     {
      "uid": 5,
      "name": "filter",
      "comment": {
       "raw": [
        "Filter value stored in the preset"
       ]
      },
      "typeValue": {
       "raw": "TFilter"
      },
      "required": false
     },
     {
      "uid": 6,
      "name": "columnsConfig",
      "comment": {
       "raw": [
        "Columns config value stored in the preset"
       ]
      },
      "typeValue": {
       "raw": "ColumnsConfig"
      },
      "required": false
     },
     {
      "uid": 7,
      "name": "filtersConfig",
      "comment": {
       "raw": [
        "Filters config value stored in the preset"
       ]
      },
      "typeValue": {
       "raw": "FiltersConfig<any>"
      },
      "required": false
     },
     {
      "uid": 8,
      "name": "sorting",
      "comment": {
       "raw": [
        "Sorting value stored in the preset"
       ]
      },
      "typeValue": {
       "raw": "SortingOption<any>[]"
      },
      "required": false
     },
     {
      "uid": 9,
      "name": "viewState",
      "comment": {
       "raw": [
        "View state value stored in the preset"
       ]
      },
      "typeValue": {
       "raw": "TViewState"
      },
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui-core:ITableState": {
   "summary": {
    "module": "@epam/uui-core",
    "typeName": {
     "name": "ITableState",
     "nameFull": "ITableState<TFilter, TViewState>"
    },
    "src": "uui-core/src/types/tables.ts",
    "exported": true
   },
   "details": {
    "kind": 263,
    "typeValue": {
     "raw": "ITableState<TFilter, TViewState>",
     "print": [
      "interface ITableState<TFilter = Record<string, any>, TViewState = any> extends IPresetsApi<TFilter, TViewState> {",
      "    /** Table state value */",
      "    tableState: DataTableState<TFilter, TViewState>;",
      "    /** Function that updates table state value */",
      "    setTableState(newState: DataTableState<TFilter, TViewState>): void;",
      "    /** Function that updates filter value */",
      "    setFilter(filter: TFilter): void;",
      "    /** Function that updates columns config value */",
      "    setColumnsConfig(columnsConfig: ColumnsConfig): void;",
      "    /** Function that updates filters config value */",
      "    setFiltersConfig(filtersConfig: FiltersConfig): void;",
      "}"
     ]
    },
    "props": [
     {
      "uid": 1,
      "name": "tableState",
      "comment": {
       "raw": [
        "Table state value"
       ]
      },
      "typeValue": {
       "raw": "DataTableState<TFilter, TViewState>"
      },
      "required": true
     },
     {
      "uid": 2,
      "name": "setTableState",
      "comment": {
       "raw": [
        "Function that updates table state value"
       ]
      },
      "typeValue": {
       "raw": "(newState: DataTableState<TFilter, TViewState>) => void"
      },
      "editor": {
       "type": "func"
      },
      "required": true
     },
     {
      "uid": 3,
      "name": "setFilter",
      "comment": {
       "raw": [
        "Function that updates filter value"
       ]
      },
      "typeValue": {
       "raw": "(filter: TFilter) => void"
      },
      "editor": {
       "type": "func"
      },
      "required": true
     },
     {
      "uid": 4,
      "name": "setColumnsConfig",
      "comment": {
       "raw": [
        "Function that updates columns config value"
       ]
      },
      "typeValue": {
       "raw": "(columnsConfig: ColumnsConfig) => void"
      },
      "editor": {
       "type": "func"
      },
      "required": true
     },
     {
      "uid": 5,
      "name": "setFiltersConfig",
      "comment": {
       "raw": [
        "Function that updates filters config value"
       ]
      },
      "typeValue": {
       "raw": "(filtersConfig: FiltersConfig<any>) => void"
      },
      "editor": {
       "type": "func"
      },
      "required": true
     },
     {
      "uid": 6,
      "name": "activePresetId",
      "comment": {
       "raw": [
        "ID of selected preset"
       ]
      },
      "typeValue": {
       "raw": "null | number"
      },
      "editor": {
       "type": "number"
      },
      "from": "@epam/uui-core:IPresetsApi",
      "required": false
     },
     {
      "uid": 7,
      "name": "choosePreset",
      "comment": {
       "raw": [
        "Function that selects given preset"
       ]
      },
      "typeValue": {
       "raw": "(preset: ITablePreset<TFilter, TViewState>) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IPresetsApi",
      "required": true
     },
     {
      "uid": 8,
      "name": "createNewPreset",
      "comment": {
       "raw": [
        "Function that gives preset name and create new preset with this name and current table state"
       ]
      },
      "typeValue": {
       "raw": "(name: string) => Promise<number>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IPresetsApi",
      "required": true
     },
     {
      "uid": 9,
      "name": "hasPresetChanged",
      "comment": {
       "raw": [
        "Function that gives preset and return if this preset changed or not"
       ]
      },
      "typeValue": {
       "raw": "(preset: ITablePreset<TFilter, TViewState>) => boolean"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IPresetsApi",
      "required": true
     },
     {
      "uid": 10,
      "name": "duplicatePreset",
      "comment": {
       "raw": [
        "Function that gives the preset and creat their duplicate"
       ]
      },
      "typeValue": {
       "raw": "(preset: ITablePreset<TFilter, TViewState>) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IPresetsApi",
      "required": true
     },
     {
      "uid": 11,
      "name": "deletePreset",
      "comment": {
       "raw": [
        "Function that deletes given preset"
       ]
      },
      "typeValue": {
       "raw": "(preset: ITablePreset<TFilter, TViewState>) => Promise<void>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IPresetsApi",
      "required": true
     },
     {
      "uid": 12,
      "name": "updatePreset",
      "comment": {
       "raw": [
        "Function that updates given preset"
       ]
      },
      "typeValue": {
       "raw": "(preset: ITablePreset<TFilter, TViewState>) => Promise<void>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IPresetsApi",
      "required": true
     },
     {
      "uid": 13,
      "name": "getPresetLink",
      "comment": {
       "raw": [
        "Function that gives preset and return URL link on given preset"
       ]
      },
      "typeValue": {
       "raw": "(preset: ITablePreset<TFilter, TViewState>) => string"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IPresetsApi",
      "required": true
     },
     {
      "uid": 14,
      "name": "presets",
      "comment": {
       "raw": [
        "Array of presets"
       ]
      },
      "typeValue": {
       "raw": "ITablePreset<TFilter, TViewState>[]"
      },
      "from": "@epam/uui-core:IPresetsApi",
      "required": true
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui-core:ItemsComparator": {
   "summary": {
    "module": "@epam/uui-core",
    "typeName": {
     "name": "ItemsComparator",
     "nameFull": "ItemsComparator<TItem>"
    },
    "src": "uui-core/src/data/processing/views/tree/ITree.ts",
    "exported": true
   },
   "details": {
    "kind": 264,
    "typeValue": {
     "raw": "ItemsComparator<TItem>",
     "print": [
      "type ItemsComparator<TItem> = (newItem: TItem, existingItem: TItem) => number;"
     ]
    }
   }
  },
  "@epam/uui-core:ITree": {
   "summary": {
    "module": "@epam/uui-core",
    "typeName": {
     "name": "ITree",
     "nameFull": "ITree<TItem, TId>"
    },
    "src": "uui-core/src/data/processing/views/tree/ITree.ts",
    "exported": true
   },
   "details": {
    "kind": 263,
    "typeValue": {
     "raw": "ITree<TItem, TId>",
     "print": [
      "interface ITree<TItem, TId> {",
      "    clearStructure(): ITree<TItem, TId>;",
      "    getRootIds(): TId[];",
      "    getRootItems(): TItem[];",
      "    getById(id: TId): TItem | typeof NOT_FOUND_RECORD;",
      "    getChildren(item: TItem): TItem[];",
      "    getChildrenByParentId(parentId: TId): TItem[];",
      "    getChildrenIdsByParentId(parentId: TId): TId[];",
      "    getParentIdsRecursive(id: TId): TId[];",
      "    getParents(id: TId): TItem[];",
      "    getPathById(id: TId): DataRowPathItem<TId, TItem>[];",
      "    getPathItem(item: TItem): DataRowPathItem<TId, TItem>;",
      "    getNodeInfo(id: TId): TreeNodeInfo;",
      "    isFlatList(): boolean;",
      "    patch(items: TItem[], isDeletedProp?: keyof TItem, comparator?: ItemsComparator<TItem>): ITree<TItem, TId>;",
      "    mergeItems(tree: ITree<TItem, TId>): ITree<TItem, TId>;",
      "    cascadeSelection(currentSelection: TId[], selectedId: TId | undefined, isSelected: boolean, options?: {",
      "        isSelectable?: (item: TItem) => boolean;",
      "        cascade?: CascadeSelection;",
      "    }): TId[];",
      "    load<TFilter>(options: LoadTreeOptions<TItem, TId, TFilter>, value: Readonly<DataSourceState>, withNestedChildren?: boolean): Promise<ITree<TItem, TId>>;",
      "    loadMissing<TFilter>(options: LoadTreeOptions<TItem, TId, TFilter>, value: Readonly<DataSourceState>): Promise<ITree<TItem, TId>>;",
      "    loadMissingIdsAndParents<TFilter>(options: LoadTreeOptions<TItem, TId, TFilter>, idsToLoad: TId[]): Promise<ITree<TItem, TId>>;",
      "    getTotalRecursiveCount(): number;",
      "    forEach(action: (item: TItem, id: TId, parentId: TId, stop: () => void) => void, options?: {",
      "        direction?: 'bottom-up' | 'top-down';",
      "        parentId?: TId;",
      "        includeParent?: boolean;",
      "    }): void;",
      "    forEachItem(action: (item: TItem, id: TId, parentId: TId) => void): void;",
      "    computeSubtotals<TSubtotals>(get: (item: TItem, hasChildren: boolean) => TSubtotals, add: (a: TSubtotals, b: TSubtotals) => TSubtotals): CompositeKeysMap<TId | undefined, TSubtotals> | Map<TId | undefined, TSubtotals>;",
      "    filter<TFilter>(options: ApplyFilterOptions<TItem, TId, TFilter>): ITree<TItem, TId>;",
      "    search<TFilter>(options: ApplySearchOptions<TItem, TId, TFilter>): ITree<TItem, TId>;",
      "    sort<TFilter>(options: ApplySortOptions<TItem, TId, TFilter>): ITree<TItem, TId>;",
      "}"
     ]
    },
    "props": [
     {
      "uid": 1,
      "name": "clearStructure",
      "typeValue": {
       "raw": "() => ITree<TItem, TId>"
      },
      "editor": {
       "type": "func"
      },
      "required": true
     },
     {
      "uid": 2,
      "name": "getRootIds",
      "typeValue": {
       "raw": "() => TId[]"
      },
      "editor": {
       "type": "func"
      },
      "required": true
     },
     {
      "uid": 3,
      "name": "getRootItems",
      "typeValue": {
       "raw": "() => TItem[]"
      },
      "editor": {
       "type": "func"
      },
      "required": true
     },
     {
      "uid": 4,
      "name": "getById",
      "typeValue": {
       "raw": "(id: TId) => TItem | typeof NOT_FOUND_RECORD"
      },
      "editor": {
       "type": "func"
      },
      "required": true
     },
     {
      "uid": 5,
      "name": "getChildren",
      "typeValue": {
       "raw": "(item: TItem) => TItem[]"
      },
      "editor": {
       "type": "func"
      },
      "required": true
     },
     {
      "uid": 6,
      "name": "getChildrenByParentId",
      "typeValue": {
       "raw": "(parentId: TId) => TItem[]"
      },
      "editor": {
       "type": "func"
      },
      "required": true
     },
     {
      "uid": 7,
      "name": "getChildrenIdsByParentId",
      "typeValue": {
       "raw": "(parentId: TId) => TId[]"
      },
      "editor": {
       "type": "func"
      },
      "required": true
     },
     {
      "uid": 8,
      "name": "getParentIdsRecursive",
      "typeValue": {
       "raw": "(id: TId) => TId[]"
      },
      "editor": {
       "type": "func"
      },
      "required": true
     },
     {
      "uid": 9,
      "name": "getParents",
      "typeValue": {
       "raw": "(id: TId) => TItem[]"
      },
      "editor": {
       "type": "func"
      },
      "required": true
     },
     {
      "uid": 10,
      "name": "getPathById",
      "typeValue": {
       "raw": "(id: TId) => DataRowPathItem<TId, TItem>[]"
      },
      "editor": {
       "type": "func"
      },
      "required": true
     },
     {
      "uid": 11,
      "name": "getPathItem",
      "typeValue": {
       "raw": "(item: TItem) => DataRowPathItem<TId, TItem>"
      },
      "editor": {
       "type": "func"
      },
      "required": true
     },
     {
      "uid": 12,
      "name": "getNodeInfo",
      "typeValue": {
       "raw": "(id: TId) => TreeNodeInfo"
      },
      "editor": {
       "type": "func"
      },
      "required": true
     },
     {
      "uid": 13,
      "name": "isFlatList",
      "typeValue": {
       "raw": "() => boolean"
      },
      "editor": {
       "type": "func"
      },
      "required": true
     },
     {
      "uid": 14,
      "name": "patch",
      "typeValue": {
       "raw": "(items: TItem[], isDeletedProp?: keyof TItem | undefined, comparator?: ItemsComparator<TItem> | undefined) => ITree<TItem, TId>"
      },
      "editor": {
       "type": "func"
      },
      "required": true
     },
     {
      "uid": 15,
      "name": "mergeItems",
      "typeValue": {
       "raw": "(tree: ITree<TItem, TId>) => ITree<TItem, TId>"
      },
      "editor": {
       "type": "func"
      },
      "required": true
     },
     {
      "uid": 16,
      "name": "cascadeSelection",
      "typeValue": {
       "raw": "(currentSelection: TId[], selectedId: TId | undefined, isSelected: boolean, options?: { isSelectable?: ((item: TItem) => boolean) | undefined; cascade?: CascadeSelection | undefined; } | undefined) => TId[]"
      },
      "editor": {
       "type": "func"
      },
      "required": true
     },
     {
      "uid": 17,
      "name": "load",
      "typeValue": {
       "raw": "<TFilter>(options: LoadTreeOptions<TItem, TId, TFilter>, value: Readonly<DataSourceState<Record<string, any>, any>>, withNestedChildren?: boolean | undefined) => Promise<ITree<TItem, TId>>"
      },
      "editor": {
       "type": "func"
      },
      "required": true
     },
     {
      "uid": 18,
      "name": "loadMissing",
      "typeValue": {
       "raw": "<TFilter>(options: LoadTreeOptions<TItem, TId, TFilter>, value: Readonly<DataSourceState<Record<string, any>, any>>) => Promise<ITree<TItem, TId>>"
      },
      "editor": {
       "type": "func"
      },
      "required": true
     },
     {
      "uid": 19,
      "name": "loadMissingIdsAndParents",
      "typeValue": {
       "raw": "<TFilter>(options: LoadTreeOptions<TItem, TId, TFilter>, idsToLoad: TId[]) => Promise<ITree<TItem, TId>>"
      },
      "editor": {
       "type": "func"
      },
      "required": true
     },
     {
      "uid": 20,
      "name": "getTotalRecursiveCount",
      "typeValue": {
       "raw": "() => number"
      },
      "editor": {
       "type": "func"
      },
      "required": true
     },
     {
      "uid": 21,
      "name": "forEach",
      "typeValue": {
       "raw": "(action: (item: TItem, id: TId, parentId: TId, stop: () => void) => void, options?: { direction?: 'bottom-up' | 'top-down' | undefined; parentId?: TId | undefined; includeParent?: boolean | undefined; } | undefined) => void"
      },
      "editor": {
       "type": "func"
      },
      "required": true
     },
     {
      "uid": 22,
      "name": "forEachItem",
      "typeValue": {
       "raw": "(action: (item: TItem, id: TId, parentId: TId) => void) => void"
      },
      "editor": {
       "type": "func"
      },
      "required": true
     },
     {
      "uid": 23,
      "name": "computeSubtotals",
      "typeValue": {
       "raw": "<TSubtotals>(get: (item: TItem, hasChildren: boolean) => TSubtotals, add: (a: TSubtotals, b: TSubtotals) => TSubtotals) => CompositeKeysMap<TId | undefined, TSubtotals> | Map<TId | undefined, TSubtotals>"
      },
      "editor": {
       "type": "func"
      },
      "required": true
     },
     {
      "uid": 24,
      "name": "filter",
      "typeValue": {
       "raw": "<TFilter>(options: ApplyFilterOptions<TItem, TId, TFilter>) => ITree<TItem, TId>"
      },
      "editor": {
       "type": "func"
      },
      "required": true
     },
     {
      "uid": 25,
      "name": "search",
      "typeValue": {
       "raw": "<TFilter>(options: ApplySearchOptions<TItem, TId, TFilter>) => ITree<TItem, TId>"
      },
      "editor": {
       "type": "func"
      },
      "required": true
     },
     {
      "uid": 26,
      "name": "sort",
      "typeValue": {
       "raw": "<TFilter>(options: ApplySortOptions<TItem, TId, TFilter>) => ITree<TItem, TId>"
      },
      "editor": {
       "type": "func"
      },
      "required": true
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui-core:IUserSettingsContext": {
   "summary": {
    "module": "@epam/uui-core",
    "typeName": {
     "name": "IUserSettingsContext",
     "nameFull": "IUserSettingsContext"
    },
    "src": "uui-core/src/types/contexts.ts",
    "comment": {
     "raw": [
      "Save data to the localStorage"
     ]
    },
    "exported": true
   },
   "details": {
    "kind": 263,
    "typeValue": {
     "raw": "IUserSettingsContext",
     "print": [
      "/** Save data to the localStorage */",
      "interface IUserSettingsContext {",
      "    /** Gets value by key from localStorage */",
      "    get<TValue>(key: any, initial?: TValue): TValue;",
      "    /** Sets value by key from localStorage */",
      "    set<TValue>(key: any, value: TValue): void;",
      "}"
     ]
    },
    "props": [
     {
      "uid": 1,
      "name": "get",
      "comment": {
       "raw": [
        "Gets value by key from localStorage"
       ]
      },
      "typeValue": {
       "raw": "<TValue>(key: any, initial?: TValue | undefined) => TValue"
      },
      "editor": {
       "type": "func"
      },
      "required": true
     },
     {
      "uid": 2,
      "name": "set",
      "comment": {
       "raw": [
        "Sets value by key from localStorage"
       ]
      },
      "typeValue": {
       "raw": "<TValue>(key: any, value: TValue) => void"
      },
      "editor": {
       "type": "func"
      },
      "required": true
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui-core:LabeledInputCoreProps": {
   "summary": {
    "module": "@epam/uui-core",
    "typeName": {
     "name": "LabeledInputCoreProps",
     "nameFull": "LabeledInputCoreProps"
    },
    "src": "uui-core/src/types/components/LabeledInput.tsx",
    "exported": true
   },
   "details": {
    "kind": 263,
    "typeValue": {
     "raw": "LabeledInputCoreProps",
     "print": [
      "interface LabeledInputCoreProps extends ICanBeInvalid, IHasCX, IHasLabel, IHasChildren, ICanBeRequired, IHasRawProps<React.HTMLAttributes<HTMLDivElement>>, IHasForwardedRef<HTMLDivElement> {",
      "    /** Position of the label, relative to the wrapped component (top of left) */",
      "    labelPosition?: 'top' | 'left';",
      "    /** Info hint text to show in tooltip */",
      "    info?: ReactNode;",
      "    /** Marks related field as optional */",
      "    isOptional?: boolean;",
      "    /** HTML 'for' tag to bind the label to a component.",
      "     * Can be used when component can't be wrapped by the LabeledInput, e.g. when form is layed out as table with labels and inputs placed into different columns",
      "     */",
      "    htmlFor?: string;",
      "    /** A value from LabeledInput children */",
      "    value?: any;",
      "    /** Maximum text length, in characters */",
      "    maxLength?: number;",
      "    /** Showing current text length, in characters and maxLength */",
      "    charCounter?: boolean;",
      "    /** Additional info positioned at the bottom of LabeledInput */",
      "    footnote?: ReactNode;",
      "    /** Additional info positioned to the right side of label */",
      "    sidenote?: ReactNode;",
      "}"
     ]
    },
    "props": [
     {
      "uid": 1,
      "name": "labelPosition",
      "comment": {
       "raw": [
        "Position of the label, relative to the wrapped component (top of left)"
       ]
      },
      "typeValue": {
       "raw": "'left' | 'top'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "left",
        "top"
       ]
      },
      "required": false
     },
     {
      "uid": 2,
      "name": "info",
      "comment": {
       "raw": [
        "Info hint text to show in tooltip"
       ]
      },
      "typeValue": {
       "raw": "null | string | number | boolean | React.ReactElement<any, string | React.JSXElementConstructor<any>> | React.ReactFragment | React.ReactPortal"
      },
      "typeValueRef": "@types/react:ReactNode",
      "required": false
     },
     {
      "uid": 3,
      "name": "isOptional",
      "comment": {
       "raw": [
        "Marks related field as optional"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "required": false
     },
     {
      "uid": 4,
      "name": "htmlFor",
      "comment": {
       "raw": [
        "HTML 'for' tag to bind the label to a component.",
        " Can be used when component can't be wrapped by the LabeledInput, e.g. when form is layed out as table with labels and inputs placed into different columns"
       ]
      },
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "required": false
     },
     {
      "uid": 5,
      "name": "value",
      "comment": {
       "raw": [
        "A value from LabeledInput children"
       ]
      },
      "typeValue": {
       "raw": "any"
      },
      "required": false
     },
     {
      "uid": 6,
      "name": "maxLength",
      "comment": {
       "raw": [
        "Maximum text length, in characters"
       ]
      },
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "required": false
     },
     {
      "uid": 7,
      "name": "charCounter",
      "comment": {
       "raw": [
        "Showing current text length, in characters and maxLength"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "required": false
     },
     {
      "uid": 8,
      "name": "footnote",
      "comment": {
       "raw": [
        "Additional info positioned at the bottom of LabeledInput"
       ]
      },
      "typeValue": {
       "raw": "null | string | number | boolean | React.ReactElement<any, string | React.JSXElementConstructor<any>> | React.ReactFragment | React.ReactPortal"
      },
      "typeValueRef": "@types/react:ReactNode",
      "required": false
     },
     {
      "uid": 9,
      "name": "sidenote",
      "comment": {
       "raw": [
        "Additional info positioned to the right side of label"
       ]
      },
      "typeValue": {
       "raw": "null | string | number | boolean | React.ReactElement<any, string | React.JSXElementConstructor<any>> | React.ReactFragment | React.ReactPortal"
      },
      "typeValueRef": "@types/react:ReactNode",
      "required": false
     },
     {
      "uid": 10,
      "name": "isInvalid",
      "comment": {
       "raw": [
        "True if component contains invalid input"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:ICanBeInvalid",
      "required": false
     },
     {
      "uid": 11,
      "name": "validationMessage",
      "comment": {
       "raw": [
        "Message describing why the value is invalid"
       ]
      },
      "typeValue": {
       "raw": "null | string | number | boolean | React.ReactElement<any, string | React.JSXElementConstructor<any>> | React.ReactFragment | React.ReactPortal"
      },
      "typeValueRef": "@types/react:ReactNode",
      "from": "@epam/uui-core:ICanBeInvalid",
      "required": false
     },
     {
      "uid": 12,
      "name": "validationProps",
      "comment": {
       "raw": [
        "If T is a complex value (object or array), this property contains validation states of inner items"
       ]
      },
      "typeValue": {
       "raw": "{ [key: string]: ICanBeInvalid; }"
      },
      "from": "@epam/uui-core:ICanBeInvalid",
      "required": false
     },
     {
      "uid": 13,
      "name": "cx",
      "comment": {
       "raw": [
        "CSS class(es) to put on component's root. See {@link https://github.com/JedWatson/classnames#usage} for details"
       ]
      },
      "typeValue": {
       "raw": "null | string | number | boolean | ClassDictionary | ClassArray"
      },
      "typeValueRef": "@epam/uui-core:ClassValue",
      "from": "@epam/uui-core:IHasCX",
      "required": false
     },
     {
      "uid": 14,
      "name": "label",
      "comment": {
       "raw": [
        "Label. Can be a string, or React.Elements. Certain components supports minimal markup (<b>,<i>,<a>) in captions."
       ]
      },
      "typeValue": {
       "raw": "any"
      },
      "from": "@epam/uui-core:IHasLabel",
      "required": false
     },
     {
      "uid": 15,
      "name": "children",
      "typeValue": {
       "raw": "null | string | number | boolean | React.ReactElement<any, string | React.JSXElementConstructor<any>> | React.ReactFragment | React.ReactPortal"
      },
      "typeValueRef": "@types/react:ReactNode",
      "from": "@epam/uui-core:IHasChildren",
      "required": false
     },
     {
      "uid": 16,
      "name": "isRequired",
      "comment": {
       "raw": [
        "Marks that component's value is required and shouldn't be empty"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:ICanBeRequired",
      "required": false
     },
     {
      "uid": 17,
      "name": "rawProps",
      "comment": {
       "raw": [
        "Any HTML attributes (native or 'data-') to put on the underlying component"
       ]
      },
      "typeValue": {
       "raw": "React.HTMLAttributes<HTMLDivElement> & Record<`data-${string}`, string>"
      },
      "from": "@epam/uui-core:IHasRawProps",
      "required": false
     },
     {
      "uid": 18,
      "name": "forwardedRef",
      "comment": {
       "raw": [
        "this ref is passed to the underlying component"
       ]
      },
      "typeValue": {
       "raw": "null | (instance: HTMLDivElement | null) => void | React.MutableRefObject<HTMLDivElement | null>"
      },
      "from": "@epam/uui-core:IHasForwardedRef",
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui-core:LayoutLayer": {
   "summary": {
    "module": "@epam/uui-core",
    "typeName": {
     "name": "LayoutLayer",
     "nameFull": "LayoutLayer"
    },
    "src": "uui-core/src/services/LayoutContext.ts",
    "exported": true
   },
   "details": {
    "kind": 263,
    "typeValue": {
     "raw": "LayoutLayer",
     "print": [
      "interface LayoutLayer {",
      "    id: number;",
      "    depth: number;",
      "    zIndex: number;",
      "}"
     ]
    },
    "props": [
     {
      "uid": 1,
      "name": "id",
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "required": true
     },
     {
      "uid": 2,
      "name": "depth",
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "required": true
     },
     {
      "uid": 3,
      "name": "zIndex",
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "required": true
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui-core:LazyDataSourceApi": {
   "summary": {
    "module": "@epam/uui-core",
    "typeName": {
     "name": "LazyDataSourceApi",
     "nameFull": "LazyDataSourceApi<TItem, TId, TFilter>"
    },
    "src": "uui-core/src/types/dataSources.ts",
    "comment": {
     "raw": [
      "Defines API to retrieve data for DataSources"
     ]
    },
    "exported": true
   },
   "details": {
    "kind": 264,
    "typeValue": {
     "raw": "LazyDataSourceApi<TItem, TId, TFilter>",
     "print": [
      "/** Defines API to retrieve data for DataSources */",
      "type LazyDataSourceApi<TItem, TId, TFilter> = (",
      "/** Defines input arguments for Lazy Data Source APIs */",
      "request: LazyDataSourceApiRequest<TItem, TId, TFilter>, ",
      "/** Defines the context of API request. */",
      "context?: LazyDataSourceApiRequestContext<TItem, TId>) => Promise<LazyDataSourceApiResponse<TItem>>;"
     ]
    }
   }
  },
  "@epam/uui-core:LazyDataSourceApiRequest": {
   "summary": {
    "module": "@epam/uui-core",
    "typeName": {
     "name": "LazyDataSourceApiRequest",
     "nameFull": "LazyDataSourceApiRequest<TItem, TId, TFilter>"
    },
    "src": "uui-core/src/types/dataSources.ts",
    "exported": true
   },
   "details": {
    "kind": 263,
    "typeValue": {
     "raw": "LazyDataSourceApiRequest<TItem, TId, TFilter>",
     "print": [
      "/** Defines input arguments for Lazy Data Source APIs */",
      "// eslint-disable-next-line @typescript-eslint/no-unused-vars",
      "interface LazyDataSourceApiRequest<TItem, TId = any, TFilter = {}> {",
      "    /**",
      "     * The filter object, by which data should be filtered.",
      "     * It is a merged result of filters from DataSourceState and LazyDataSourceProps.",
      "     */",
      "    filter?: TFilter;",
      "    /** Sorting options, by which data should be sorted. */",
      "    sorting?: SortingOption[];",
      "    /** The search string, by which data should be searched. */",
      "    search?: string;",
      "    /** Specifies a range of the rows to be retrieved. */",
      "    range?: LazyDataSourceApiRequestRange;",
      "    /** Page number for which data should be retrieved. */",
      "    page?: number;",
      "    /** Number of items at the page. */",
      "    pageSize?: number;",
      "    /**",
      "     * An array of item IDs to be retrieved from the API.",
      "     * Other request options like filter, search and others should be ignored when IDs are provided.",
      "     * Used for requesting specific items separately from the list.",
      "     */",
      "    ids?: TId[];",
      "}"
     ]
    },
    "props": [
     {
      "uid": 1,
      "name": "filter",
      "comment": {
       "raw": [
        "The filter object, by which data should be filtered.",
        " It is a merged result of filters from DataSourceState and LazyDataSourceProps."
       ]
      },
      "typeValue": {
       "raw": "TFilter"
      },
      "required": false
     },
     {
      "uid": 2,
      "name": "sorting",
      "comment": {
       "raw": [
        "Sorting options, by which data should be sorted."
       ]
      },
      "typeValue": {
       "raw": "SortingOption<any>[]"
      },
      "required": false
     },
     {
      "uid": 3,
      "name": "search",
      "comment": {
       "raw": [
        "The search string, by which data should be searched."
       ]
      },
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "required": false
     },
     {
      "uid": 4,
      "name": "range",
      "comment": {
       "raw": [
        "Specifies a range of the rows to be retrieved."
       ]
      },
      "typeValue": {
       "raw": "LazyDataSourceApiRequestRange"
      },
      "required": false
     },
     {
      "uid": 5,
      "name": "page",
      "comment": {
       "raw": [
        "Page number for which data should be retrieved."
       ]
      },
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "required": false
     },
     {
      "uid": 6,
      "name": "pageSize",
      "comment": {
       "raw": [
        "Number of items at the page."
       ]
      },
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "required": false
     },
     {
      "uid": 7,
      "name": "ids",
      "comment": {
       "raw": [
        "An array of item IDs to be retrieved from the API.",
        " Other request options like filter, search and others should be ignored when IDs are provided.",
        " Used for requesting specific items separately from the list."
       ]
      },
      "typeValue": {
       "raw": "TId[]"
      },
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui-core:LazyDataSourceApiRequestContext": {
   "summary": {
    "module": "@epam/uui-core",
    "typeName": {
     "name": "LazyDataSourceApiRequestContext",
     "nameFull": "LazyDataSourceApiRequestContext<TItem, TId>"
    },
    "src": "uui-core/src/types/dataSources.ts",
    "comment": {
     "raw": [
      "Defines the context of API request. E.g. parent if we require to retrieve sub-list of the tree"
     ]
    },
    "exported": true
   },
   "details": {
    "kind": 263,
    "typeValue": {
     "raw": "LazyDataSourceApiRequestContext<TItem, TId>",
     "print": [
      "/** Defines the context of API request. E.g. parent if we require to retrieve sub-list of the tree */",
      "interface LazyDataSourceApiRequestContext<TItem, TId> {",
      "    /**",
      "     * The ID of the parent item whose children are being requested.",
      "     * Used for lazy-loading data in tree lists.",
      "     */",
      "    parentId?: TId | null;",
      "    /** The parent entity whose children are being requested */",
      "    parent?: TItem | null;",
      "}"
     ]
    },
    "props": [
     {
      "uid": 1,
      "name": "parentId",
      "comment": {
       "raw": [
        "The ID of the parent item whose children are being requested.",
        " Used for lazy-loading data in tree lists."
       ]
      },
      "typeValue": {
       "raw": "null | TId"
      },
      "required": false
     },
     {
      "uid": 2,
      "name": "parent",
      "comment": {
       "raw": [
        "The parent entity whose children are being requested"
       ]
      },
      "typeValue": {
       "raw": "null | TItem"
      },
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui-core:LazyDataSourceApiRequestRange": {
   "summary": {
    "module": "@epam/uui-core",
    "typeName": {
     "name": "LazyDataSourceApiRequestRange",
     "nameFull": "LazyDataSourceApiRequestRange"
    },
    "src": "uui-core/src/types/dataSources.ts",
    "comment": {
     "raw": [
      "The range (from/count) of required rows for LazyDataSourceApiRequest"
     ]
    },
    "exported": true
   },
   "details": {
    "kind": 263,
    "typeValue": {
     "raw": "LazyDataSourceApiRequestRange",
     "print": [
      "// Lazy Data Source API",
      "/** The range (from/count) of required rows for LazyDataSourceApiRequest */",
      "interface LazyDataSourceApiRequestRange {",
      "    /** Element index to fetch from. */",
      "    from: number;",
      "    /** Count of elements to be retrieved. */",
      "    count?: number;",
      "}"
     ]
    },
    "props": [
     {
      "uid": 1,
      "name": "from",
      "comment": {
       "raw": [
        "Element index to fetch from."
       ]
      },
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "required": true
     },
     {
      "uid": 2,
      "name": "count",
      "comment": {
       "raw": [
        "Count of elements to be retrieved."
       ]
      },
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui-core:LazyDataSourceApiResponse": {
   "summary": {
    "module": "@epam/uui-core",
    "typeName": {
     "name": "LazyDataSourceApiResponse",
     "nameFull": "LazyDataSourceApiResponse<TItem>"
    },
    "src": "uui-core/src/types/dataSources.ts",
    "comment": {
     "raw": [
      "Defines Lazy Data Source APIs response shape"
     ]
    },
    "exported": true
   },
   "details": {
    "kind": 263,
    "typeValue": {
     "raw": "LazyDataSourceApiResponse<TItem>",
     "print": [
      "/** Defines Lazy Data Source APIs response shape */",
      "interface LazyDataSourceApiResponse<TItem> {",
      "    /** List of items which was requested via API */",
      "    items: TItem[];",
      "    /**",
      "     * API can set 'from' field if it wants to return more items than what was requested in request.range.",
      "     * This can be used to return all items at once (with from:0, count: totalCount), or align response to pages.",
      "     */",
      "    from?: number;",
      "    /**",
      "     * Total count of items which match current filter.",
      "     * If not specified, total count will be detected only when user scrolls to the end of the list.",
      "     */",
      "    count?: number;",
      "}"
     ]
    },
    "props": [
     {
      "uid": 1,
      "name": "items",
      "comment": {
       "raw": [
        "List of items which was requested via API"
       ]
      },
      "typeValue": {
       "raw": "TItem[]"
      },
      "required": true
     },
     {
      "uid": 2,
      "name": "from",
      "comment": {
       "raw": [
        "API can set 'from' field if it wants to return more items than what was requested in request.range.",
        " This can be used to return all items at once (with from:0, count: totalCount), or align response to pages."
       ]
      },
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "required": false
     },
     {
      "uid": 3,
      "name": "count",
      "comment": {
       "raw": [
        "Total count of items which match current filter.",
        " If not specified, total count will be detected only when user scrolls to the end of the list."
       ]
      },
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui-core:LazyDataSourceProps": {
   "summary": {
    "module": "@epam/uui-core",
    "typeName": {
     "name": "LazyDataSourceProps",
     "nameFull": "LazyDataSourceProps<TItem, TId, TFilter>"
    },
    "src": "uui-core/src/data/processing/LazyDataSource.tsx",
    "exported": true
   },
   "details": {
    "kind": 263,
    "typeValue": {
     "raw": "LazyDataSourceProps<TItem, TId, TFilter>",
     "print": [
      "interface LazyDataSourceProps<TItem, TId, TFilter> extends LazyListViewProps<TItem, TId, TFilter> {",
      "}"
     ]
    },
    "props": [
     {
      "uid": 1,
      "name": "api",
      "comment": {
       "raw": [
        "A function to retrieve the data, asynchronously.",
        " This function usually performs a REST API call.",
        " API is used to retrieve lists of items.",
        " It is expected to:",
        " - be able to handle paging (via from/count params)",
        " - be able to retrieve specific items by the list of their ids",
        " - be able to retrieve children by parents (when getChildCount is specified, and ctx.parentId is passed)"
       ]
      },
      "typeValue": {
       "raw": "LazyDataSourceApi<TItem, TId, TFilter>"
      },
      "typeValueRef": "@epam/uui-core:LazyDataSourceApi",
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:LazyListViewProps",
      "required": true
     },
     {
      "uid": 2,
      "name": "getChildCount",
      "comment": {
       "raw": [
        "Should return number of children of the item.",
        " If it returns > 0, the item is assumed to have children and to be foldable.",
        " Usually, this value should be returned from API, as a field of a parent, e.g. { id: 1, name: 'London', childCount: 12 }.",
        " In this case, you can implement getChildCount as (i) => i.childCount.",
        "",
        " If you can't get number of children via API, you can return a guess value (avg number of children for this type of entity).",
        " Note, that this can lead to more API calls, and increased load times in the 'parallel' fetch mode."
       ]
      },
      "typeValue": {
       "raw": "(item: TItem) => number"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:LazyListViewProps",
      "required": false
     },
     {
      "uid": 3,
      "name": "filter",
      "comment": {
       "raw": [
        "A filter to pass to API.",
        " Note, that the DataSourceState also has a filter fields. These two filters are merged before API calls.",
        " Use this prop if you need to apply some filter in any case.",
        " Prefer to use filter in the DataSourceState for end-user editable filters."
       ]
      },
      "typeValue": {
       "raw": "TFilter"
      },
      "from": "@epam/uui-core:LazyListViewProps",
      "required": false
     },
     {
      "uid": 4,
      "name": "fetchStrategy",
      "comment": {
       "raw": [
        "Defines how to fetch children:",
        " sequential (default) - fetch children for each parent one-by-one. Makes minimal over-querying, at cost of some speed.",
        " parallel - fetch children for several parents simultaneously. Can make a lot of over-querying for deep trees.",
        "      Recommended for 2 level trees (grouping), as it makes no over-querying in this case, and is faster than sequential strategy."
       ]
      },
      "typeValue": {
       "raw": "'sequential' | 'parallel'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "sequential",
        "parallel"
       ]
      },
      "from": "@epam/uui-core:LazyListViewProps",
      "required": false
     },
     {
      "uid": 5,
      "name": "flattenSearchResults",
      "comment": {
       "raw": [
        "Falls back to plain list from tree, if there's search.",
        " Default is true.",
        "",
        " If enabled, and search is active:",
        " - API will be called with parentId and parent undefined",
        " - getChildCount is ignored, all nodes are assumed to have no children",
        "",
        " See more here: https://github.com/epam/UUI/issues/8"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:LazyListViewProps",
      "required": false
     },
     {
      "uid": 6,
      "name": "legacyLoadDataBehavior",
      "comment": {
       "raw": [
        "This option is added for the purpose of supporting legacy behavior of fetching data",
        " on `getVisibleRows` and `getListProps`, not to break users' own implementation of dataSources.",
        " @default true"
       ],
       "tags": {
        "@default": true
       }
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:LazyListViewProps",
      "required": false
     },
     {
      "uid": 7,
      "name": "getId",
      "comment": {
       "raw": [
        "Should return unique ID of the TItem",
        " If omitted, we assume that every TItem has and unique id in its 'id' field.",
        " @param item An item to get ID of"
       ]
      },
      "typeValue": {
       "raw": "(item: TItem) => TId"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:BaseListViewProps",
      "required": false
     },
     {
      "uid": 8,
      "name": "complexIds",
      "comment": {
       "raw": [
        "Set to true, if you use IDs which can't act as javascript Map key (objects or arrays).",
        " In this case, IDs will be internally JSON.stringify-ed to be used as Maps keys."
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:BaseListViewProps",
      "required": false
     },
     {
      "uid": 9,
      "name": "getParentId",
      "comment": {
       "raw": [
        "Should return ID of the Item's parent. Usually it's i => i.parentId.",
        " If specified, Data Source will build items hierarchy.",
        "",
        " Also, it is used by LazyDataSource to pre-fetch missing parents of loaded items. This is required in following cases:",
        " - when a child item is pre-selected, but not yet loaded at start. We need to load it's parent chain",
        "   to highlight parents with selected children",
        " - in flattenSearch mode, we usually want to display a path to each item (e.g. Canada/Ontario/Paris),",
        "   We need to load parents with a separate call (if backend doesn't pre-fetch them)"
       ]
      },
      "typeValue": {
       "raw": "(item: TItem) => TId | undefined"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:BaseListViewProps",
      "required": false
     },
     {
      "uid": 10,
      "name": "rowOptions",
      "comment": {
       "raw": [
        "Specifies if rows are selectable, checkable, draggable, clickable, and more.",
        " See DataRowOptions for more details.",
        " If options depends on the item itself, use getRowOptions.",
        " Specifying both rowOptions and getRowOptions might help to render better loading skeletons: we use only rowOptions in this case, as we haven't loaded an item yet.",
        " Make sure all callbacks are properly memoized, as changing them will trigger re-renders or row, which would impact performance",
        " @param item An item to get options for"
       ]
      },
      "typeValue": {
       "raw": "DataRowOptions<TItem, TId>"
      },
      "from": "@epam/uui-core:BaseListViewProps",
      "required": false
     },
     {
      "uid": 11,
      "name": "getRowOptions",
      "comment": {
       "raw": [
        "For each row, specify if row is selectable, editable, checkable, draggable, clickable, have its own set of columns, and more.",
        " To make rows editable, pass IEditable interface to each row. This works the same way as for other editable components.",
        " See DataRowOptions for more details.",
        " If both getRowOptions and rowOptions specified, we'll use getRowOptions for loaded rows, and rowOptions only for loading rows.",
        " Make sure all callbacks are properly memoized, as changing them will trigger re-renders or row, which would impact performance",
        " @param item An item to get options for"
       ]
      },
      "typeValue": {
       "raw": "(item: TItem, index: number) => DataRowOptions<TItem, TId>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:BaseListViewProps",
      "required": false
     },
     {
      "uid": 12,
      "name": "isFoldedByDefault",
      "comment": {
       "raw": [
        "Can be specified to unfold all or some items at start.",
        " If not specified, all rows would be folded."
       ]
      },
      "typeValue": {
       "raw": "(item: TItem) => boolean"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:BaseListViewProps",
      "required": false
     },
     {
      "uid": 13,
      "name": "cascadeSelection",
      "comment": {
       "raw": [
        "Controls how the selection (checking items) of a parent node affects the selection of its all children, and vice versa.",
        " - false: All nodes are selected independently (default).",
        " - true or 'explicit': Selecting a parent node explicitly selects all its children. Unchecking the last parent's child unchecks its parent.",
        " - 'implicit': Selecting a parent node means that all children are considered checked.",
        "   The user sees all these nodes as checked on the UI, but only the selected parent is visible in the PickerInput tags, and only the checked",
        "   parent is present in the Picker's value or DataSourceState.checked array. When the user unchecks the first child of such a parent,",
        "   its parents become unchecked and all children but the unchecked one become checked, making children's selection explicit. If the last",
        "   unchecked child gets checked, all children from the checked are removed, returning to the implicit state when only the parent is checked."
       ]
      },
      "typeValue": {
       "raw": "boolean | 'implicit' | 'explicit'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        false,
        true,
        "implicit",
        "explicit"
       ]
      },
      "from": "@epam/uui-core:BaseListViewProps",
      "required": false
     },
     {
      "uid": 14,
      "name": "selectAll",
      "comment": {
       "raw": [
        "Enables or disables \"select all\" checkbox. Default is true."
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:BaseListViewProps",
      "required": false
     },
     {
      "uid": 15,
      "name": "backgroundReload",
      "comment": {
       "raw": [
        "Enables background reloading of data on search/sort/filter/reload, which turns off the rows placeholders displaying while data loading.",
        " During data reloading, previous data is displayed. To prevent any interaction with visible not actual rows, a blocker/spinner should be displayed.",
        " In UUI components, such as `PickerInput`, `PickerList`, `PickerModal` and `DataTable`, blockers are added.",
        " It is required to add blockers/spinners to the components, built on your own.",
        " If reloading is started, `view.getListProps` returns `isReloading` flag, set to `true`."
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:BaseListViewProps",
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui-core:LazyListViewProps": {
   "summary": {
    "module": "@epam/uui-core",
    "typeName": {
     "name": "LazyListViewProps",
     "nameFull": "LazyListViewProps<TItem, TId, TFilter>"
    },
    "src": "uui-core/src/data/processing/views/LazyListView.ts",
    "exported": true
   },
   "details": {
    "kind": 263,
    "typeValue": {
     "raw": "LazyListViewProps<TItem, TId, TFilter>",
     "print": [
      "interface LazyListViewProps<TItem, TId, TFilter> extends BaseListViewProps<TItem, TId, TFilter> {",
      "    /**",
      "     * A function to retrieve the data, asynchronously.",
      "     * This function usually performs a REST API call.",
      "     * API is used to retrieve lists of items.",
      "     * It is expected to:",
      "     * - be able to handle paging (via from/count params)",
      "     * - be able to retrieve specific items by the list of their ids",
      "     * - be able to retrieve children by parents (when getChildCount is specified, and ctx.parentId is passed)",
      "     */",
      "    api: LazyDataSourceApi<TItem, TId, TFilter>;",
      "    /**",
      "     * Should return number of children of the item.",
      "     * If it returns > 0, the item is assumed to have children and to be foldable.",
      "     * Usually, this value should be returned from API, as a field of a parent, e.g. { id: 1, name: 'London', childCount: 12 }.",
      "     * In this case, you can implement getChildCount as (i) => i.childCount.",
      "     *",
      "     * If you can't get number of children via API, you can return a guess value (avg number of children for this type of entity).",
      "     * Note, that this can lead to more API calls, and increased load times in the 'parallel' fetch mode.",
      "     */",
      "    getChildCount?(item: TItem): number;",
      "    /**",
      "     * A filter to pass to API.",
      "     * Note, that the DataSourceState also has a filter fields. These two filters are merged before API calls.",
      "     * Use this prop if you need to apply some filter in any case.",
      "     * Prefer to use filter in the DataSourceState for end-user editable filters.",
      "     */",
      "    filter?: TFilter;",
      "    /**",
      "     * Defines how to fetch children:",
      "     * sequential (default) - fetch children for each parent one-by-one. Makes minimal over-querying, at cost of some speed.",
      "     * parallel - fetch children for several parents simultaneously. Can make a lot of over-querying for deep trees.",
      "     *      Recommended for 2 level trees (grouping), as it makes no over-querying in this case, and is faster than sequential strategy.",
      "     */",
      "    fetchStrategy?: 'sequential' | 'parallel';",
      "    /**",
      "     * Falls back to plain list from tree, if there's search.",
      "     * Default is true.",
      "     *",
      "     * If enabled, and search is active:",
      "     * - API will be called with parentId and parent undefined",
      "     * - getChildCount is ignored, all nodes are assumed to have no children",
      "     *",
      "     * See more here: https://github.com/epam/UUI/issues/8",
      "     */",
      "    flattenSearchResults?: boolean;",
      "    /**",
      "     * This option is added for the purpose of supporting legacy behavior of fetching data",
      "     * on `getVisibleRows` and `getListProps`, not to break users' own implementation of dataSources.",
      "     * @default true",
      "     */",
      "    legacyLoadDataBehavior?: boolean;",
      "}"
     ]
    },
    "props": [
     {
      "uid": 1,
      "name": "api",
      "comment": {
       "raw": [
        "A function to retrieve the data, asynchronously.",
        " This function usually performs a REST API call.",
        " API is used to retrieve lists of items.",
        " It is expected to:",
        " - be able to handle paging (via from/count params)",
        " - be able to retrieve specific items by the list of their ids",
        " - be able to retrieve children by parents (when getChildCount is specified, and ctx.parentId is passed)"
       ]
      },
      "typeValue": {
       "raw": "LazyDataSourceApi<TItem, TId, TFilter>"
      },
      "typeValueRef": "@epam/uui-core:LazyDataSourceApi",
      "editor": {
       "type": "func"
      },
      "required": true
     },
     {
      "uid": 2,
      "name": "getChildCount",
      "comment": {
       "raw": [
        "Should return number of children of the item.",
        " If it returns > 0, the item is assumed to have children and to be foldable.",
        " Usually, this value should be returned from API, as a field of a parent, e.g. { id: 1, name: 'London', childCount: 12 }.",
        " In this case, you can implement getChildCount as (i) => i.childCount.",
        "",
        " If you can't get number of children via API, you can return a guess value (avg number of children for this type of entity).",
        " Note, that this can lead to more API calls, and increased load times in the 'parallel' fetch mode."
       ]
      },
      "typeValue": {
       "raw": "(item: TItem) => number"
      },
      "editor": {
       "type": "func"
      },
      "required": false
     },
     {
      "uid": 3,
      "name": "filter",
      "comment": {
       "raw": [
        "A filter to pass to API.",
        " Note, that the DataSourceState also has a filter fields. These two filters are merged before API calls.",
        " Use this prop if you need to apply some filter in any case.",
        " Prefer to use filter in the DataSourceState for end-user editable filters."
       ]
      },
      "typeValue": {
       "raw": "TFilter"
      },
      "required": false
     },
     {
      "uid": 4,
      "name": "fetchStrategy",
      "comment": {
       "raw": [
        "Defines how to fetch children:",
        " sequential (default) - fetch children for each parent one-by-one. Makes minimal over-querying, at cost of some speed.",
        " parallel - fetch children for several parents simultaneously. Can make a lot of over-querying for deep trees.",
        "      Recommended for 2 level trees (grouping), as it makes no over-querying in this case, and is faster than sequential strategy."
       ]
      },
      "typeValue": {
       "raw": "'sequential' | 'parallel'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "sequential",
        "parallel"
       ]
      },
      "required": false
     },
     {
      "uid": 5,
      "name": "flattenSearchResults",
      "comment": {
       "raw": [
        "Falls back to plain list from tree, if there's search.",
        " Default is true.",
        "",
        " If enabled, and search is active:",
        " - API will be called with parentId and parent undefined",
        " - getChildCount is ignored, all nodes are assumed to have no children",
        "",
        " See more here: https://github.com/epam/UUI/issues/8"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "required": false
     },
     {
      "uid": 6,
      "name": "legacyLoadDataBehavior",
      "comment": {
       "raw": [
        "This option is added for the purpose of supporting legacy behavior of fetching data",
        " on `getVisibleRows` and `getListProps`, not to break users' own implementation of dataSources.",
        " @default true"
       ],
       "tags": {
        "@default": true
       }
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "required": false
     },
     {
      "uid": 7,
      "name": "getId",
      "comment": {
       "raw": [
        "Should return unique ID of the TItem",
        " If omitted, we assume that every TItem has and unique id in its 'id' field.",
        " @param item An item to get ID of"
       ]
      },
      "typeValue": {
       "raw": "(item: TItem) => TId"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:BaseListViewProps",
      "required": false
     },
     {
      "uid": 8,
      "name": "complexIds",
      "comment": {
       "raw": [
        "Set to true, if you use IDs which can't act as javascript Map key (objects or arrays).",
        " In this case, IDs will be internally JSON.stringify-ed to be used as Maps keys."
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:BaseListViewProps",
      "required": false
     },
     {
      "uid": 9,
      "name": "getParentId",
      "comment": {
       "raw": [
        "Should return ID of the Item's parent. Usually it's i => i.parentId.",
        " If specified, Data Source will build items hierarchy.",
        "",
        " Also, it is used by LazyDataSource to pre-fetch missing parents of loaded items. This is required in following cases:",
        " - when a child item is pre-selected, but not yet loaded at start. We need to load it's parent chain",
        "   to highlight parents with selected children",
        " - in flattenSearch mode, we usually want to display a path to each item (e.g. Canada/Ontario/Paris),",
        "   We need to load parents with a separate call (if backend doesn't pre-fetch them)"
       ]
      },
      "typeValue": {
       "raw": "(item: TItem) => TId | undefined"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:BaseListViewProps",
      "required": false
     },
     {
      "uid": 10,
      "name": "rowOptions",
      "comment": {
       "raw": [
        "Specifies if rows are selectable, checkable, draggable, clickable, and more.",
        " See DataRowOptions for more details.",
        " If options depends on the item itself, use getRowOptions.",
        " Specifying both rowOptions and getRowOptions might help to render better loading skeletons: we use only rowOptions in this case, as we haven't loaded an item yet.",
        " Make sure all callbacks are properly memoized, as changing them will trigger re-renders or row, which would impact performance",
        " @param item An item to get options for"
       ]
      },
      "typeValue": {
       "raw": "DataRowOptions<TItem, TId>"
      },
      "from": "@epam/uui-core:BaseListViewProps",
      "required": false
     },
     {
      "uid": 11,
      "name": "getRowOptions",
      "comment": {
       "raw": [
        "For each row, specify if row is selectable, editable, checkable, draggable, clickable, have its own set of columns, and more.",
        " To make rows editable, pass IEditable interface to each row. This works the same way as for other editable components.",
        " See DataRowOptions for more details.",
        " If both getRowOptions and rowOptions specified, we'll use getRowOptions for loaded rows, and rowOptions only for loading rows.",
        " Make sure all callbacks are properly memoized, as changing them will trigger re-renders or row, which would impact performance",
        " @param item An item to get options for"
       ]
      },
      "typeValue": {
       "raw": "(item: TItem, index: number) => DataRowOptions<TItem, TId>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:BaseListViewProps",
      "required": false
     },
     {
      "uid": 12,
      "name": "isFoldedByDefault",
      "comment": {
       "raw": [
        "Can be specified to unfold all or some items at start.",
        " If not specified, all rows would be folded."
       ]
      },
      "typeValue": {
       "raw": "(item: TItem) => boolean"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:BaseListViewProps",
      "required": false
     },
     {
      "uid": 13,
      "name": "cascadeSelection",
      "comment": {
       "raw": [
        "Controls how the selection (checking items) of a parent node affects the selection of its all children, and vice versa.",
        " - false: All nodes are selected independently (default).",
        " - true or 'explicit': Selecting a parent node explicitly selects all its children. Unchecking the last parent's child unchecks its parent.",
        " - 'implicit': Selecting a parent node means that all children are considered checked.",
        "   The user sees all these nodes as checked on the UI, but only the selected parent is visible in the PickerInput tags, and only the checked",
        "   parent is present in the Picker's value or DataSourceState.checked array. When the user unchecks the first child of such a parent,",
        "   its parents become unchecked and all children but the unchecked one become checked, making children's selection explicit. If the last",
        "   unchecked child gets checked, all children from the checked are removed, returning to the implicit state when only the parent is checked."
       ]
      },
      "typeValue": {
       "raw": "boolean | 'implicit' | 'explicit'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        false,
        true,
        "implicit",
        "explicit"
       ]
      },
      "from": "@epam/uui-core:BaseListViewProps",
      "required": false
     },
     {
      "uid": 14,
      "name": "selectAll",
      "comment": {
       "raw": [
        "Enables or disables \"select all\" checkbox. Default is true."
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:BaseListViewProps",
      "required": false
     },
     {
      "uid": 15,
      "name": "backgroundReload",
      "comment": {
       "raw": [
        "Enables background reloading of data on search/sort/filter/reload, which turns off the rows placeholders displaying while data loading.",
        " During data reloading, previous data is displayed. To prevent any interaction with visible not actual rows, a blocker/spinner should be displayed.",
        " In UUI components, such as `PickerInput`, `PickerList`, `PickerModal` and `DataTable`, blockers are added.",
        " It is required to add blockers/spinners to the components, built on your own.",
        " If reloading is started, `view.getListProps` returns `isReloading` flag, set to `true`."
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:BaseListViewProps",
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui-core:LazyLoadedMapLoadCallback": {
   "summary": {
    "module": "@epam/uui-core",
    "typeName": {
     "name": "LazyLoadedMapLoadCallback",
     "nameFull": "LazyLoadedMapLoadCallback<TKey, TValue>"
    },
    "src": "uui-core/src/helpers/LazyLoadedMap.ts",
    "comment": {
     "raw": [
      "An callback to pass to LazyLoadedMap constructor"
     ]
    },
    "exported": true
   },
   "details": {
    "kind": 264,
    "typeValue": {
     "raw": "LazyLoadedMapLoadCallback<TKey, TValue>",
     "print": [
      "/**",
      " * An callback to pass to LazyLoadedMap constructor",
      " */",
      "type LazyLoadedMapLoadCallback<TKey, TValue> = (pending: TKey[]) => Promise<[",
      "    TKey,",
      "    TValue",
      "][]>;"
     ]
    }
   }
  },
  "@epam/uui-core:Link": {
   "summary": {
    "module": "@epam/uui-core",
    "typeName": {
     "name": "Link",
     "nameFull": "Link"
    },
    "src": "uui-core/src/types/objects.ts",
    "comment": {
     "raw": [
      "Defines location within SPA application"
     ]
    },
    "exported": true
   },
   "details": {
    "kind": 263,
    "typeValue": {
     "raw": "Link",
     "print": [
      "/** Defines location within SPA application */",
      "interface Link {",
      "    pathname: string;",
      "    query?: any;",
      "    search?: string;",
      "    key?: string;",
      "    hash?: string;",
      "    state?: any;",
      "}"
     ]
    },
    "props": [
     {
      "uid": 1,
      "name": "pathname",
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "required": true
     },
     {
      "uid": 2,
      "name": "query",
      "typeValue": {
       "raw": "any"
      },
      "required": false
     },
     {
      "uid": 3,
      "name": "search",
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "required": false
     },
     {
      "uid": 4,
      "name": "key",
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "required": false
     },
     {
      "uid": 5,
      "name": "hash",
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "required": false
     },
     {
      "uid": 6,
      "name": "state",
      "typeValue": {
       "raw": "any"
      },
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui-core:ListApiResponse": {
   "summary": {
    "module": "@epam/uui-core",
    "typeName": {
     "name": "ListApiResponse",
     "nameFull": "ListApiResponse<TItem>"
    },
    "src": "uui-core/src/data/processing/ListApiCache.tsx",
    "exported": true
   },
   "details": {
    "kind": 263,
    "typeValue": {
     "raw": "ListApiResponse<TItem>",
     "print": [
      "interface ListApiResponse<TItem> {",
      "    /** Items according to the request. For items that are not fetched yet, null will be returned. */",
      "    items: TItem[];",
      "}"
     ]
    },
    "props": [
     {
      "uid": 1,
      "name": "items",
      "comment": {
       "raw": [
        "Items according to the request. For items that are not fetched yet, null will be returned."
       ]
      },
      "typeValue": {
       "raw": "TItem[]"
      },
      "required": true
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui-core:ListApiSettings": {
   "summary": {
    "module": "@epam/uui-core",
    "typeName": {
     "name": "ListApiSettings",
     "nameFull": "ListApiSettings<TItem, TId, TFilter>"
    },
    "src": "uui-core/src/data/processing/ListApiCache.tsx",
    "exported": true
   },
   "details": {
    "kind": 263,
    "typeValue": {
     "raw": "ListApiSettings<TItem, TId, TFilter>",
     "print": [
      "interface ListApiSettings<TItem, TId, TFilter> {",
      "    /** Lazy List API used to fetch items */",
      "    api: LazyDataSourceApi<TItem, TId, TFilter>;",
      "    /** Get ID from an item. Id is expected to be value-type, i.e. can be used as Map's key */",
      "    getId: (item: TItem) => TId;",
      "    /** Will be called after new data is fetched into the list */",
      "    onUpdate?: () => void;",
      "}"
     ]
    },
    "props": [
     {
      "uid": 1,
      "name": "api",
      "comment": {
       "raw": [
        "Lazy List API used to fetch items"
       ]
      },
      "typeValue": {
       "raw": "LazyDataSourceApi<TItem, TId, TFilter>"
      },
      "typeValueRef": "@epam/uui-core:LazyDataSourceApi",
      "editor": {
       "type": "func"
      },
      "required": true
     },
     {
      "uid": 2,
      "name": "getId",
      "comment": {
       "raw": [
        "Get ID from an item. Id is expected to be value-type, i.e. can be used as Map's key"
       ]
      },
      "typeValue": {
       "raw": "(item: TItem) => TId"
      },
      "editor": {
       "type": "func"
      },
      "required": true
     },
     {
      "uid": 3,
      "name": "onUpdate",
      "comment": {
       "raw": [
        "Will be called after new data is fetched into the list"
       ]
      },
      "typeValue": {
       "raw": "() => void"
      },
      "editor": {
       "type": "func"
      },
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui-core:LoadingStatus": {
   "summary": {
    "module": "@epam/uui-core",
    "typeName": {
     "name": "LoadingStatus",
     "nameFull": "LoadingStatus"
    },
    "src": "uui-core/src/helpers/LazyLoadedMap.ts",
    "exported": true
   },
   "details": {
    "kind": 264,
    "typeValue": {
     "raw": "typeof UNKNOWN | typeof LOADING | typeof PENDING | typeof LOADED | typeof FAILED",
     "print": [
      "type LoadingStatus = typeof UNKNOWN | typeof LOADING | typeof PENDING | typeof LOADED | typeof FAILED;"
     ]
    }
   }
  },
  "@epam/uui-core:LoadTreeOptions": {
   "summary": {
    "module": "@epam/uui-core",
    "typeName": {
     "name": "LoadTreeOptions",
     "nameFull": "LoadTreeOptions<TItem, TId, TFilter>"
    },
    "src": "uui-core/src/data/processing/views/tree/ITree.ts",
    "exported": true
   },
   "details": {
    "kind": 263,
    "typeValue": {
     "raw": "LoadTreeOptions<TItem, TId, TFilter>",
     "print": [
      "interface LoadTreeOptions<TItem, TId, TFilter> extends Pick<LazyListViewProps<TItem, TId, TFilter>, 'api' | 'getChildCount' | 'filter' | 'fetchStrategy' | 'flattenSearchResults'> {",
      "    loadAllChildren?(id: TId): boolean;",
      "    isLoadStrict?: boolean;",
      "    isFolded?: (item: TItem) => boolean;",
      "}"
     ]
    },
    "props": [
     {
      "uid": 1,
      "name": "loadAllChildren",
      "typeValue": {
       "raw": "(id: TId) => boolean"
      },
      "editor": {
       "type": "func"
      },
      "required": false
     },
     {
      "uid": 2,
      "name": "isLoadStrict",
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "required": false
     },
     {
      "uid": 3,
      "name": "isFolded",
      "typeValue": {
       "raw": "(item: TItem) => boolean"
      },
      "editor": {
       "type": "func"
      },
      "required": false
     },
     {
      "uid": 4,
      "name": "filter",
      "comment": {
       "raw": [
        "A filter to pass to API.",
        " Note, that the DataSourceState also has a filter fields. These two filters are merged before API calls.",
        " Use this prop if you need to apply some filter in any case.",
        " Prefer to use filter in the DataSourceState for end-user editable filters."
       ]
      },
      "typeValue": {
       "raw": "TFilter"
      },
      "from": "@epam/uui-core:LazyListViewProps",
      "required": false
     },
     {
      "uid": 5,
      "name": "api",
      "comment": {
       "raw": [
        "A function to retrieve the data, asynchronously.",
        " This function usually performs a REST API call.",
        " API is used to retrieve lists of items.",
        " It is expected to:",
        " - be able to handle paging (via from/count params)",
        " - be able to retrieve specific items by the list of their ids",
        " - be able to retrieve children by parents (when getChildCount is specified, and ctx.parentId is passed)"
       ]
      },
      "typeValue": {
       "raw": "LazyDataSourceApi<TItem, TId, TFilter>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:LazyListViewProps",
      "required": true
     },
     {
      "uid": 6,
      "name": "getChildCount",
      "comment": {
       "raw": [
        "Should return number of children of the item.",
        " If it returns > 0, the item is assumed to have children and to be foldable.",
        " Usually, this value should be returned from API, as a field of a parent, e.g. { id: 1, name: 'London', childCount: 12 }.",
        " In this case, you can implement getChildCount as (i) => i.childCount.",
        "",
        " If you can't get number of children via API, you can return a guess value (avg number of children for this type of entity).",
        " Note, that this can lead to more API calls, and increased load times in the 'parallel' fetch mode."
       ]
      },
      "typeValue": {
       "raw": "(item: TItem) => number"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:LazyListViewProps",
      "required": false
     },
     {
      "uid": 7,
      "name": "fetchStrategy",
      "comment": {
       "raw": [
        "Defines how to fetch children:",
        " sequential (default) - fetch children for each parent one-by-one. Makes minimal over-querying, at cost of some speed.",
        " parallel - fetch children for several parents simultaneously. Can make a lot of over-querying for deep trees.",
        "      Recommended for 2 level trees (grouping), as it makes no over-querying in this case, and is faster than sequential strategy."
       ]
      },
      "typeValue": {
       "raw": "'sequential' | 'parallel'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "sequential",
        "parallel"
       ]
      },
      "from": "@epam/uui-core:LazyListViewProps",
      "required": false
     },
     {
      "uid": 8,
      "name": "flattenSearchResults",
      "comment": {
       "raw": [
        "Falls back to plain list from tree, if there's search.",
        " Default is true.",
        "",
        " If enabled, and search is active:",
        " - API will be called with parentId and parent undefined",
        " - getChildCount is ignored, all nodes are assumed to have no children",
        "",
        " See more here: https://github.com/epam/UUI/issues/8"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:LazyListViewProps",
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui-core:Metadata": {
   "summary": {
    "module": "@epam/uui-core",
    "typeName": {
     "name": "Metadata",
     "nameFull": "Metadata<T>"
    },
    "src": "uui-core/src/types/validation.ts",
    "exported": true
   },
   "details": {
    "kind": 263,
    "typeValue": {
     "raw": "Metadata<T>",
     "print": [
      "interface Metadata<T> extends IDisableable, ICanBeReadonly, ICanBeRequired {",
      "    /** Metadata for the nested fields */",
      "    props?: {",
      "        [P in keyof T]?: Metadata<T[P]>;",
      "    };",
      "    /**",
      "     * Metadata for all fields of current level of object.",
      "     * Usually used for consistent validation of arrays.",
      "     */",
      "    all?: Metadata<ElementType<T>>;",
      "    /** Defines minimal value to pass the validation */",
      "    minValue?: number;",
      "    /** Defines maximal value to pass the validation */",
      "    maxValue?: number;",
      "    /** Defines maximal length of the string to pass the validation */",
      "    maxLength?: number;",
      "    /** Array of your custom validators.",
      "     * Validator is a pure function that accept value and should return error message if this field is invalid.",
      "     * If validators provided, all other metadata options(e.g. isRequired, maxLength) will be ignored.",
      "     * */",
      "    validators?: CustomValidator<T>[];",
      "}"
     ]
    },
    "props": [
     {
      "uid": 1,
      "name": "props",
      "comment": {
       "raw": [
        "Metadata for the nested fields"
       ]
      },
      "typeValue": {
       "raw": "{ [P in keyof T]?: Metadata<T[P]> | undefined; }"
      },
      "required": false
     },
     {
      "uid": 2,
      "name": "all",
      "comment": {
       "raw": [
        "Metadata for all fields of current level of object.",
        " Usually used for consistent validation of arrays."
       ]
      },
      "typeValue": {
       "raw": "Metadata<ElementType<T>>"
      },
      "required": false
     },
     {
      "uid": 3,
      "name": "minValue",
      "comment": {
       "raw": [
        "Defines minimal value to pass the validation"
       ]
      },
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "required": false
     },
     {
      "uid": 4,
      "name": "maxValue",
      "comment": {
       "raw": [
        "Defines maximal value to pass the validation"
       ]
      },
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "required": false
     },
     {
      "uid": 5,
      "name": "maxLength",
      "comment": {
       "raw": [
        "Defines maximal length of the string to pass the validation"
       ]
      },
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "required": false
     },
     {
      "uid": 6,
      "name": "validators",
      "comment": {
       "raw": [
        "Array of your custom validators.",
        " Validator is a pure function that accept value and should return error message if this field is invalid.",
        " If validators provided, all other metadata options(e.g. isRequired, maxLength) will be ignored."
       ]
      },
      "typeValue": {
       "raw": "CustomValidator<T>[]"
      },
      "required": false
     },
     {
      "uid": 7,
      "name": "isDisabled",
      "comment": {
       "raw": [
        "Disable editing, and visually de-emphasize value of the component"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:IDisableable",
      "required": false
     },
     {
      "uid": 8,
      "name": "isReadonly",
      "comment": {
       "raw": [
        "Disable editing. Unlike isDisabled, keep component's value readable."
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:ICanBeReadonly",
      "required": false
     },
     {
      "uid": 9,
      "name": "isRequired",
      "comment": {
       "raw": [
        "Marks that component's value is required and shouldn't be empty"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:ICanBeRequired",
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui-core:ModalBlockerProps": {
   "summary": {
    "module": "@epam/uui-core",
    "typeName": {
     "name": "ModalBlockerProps",
     "nameFull": "ModalBlockerProps"
    },
    "src": "uui-core/src/types/components/Modals.ts",
    "exported": true
   },
   "details": {
    "kind": 263,
    "typeValue": {
     "raw": "ModalBlockerProps",
     "print": [
      "interface ModalBlockerProps extends IModal<any>, IHasCX, IHasChildren, IHasRawProps<React.HTMLAttributes<HTMLDivElement>>, IHasForwardedRef<HTMLDivElement> {",
      "    disableFocusLock?: boolean;",
      "    disableCloseByEsc?: boolean;",
      "    disallowClickOutside?: boolean;",
      "}"
     ]
    },
    "props": [
     {
      "uid": 1,
      "name": "disableFocusLock",
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "required": false
     },
     {
      "uid": 2,
      "name": "disableCloseByEsc",
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "required": false
     },
     {
      "uid": 3,
      "name": "disallowClickOutside",
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "required": false
     },
     {
      "uid": 4,
      "name": "isActive",
      "comment": {
       "raw": [
        "Indicates whether the modal is currently displayed"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:IModal",
      "required": false
     },
     {
      "uid": 5,
      "name": "key",
      "comment": {
       "raw": [
        "Unique key of the modal"
       ]
      },
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "from": "@epam/uui-core:IModal",
      "required": true
     },
     {
      "uid": 6,
      "name": "zIndex",
      "comment": {
       "raw": [
        "Modal zIndex value. Calculated via LayoutContext."
       ]
      },
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "from": "@epam/uui-core:IModal",
      "required": true
     },
     {
      "uid": 7,
      "name": "success",
      "comment": {
       "raw": [
        "Call to successfully close the modal. It's resolves `modalContext.show()` promise with provided value."
       ]
      },
      "typeValue": {
       "raw": "(result: any) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IModal",
      "required": true
     },
     {
      "uid": 8,
      "name": "abort",
      "comment": {
       "raw": [
        "Call to close the modal with abort action. It's rejects `modalContext.show()` promise with provided value."
       ]
      },
      "typeValue": {
       "raw": "(result?: any) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IModal",
      "required": true
     },
     {
      "uid": 9,
      "name": "parameters",
      "comment": {
       "raw": [
        "Parameters that provided via second param of `modalContext.show` method"
       ]
      },
      "typeValue": {
       "raw": "any"
      },
      "from": "@epam/uui-core:IModal",
      "required": false
     },
     {
      "uid": 10,
      "name": "depth",
      "comment": {
       "raw": [
        "Depth of current modal layer"
       ]
      },
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "from": "@epam/uui-core:IModal",
      "required": false
     },
     {
      "uid": 11,
      "name": "cx",
      "comment": {
       "raw": [
        "CSS class(es) to put on component's root. See {@link https://github.com/JedWatson/classnames#usage} for details"
       ]
      },
      "typeValue": {
       "raw": "null | string | number | boolean | ClassDictionary | ClassArray"
      },
      "typeValueRef": "@epam/uui-core:ClassValue",
      "from": "@epam/uui-core:IHasCX",
      "required": false
     },
     {
      "uid": 12,
      "name": "children",
      "typeValue": {
       "raw": "null | string | number | boolean | React.ReactElement<any, string | React.JSXElementConstructor<any>> | React.ReactFragment | React.ReactPortal"
      },
      "typeValueRef": "@types/react:ReactNode",
      "from": "@epam/uui-core:IHasChildren",
      "required": false
     },
     {
      "uid": 13,
      "name": "rawProps",
      "comment": {
       "raw": [
        "Any HTML attributes (native or 'data-') to put on the underlying component"
       ]
      },
      "typeValue": {
       "raw": "React.HTMLAttributes<HTMLDivElement> & Record<`data-${string}`, string>"
      },
      "from": "@epam/uui-core:IHasRawProps",
      "required": false
     },
     {
      "uid": 14,
      "name": "forwardedRef",
      "comment": {
       "raw": [
        "this ref is passed to the underlying component"
       ]
      },
      "typeValue": {
       "raw": "null | (instance: HTMLDivElement | null) => void | React.MutableRefObject<HTMLDivElement | null>"
      },
      "from": "@epam/uui-core:IHasForwardedRef",
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui-core:ModalFooterCoreProps": {
   "summary": {
    "module": "@epam/uui-core",
    "typeName": {
     "name": "ModalFooterCoreProps",
     "nameFull": "ModalFooterCoreProps"
    },
    "src": "uui-core/src/types/components/Modals.ts",
    "exported": true
   },
   "details": {
    "kind": 263,
    "typeValue": {
     "raw": "ModalFooterCoreProps",
     "print": [
      "interface ModalFooterCoreProps extends IHasChildren, IHasCX, IHasRawProps<React.HTMLAttributes<HTMLDivElement>> {",
      "    borderTop?: boolean;",
      "}"
     ]
    },
    "props": [
     {
      "uid": 1,
      "name": "borderTop",
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "required": false
     },
     {
      "uid": 2,
      "name": "children",
      "typeValue": {
       "raw": "null | string | number | boolean | React.ReactElement<any, string | React.JSXElementConstructor<any>> | React.ReactFragment | React.ReactPortal"
      },
      "typeValueRef": "@types/react:ReactNode",
      "from": "@epam/uui-core:IHasChildren",
      "required": false
     },
     {
      "uid": 3,
      "name": "cx",
      "comment": {
       "raw": [
        "CSS class(es) to put on component's root. See {@link https://github.com/JedWatson/classnames#usage} for details"
       ]
      },
      "typeValue": {
       "raw": "null | string | number | boolean | ClassDictionary | ClassArray"
      },
      "typeValueRef": "@epam/uui-core:ClassValue",
      "from": "@epam/uui-core:IHasCX",
      "required": false
     },
     {
      "uid": 4,
      "name": "rawProps",
      "comment": {
       "raw": [
        "Any HTML attributes (native or 'data-') to put on the underlying component"
       ]
      },
      "typeValue": {
       "raw": "React.HTMLAttributes<HTMLDivElement> & Record<`data-${string}`, string>"
      },
      "from": "@epam/uui-core:IHasRawProps",
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui-core:ModalHeaderCoreProps": {
   "summary": {
    "module": "@epam/uui-core",
    "typeName": {
     "name": "ModalHeaderCoreProps",
     "nameFull": "ModalHeaderCoreProps"
    },
    "src": "uui-core/src/types/components/Modals.ts",
    "exported": true
   },
   "details": {
    "kind": 263,
    "typeValue": {
     "raw": "ModalHeaderCoreProps",
     "print": [
      "interface ModalHeaderCoreProps extends IHasChildren, IHasCX, IHasRawProps<React.HTMLAttributes<HTMLDivElement>> {",
      "    onClose?: () => any;",
      "    title?: React.ReactNode;",
      "}"
     ]
    },
    "props": [
     {
      "uid": 1,
      "name": "onClose",
      "typeValue": {
       "raw": "() => any"
      },
      "editor": {
       "type": "func"
      },
      "required": false
     },
     {
      "uid": 2,
      "name": "title",
      "typeValue": {
       "raw": "null | string | number | boolean | React.ReactElement<any, string | React.JSXElementConstructor<any>> | React.ReactFragment | React.ReactPortal"
      },
      "typeValueRef": "@types/react:ReactNode",
      "required": false
     },
     {
      "uid": 3,
      "name": "children",
      "typeValue": {
       "raw": "null | string | number | boolean | React.ReactElement<any, string | React.JSXElementConstructor<any>> | React.ReactFragment | React.ReactPortal"
      },
      "typeValueRef": "@types/react:ReactNode",
      "from": "@epam/uui-core:IHasChildren",
      "required": false
     },
     {
      "uid": 4,
      "name": "cx",
      "comment": {
       "raw": [
        "CSS class(es) to put on component's root. See {@link https://github.com/JedWatson/classnames#usage} for details"
       ]
      },
      "typeValue": {
       "raw": "null | string | number | boolean | ClassDictionary | ClassArray"
      },
      "typeValueRef": "@epam/uui-core:ClassValue",
      "from": "@epam/uui-core:IHasCX",
      "required": false
     },
     {
      "uid": 5,
      "name": "rawProps",
      "comment": {
       "raw": [
        "Any HTML attributes (native or 'data-') to put on the underlying component"
       ]
      },
      "typeValue": {
       "raw": "React.HTMLAttributes<HTMLDivElement> & Record<`data-${string}`, string>"
      },
      "from": "@epam/uui-core:IHasRawProps",
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui-core:ModalOperation": {
   "summary": {
    "module": "@epam/uui-core",
    "typeName": {
     "name": "ModalOperation",
     "nameFull": "ModalOperation"
    },
    "src": "uui-core/src/services/ModalContext.ts",
    "exported": true
   },
   "details": {
    "kind": 263,
    "typeValue": {
     "raw": "ModalOperation",
     "print": [
      "interface ModalOperation {",
      "    component?: React.ComponentType<any>;",
      "    props: IModal<any>;",
      "}"
     ]
    },
    "props": [
     {
      "uid": 1,
      "name": "component",
      "typeValue": {
       "raw": "React.ComponentClass<any, any> | React.FunctionComponent<any>"
      },
      "required": false
     },
     {
      "uid": 2,
      "name": "props",
      "typeValue": {
       "raw": "IModal<any, any>"
      },
      "required": true
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui-core:ModalWindowProps": {
   "summary": {
    "module": "@epam/uui-core",
    "typeName": {
     "name": "ModalWindowProps",
     "nameFull": "ModalWindowProps"
    },
    "src": "uui-core/src/types/components/Modals.ts",
    "exported": true
   },
   "details": {
    "kind": 263,
    "typeValue": {
     "raw": "ModalWindowProps",
     "print": [
      "interface ModalWindowProps extends VPanelProps, IHasForwardedRef<HTMLDivElement> {",
      "}"
     ]
    },
    "props": [
     {
      "uid": 1,
      "name": "cx",
      "comment": {
       "raw": [
        "CSS class(es) to put on component's root. See {@link https://github.com/JedWatson/classnames#usage} for details"
       ]
      },
      "typeValue": {
       "raw": "null | string | number | boolean | ClassDictionary | ClassArray"
      },
      "typeValueRef": "@epam/uui-core:ClassValue",
      "from": "@epam/uui-core:IHasCX",
      "required": false
     },
     {
      "uid": 2,
      "name": "children",
      "typeValue": {
       "raw": "null | string | number | boolean | React.ReactElement<any, string | React.JSXElementConstructor<any>> | React.ReactFragment | React.ReactPortal"
      },
      "typeValueRef": "@types/react:ReactNode",
      "from": "@epam/uui-core:IHasChildren",
      "required": false
     },
     {
      "uid": 3,
      "name": "onClick",
      "comment": {
       "raw": [
        "Called when component is clicked"
       ]
      },
      "typeValue": {
       "raw": "(e?: any) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IClickable",
      "required": false
     },
     {
      "uid": 4,
      "name": "rawProps",
      "comment": {
       "raw": [
        "Any HTML attributes (native or 'data-') to put on the underlying component"
       ]
      },
      "typeValue": {
       "raw": "React.HTMLAttributes<HTMLDivElement> & Record<`data-${string}`, string>"
      },
      "from": "@epam/uui-core:IHasRawProps",
      "required": false
     },
     {
      "uid": 5,
      "name": "forwardedRef",
      "comment": {
       "raw": [
        "this ref is passed to the underlying component"
       ]
      },
      "typeValue": {
       "raw": "null | (instance: HTMLDivElement | null) => void | React.MutableRefObject<HTMLDivElement | null>"
      },
      "from": "@epam/uui-core:IHasForwardedRef",
      "required": false
     },
     {
      "uid": 6,
      "name": "clickAnalyticsEvent",
      "comment": {
       "raw": [
        "An analytics event to send (via AnalyticsContext) when component is clicked.",
        " See [AnalyticsContext](@link https://uui.epam.com/documents?id=analyticsContext&mode=doc&skin=UUI4_promo&category=contexts)."
       ]
      },
      "typeValue": {
       "raw": "null | { [key: string]: any; name: string; }"
      },
      "from": "@epam/uui-core:IAnalyticableClick",
      "required": false
     },
     {
      "uid": 7,
      "name": "style",
      "typeValue": {
       "raw": "React.CSSProperties"
      },
      "from": "@epam/uui-core:VPanelProps",
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui-core:NotificationOperation": {
   "summary": {
    "module": "@epam/uui-core",
    "typeName": {
     "name": "NotificationOperation",
     "nameFull": "NotificationOperation"
    },
    "src": "uui-core/src/services/NotificationContext.tsx",
    "exported": true
   },
   "details": {
    "kind": 263,
    "typeValue": {
     "raw": "NotificationOperation",
     "print": [
      "interface NotificationOperation {",
      "    component: React.ComponentType<any>;",
      "    props: INotification;",
      "    config: NotificationParams;",
      "}"
     ]
    },
    "props": [
     {
      "uid": 1,
      "name": "component",
      "typeValue": {
       "raw": "React.ComponentClass<any, any> | React.FunctionComponent<any>"
      },
      "typeValueRef": "@types/react:ComponentType",
      "required": true
     },
     {
      "uid": 2,
      "name": "props",
      "typeValue": {
       "raw": "INotification"
      },
      "required": true
     },
     {
      "uid": 3,
      "name": "config",
      "typeValue": {
       "raw": "NotificationParams"
      },
      "required": true
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui-core:NotificationParams": {
   "summary": {
    "module": "@epam/uui-core",
    "typeName": {
     "name": "NotificationParams",
     "nameFull": "NotificationParams"
    },
    "src": "uui-core/src/types/contexts.ts",
    "exported": true
   },
   "details": {
    "kind": 263,
    "typeValue": {
     "raw": "NotificationParams",
     "print": [
      "interface NotificationParams {",
      "    /** Notification visibility duration in ms",
      "     * If 'forever' value provided, notification required manual action for closing.",
      "     */",
      "    duration?: number | 'forever';",
      "    /** Position of notification depends on screen corners */",
      "    position?: 'bot-left' | 'bot-right' | 'top-left' | 'top-right' | 'top-center' | 'bot-center';",
      "}"
     ]
    },
    "props": [
     {
      "uid": 1,
      "name": "duration",
      "comment": {
       "raw": [
        "Notification visibility duration in ms",
        " If 'forever' value provided, notification required manual action for closing."
       ]
      },
      "typeValue": {
       "raw": "number | 'forever'"
      },
      "required": false
     },
     {
      "uid": 2,
      "name": "position",
      "comment": {
       "raw": [
        "Position of notification depends on screen corners"
       ]
      },
      "typeValue": {
       "raw": "'bot-left' | 'bot-right' | 'top-left' | 'top-right' | 'top-center' | 'bot-center'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "bot-left",
        "bot-right",
        "top-left",
        "top-right",
        "top-center",
        "bot-center"
       ]
      },
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui-core:PickerBaseOptions": {
   "summary": {
    "module": "@epam/uui-core",
    "typeName": {
     "name": "PickerBaseOptions",
     "nameFull": "PickerBaseOptions<TItem, TId>"
    },
    "src": "uui-core/src/types/pickers.ts",
    "exported": true
   },
   "details": {
    "kind": 264,
    "typeValue": {
     "raw": "PickerBaseOptions<TItem, TId>",
     "print": [
      "type PickerBaseOptions<TItem, TId> = {",
      "    /** Name of the entity being selected. Affects wording like \"Please select [entity]\" */",
      "    entityName?: string;",
      "    /** Plural name of the entity being selected. Affects wording like \"X [entities] selected\" */",
      "    entityPluralName?: string;",
      "    /** Datasource to get data for the picker */",
      "    dataSource: IDataSource<TItem, TId, any>;",
      "    /** A pure function that gets entity name from entity object.",
      "     Default: (item) => item.name.",
      "     */",
      "    getName?: (item: TItem) => string;",
      "    /** Allow to customize how each selectable row is rendered. Can be used to add subtitles, avatars, etc. */",
      "    renderRow?: (props: DataRowProps<TItem, TId>, dataSourceState: DataSourceState) => ReactNode;",
      "    /** Gets options for each row. Allow to make rows non-selectable, as well as many other tweaks. */",
      "    getRowOptions?: (item: TItem, index: number) => DataRowOptions<TItem, TId>;",
      "    /** Overrides the default 'no records found' banner.",
      "     * The 'search' callback parameter allows to distinguish cases when there's no records at all, and when current search doesn't find anything.  */",
      "    renderNotFound?: (props: {",
      "        search: string;",
      "        onClose: () => void;",
      "    }) => ReactNode;",
      "    /** Defines which value is to set on clear. E.g. you can put an empty array instead of null for empty multi-select Pickers */",
      "    emptyValue?: undefined | null | [",
      "    ];",
      "    /** Defines how items should be sorted. By default, items are shown in order they are provided to the DataSource */",
      "    sortBy?(item: TItem, sorting: SortingOption): any;",
      "    /** Additional filter to apply to the DataSource. Can be used to limit selection somehow, w/o re-building the DataSource. E.g. in the linked pickers scenario. */",
      "    filter?: any;",
      "    /** Defines sorting to pass to the DataSource */",
      "    sorting?: SortingOption;",
      "    /**",
      "     * Controls how the selection (checking items) of a parent node affects the selection of its all children, and vice versa.",
      "     * - false: All nodes are selected independently (default).",
      "     * - true or 'explicit': Selecting a parent node explicitly selects all its children. Unchecking the last parent's child unchecks its parent.",
      "     * - 'implicit': Selecting a parent node means that all children are considered checked.",
      "     *   The user sees all these nodes as checked on the UI, but only the selected parent is visible in the PickerInput tags, and only the checked",
      "     *   parent is present in the Picker's value or DataSourceState.checked array. When the user unchecks the first child of such a parent,",
      "     *   its parents become unchecked and all children but the unchecked one become checked, making children's selection explicit. If the last",
      "     *   unchecked child gets checked, all children from the checked are removed, returning to the implicit state when only the parent is checked.",
      "     */",
      "    cascadeSelection?: CascadeSelection;",
      "    /** You can return true for all, or some items to fold them. */",
      "    isFoldedByDefault?(item: TItem): boolean;",
      "    /** Given an item, should return an array of string fields to search on. By default, the search is performed on item.name field. */",
      "    getSearchFields?(item: TItem): string[];",
      "};"
     ]
    },
    "props": [
     {
      "uid": 1,
      "name": "entityName",
      "comment": {
       "raw": [
        "Name of the entity being selected. Affects wording like \"Please select [entity]\""
       ]
      },
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "required": false
     },
     {
      "uid": 2,
      "name": "entityPluralName",
      "comment": {
       "raw": [
        "Plural name of the entity being selected. Affects wording like \"X [entities] selected\""
       ]
      },
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "required": false
     },
     {
      "uid": 3,
      "name": "dataSource",
      "comment": {
       "raw": [
        "Datasource to get data for the picker"
       ]
      },
      "typeValue": {
       "raw": "IDataSource<TItem, TId, any>"
      },
      "required": true
     },
     {
      "uid": 4,
      "name": "getName",
      "comment": {
       "raw": [
        "A pure function that gets entity name from entity object.",
        "     Default: (item) => item.name."
       ]
      },
      "typeValue": {
       "raw": "(item: TItem) => string"
      },
      "editor": {
       "type": "func"
      },
      "required": false
     },
     {
      "uid": 5,
      "name": "renderRow",
      "comment": {
       "raw": [
        "Allow to customize how each selectable row is rendered. Can be used to add subtitles, avatars, etc."
       ]
      },
      "typeValue": {
       "raw": "(props: DataRowProps<TItem, TId>, dataSourceState: DataSourceState<Record<string, any>, any>) => React.ReactNode"
      },
      "editor": {
       "type": "component"
      },
      "required": false
     },
     {
      "uid": 6,
      "name": "getRowOptions",
      "comment": {
       "raw": [
        "Gets options for each row. Allow to make rows non-selectable, as well as many other tweaks."
       ]
      },
      "typeValue": {
       "raw": "(item: TItem, index: number) => DataRowOptions<TItem, TId>"
      },
      "editor": {
       "type": "func"
      },
      "required": false
     },
     {
      "uid": 7,
      "name": "renderNotFound",
      "comment": {
       "raw": [
        "Overrides the default 'no records found' banner.",
        " The 'search' callback parameter allows to distinguish cases when there's no records at all, and when current search doesn't find anything."
       ]
      },
      "typeValue": {
       "raw": "(props: { search: string; onClose: () => void; }) => React.ReactNode"
      },
      "editor": {
       "type": "component"
      },
      "required": false
     },
     {
      "uid": 8,
      "name": "emptyValue",
      "comment": {
       "raw": [
        "Defines which value is to set on clear. E.g. you can put an empty array instead of null for empty multi-select Pickers"
       ]
      },
      "typeValue": {
       "raw": "null | []"
      },
      "required": false
     },
     {
      "uid": 9,
      "name": "sortBy",
      "comment": {
       "raw": [
        "Defines how items should be sorted. By default, items are shown in order they are provided to the DataSource"
       ]
      },
      "typeValue": {
       "raw": "(item: TItem, sorting: SortingOption<any>) => any"
      },
      "editor": {
       "type": "func"
      },
      "required": false
     },
     {
      "uid": 10,
      "name": "filter",
      "comment": {
       "raw": [
        "Additional filter to apply to the DataSource. Can be used to limit selection somehow, w/o re-building the DataSource. E.g. in the linked pickers scenario."
       ]
      },
      "typeValue": {
       "raw": "any"
      },
      "required": false
     },
     {
      "uid": 11,
      "name": "sorting",
      "comment": {
       "raw": [
        "Defines sorting to pass to the DataSource"
       ]
      },
      "typeValue": {
       "raw": "SortingOption<any>"
      },
      "required": false
     },
     {
      "uid": 12,
      "name": "cascadeSelection",
      "comment": {
       "raw": [
        "Controls how the selection (checking items) of a parent node affects the selection of its all children, and vice versa.",
        " - false: All nodes are selected independently (default).",
        " - true or 'explicit': Selecting a parent node explicitly selects all its children. Unchecking the last parent's child unchecks its parent.",
        " - 'implicit': Selecting a parent node means that all children are considered checked.",
        "   The user sees all these nodes as checked on the UI, but only the selected parent is visible in the PickerInput tags, and only the checked",
        "   parent is present in the Picker's value or DataSourceState.checked array. When the user unchecks the first child of such a parent,",
        "   its parents become unchecked and all children but the unchecked one become checked, making children's selection explicit. If the last",
        "   unchecked child gets checked, all children from the checked are removed, returning to the implicit state when only the parent is checked."
       ]
      },
      "typeValue": {
       "raw": "boolean | 'implicit' | 'explicit'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        false,
        true,
        "implicit",
        "explicit"
       ]
      },
      "required": false
     },
     {
      "uid": 13,
      "name": "isFoldedByDefault",
      "comment": {
       "raw": [
        "You can return true for all, or some items to fold them."
       ]
      },
      "typeValue": {
       "raw": "(item: TItem) => boolean"
      },
      "editor": {
       "type": "func"
      },
      "required": false
     },
     {
      "uid": 14,
      "name": "getSearchFields",
      "comment": {
       "raw": [
        "Given an item, should return an array of string fields to search on. By default, the search is performed on item.name field."
       ]
      },
      "typeValue": {
       "raw": "(item: TItem) => string[]"
      },
      "editor": {
       "type": "func"
      },
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui-core:PickerBaseProps": {
   "summary": {
    "module": "@epam/uui-core",
    "typeName": {
     "name": "PickerBaseProps",
     "nameFull": "PickerBaseProps<TItem, TId>"
    },
    "src": "uui-core/src/types/pickers.ts",
    "exported": true
   },
   "details": {
    "kind": 264,
    "typeValue": {
     "raw": "PickerBaseOptions<TItem, TId> & { selectionMode: 'single'; valueType?: 'id' | undefined; } & IEditable<TId> & IAnalyticableOnChange<any> | PickerBaseOptions<TItem, TId> & { selectionMode: 'single'; valueType: 'entity'; } & IEditable<TItem> & IAnalyticableOnChange<any> | PickerBaseOptions<TItem, TId> & { selectionMode: 'multi'; valueType?: 'id' | undefined; emptyValue?: [] | null | undefined; } & IEditable<TId[]> & IAnalyticableOnChange<any> | PickerBaseOptions<TItem, TId> & { selectionMode: 'multi'; valueType: 'entity'; emptyValue?: [] | null | undefined; } & IEditable<TItem[]> & IAnalyticableOnChange<any>",
     "print": [
      "type PickerBaseProps<TItem, TId> = PickerBaseOptions<TItem, TId> & PickerBindingProps<TItem, TId> & IAnalyticableOnChange<any>;"
     ]
    },
    "props": [
     {
      "uid": 76,
      "name": "entityName",
      "comment": {
       "raw": [
        "Name of the entity being selected. Affects wording like \"Please select [entity]\""
       ]
      },
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "from": "@epam/uui-core:PickerBaseOptions",
      "required": false
     },
     {
      "uid": 77,
      "name": "entityPluralName",
      "comment": {
       "raw": [
        "Plural name of the entity being selected. Affects wording like \"X [entities] selected\""
       ]
      },
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "from": "@epam/uui-core:PickerBaseOptions",
      "required": false
     },
     {
      "uid": 78,
      "name": "dataSource",
      "comment": {
       "raw": [
        "Datasource to get data for the picker"
       ]
      },
      "typeValue": {
       "raw": "IDataSource<TItem, TId, any>"
      },
      "from": "@epam/uui-core:PickerBaseOptions",
      "required": true
     },
     {
      "uid": 79,
      "name": "getName",
      "comment": {
       "raw": [
        "A pure function that gets entity name from entity object.",
        "     Default: (item) => item.name."
       ]
      },
      "typeValue": {
       "raw": "(item: TItem) => string"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:PickerBaseOptions",
      "required": false
     },
     {
      "uid": 80,
      "name": "renderRow",
      "comment": {
       "raw": [
        "Allow to customize how each selectable row is rendered. Can be used to add subtitles, avatars, etc."
       ]
      },
      "typeValue": {
       "raw": "(props: DataRowProps<TItem, TId>, dataSourceState: DataSourceState<Record<string, any>, any>) => React.ReactNode"
      },
      "editor": {
       "type": "component"
      },
      "from": "@epam/uui-core:PickerBaseOptions",
      "required": false
     },
     {
      "uid": 81,
      "name": "getRowOptions",
      "comment": {
       "raw": [
        "Gets options for each row. Allow to make rows non-selectable, as well as many other tweaks."
       ]
      },
      "typeValue": {
       "raw": "(item: TItem, index: number) => DataRowOptions<TItem, TId>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:PickerBaseOptions",
      "required": false
     },
     {
      "uid": 82,
      "name": "renderNotFound",
      "comment": {
       "raw": [
        "Overrides the default 'no records found' banner.",
        " The 'search' callback parameter allows to distinguish cases when there's no records at all, and when current search doesn't find anything."
       ]
      },
      "typeValue": {
       "raw": "(props: { search: string; onClose: () => void; }) => React.ReactNode"
      },
      "editor": {
       "type": "component"
      },
      "from": "@epam/uui-core:PickerBaseOptions",
      "required": false
     },
     {
      "uid": 83,
      "name": "emptyValue",
      "comment": {
       "raw": [
        "Defines which value is to set on clear. E.g. you can put an empty array instead of null for empty multi-select Pickers"
       ]
      },
      "typeValue": {
       "raw": "null | []"
      },
      "from": "@epam/uui-core:PickerBaseOptions",
      "required": false
     },
     {
      "uid": 84,
      "name": "sortBy",
      "comment": {
       "raw": [
        "Defines how items should be sorted. By default, items are shown in order they are provided to the DataSource"
       ]
      },
      "typeValue": {
       "raw": "(item: TItem, sorting: SortingOption<any>) => any"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:PickerBaseOptions",
      "required": false
     },
     {
      "uid": 85,
      "name": "filter",
      "comment": {
       "raw": [
        "Additional filter to apply to the DataSource. Can be used to limit selection somehow, w/o re-building the DataSource. E.g. in the linked pickers scenario."
       ]
      },
      "typeValue": {
       "raw": "any"
      },
      "from": "@epam/uui-core:PickerBaseOptions",
      "required": false
     },
     {
      "uid": 86,
      "name": "sorting",
      "comment": {
       "raw": [
        "Defines sorting to pass to the DataSource"
       ]
      },
      "typeValue": {
       "raw": "SortingOption<any>"
      },
      "from": "@epam/uui-core:PickerBaseOptions",
      "required": false
     },
     {
      "uid": 87,
      "name": "cascadeSelection",
      "comment": {
       "raw": [
        "Controls how the selection (checking items) of a parent node affects the selection of its all children, and vice versa.",
        " - false: All nodes are selected independently (default).",
        " - true or 'explicit': Selecting a parent node explicitly selects all its children. Unchecking the last parent's child unchecks its parent.",
        " - 'implicit': Selecting a parent node means that all children are considered checked.",
        "   The user sees all these nodes as checked on the UI, but only the selected parent is visible in the PickerInput tags, and only the checked",
        "   parent is present in the Picker's value or DataSourceState.checked array. When the user unchecks the first child of such a parent,",
        "   its parents become unchecked and all children but the unchecked one become checked, making children's selection explicit. If the last",
        "   unchecked child gets checked, all children from the checked are removed, returning to the implicit state when only the parent is checked."
       ]
      },
      "typeValue": {
       "raw": "boolean | 'implicit' | 'explicit'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        false,
        true,
        "implicit",
        "explicit"
       ]
      },
      "from": "@epam/uui-core:PickerBaseOptions",
      "required": false
     },
     {
      "uid": 88,
      "name": "isFoldedByDefault",
      "comment": {
       "raw": [
        "You can return true for all, or some items to fold them."
       ]
      },
      "typeValue": {
       "raw": "(item: TItem) => boolean"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:PickerBaseOptions",
      "required": false
     },
     {
      "uid": 89,
      "name": "getSearchFields",
      "comment": {
       "raw": [
        "Given an item, should return an array of string fields to search on. By default, the search is performed on item.name field."
       ]
      },
      "typeValue": {
       "raw": "(item: TItem) => string[]"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:PickerBaseOptions",
      "required": false
     },
     {
      "uid": 40,
      "name": "selectionMode",
      "comment": {
       "raw": [
        "If 'single' provided - only one item is selected. In case of 'multi' - multiple items are selected"
       ]
      },
      "typeValue": {
       "raw": "'single'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "single"
       ]
      },
      "from": "@epam/uui-core:SinglePickerProps",
      "required": true
     },
     {
      "uid": 16,
      "name": "valueType",
      "comment": {
       "raw": [
        "Defines what to use in value/onValueChange: 'id' - item id (TId). 'entity' - the item itself (TItem)"
       ]
      },
      "typeValue": {
       "raw": "'id'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "id"
       ]
      },
      "from": "@epam/uui-core:SinglePickerProps",
      "required": false
     },
     {
      "uid": 17,
      "name": "value",
      "comment": {
       "raw": [
        "The current value of component"
       ]
      },
      "typeValue": {
       "raw": "TId"
      },
      "from": "@epam/uui-core:IEditable",
      "required": true
     },
     {
      "uid": 18,
      "name": "onValueChange",
      "comment": {
       "raw": [
        "Called when value needs to be changed (usually due to user interaction)"
       ]
      },
      "typeValue": {
       "raw": "(newValue: TId) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IEditable",
      "required": true
     },
     {
      "uid": 94,
      "name": "isInvalid",
      "comment": {
       "raw": [
        "True if component contains invalid input"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:ICanBeInvalid",
      "required": false
     },
     {
      "uid": 95,
      "name": "validationMessage",
      "comment": {
       "raw": [
        "Message describing why the value is invalid"
       ]
      },
      "typeValue": {
       "raw": "null | string | number | boolean | React.ReactElement<any, string | React.JSXElementConstructor<any>> | React.ReactFragment | React.ReactPortal"
      },
      "typeValueRef": "@types/react:ReactNode",
      "from": "@epam/uui-core:ICanBeInvalid",
      "required": false
     },
     {
      "uid": 96,
      "name": "validationProps",
      "comment": {
       "raw": [
        "If T is a complex value (object or array), this property contains validation states of inner items"
       ]
      },
      "typeValue": {
       "raw": "{ [key: string]: ICanBeInvalid; }"
      },
      "from": "@epam/uui-core:ICanBeInvalid",
      "required": false
     },
     {
      "uid": 97,
      "name": "isDisabled",
      "comment": {
       "raw": [
        "Disable editing, and visually de-emphasize value of the component"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:IDisableable",
      "required": false
     },
     {
      "uid": 98,
      "name": "isReadonly",
      "comment": {
       "raw": [
        "Disable editing. Unlike isDisabled, keep component's value readable."
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:ICanBeReadonly",
      "required": false
     },
     {
      "uid": 99,
      "name": "isRequired",
      "comment": {
       "raw": [
        "Marks that component's value is required and shouldn't be empty"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:ICanBeRequired",
      "required": false
     },
     {
      "uid": 100,
      "name": "getValueChangeAnalyticsEvent",
      "comment": {
       "raw": [
        "Given a value, returns an analytics event to send when component is edited.",
        " See [AnalyticsContext](@link https://uui.epam.com/documents?id=analyticsContext&mode=doc&skin=UUI4_promo&category=contexts)."
       ]
      },
      "typeValue": {
       "raw": "(newValue: any, oldValue: any) => AnalyticsEvent"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IAnalyticableOnChange",
      "required": false
     },
     {
      "uid": 41,
      "name": "valueType",
      "comment": {
       "raw": [
        "Defines what to use in value/onValueChange: 'id' - item id (TId). 'entity' - the item itself (TItem)"
       ]
      },
      "typeValue": {
       "raw": "'entity'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "entity"
       ]
      },
      "from": "@epam/uui-core:SinglePickerProps",
      "required": true
     },
     {
      "uid": 42,
      "name": "value",
      "comment": {
       "raw": [
        "The current value of component"
       ]
      },
      "typeValue": {
       "raw": "TItem"
      },
      "from": "@epam/uui-core:IEditable",
      "required": true
     },
     {
      "uid": 43,
      "name": "onValueChange",
      "comment": {
       "raw": [
        "Called when value needs to be changed (usually due to user interaction)"
       ]
      },
      "typeValue": {
       "raw": "(newValue: TItem) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IEditable",
      "required": true
     },
     {
      "uid": 90,
      "name": "selectionMode",
      "comment": {
       "raw": [
        "If 'single' provided - only one item is selected. In case of 'multi' - multiple items are selected"
       ]
      },
      "typeValue": {
       "raw": "'multi'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "multi"
       ]
      },
      "from": "@epam/uui-core:ArrayPickerProps",
      "required": true
     },
     {
      "uid": 66,
      "name": "valueType",
      "comment": {
       "raw": [
        "Defines what to use in value/onValueChange: 'id' - item id (TId). 'entity' - the item itself (TItem)"
       ]
      },
      "typeValue": {
       "raw": "'id'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "id"
       ]
      },
      "from": "@epam/uui-core:ArrayPickerProps",
      "required": false
     },
     {
      "uid": 67,
      "name": "value",
      "comment": {
       "raw": [
        "The current value of component"
       ]
      },
      "typeValue": {
       "raw": "TId[]"
      },
      "from": "@epam/uui-core:IEditable",
      "required": true
     },
     {
      "uid": 68,
      "name": "onValueChange",
      "comment": {
       "raw": [
        "Called when value needs to be changed (usually due to user interaction)"
       ]
      },
      "typeValue": {
       "raw": "(newValue: TId[]) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IEditable",
      "required": true
     },
     {
      "uid": 91,
      "name": "valueType",
      "comment": {
       "raw": [
        "Defines what to use in value/onValueChange: 'id' - item id (TId). 'entity' - the item itself (TItem)"
       ]
      },
      "typeValue": {
       "raw": "'entity'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "entity"
       ]
      },
      "from": "@epam/uui-core:ArrayPickerProps",
      "required": true
     },
     {
      "uid": 92,
      "name": "value",
      "comment": {
       "raw": [
        "The current value of component"
       ]
      },
      "typeValue": {
       "raw": "TItem[]"
      },
      "from": "@epam/uui-core:IEditable",
      "required": true
     },
     {
      "uid": 93,
      "name": "onValueChange",
      "comment": {
       "raw": [
        "Called when value needs to be changed (usually due to user interaction)"
       ]
      },
      "typeValue": {
       "raw": "(newValue: TItem[]) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IEditable",
      "required": true
     }
    ],
    "propsFromUnion": true
   }
  },
  "@epam/uui-core:PickerBindingProps": {
   "summary": {
    "module": "@epam/uui-core",
    "typeName": {
     "name": "PickerBindingProps",
     "nameFull": "PickerBindingProps<TItem, TId>"
    },
    "src": "uui-core/src/types/pickers.ts",
    "exported": true
   },
   "details": {
    "kind": 264,
    "typeValue": {
     "raw": "{ selectionMode: 'single'; valueType?: 'id' | undefined; } & IEditable<TId> | { selectionMode: 'single'; valueType: 'entity'; } & IEditable<TItem> | { selectionMode: 'multi'; valueType?: 'id' | undefined; emptyValue?: [] | null | undefined; } & IEditable<TId[]> | { selectionMode: 'multi'; valueType: 'entity'; emptyValue?: [] | null | undefined; } & IEditable<TItem[]>",
     "print": [
      "type PickerBindingProps<TItem, TId> = SinglePickerProps<TId, TItem> | ArrayPickerProps<TId, TItem>;"
     ]
    },
    "props": [
     {
      "uid": 11,
      "name": "selectionMode",
      "comment": {
       "raw": [
        "If 'single' provided - only one item is selected. In case of 'multi' - multiple items are selected"
       ]
      },
      "typeValue": {
       "raw": "'single'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "single"
       ]
      },
      "from": "@epam/uui-core:SinglePickerProps",
      "required": true
     },
     {
      "uid": 2,
      "name": "valueType",
      "comment": {
       "raw": [
        "Defines what to use in value/onValueChange: 'id' - item id (TId). 'entity' - the item itself (TItem)"
       ]
      },
      "typeValue": {
       "raw": "'id'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "id"
       ]
      },
      "from": "@epam/uui-core:SinglePickerProps",
      "required": false
     },
     {
      "uid": 3,
      "name": "value",
      "comment": {
       "raw": [
        "The current value of component"
       ]
      },
      "typeValue": {
       "raw": "TId"
      },
      "from": "@epam/uui-core:IEditable",
      "required": true
     },
     {
      "uid": 4,
      "name": "onValueChange",
      "comment": {
       "raw": [
        "Called when value needs to be changed (usually due to user interaction)"
       ]
      },
      "typeValue": {
       "raw": "(newValue: TId) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IEditable",
      "required": true
     },
     {
      "uid": 37,
      "name": "isInvalid",
      "comment": {
       "raw": [
        "True if component contains invalid input"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:ICanBeInvalid",
      "required": false
     },
     {
      "uid": 38,
      "name": "validationMessage",
      "comment": {
       "raw": [
        "Message describing why the value is invalid"
       ]
      },
      "typeValue": {
       "raw": "null | string | number | boolean | React.ReactElement<any, string | React.JSXElementConstructor<any>> | React.ReactFragment | React.ReactPortal"
      },
      "typeValueRef": "@types/react:ReactNode",
      "from": "@epam/uui-core:ICanBeInvalid",
      "required": false
     },
     {
      "uid": 39,
      "name": "validationProps",
      "comment": {
       "raw": [
        "If T is a complex value (object or array), this property contains validation states of inner items"
       ]
      },
      "typeValue": {
       "raw": "{ [key: string]: ICanBeInvalid; }"
      },
      "from": "@epam/uui-core:ICanBeInvalid",
      "required": false
     },
     {
      "uid": 40,
      "name": "isDisabled",
      "comment": {
       "raw": [
        "Disable editing, and visually de-emphasize value of the component"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:IDisableable",
      "required": false
     },
     {
      "uid": 41,
      "name": "isReadonly",
      "comment": {
       "raw": [
        "Disable editing. Unlike isDisabled, keep component's value readable."
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:ICanBeReadonly",
      "required": false
     },
     {
      "uid": 42,
      "name": "isRequired",
      "comment": {
       "raw": [
        "Marks that component's value is required and shouldn't be empty"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:ICanBeRequired",
      "required": false
     },
     {
      "uid": 12,
      "name": "valueType",
      "comment": {
       "raw": [
        "Defines what to use in value/onValueChange: 'id' - item id (TId). 'entity' - the item itself (TItem)"
       ]
      },
      "typeValue": {
       "raw": "'entity'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "entity"
       ]
      },
      "from": "@epam/uui-core:SinglePickerProps",
      "required": true
     },
     {
      "uid": 13,
      "name": "value",
      "comment": {
       "raw": [
        "The current value of component"
       ]
      },
      "typeValue": {
       "raw": "TItem"
      },
      "from": "@epam/uui-core:IEditable",
      "required": true
     },
     {
      "uid": 14,
      "name": "onValueChange",
      "comment": {
       "raw": [
        "Called when value needs to be changed (usually due to user interaction)"
       ]
      },
      "typeValue": {
       "raw": "(newValue: TItem) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IEditable",
      "required": true
     },
     {
      "uid": 32,
      "name": "selectionMode",
      "comment": {
       "raw": [
        "If 'single' provided - only one item is selected. In case of 'multi' - multiple items are selected"
       ]
      },
      "typeValue": {
       "raw": "'multi'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "multi"
       ]
      },
      "from": "@epam/uui-core:ArrayPickerProps",
      "required": true
     },
     {
      "uid": 22,
      "name": "valueType",
      "comment": {
       "raw": [
        "Defines what to use in value/onValueChange: 'id' - item id (TId). 'entity' - the item itself (TItem)"
       ]
      },
      "typeValue": {
       "raw": "'id'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "id"
       ]
      },
      "from": "@epam/uui-core:ArrayPickerProps",
      "required": false
     },
     {
      "uid": 34,
      "name": "emptyValue",
      "comment": {
       "raw": [
        "Defines what to use as an empty value. If other value provided, it will be assumed as selection."
       ]
      },
      "typeValue": {
       "raw": "null | []"
      },
      "from": "@epam/uui-core:ArrayPickerProps",
      "required": false
     },
     {
      "uid": 24,
      "name": "value",
      "comment": {
       "raw": [
        "The current value of component"
       ]
      },
      "typeValue": {
       "raw": "TId[]"
      },
      "from": "@epam/uui-core:IEditable",
      "required": true
     },
     {
      "uid": 25,
      "name": "onValueChange",
      "comment": {
       "raw": [
        "Called when value needs to be changed (usually due to user interaction)"
       ]
      },
      "typeValue": {
       "raw": "(newValue: TId[]) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IEditable",
      "required": true
     },
     {
      "uid": 33,
      "name": "valueType",
      "comment": {
       "raw": [
        "Defines what to use in value/onValueChange: 'id' - item id (TId). 'entity' - the item itself (TItem)"
       ]
      },
      "typeValue": {
       "raw": "'entity'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "entity"
       ]
      },
      "from": "@epam/uui-core:ArrayPickerProps",
      "required": true
     },
     {
      "uid": 35,
      "name": "value",
      "comment": {
       "raw": [
        "The current value of component"
       ]
      },
      "typeValue": {
       "raw": "TItem[]"
      },
      "from": "@epam/uui-core:IEditable",
      "required": true
     },
     {
      "uid": 36,
      "name": "onValueChange",
      "comment": {
       "raw": [
        "Called when value needs to be changed (usually due to user interaction)"
       ]
      },
      "typeValue": {
       "raw": "(newValue: TItem[]) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IEditable",
      "required": true
     }
    ],
    "propsFromUnion": true
   }
  },
  "@epam/uui-core:PickerBindingValueType": {
   "summary": {
    "module": "@epam/uui-core",
    "typeName": {
     "name": "PickerBindingValueType",
     "nameFull": "PickerBindingValueType"
    },
    "src": "uui-core/src/types/pickers.ts",
    "exported": true
   },
   "details": {
    "kind": 264,
    "typeValue": {
     "raw": "'scalar' | 'array'",
     "print": [
      "type PickerBindingValueType = 'scalar' | 'array';"
     ]
    }
   }
  },
  "@epam/uui-core:PickerFilterConfig": {
   "summary": {
    "module": "@epam/uui-core",
    "typeName": {
     "name": "PickerFilterConfig",
     "nameFull": "PickerFilterConfig<TFilter>"
    },
    "src": "uui-core/src/types/tables.ts",
    "exported": true
   },
   "details": {
    "kind": 264,
    "typeValue": {
     "raw": "PickerFilterConfig<TFilter>",
     "print": [
      "type PickerFilterConfig<TFilter> = FilterConfigBase<TFilter> & Pick<PickerBaseOptions<any, any>, 'dataSource' | 'getName' | 'renderRow'> & {",
      "    /** Type of the filter */",
      "    type: 'singlePicker' | 'multiPicker';",
      "    /**",
      "     * Pass false to hide search in picker body.",
      "     * If omitted, true value will be used.",
      "     */",
      "    showSearch?: boolean;",
      "};"
     ]
    },
    "props": [
     {
      "uid": 1,
      "name": "title",
      "comment": {
       "raw": [
        "Title of the filter, displayed in filter toggler and filter body"
       ]
      },
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "from": "@epam/uui-core:FilterConfigBase",
      "required": true
     },
     {
      "uid": 2,
      "name": "field",
      "comment": {
       "raw": [
        "Field of filters object, where store the filter value"
       ]
      },
      "typeValue": {
       "raw": "keyof TFilter"
      },
      "from": "@epam/uui-core:FilterConfigBase",
      "required": true
     },
     {
      "uid": 3,
      "name": "columnKey",
      "comment": {
       "raw": [
        "Key of the column to which the filter is attached.",
        " If omitted, filter won't be attached to the column."
       ]
      },
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "from": "@epam/uui-core:FilterConfigBase",
      "required": false
     },
     {
      "uid": 4,
      "name": "isAlwaysVisible",
      "comment": {
       "raw": [
        "Pass true to make filter always visible in FilterPanel. User can't hide it via 'Add filter' dropdown"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:FilterConfigBase",
      "required": false
     },
     {
      "uid": 5,
      "name": "predicates",
      "comment": {
       "raw": [
        "Array of available predicates for the filter. This predicated can be chosen by user and applied to the filter value."
       ]
      },
      "typeValue": {
       "raw": "IFilterPredicate[]"
      },
      "from": "@epam/uui-core:FilterConfigBase",
      "required": false
     },
     {
      "uid": 6,
      "name": "maxCount",
      "comment": {
       "raw": [
        "Count of words to show in the Filter toggler. By default, 2 item will be shown."
       ]
      },
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "from": "@epam/uui-core:FilterConfigBase",
      "required": false
     },
     {
      "uid": 7,
      "name": "dataSource",
      "comment": {
       "raw": [
        "Datasource to get data for the picker"
       ]
      },
      "typeValue": {
       "raw": "IDataSource<any, any, any>"
      },
      "from": "@epam/uui-core:PickerBaseOptions",
      "required": true
     },
     {
      "uid": 8,
      "name": "getName",
      "comment": {
       "raw": [
        "A pure function that gets entity name from entity object.",
        "     Default: (item) => item.name."
       ]
      },
      "typeValue": {
       "raw": "(item: any) => string"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:PickerBaseOptions",
      "required": false
     },
     {
      "uid": 9,
      "name": "renderRow",
      "comment": {
       "raw": [
        "Allow to customize how each selectable row is rendered. Can be used to add subtitles, avatars, etc."
       ]
      },
      "typeValue": {
       "raw": "(props: DataRowProps<any, any>, dataSourceState: DataSourceState<Record<string, any>, any>) => React.ReactNode"
      },
      "editor": {
       "type": "component"
      },
      "from": "@epam/uui-core:PickerBaseOptions",
      "required": false
     },
     {
      "uid": 10,
      "name": "type",
      "comment": {
       "raw": [
        "Type of the filter"
       ]
      },
      "typeValue": {
       "raw": "'singlePicker' | 'multiPicker'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "singlePicker",
        "multiPicker"
       ]
      },
      "required": true
     },
     {
      "uid": 11,
      "name": "showSearch",
      "comment": {
       "raw": [
        "Pass false to hide search in picker body.",
        " If omitted, true value will be used."
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui-core:PickerFooterProps": {
   "summary": {
    "module": "@epam/uui-core",
    "typeName": {
     "name": "PickerFooterProps",
     "nameFull": "PickerFooterProps<TItem, TId>"
    },
    "src": "uui-core/src/types/pickers.ts",
    "exported": true
   },
   "details": {
    "kind": 264,
    "typeValue": {
     "raw": "PickerFooterProps<TItem, TId>",
     "print": [
      "type PickerFooterProps<TItem, TId> = {",
      "    /** Instance of picker DataSource view */",
      "    view: IDataSourceView<TItem, TId, any>;",
      "    /** IEditable interface for the 'Show only selected' toggler */",
      "    showSelected: IEditable<boolean>;",
      "    /** Call to clear picker selection */",
      "    clearSelection: () => void;",
      "    /** If 'single' provided - only one item is selected. In case of 'multi' - multiple items are selected */",
      "    selectionMode: 'single' | 'multi';",
      "    /** If true, 'Clear' button will be disabled */",
      "    disableClear?: boolean;",
      "};"
     ]
    },
    "props": [
     {
      "uid": 1,
      "name": "view",
      "comment": {
       "raw": [
        "Instance of picker DataSource view"
       ]
      },
      "typeValue": {
       "raw": "IDataSourceView<TItem, TId, any>"
      },
      "typeValueRef": "@epam/uui-core:IDataSourceView",
      "required": true
     },
     {
      "uid": 2,
      "name": "showSelected",
      "comment": {
       "raw": [
        "IEditable interface for the 'Show only selected' toggler"
       ]
      },
      "typeValue": {
       "raw": "IEditable<boolean>"
      },
      "required": true
     },
     {
      "uid": 3,
      "name": "clearSelection",
      "comment": {
       "raw": [
        "Call to clear picker selection"
       ]
      },
      "typeValue": {
       "raw": "() => void"
      },
      "editor": {
       "type": "func"
      },
      "required": true
     },
     {
      "uid": 4,
      "name": "selectionMode",
      "comment": {
       "raw": [
        "If 'single' provided - only one item is selected. In case of 'multi' - multiple items are selected"
       ]
      },
      "typeValue": {
       "raw": "'multi' | 'single'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "multi",
        "single"
       ]
      },
      "required": true
     },
     {
      "uid": 5,
      "name": "disableClear",
      "comment": {
       "raw": [
        "If true, 'Clear' button will be disabled"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui-core:RangeDatePickerCoreProps": {
   "summary": {
    "module": "@epam/uui-core",
    "typeName": {
     "name": "RangeDatePickerCoreProps",
     "nameFull": "RangeDatePickerCoreProps"
    },
    "src": "uui-core/src/types/components/datePicker/RangeDatePicker.ts",
    "exported": true
   },
   "details": {
    "kind": 263,
    "typeValue": {
     "raw": "RangeDatePickerCoreProps",
     "print": [
      "interface RangeDatePickerCoreProps extends BaseRangeDatePickerProps {",
      "    getPlaceholder?(type: RangeDatePickerInputType): string;",
      "    rawProps?: {",
      "        from?: IHasRawProps<React.HTMLAttributes<HTMLDivElement>>['rawProps'];",
      "        to?: IHasRawProps<React.HTMLAttributes<HTMLDivElement>>['rawProps'];",
      "        body?: IHasRawProps<React.HTMLAttributes<HTMLDivElement>>['rawProps'];",
      "    };",
      "}"
     ]
    },
    "props": [
     {
      "uid": 1,
      "name": "getPlaceholder",
      "typeValue": {
       "raw": "(type: RangeDatePickerInputType) => string"
      },
      "editor": {
       "type": "func"
      },
      "required": false
     },
     {
      "uid": 2,
      "name": "rawProps",
      "typeValue": {
       "raw": "{ from?: (React.HTMLAttributes<HTMLDivElement> & Record<`data-${string}`, string>) | undefined; to?: (React.HTMLAttributes<HTMLDivElement> & Record<`data-${string}`, string>) | undefined; body?: (React.HTMLAttributes<HTMLDivElement> & Record<`data-${string}`, string>) | undefined; }"
      },
      "required": false
     },
     {
      "uid": 3,
      "name": "format",
      "comment": {
       "raw": [
        "Date format string, see [dayjs docs](@link https://day.js.org/docs/en/display/format)"
       ]
      },
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "from": "@epam/uui-core:BaseRangeDatePickerProps",
      "required": false
     },
     {
      "uid": 4,
      "name": "filter",
      "comment": {
       "raw": [
        "Filter selectable days. Days, for which this callback returns false - will be disabled"
       ]
      },
      "typeValue": {
       "raw": "(day: Dayjs) => boolean"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:BaseRangeDatePickerProps",
      "required": false
     },
     {
      "uid": 5,
      "name": "renderTarget",
      "comment": {
       "raw": [
        "Overrides rendering of picker Target - component which triggers dropdown. Can be used to attach RangeDatePicker to other components, e.g. Buttons"
       ]
      },
      "typeValue": {
       "raw": "(props: IDropdownToggler) => React.ReactNode"
      },
      "editor": {
       "type": "component"
      },
      "from": "@epam/uui-core:BaseRangeDatePickerProps",
      "required": false
     },
     {
      "uid": 6,
      "name": "renderFooter",
      "comment": {
       "raw": [
        "Allows to add a custom footer to the Picker's dropdown body"
       ]
      },
      "typeValue": {
       "raw": "(value: RangeDatePickerValue) => React.ReactNode"
      },
      "editor": {
       "type": "component"
      },
      "from": "@epam/uui-core:BaseRangeDatePickerProps",
      "required": false
     },
     {
      "uid": 7,
      "name": "renderDay",
      "comment": {
       "raw": [
        "Overrides rendering of the single day. For example, to highlight certain days"
       ]
      },
      "typeValue": {
       "raw": "(day: Dayjs, onDayClick: (day: Dayjs) => void) => React.ReactElement<Element, string | React.JSXElementConstructor<any>>"
      },
      "editor": {
       "type": "component"
      },
      "from": "@epam/uui-core:BaseRangeDatePickerProps",
      "required": false
     },
     {
      "uid": 8,
      "name": "presets",
      "comment": {
       "raw": [
        "Range presets (like 'this week', 'this month', etc.) to display at the right of the Picker's body.",
        " UUI provides defaults in the 'rangeDatePickerPresets' exported variable - you can use it as is, or build on top of it (e.g. add your presets)"
       ]
      },
      "typeValue": {
       "raw": "RangeDatePickerPresets"
      },
      "from": "@epam/uui-core:BaseRangeDatePickerProps",
      "required": false
     },
     {
      "uid": 9,
      "name": "disableClear",
      "comment": {
       "raw": [
        "Disables clearing component (with the cross icon)",
        " @default false"
       ],
       "tags": {
        "@default": false
       }
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:BaseRangeDatePickerProps",
      "required": false
     },
     {
      "uid": 10,
      "name": "placement",
      "comment": {
       "raw": [
        "Dropdown position relative to the input. See [Popper Docs](@link https://popper.js.org/)",
        " @default 'bottom-start'"
       ],
       "tags": {
        "@default": "bottom-start"
       }
      },
      "typeValue": {
       "raw": "'left' | 'right' | 'auto' | 'auto-start' | 'auto-end' | 'top' | 'bottom' | 'top-start' | 'top-end' | 'bottom-start' | 'bottom-end' | 'right-start' | 'right-end' | 'left-start' | 'left-end'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "left",
        "right",
        "auto",
        "auto-start",
        "auto-end",
        "top",
        "bottom",
        "top-start",
        "top-end",
        "bottom-start",
        "bottom-end",
        "right-start",
        "right-end",
        "left-start",
        "left-end"
       ]
      },
      "from": "@epam/uui-core:BaseRangeDatePickerProps",
      "required": false
     },
     {
      "uid": 11,
      "name": "isHoliday",
      "comment": {
       "raw": [
        "If this function returns true, the day will be highlighted as holiday"
       ]
      },
      "typeValue": {
       "raw": "(day: Dayjs) => boolean"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:BaseRangeDatePickerProps",
      "required": false
     },
     {
      "uid": 12,
      "name": "onFocus",
      "comment": {
       "raw": [
        "Called when component gets input focus"
       ]
      },
      "typeValue": {
       "raw": "(e: React.FocusEvent<HTMLInputElement, Element>, inputType: 'from' | 'to') => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:BaseRangeDatePickerProps",
      "required": false
     },
     {
      "uid": 13,
      "name": "onBlur",
      "comment": {
       "raw": [
        "Called when component looses input focus"
       ]
      },
      "typeValue": {
       "raw": "(e: React.FocusEvent<HTMLInputElement, Element>, inputType: 'from' | 'to') => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:BaseRangeDatePickerProps",
      "required": false
     },
     {
      "uid": 14,
      "name": "onOpenChange",
      "comment": {
       "raw": [
        "Called when component is opened/closed"
       ]
      },
      "typeValue": {
       "raw": "(isOpen: boolean) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:BaseRangeDatePickerProps",
      "required": false
     },
     {
      "uid": 15,
      "name": "inputCx",
      "comment": {
       "raw": [
        "Styles for input and body components in RangeDatePicker"
       ]
      },
      "typeValue": {
       "raw": "null | string | number | boolean | ClassDictionary | ClassArray"
      },
      "typeValueRef": "@epam/uui-core:ClassValue",
      "from": "@epam/uui-core:BaseRangeDatePickerProps",
      "required": false
     },
     {
      "uid": 16,
      "name": "bodyCx",
      "typeValue": {
       "raw": "null | string | number | boolean | ClassDictionary | ClassArray"
      },
      "typeValueRef": "@epam/uui-core:ClassValue",
      "from": "@epam/uui-core:BaseRangeDatePickerProps",
      "required": false
     },
     {
      "uid": 17,
      "name": "value",
      "comment": {
       "raw": [
        "The current value of component"
       ]
      },
      "typeValue": {
       "raw": "RangeDatePickerValue"
      },
      "from": "@epam/uui-core:IEditable",
      "required": true
     },
     {
      "uid": 18,
      "name": "onValueChange",
      "comment": {
       "raw": [
        "Called when value needs to be changed (usually due to user interaction)"
       ]
      },
      "typeValue": {
       "raw": "(newValue: RangeDatePickerValue) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IEditable",
      "required": true
     },
     {
      "uid": 19,
      "name": "isInvalid",
      "comment": {
       "raw": [
        "True if component contains invalid input"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:ICanBeInvalid",
      "required": false
     },
     {
      "uid": 20,
      "name": "validationMessage",
      "comment": {
       "raw": [
        "Message describing why the value is invalid"
       ]
      },
      "typeValue": {
       "raw": "null | string | number | boolean | React.ReactElement<any, string | React.JSXElementConstructor<any>> | React.ReactFragment | React.ReactPortal"
      },
      "typeValueRef": "@types/react:ReactNode",
      "from": "@epam/uui-core:ICanBeInvalid",
      "required": false
     },
     {
      "uid": 21,
      "name": "validationProps",
      "comment": {
       "raw": [
        "If T is a complex value (object or array), this property contains validation states of inner items"
       ]
      },
      "typeValue": {
       "raw": "{ [key: string]: ICanBeInvalid; }"
      },
      "from": "@epam/uui-core:ICanBeInvalid",
      "required": false
     },
     {
      "uid": 22,
      "name": "isDisabled",
      "comment": {
       "raw": [
        "Disable editing, and visually de-emphasize value of the component"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:IDisableable",
      "required": false
     },
     {
      "uid": 23,
      "name": "isReadonly",
      "comment": {
       "raw": [
        "Disable editing. Unlike isDisabled, keep component's value readable."
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:ICanBeReadonly",
      "required": false
     },
     {
      "uid": 24,
      "name": "isRequired",
      "comment": {
       "raw": [
        "Marks that component's value is required and shouldn't be empty"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:ICanBeRequired",
      "required": false
     },
     {
      "uid": 25,
      "name": "getValueChangeAnalyticsEvent",
      "comment": {
       "raw": [
        "Given a value, returns an analytics event to send when component is edited.",
        " See [AnalyticsContext](@link https://uui.epam.com/documents?id=analyticsContext&mode=doc&skin=UUI4_promo&category=contexts)."
       ]
      },
      "typeValue": {
       "raw": "(newValue: RangeDatePickerValue | null, oldValue: RangeDatePickerValue | null) => AnalyticsEvent"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IAnalyticableOnChange",
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui-core:RangeDatePickerInputType": {
   "summary": {
    "module": "@epam/uui-core",
    "typeName": {
     "name": "RangeDatePickerInputType",
     "nameFull": "RangeDatePickerInputType"
    },
    "src": "uui-core/src/types/components/datePicker/RangeDatePicker.ts",
    "exported": true
   },
   "details": {
    "kind": 264,
    "typeValue": {
     "raw": "'from' | 'to'",
     "print": [
      "type RangeDatePickerInputType = 'from' | 'to';"
     ]
    }
   }
  },
  "@epam/uui-core:RangeDatePickerPresets": {
   "summary": {
    "module": "@epam/uui-core",
    "typeName": {
     "name": "RangeDatePickerPresets",
     "nameFull": "RangeDatePickerPresets"
    },
    "src": "uui-core/src/types/components/datePicker/BaseRangeDatePicker.ts",
    "exported": true
   },
   "details": {
    "kind": 264,
    "typeValue": {
     "raw": "RangeDatePickerPresets",
     "print": [
      "type RangeDatePickerPresets = {",
      "    [key: string]: {",
      "        name: ReactNode;",
      "        getRange: () => RangeDatePickerPresetValue;",
      "    };",
      "};"
     ]
    },
    "props": [
     {
      "uid": 1,
      "name": "[key: string]",
      "typeValue": {
       "raw": "{ name: React.ReactNode; getRange: () => RangeDatePickerPresetValue; }"
      },
      "required": true
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui-core:RangeDatePickerPresetValue": {
   "summary": {
    "module": "@epam/uui-core",
    "typeName": {
     "name": "RangeDatePickerPresetValue",
     "nameFull": "RangeDatePickerPresetValue"
    },
    "src": "uui-core/src/types/components/datePicker/BaseRangeDatePicker.ts",
    "exported": true
   },
   "details": {
    "kind": 264,
    "typeValue": {
     "raw": "RangeDatePickerPresetValue",
     "print": [
      "type RangeDatePickerPresetValue = {",
      "    from: string;",
      "    to: string;",
      "    order?: number;",
      "};"
     ]
    },
    "props": [
     {
      "uid": 1,
      "name": "from",
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "required": true
     },
     {
      "uid": 2,
      "name": "to",
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "required": true
     },
     {
      "uid": 3,
      "name": "order",
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui-core:RangeDatePickerValue": {
   "summary": {
    "module": "@epam/uui-core",
    "typeName": {
     "name": "RangeDatePickerValue",
     "nameFull": "RangeDatePickerValue"
    },
    "src": "uui-core/src/types/components/datePicker/BaseRangeDatePicker.ts",
    "exported": true
   },
   "details": {
    "kind": 263,
    "typeValue": {
     "raw": "RangeDatePickerValue",
     "print": [
      "interface RangeDatePickerValue {",
      "    from: string | null;",
      "    to: string | null;",
      "}"
     ]
    },
    "props": [
     {
      "uid": 1,
      "name": "from",
      "typeValue": {
       "raw": "null | string"
      },
      "editor": {
       "type": "string"
      },
      "required": false
     },
     {
      "uid": 2,
      "name": "to",
      "typeValue": {
       "raw": "null | string"
      },
      "editor": {
       "type": "string"
      },
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui-core:RenderCellProps": {
   "summary": {
    "module": "@epam/uui-core",
    "typeName": {
     "name": "RenderCellProps",
     "nameFull": "RenderCellProps<TItem, TId>"
    },
    "src": "uui-core/src/types/tables.ts",
    "exported": true
   },
   "details": {
    "kind": 263,
    "typeValue": {
     "raw": "RenderCellProps<TItem, TId>",
     "print": [
      "interface RenderCellProps<TItem = any, TId = any> extends DataTableCellOptions<TItem, TId> {",
      "    /**",
      "     * Lens instance, wrapping IEditable on the row, to help binding to row's value.",
      "     * E.g. <TextInput { ...rowLens.prop('name').toProps() } />",
      "     */",
      "    rowLens: ILens<TItem>;",
      "}"
     ]
    },
    "props": [
     {
      "uid": 1,
      "name": "rowLens",
      "comment": {
       "raw": [
        "Lens instance, wrapping IEditable on the row, to help binding to row's value.",
        " E.g. <TextInput { ...rowLens.prop('name').toProps() } />"
       ]
      },
      "typeValue": {
       "raw": "ILens<TItem>"
      },
      "required": true
     },
     {
      "uid": 2,
      "name": "key",
      "comment": {
       "raw": [
        "Key to use as component's key"
       ]
      },
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "from": "@epam/uui-core:DataTableCellOptions",
      "required": true
     },
     {
      "uid": 3,
      "name": "rowProps",
      "comment": {
       "raw": [
        "DataTableRowsProps object for the table row the cell is at"
       ]
      },
      "typeValue": {
       "raw": "DataTableRowProps<TItem, TId>"
      },
      "from": "@epam/uui-core:DataTableCellOptions",
      "required": true
     },
     {
      "uid": 4,
      "name": "column",
      "comment": {
       "raw": [
        "DataColumnProps object for the column the cell is at"
       ]
      },
      "typeValue": {
       "raw": "DataColumnProps<TItem, TId, any>"
      },
      "from": "@epam/uui-core:DataTableCellOptions",
      "required": true
     },
     {
      "uid": 5,
      "name": "index",
      "comment": {
       "raw": [
        "Column index in table"
       ]
      },
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "from": "@epam/uui-core:DataTableCellOptions",
      "required": false
     },
     {
      "uid": 6,
      "name": "isFirstColumn",
      "comment": {
       "raw": [
        "True if the cell is in the first column"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:DataTableCellOptions",
      "required": true
     },
     {
      "uid": 7,
      "name": "isLastColumn",
      "comment": {
       "raw": [
        "True if the cell is in the last column"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:DataTableCellOptions",
      "required": true
     },
     {
      "uid": 8,
      "name": "tabIndex",
      "comment": {
       "raw": [
        "HTML tabIndex attribute to set on the cell"
       ]
      },
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "from": "@epam/uui-core:DataTableCellOptions",
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui-core:RenderEditorProps": {
   "summary": {
    "module": "@epam/uui-core",
    "typeName": {
     "name": "RenderEditorProps",
     "nameFull": "RenderEditorProps<TItem, TId, TCellValue>"
    },
    "src": "uui-core/src/types/tables.ts",
    "exported": true
   },
   "details": {
    "kind": 263,
    "typeValue": {
     "raw": "RenderEditorProps<TItem, TId, TCellValue>",
     "print": [
      "interface RenderEditorProps<TItem, TId, TCellValue> extends IEditable<TCellValue>, ICanFocus<any> {",
      "    /** DataRowProps object of rendered row */",
      "    rowProps: DataRowProps<TItem, TId>;",
      "    /** Cell mode signal the editor component to adapt it's visuals to cell editor */",
      "    mode: 'cell';",
      "}"
     ]
    },
    "props": [
     {
      "uid": 1,
      "name": "rowProps",
      "comment": {
       "raw": [
        "DataRowProps object of rendered row"
       ]
      },
      "typeValue": {
       "raw": "DataRowProps<TItem, TId>"
      },
      "typeValueRef": "@epam/uui-core:DataRowProps",
      "required": true
     },
     {
      "uid": 2,
      "name": "mode",
      "comment": {
       "raw": [
        "Cell mode signal the editor component to adapt it's visuals to cell editor"
       ]
      },
      "typeValue": {
       "raw": "'cell'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "cell"
       ]
      },
      "required": true
     },
     {
      "uid": 3,
      "name": "value",
      "comment": {
       "raw": [
        "The current value of component"
       ]
      },
      "typeValue": {
       "raw": "TCellValue"
      },
      "from": "@epam/uui-core:IEditable",
      "required": true
     },
     {
      "uid": 4,
      "name": "onValueChange",
      "comment": {
       "raw": [
        "Called when value needs to be changed (usually due to user interaction)"
       ]
      },
      "typeValue": {
       "raw": "(newValue: TCellValue) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IEditable",
      "required": true
     },
     {
      "uid": 5,
      "name": "isInvalid",
      "comment": {
       "raw": [
        "True if component contains invalid input"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:ICanBeInvalid",
      "required": false
     },
     {
      "uid": 6,
      "name": "validationMessage",
      "comment": {
       "raw": [
        "Message describing why the value is invalid"
       ]
      },
      "typeValue": {
       "raw": "null | string | number | boolean | React.ReactElement<any, string | React.JSXElementConstructor<any>> | React.ReactFragment | React.ReactPortal"
      },
      "typeValueRef": "@types/react:ReactNode",
      "from": "@epam/uui-core:ICanBeInvalid",
      "required": false
     },
     {
      "uid": 7,
      "name": "validationProps",
      "comment": {
       "raw": [
        "If T is a complex value (object or array), this property contains validation states of inner items"
       ]
      },
      "typeValue": {
       "raw": "{ [key: string]: ICanBeInvalid; }"
      },
      "from": "@epam/uui-core:ICanBeInvalid",
      "required": false
     },
     {
      "uid": 8,
      "name": "isDisabled",
      "comment": {
       "raw": [
        "Disable editing, and visually de-emphasize value of the component"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:IDisableable",
      "required": false
     },
     {
      "uid": 9,
      "name": "isReadonly",
      "comment": {
       "raw": [
        "Disable editing. Unlike isDisabled, keep component's value readable."
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:ICanBeReadonly",
      "required": false
     },
     {
      "uid": 10,
      "name": "isRequired",
      "comment": {
       "raw": [
        "Marks that component's value is required and shouldn't be empty"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:ICanBeRequired",
      "required": false
     },
     {
      "uid": 11,
      "name": "onFocus",
      "comment": {
       "raw": [
        "Called when component gets input focus"
       ]
      },
      "typeValue": {
       "raw": "(e: React.FocusEvent<any, Element>) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:ICanFocus",
      "required": false
     },
     {
      "uid": 12,
      "name": "onBlur",
      "comment": {
       "raw": [
        "Called when component looses input focus"
       ]
      },
      "typeValue": {
       "raw": "(e: React.FocusEvent<any, Element>) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:ICanFocus",
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui-core:ScrollAlign": {
   "summary": {
    "module": "@epam/uui-core",
    "typeName": {
     "name": "ScrollAlign",
     "nameFull": "ScrollAlign"
    },
    "src": "uui-core/src/types/dataSources.ts",
    "exported": true
   },
   "details": {
    "kind": 264,
    "typeValue": {
     "raw": "'top' | 'nearest'",
     "print": [
      "type ScrollAlign = 'top' | 'nearest';"
     ]
    }
   }
  },
  "@epam/uui-core:ScrollToConfig": {
   "summary": {
    "module": "@epam/uui-core",
    "typeName": {
     "name": "ScrollToConfig",
     "nameFull": "ScrollToConfig"
    },
    "src": "uui-core/src/types/dataSources.ts",
    "comment": {
     "raw": [
      "Holds configuration of the force scrolling behavior."
     ]
    },
    "exported": true
   },
   "details": {
    "kind": 263,
    "typeValue": {
     "raw": "ScrollToConfig",
     "print": [
      "/**",
      " * Holds configuration of the force scrolling behavior.",
      " */",
      "interface ScrollToConfig {",
      "    /** Index of the row to be scrolled to. */",
      "    index?: number;",
      "    /** Scrolling movement behavior. */",
      "    behavior?: ScrollBehavior;",
      "    /** Alignment behavior. This property specifies, to which position a row with an index should be scrolled to.",
      "     * @default 'top'",
      "     *",
      "     * If `nearest` is specified, a list will be scrolled to a row in the nearest position only if row is not visible.",
      "     * If a row is closer to the bottom, the list will be scrolled to the row in the bottom position of a scroll container.",
      "     * If closer to the top, will be scrolled to the row in the top position.",
      "     *",
      "     * If `top` is specified, scrolling a list to a row to the top part of the container will happen in any case.",
      "    */",
      "    align?: ScrollAlign;",
      "}"
     ]
    },
    "props": [
     {
      "uid": 1,
      "name": "index",
      "comment": {
       "raw": [
        "Index of the row to be scrolled to."
       ]
      },
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "required": false
     },
     {
      "uid": 2,
      "name": "behavior",
      "comment": {
       "raw": [
        "Scrolling movement behavior."
       ]
      },
      "typeValue": {
       "raw": "'auto' | 'instant' | 'smooth'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "auto",
        "instant",
        "smooth"
       ]
      },
      "required": false
     },
     {
      "uid": 3,
      "name": "align",
      "comment": {
       "raw": [
        "Alignment behavior. This property specifies, to which position a row with an index should be scrolled to.",
        " @default 'top'",
        "",
        " If `nearest` is specified, a list will be scrolled to a row in the nearest position only if row is not visible.",
        " If a row is closer to the bottom, the list will be scrolled to the row in the bottom position of a scroll container.",
        " If closer to the top, will be scrolled to the row in the top position.",
        "",
        " If `top` is specified, scrolling a list to a row to the top part of the container will happen in any case."
       ],
       "tags": {
        "@default": "top"
       }
      },
      "typeValue": {
       "raw": "'top' | 'nearest'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "top",
        "nearest"
       ]
      },
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui-core:SearchResultItem": {
   "summary": {
    "module": "@epam/uui-core",
    "typeName": {
     "name": "SearchResultItem",
     "nameFull": "SearchResultItem<TItem>"
    },
    "src": "uui-core/src/data/processing/views/LazyListView.ts",
    "exported": true
   },
   "details": {
    "kind": 264,
    "typeValue": {
     "raw": "SearchResultItem<TItem>",
     "print": [
      "type SearchResultItem<TItem> = TItem & {",
      "    parents?: [",
      "        TItem",
      "    ];",
      "};"
     ]
    },
    "props": [
     {
      "uid": 1,
      "name": "parents",
      "typeValue": {
       "raw": "[TItem]"
      },
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui-core:SinglePickerProps": {
   "summary": {
    "module": "@epam/uui-core",
    "typeName": {
     "name": "SinglePickerProps",
     "nameFull": "SinglePickerProps<TId, TItem>"
    },
    "src": "uui-core/src/types/pickers.ts",
    "exported": true
   },
   "details": {
    "kind": 264,
    "typeValue": {
     "raw": "{ selectionMode: 'single'; valueType?: 'id' | undefined; } & IEditable<TId> | { selectionMode: 'single'; valueType: 'entity'; } & IEditable<TItem>",
     "print": [
      "type SinglePickerProps<TId, TItem> = ({",
      "    /** If 'single' provided - only one item is selected. In case of 'multi' - multiple items are selected */",
      "    selectionMode: 'single';",
      "    /** Defines what to use in value/onValueChange: 'id' - item id (TId). 'entity' - the item itself (TItem) */",
      "    valueType?: 'id';",
      "} & IEditable<TId>) | ({",
      "    /** If 'single' provided - only one item is selected. In case of 'multi' - multiple items are selected */",
      "    selectionMode: 'single';",
      "    /** Defines what to use in value/onValueChange: 'id' - item id (TId). 'entity' - the item itself (TItem) */",
      "    valueType: 'entity';",
      "} & IEditable<TItem>);"
     ]
    },
    "props": [
     {
      "uid": 11,
      "name": "selectionMode",
      "comment": {
       "raw": [
        "If 'single' provided - only one item is selected. In case of 'multi' - multiple items are selected"
       ]
      },
      "typeValue": {
       "raw": "'single'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "single"
       ]
      },
      "required": true
     },
     {
      "uid": 2,
      "name": "valueType",
      "comment": {
       "raw": [
        "Defines what to use in value/onValueChange: 'id' - item id (TId). 'entity' - the item itself (TItem)"
       ]
      },
      "typeValue": {
       "raw": "'id'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "id"
       ]
      },
      "required": false
     },
     {
      "uid": 3,
      "name": "value",
      "comment": {
       "raw": [
        "The current value of component"
       ]
      },
      "typeValue": {
       "raw": "TId"
      },
      "from": "@epam/uui-core:IEditable",
      "required": true
     },
     {
      "uid": 4,
      "name": "onValueChange",
      "comment": {
       "raw": [
        "Called when value needs to be changed (usually due to user interaction)"
       ]
      },
      "typeValue": {
       "raw": "(newValue: TId) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IEditable",
      "required": true
     },
     {
      "uid": 15,
      "name": "isInvalid",
      "comment": {
       "raw": [
        "True if component contains invalid input"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:ICanBeInvalid",
      "required": false
     },
     {
      "uid": 16,
      "name": "validationMessage",
      "comment": {
       "raw": [
        "Message describing why the value is invalid"
       ]
      },
      "typeValue": {
       "raw": "null | string | number | boolean | React.ReactElement<any, string | React.JSXElementConstructor<any>> | React.ReactFragment | React.ReactPortal"
      },
      "typeValueRef": "@types/react:ReactNode",
      "from": "@epam/uui-core:ICanBeInvalid",
      "required": false
     },
     {
      "uid": 17,
      "name": "validationProps",
      "comment": {
       "raw": [
        "If T is a complex value (object or array), this property contains validation states of inner items"
       ]
      },
      "typeValue": {
       "raw": "{ [key: string]: ICanBeInvalid; }"
      },
      "from": "@epam/uui-core:ICanBeInvalid",
      "required": false
     },
     {
      "uid": 18,
      "name": "isDisabled",
      "comment": {
       "raw": [
        "Disable editing, and visually de-emphasize value of the component"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:IDisableable",
      "required": false
     },
     {
      "uid": 19,
      "name": "isReadonly",
      "comment": {
       "raw": [
        "Disable editing. Unlike isDisabled, keep component's value readable."
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:ICanBeReadonly",
      "required": false
     },
     {
      "uid": 20,
      "name": "isRequired",
      "comment": {
       "raw": [
        "Marks that component's value is required and shouldn't be empty"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:ICanBeRequired",
      "required": false
     },
     {
      "uid": 12,
      "name": "valueType",
      "comment": {
       "raw": [
        "Defines what to use in value/onValueChange: 'id' - item id (TId). 'entity' - the item itself (TItem)"
       ]
      },
      "typeValue": {
       "raw": "'entity'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "entity"
       ]
      },
      "required": true
     },
     {
      "uid": 13,
      "name": "value",
      "comment": {
       "raw": [
        "The current value of component"
       ]
      },
      "typeValue": {
       "raw": "TItem"
      },
      "from": "@epam/uui-core:IEditable",
      "required": true
     },
     {
      "uid": 14,
      "name": "onValueChange",
      "comment": {
       "raw": [
        "Called when value needs to be changed (usually due to user interaction)"
       ]
      },
      "typeValue": {
       "raw": "(newValue: TItem) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IEditable",
      "required": true
     }
    ],
    "propsFromUnion": true
   }
  },
  "@epam/uui-core:SortDirection": {
   "summary": {
    "module": "@epam/uui-core",
    "typeName": {
     "name": "SortDirection",
     "nameFull": "SortDirection"
    },
    "src": "uui-core/src/types/dataSources.ts",
    "exported": true
   },
   "details": {
    "kind": 264,
    "typeValue": {
     "raw": "'asc' | 'desc'",
     "print": [
      "type SortDirection = 'asc' | 'desc';"
     ]
    }
   }
  },
  "@epam/uui-core:SortingOption": {
   "summary": {
    "module": "@epam/uui-core",
    "typeName": {
     "name": "SortingOption",
     "nameFull": "SortingOption<T>"
    },
    "src": "uui-core/src/types/dataSources.ts",
    "exported": true
   },
   "details": {
    "kind": 263,
    "typeValue": {
     "raw": "SortingOption<T>",
     "print": [
      "interface SortingOption<T = any> {",
      "    /** Field of sorted entity under which sorting is performed */",
      "    field: keyof T;",
      "    /** Direction of a sorting */",
      "    direction?: SortDirection;",
      "}"
     ]
    },
    "props": [
     {
      "uid": 1,
      "name": "field",
      "comment": {
       "raw": [
        "Field of sorted entity under which sorting is performed"
       ]
      },
      "typeValue": {
       "raw": "keyof T"
      },
      "required": true
     },
     {
      "uid": 2,
      "name": "direction",
      "comment": {
       "raw": [
        "Direction of a sorting"
       ]
      },
      "typeValue": {
       "raw": "'asc' | 'desc'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "asc",
        "desc"
       ]
      },
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui-core:SpinnerCoreProps": {
   "summary": {
    "module": "@epam/uui-core",
    "typeName": {
     "name": "SpinnerCoreProps",
     "nameFull": "SpinnerCoreProps"
    },
    "src": "uui-core/src/types/components/Spinner.ts",
    "exported": true
   },
   "details": {
    "kind": 263,
    "typeValue": {
     "raw": "SpinnerCoreProps",
     "print": [
      "interface SpinnerCoreProps extends IHasCX, IHasRawProps<React.HTMLAttributes<HTMLDivElement>>, IHasForwardedRef<HTMLDivElement> {",
      "}"
     ]
    },
    "props": [
     {
      "uid": 1,
      "name": "cx",
      "comment": {
       "raw": [
        "CSS class(es) to put on component's root. See {@link https://github.com/JedWatson/classnames#usage} for details"
       ]
      },
      "typeValue": {
       "raw": "null | string | number | boolean | ClassDictionary | ClassArray"
      },
      "typeValueRef": "@epam/uui-core:ClassValue",
      "from": "@epam/uui-core:IHasCX",
      "required": false
     },
     {
      "uid": 2,
      "name": "rawProps",
      "comment": {
       "raw": [
        "Any HTML attributes (native or 'data-') to put on the underlying component"
       ]
      },
      "typeValue": {
       "raw": "React.HTMLAttributes<HTMLDivElement> & Record<`data-${string}`, string>"
      },
      "from": "@epam/uui-core:IHasRawProps",
      "required": false
     },
     {
      "uid": 3,
      "name": "forwardedRef",
      "comment": {
       "raw": [
        "this ref is passed to the underlying component"
       ]
      },
      "typeValue": {
       "raw": "null | (instance: HTMLDivElement | null) => void | React.MutableRefObject<HTMLDivElement | null>"
      },
      "from": "@epam/uui-core:IHasForwardedRef",
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui-core:StatefulProps": {
   "summary": {
    "module": "@epam/uui-core",
    "typeName": {
     "name": "StatefulProps",
     "nameFull": "StatefulProps<T>"
    },
    "src": "uui-core/src/data/Stateful.tsx",
    "exported": true
   },
   "details": {
    "kind": 263,
    "typeValue": {
     "raw": "StatefulProps<T>",
     "print": [
      "interface StatefulProps<T> {",
      "    initialState: Partial<T>;",
      "    render(props: IEditable<T>): React.ReactNode;",
      "    storage?: StatefulStorageSettings;",
      "}"
     ]
    },
    "props": [
     {
      "uid": 1,
      "name": "initialState",
      "typeValue": {
       "raw": "Partial<T>"
      },
      "typeValueRef": "node_modules/typescript/lib/lib.es5.d.ts:Partial",
      "required": true
     },
     {
      "uid": 2,
      "name": "render",
      "typeValue": {
       "raw": "(props: IEditable<T>) => React.ReactNode"
      },
      "editor": {
       "type": "component"
      },
      "required": true
     },
     {
      "uid": 3,
      "name": "storage",
      "typeValue": {
       "raw": "'state' | 'query'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "state",
        "query"
       ]
      },
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui-core:TableFiltersConfig": {
   "summary": {
    "module": "@epam/uui-core",
    "typeName": {
     "name": "TableFiltersConfig",
     "nameFull": "TableFiltersConfig<TFilter>"
    },
    "src": "uui-core/src/types/tables.ts",
    "exported": true
   },
   "details": {
    "kind": 264,
    "typeValue": {
     "raw": "PickerFilterConfig<TFilter> | DatePickerFilterConfig<TFilter> | NumericFilterConfig<TFilter> | RangeDatePickerFilterConfig<TFilter> | CustomFilterConfig<TFilter>",
     "print": [
      "type TableFiltersConfig<TFilter> = PickerFilterConfig<TFilter> | DatePickerFilterConfig<TFilter> | NumericFilterConfig<TFilter> | RangeDatePickerFilterConfig<TFilter> | CustomFilterConfig<TFilter>;"
     ]
    },
    "props": [
     {
      "uid": 37,
      "name": "title",
      "comment": {
       "raw": [
        "Title of the filter, displayed in filter toggler and filter body"
       ]
      },
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "from": "@epam/uui-core:FilterConfigBase",
      "required": true
     },
     {
      "uid": 38,
      "name": "field",
      "comment": {
       "raw": [
        "Field of filters object, where store the filter value"
       ]
      },
      "typeValue": {
       "raw": "keyof TFilter"
      },
      "from": "@epam/uui-core:FilterConfigBase",
      "required": true
     },
     {
      "uid": 39,
      "name": "columnKey",
      "comment": {
       "raw": [
        "Key of the column to which the filter is attached.",
        " If omitted, filter won't be attached to the column."
       ]
      },
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "from": "@epam/uui-core:FilterConfigBase",
      "required": false
     },
     {
      "uid": 40,
      "name": "isAlwaysVisible",
      "comment": {
       "raw": [
        "Pass true to make filter always visible in FilterPanel. User can't hide it via 'Add filter' dropdown"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:FilterConfigBase",
      "required": false
     },
     {
      "uid": 41,
      "name": "predicates",
      "comment": {
       "raw": [
        "Array of available predicates for the filter. This predicated can be chosen by user and applied to the filter value."
       ]
      },
      "typeValue": {
       "raw": "IFilterPredicate[]"
      },
      "from": "@epam/uui-core:FilterConfigBase",
      "required": false
     },
     {
      "uid": 42,
      "name": "maxCount",
      "comment": {
       "raw": [
        "Count of words to show in the Filter toggler. By default, 2 item will be shown."
       ]
      },
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "from": "@epam/uui-core:FilterConfigBase",
      "required": false
     },
     {
      "uid": 7,
      "name": "dataSource",
      "comment": {
       "raw": [
        "Datasource to get data for the picker"
       ]
      },
      "typeValue": {
       "raw": "IDataSource<any, any, any>"
      },
      "from": "@epam/uui-core:PickerBaseOptions",
      "required": true
     },
     {
      "uid": 8,
      "name": "getName",
      "comment": {
       "raw": [
        "A pure function that gets entity name from entity object.",
        "     Default: (item) => item.name."
       ]
      },
      "typeValue": {
       "raw": "(item: any) => string"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:PickerBaseOptions",
      "required": false
     },
     {
      "uid": 9,
      "name": "renderRow",
      "comment": {
       "raw": [
        "Allow to customize how each selectable row is rendered. Can be used to add subtitles, avatars, etc."
       ]
      },
      "typeValue": {
       "raw": "(props: DataRowProps<any, any>, dataSourceState: DataSourceState<Record<string, any>, any>) => React.ReactNode"
      },
      "editor": {
       "type": "component"
      },
      "from": "@epam/uui-core:PickerBaseOptions",
      "required": false
     },
     {
      "uid": 10,
      "name": "type",
      "comment": {
       "raw": [
        "Type of the filter"
       ]
      },
      "typeValue": {
       "raw": "'singlePicker' | 'multiPicker'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "singlePicker",
        "multiPicker"
       ]
      },
      "from": "@epam/uui-core:PickerFilterConfig",
      "required": true
     },
     {
      "uid": 11,
      "name": "showSearch",
      "comment": {
       "raw": [
        "Pass false to hide search in picker body.",
        " If omitted, true value will be used."
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:PickerFilterConfig",
      "required": false
     },
     {
      "uid": 34,
      "name": "filter",
      "comment": {
       "raw": [
        "Filter selectable days. Days, for which this callback returns false - will be disabled"
       ]
      },
      "typeValue": {
       "raw": "(day: Dayjs) => boolean"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:BaseDatePickerProps",
      "required": false
     },
     {
      "uid": 35,
      "name": "format",
      "comment": {
       "raw": [
        "Date format string, see [dayjs docs](@link https://day.js.org/docs/en/display/format)"
       ]
      },
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "from": "@epam/uui-core:BaseDatePickerProps",
      "required": false
     },
     {
      "uid": 20,
      "name": "type",
      "comment": {
       "raw": [
        "Type of the filter"
       ]
      },
      "typeValue": {
       "raw": "'datePicker'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "datePicker"
       ]
      },
      "from": "@epam/uui-core:DatePickerFilterConfig",
      "required": true
     },
     {
      "uid": 27,
      "name": "type",
      "comment": {
       "raw": [
        "Type of the filter"
       ]
      },
      "typeValue": {
       "raw": "'numeric'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "numeric"
       ]
      },
      "from": "@epam/uui-core:NumericFilterConfig",
      "required": true
     },
     {
      "uid": 36,
      "name": "type",
      "comment": {
       "raw": [
        "Type of the filter"
       ]
      },
      "typeValue": {
       "raw": "'rangeDatePicker'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "rangeDatePicker"
       ]
      },
      "from": "@epam/uui-core:RangeDatePickerFilterConfig",
      "required": true
     },
     {
      "uid": 43,
      "name": "type",
      "comment": {
       "raw": [
        "Type of the filter"
       ]
      },
      "typeValue": {
       "raw": "'custom'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "custom"
       ]
      },
      "from": "@epam/uui-core:CustomFilterConfig",
      "required": true
     },
     {
      "uid": 44,
      "name": "render",
      "comment": {
       "raw": [
        "Render callback for filter body"
       ]
      },
      "typeValue": {
       "raw": "(props: IFilterItemBodyProps<any>) => React.ReactElement<any, string | React.JSXElementConstructor<any>>"
      },
      "editor": {
       "type": "component"
      },
      "from": "@epam/uui-core:CustomFilterConfig",
      "required": true
     },
     {
      "uid": 45,
      "name": "getTogglerValue",
      "comment": {
       "raw": [
        "A pure function that gets value to display in filter toggler"
       ]
      },
      "typeValue": {
       "raw": "(props: IFilterItemBodyProps<any>) => React.ReactNode"
      },
      "editor": {
       "type": "component"
      },
      "from": "@epam/uui-core:CustomFilterConfig",
      "required": true
     }
    ],
    "propsFromUnion": true
   }
  },
  "@epam/uui-core:TextInputCoreProps": {
   "summary": {
    "module": "@epam/uui-core",
    "typeName": {
     "name": "TextInputCoreProps",
     "nameFull": "TextInputCoreProps"
    },
    "src": "uui-core/src/types/components/TextInput.ts",
    "exported": true
   },
   "details": {
    "kind": 263,
    "typeValue": {
     "raw": "TextInputCoreProps",
     "print": [
      "interface TextInputCoreProps extends IHasCX, IClickable, IDisableable, IEditable<string | undefined>, IHasPlaceholder, IHasIcon, ICanBeReadonly, IDropdownToggler, IAnalyticableOnChange<string>, IHasRawProps<React.HTMLAttributes<HTMLInputElement>>, ICanFocus<HTMLInputElement>, IHasTabIndex {",
      "    /** Enables cancel (cross) icon, and fires when the icon is clicked */",
      "    onCancel?(): void;",
      "    /** Enables accept (check) icon, and fires when the icon is clicked */",
      "    onAccept?(): void;",
      "    /** keydown event handler to put on the HTML input element */",
      "    onKeyDown?(e?: any): void;",
      "    /** Put focus on the element, when component is mounted */",
      "    autoFocus?: boolean;",
      "    /** Standard 'type' attribute to put on the HTML input element (e.g. 'password') */",
      "    type?: string;",
      "    /** Standard [autocomplete attribute]{@link https://www.w3schools.com/tags/att_input_autocomplete.asp} */",
      "    autoComplete?: string;",
      "    /** Standard [name attribute]{@link https://www.w3schools.com/tags/att_input_name.asp} */",
      "    name?: string;",
      "    /** Maximum input length in characters */",
      "    maxLength?: number;",
      "    /** Standard [inputMode attribute]{@link https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/inputmode} */",
      "    inputMode?: React.InputHTMLAttributes<HTMLInputElement>['inputMode'];",
      "    /** HTML ID attribute for input */",
      "    id?: string;",
      "}"
     ]
    },
    "props": [
     {
      "uid": 1,
      "name": "onCancel",
      "comment": {
       "raw": [
        "Enables cancel (cross) icon, and fires when the icon is clicked"
       ]
      },
      "typeValue": {
       "raw": "() => void"
      },
      "editor": {
       "type": "func"
      },
      "required": false
     },
     {
      "uid": 2,
      "name": "onAccept",
      "comment": {
       "raw": [
        "Enables accept (check) icon, and fires when the icon is clicked"
       ]
      },
      "typeValue": {
       "raw": "() => void"
      },
      "editor": {
       "type": "func"
      },
      "required": false
     },
     {
      "uid": 3,
      "name": "onKeyDown",
      "comment": {
       "raw": [
        "keydown event handler to put on the HTML input element"
       ]
      },
      "typeValue": {
       "raw": "(e?: any) => void"
      },
      "editor": {
       "type": "func"
      },
      "required": false
     },
     {
      "uid": 4,
      "name": "autoFocus",
      "comment": {
       "raw": [
        "Put focus on the element, when component is mounted"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "required": false
     },
     {
      "uid": 5,
      "name": "type",
      "comment": {
       "raw": [
        "Standard 'type' attribute to put on the HTML input element (e.g. 'password')"
       ]
      },
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "required": false
     },
     {
      "uid": 6,
      "name": "autoComplete",
      "comment": {
       "raw": [
        "Standard [autocomplete attribute]{@link https://www.w3schools.com/tags/att_input_autocomplete.asp}"
       ]
      },
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "required": false
     },
     {
      "uid": 7,
      "name": "name",
      "comment": {
       "raw": [
        "Standard [name attribute]{@link https://www.w3schools.com/tags/att_input_name.asp}"
       ]
      },
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "required": false
     },
     {
      "uid": 8,
      "name": "maxLength",
      "comment": {
       "raw": [
        "Maximum input length in characters"
       ]
      },
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "required": false
     },
     {
      "uid": 9,
      "name": "inputMode",
      "comment": {
       "raw": [
        "Standard [inputMode attribute]{@link https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/inputmode}"
       ]
      },
      "typeValue": {
       "raw": "'search' | 'numeric' | 'none' | 'text' | 'tel' | 'url' | 'email' | 'decimal'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "search",
        "numeric",
        "none",
        "text",
        "tel",
        "url",
        "email",
        "decimal"
       ]
      },
      "required": false
     },
     {
      "uid": 10,
      "name": "id",
      "comment": {
       "raw": [
        "HTML ID attribute for input"
       ]
      },
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "required": false
     },
     {
      "uid": 11,
      "name": "cx",
      "comment": {
       "raw": [
        "CSS class(es) to put on component's root. See {@link https://github.com/JedWatson/classnames#usage} for details"
       ]
      },
      "typeValue": {
       "raw": "null | string | number | boolean | ClassDictionary | ClassArray"
      },
      "typeValueRef": "@epam/uui-core:ClassValue",
      "from": "@epam/uui-core:IHasCX",
      "required": false
     },
     {
      "uid": 12,
      "name": "onClick",
      "comment": {
       "raw": [
        "Called when component is clicked"
       ]
      },
      "typeValue": {
       "raw": "(e?: any) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IClickable",
      "required": false
     },
     {
      "uid": 13,
      "name": "isDisabled",
      "comment": {
       "raw": [
        "Disable editing, and visually de-emphasize value of the component"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:IDisableable",
      "required": false
     },
     {
      "uid": 14,
      "name": "value",
      "comment": {
       "raw": [
        "The current value of component"
       ]
      },
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "from": "@epam/uui-core:IEditable",
      "required": true
     },
     {
      "uid": 15,
      "name": "onValueChange",
      "comment": {
       "raw": [
        "Called when value needs to be changed (usually due to user interaction)"
       ]
      },
      "typeValue": {
       "raw": "(newValue: string | undefined) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IEditable",
      "required": true
     },
     {
      "uid": 16,
      "name": "isInvalid",
      "comment": {
       "raw": [
        "True if component contains invalid input"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:ICanBeInvalid",
      "required": false
     },
     {
      "uid": 17,
      "name": "validationMessage",
      "comment": {
       "raw": [
        "Message describing why the value is invalid"
       ]
      },
      "typeValue": {
       "raw": "null | string | number | boolean | React.ReactElement<any, string | React.JSXElementConstructor<any>> | React.ReactFragment | React.ReactPortal"
      },
      "typeValueRef": "@types/react:ReactNode",
      "from": "@epam/uui-core:ICanBeInvalid",
      "required": false
     },
     {
      "uid": 18,
      "name": "validationProps",
      "comment": {
       "raw": [
        "If T is a complex value (object or array), this property contains validation states of inner items"
       ]
      },
      "typeValue": {
       "raw": "{ [key: string]: ICanBeInvalid; }"
      },
      "from": "@epam/uui-core:ICanBeInvalid",
      "required": false
     },
     {
      "uid": 19,
      "name": "isReadonly",
      "comment": {
       "raw": [
        "Disable editing. Unlike isDisabled, keep component's value readable."
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:ICanBeReadonly",
      "required": false
     },
     {
      "uid": 20,
      "name": "isRequired",
      "comment": {
       "raw": [
        "Marks that component's value is required and shouldn't be empty"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:ICanBeRequired",
      "required": false
     },
     {
      "uid": 21,
      "name": "placeholder",
      "comment": {
       "raw": [
        "Placeholder to display when empty"
       ]
      },
      "typeValue": {
       "raw": "any"
      },
      "from": "@epam/uui-core:IHasPlaceholder",
      "required": false
     },
     {
      "uid": 22,
      "name": "icon",
      "comment": {
       "raw": [
        "Icon can be a React element (usually an SVG element)"
       ]
      },
      "typeValue": {
       "raw": "Icon"
      },
      "editor": {
       "type": "component"
      },
      "from": "@epam/uui-core:IHasIcon",
      "required": false
     },
     {
      "uid": 23,
      "name": "iconPosition",
      "comment": {
       "raw": [
        "Position of the icon (left of right)"
       ]
      },
      "typeValue": {
       "raw": "'left' | 'right'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "left",
        "right"
       ]
      },
      "from": "@epam/uui-core:IHasIcon",
      "required": false
     },
     {
      "uid": 24,
      "name": "onIconClick",
      "comment": {
       "raw": [
        "Click handler for the icon"
       ]
      },
      "typeValue": {
       "raw": "() => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IHasIcon",
      "required": false
     },
     {
      "uid": 25,
      "name": "isOpen",
      "comment": {
       "raw": [
        "When isDropdown=true, indicate that dropdown is open with chevron icon"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:IDropdownToggler",
      "required": false
     },
     {
      "uid": 26,
      "name": "isDropdown",
      "comment": {
       "raw": [
        "Shows chevron icon, enabling component to act as dropdown toggler"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:IDropdownToggler",
      "required": false
     },
     {
      "uid": 27,
      "name": "toggleDropdownOpening",
      "comment": {
       "raw": [
        "Called when associated dropdown should open or close"
       ]
      },
      "typeValue": {
       "raw": "(value: boolean) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IDropdownToggler",
      "required": false
     },
     {
      "uid": 28,
      "name": "isInteractedOutside",
      "comment": {
       "raw": [
        "Called when component is interacted outside, to close the dropdown"
       ]
      },
      "typeValue": {
       "raw": "(event: Event) => boolean"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IDropdownToggler",
      "required": false
     },
     {
      "uid": 29,
      "name": "ref",
      "comment": {
       "raw": [
        "Component's ref"
       ]
      },
      "typeValue": {
       "raw": "null | (instance: any) => void | React.RefObject<any>"
      },
      "from": "@epam/uui-core:IDropdownToggler",
      "required": false
     },
     {
      "uid": 30,
      "name": "caption",
      "comment": {
       "raw": [
        "Caption. Can be a string, or React.Elements. Certain components supports minimal markup (<b>,<i>,<a>) in captions."
       ]
      },
      "typeValue": {
       "raw": "any"
      },
      "from": "@epam/uui-core:IHasCaption",
      "required": false
     },
     {
      "uid": 31,
      "name": "getValueChangeAnalyticsEvent",
      "comment": {
       "raw": [
        "Given a value, returns an analytics event to send when component is edited.",
        " See [AnalyticsContext](@link https://uui.epam.com/documents?id=analyticsContext&mode=doc&skin=UUI4_promo&category=contexts)."
       ]
      },
      "typeValue": {
       "raw": "(newValue: string | null, oldValue: string | null) => AnalyticsEvent"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IAnalyticableOnChange",
      "required": false
     },
     {
      "uid": 32,
      "name": "rawProps",
      "comment": {
       "raw": [
        "Any HTML attributes (native or 'data-') to put on the underlying component"
       ]
      },
      "typeValue": {
       "raw": "React.HTMLAttributes<HTMLInputElement> & Record<`data-${string}`, string>"
      },
      "from": "@epam/uui-core:IHasRawProps",
      "required": false
     },
     {
      "uid": 33,
      "name": "onFocus",
      "comment": {
       "raw": [
        "Called when component gets input focus"
       ]
      },
      "typeValue": {
       "raw": "(e: React.FocusEvent<HTMLInputElement, Element>) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:ICanFocus",
      "required": false
     },
     {
      "uid": 34,
      "name": "onBlur",
      "comment": {
       "raw": [
        "Called when component looses input focus"
       ]
      },
      "typeValue": {
       "raw": "(e: React.FocusEvent<HTMLInputElement, Element>) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:ICanFocus",
      "required": false
     },
     {
      "uid": 35,
      "name": "tabIndex",
      "comment": {
       "raw": [
        "Controls the order of keyboard navigation between components"
       ]
      },
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "from": "@epam/uui-core:IHasTabIndex",
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui-core:TMouseCoords": {
   "summary": {
    "module": "@epam/uui-core",
    "typeName": {
     "name": "TMouseCoords",
     "nameFull": "TMouseCoords"
    },
    "src": "uui-core/src/services/dnd/DndContext.tsx",
    "exported": true
   },
   "details": {
    "kind": 264,
    "typeValue": {
     "raw": "TMouseCoords",
     "print": [
      "type TMouseCoords = {",
      "    mousePageX: number;",
      "    mousePageY: number;",
      "    mouseDx: number;",
      "    mouseDy: number;",
      "    mouseDxSmooth: number;",
      "    mouseDySmooth: number;",
      "    mouseDownPageX: number;",
      "    mouseDownPageY: number;",
      "    buttons: number;",
      "};"
     ]
    },
    "props": [
     {
      "uid": 1,
      "name": "mousePageX",
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "required": true
     },
     {
      "uid": 2,
      "name": "mousePageY",
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "required": true
     },
     {
      "uid": 3,
      "name": "mouseDx",
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "required": true
     },
     {
      "uid": 4,
      "name": "mouseDy",
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "required": true
     },
     {
      "uid": 5,
      "name": "mouseDxSmooth",
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "required": true
     },
     {
      "uid": 6,
      "name": "mouseDySmooth",
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "required": true
     },
     {
      "uid": 7,
      "name": "mouseDownPageX",
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "required": true
     },
     {
      "uid": 8,
      "name": "mouseDownPageY",
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "required": true
     },
     {
      "uid": 9,
      "name": "buttons",
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "required": true
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui-core:TooltipCoreProps": {
   "summary": {
    "module": "@epam/uui-core",
    "typeName": {
     "name": "TooltipCoreProps",
     "nameFull": "TooltipCoreProps"
    },
    "src": "uui-core/src/types/components/Tooltip.ts",
    "exported": true
   },
   "details": {
    "kind": 263,
    "typeValue": {
     "raw": "TooltipCoreProps",
     "print": [
      "interface TooltipCoreProps extends IHasCX, IHasChildren, IHasRawProps<React.HTMLAttributes<HTMLDivElement>>, Partial<IEditable<boolean>>, Pick<DropdownProps, 'onClose' | 'placement' | 'modifiers' | 'openDelay' | 'closeDelay' | 'closeOnMouseLeave' | 'portalTarget' | 'boundaryElement' | 'closeBodyOnTogglerHidden'> {",
      "    /** Content to show in the tooltip (ReactNode) */",
      "    content?: any;",
      "    /** Alternative to 'content' prop, you can pass a render function.",
      "     * The function will only be called when content is shown, this can save performance. */",
      "    renderContent?(): any;",
      "    /** See [Popper docs]{@link https://popper.js.org/docs/v2/modifiers/offset/} */",
      "    offset?: Options['offset'];",
      "    /** React Node(s) to show tooltip for */",
      "    children?: React.ReactNode;",
      "    /** Max width of tooltip */",
      "    maxWidth?: number;",
      "}"
     ]
    },
    "props": [
     {
      "uid": 1,
      "name": "content",
      "comment": {
       "raw": [
        "Content to show in the tooltip (ReactNode)"
       ]
      },
      "typeValue": {
       "raw": "any"
      },
      "required": false
     },
     {
      "uid": 2,
      "name": "renderContent",
      "comment": {
       "raw": [
        "Alternative to 'content' prop, you can pass a render function.",
        " The function will only be called when content is shown, this can save performance."
       ]
      },
      "typeValue": {
       "raw": "() => any"
      },
      "editor": {
       "type": "func"
      },
      "required": false
     },
     {
      "uid": 3,
      "name": "offset",
      "comment": {
       "raw": [
        "See [Popper docs]{@link https://popper.js.org/docs/v2/modifiers/offset/}"
       ]
      },
      "typeValue": {
       "raw": "OffsetsFunction | [number | null | undefined, number | null | undefined]"
      },
      "required": false
     },
     {
      "uid": 4,
      "name": "children",
      "comment": {
       "raw": [
        "React Node(s) to show tooltip for"
       ]
      },
      "typeValue": {
       "raw": "null | string | number | boolean | React.ReactElement<any, string | React.JSXElementConstructor<any>> | React.ReactFragment | React.ReactPortal"
      },
      "typeValueRef": "@types/react:ReactNode",
      "required": false
     },
     {
      "uid": 5,
      "name": "maxWidth",
      "comment": {
       "raw": [
        "Max width of tooltip"
       ]
      },
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "required": false
     },
     {
      "uid": 6,
      "name": "cx",
      "comment": {
       "raw": [
        "CSS class(es) to put on component's root. See {@link https://github.com/JedWatson/classnames#usage} for details"
       ]
      },
      "typeValue": {
       "raw": "null | string | number | boolean | ClassDictionary | ClassArray"
      },
      "typeValueRef": "@epam/uui-core:ClassValue",
      "from": "@epam/uui-core:IHasCX",
      "required": false
     },
     {
      "uid": 7,
      "name": "rawProps",
      "comment": {
       "raw": [
        "Any HTML attributes (native or 'data-') to put on the underlying component"
       ]
      },
      "typeValue": {
       "raw": "React.HTMLAttributes<HTMLDivElement> & Record<`data-${string}`, string>"
      },
      "from": "@epam/uui-core:IHasRawProps",
      "required": false
     },
     {
      "uid": 8,
      "name": "value",
      "comment": {
       "raw": [
        "The current value of component"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:IEditable",
      "required": true
     },
     {
      "uid": 9,
      "name": "onValueChange",
      "comment": {
       "raw": [
        "Called when value needs to be changed (usually due to user interaction)"
       ]
      },
      "typeValue": {
       "raw": "(newValue: boolean) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IEditable",
      "required": true
     },
     {
      "uid": 10,
      "name": "isInvalid",
      "comment": {
       "raw": [
        "True if component contains invalid input"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:ICanBeInvalid",
      "required": false
     },
     {
      "uid": 11,
      "name": "validationMessage",
      "comment": {
       "raw": [
        "Message describing why the value is invalid"
       ]
      },
      "typeValue": {
       "raw": "null | string | number | boolean | React.ReactElement<any, string | React.JSXElementConstructor<any>> | React.ReactFragment | React.ReactPortal"
      },
      "from": "@epam/uui-core:ICanBeInvalid",
      "required": false
     },
     {
      "uid": 12,
      "name": "validationProps",
      "comment": {
       "raw": [
        "If T is a complex value (object or array), this property contains validation states of inner items"
       ]
      },
      "typeValue": {
       "raw": "{ [key: string]: ICanBeInvalid; }"
      },
      "from": "@epam/uui-core:ICanBeInvalid",
      "required": false
     },
     {
      "uid": 13,
      "name": "isDisabled",
      "comment": {
       "raw": [
        "Disable editing, and visually de-emphasize value of the component"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:IDisableable",
      "required": false
     },
     {
      "uid": 14,
      "name": "isReadonly",
      "comment": {
       "raw": [
        "Disable editing. Unlike isDisabled, keep component's value readable."
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:ICanBeReadonly",
      "required": false
     },
     {
      "uid": 15,
      "name": "isRequired",
      "comment": {
       "raw": [
        "Marks that component's value is required and shouldn't be empty"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:ICanBeRequired",
      "required": false
     },
     {
      "uid": 16,
      "name": "onClose",
      "typeValue": {
       "raw": "() => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:DropdownProps",
      "required": false
     },
     {
      "uid": 17,
      "name": "placement",
      "typeValue": {
       "raw": "'left' | 'right' | 'auto' | 'auto-start' | 'auto-end' | 'top' | 'bottom' | 'top-start' | 'top-end' | 'bottom-start' | 'bottom-end' | 'right-start' | 'right-end' | 'left-start' | 'left-end'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "left",
        "right",
        "auto",
        "auto-start",
        "auto-end",
        "top",
        "bottom",
        "top-start",
        "top-end",
        "bottom-start",
        "bottom-end",
        "right-start",
        "right-end",
        "left-start",
        "left-end"
       ]
      },
      "from": "@epam/uui-core:DropdownProps",
      "required": false
     },
     {
      "uid": 18,
      "name": "modifiers",
      "typeValue": {
       "raw": "(StrictModifier<any> | Partial<Modifier<any, object>>)[]"
      },
      "from": "@epam/uui-core:DropdownProps",
      "required": false
     },
     {
      "uid": 19,
      "name": "openDelay",
      "comment": {
       "raw": [
        "@default 0"
       ],
       "tags": {
        "@default": 0
       }
      },
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "from": "@epam/uui-core:DropdownProps",
      "required": false
     },
     {
      "uid": 20,
      "name": "closeDelay",
      "comment": {
       "raw": [
        "@default 0"
       ],
       "tags": {
        "@default": 0
       }
      },
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "from": "@epam/uui-core:DropdownProps",
      "required": false
     },
     {
      "uid": 21,
      "name": "closeOnMouseLeave",
      "comment": {
       "raw": [
        "@default false"
       ],
       "tags": {
        "@default": false
       }
      },
      "typeValue": {
       "raw": "false | 'toggler' | 'boundary'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        false,
        "toggler",
        "boundary"
       ]
      },
      "from": "@epam/uui-core:DropdownProps",
      "required": false
     },
     {
      "uid": 22,
      "name": "portalTarget",
      "typeValue": {
       "raw": "HTMLElement"
      },
      "from": "@epam/uui-core:DropdownProps",
      "required": false
     },
     {
      "uid": 23,
      "name": "boundaryElement",
      "typeValue": {
       "raw": "HTMLElement | HTMLElement[] | 'clippingParents'"
      },
      "from": "@epam/uui-core:DropdownProps",
      "required": false
     },
     {
      "uid": 24,
      "name": "closeBodyOnTogglerHidden",
      "comment": {
       "raw": [
        "@default true"
       ],
       "tags": {
        "@default": true
       }
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:DropdownProps",
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui-core:TreeNodeInfo": {
   "summary": {
    "module": "@epam/uui-core",
    "typeName": {
     "name": "TreeNodeInfo",
     "nameFull": "TreeNodeInfo"
    },
    "src": "uui-core/src/data/processing/views/tree/ITree.ts",
    "exported": true
   },
   "details": {
    "kind": 263,
    "typeValue": {
     "raw": "TreeNodeInfo",
     "print": [
      "interface TreeNodeInfo {",
      "    count?: number;",
      "}"
     ]
    },
    "props": [
     {
      "uid": 1,
      "name": "count",
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui-core:TreeParams": {
   "summary": {
    "module": "@epam/uui-core",
    "typeName": {
     "name": "TreeParams",
     "nameFull": "TreeParams<TItem, TId>"
    },
    "src": "uui-core/src/data/processing/views/tree/ITree.ts",
    "exported": true
   },
   "details": {
    "kind": 263,
    "typeValue": {
     "raw": "TreeParams<TItem, TId>",
     "print": [
      "interface TreeParams<TItem, TId> {",
      "    getId?(item: TItem): TId;",
      "    getParentId?(item: TItem): TId | undefined;",
      "    complexIds?: boolean;",
      "}"
     ]
    },
    "props": [
     {
      "uid": 1,
      "name": "getId",
      "typeValue": {
       "raw": "(item: TItem) => TId"
      },
      "editor": {
       "type": "func"
      },
      "required": false
     },
     {
      "uid": 2,
      "name": "getParentId",
      "typeValue": {
       "raw": "(item: TItem) => TId | undefined"
      },
      "editor": {
       "type": "func"
      },
      "required": false
     },
     {
      "uid": 3,
      "name": "complexIds",
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui-core:UseFormProps": {
   "summary": {
    "module": "@epam/uui-core",
    "typeName": {
     "name": "UseFormProps",
     "nameFull": "UseFormProps<T>"
    },
    "src": "uui-core/src/data/forms/useForm.ts",
    "exported": true
   },
   "details": {
    "kind": 264,
    "typeValue": {
     "raw": "UseFormProps<T>",
     "print": [
      "type UseFormProps<T> = Omit<FormProps<T>, 'renderForm'>;"
     ]
    },
    "props": [
     {
      "uid": 1,
      "name": "value",
      "comment": {
       "raw": [
        "Current value of the form state"
       ]
      },
      "typeValue": {
       "raw": "T"
      },
      "from": "@epam/uui-core:FormProps",
      "required": true
     },
     {
      "uid": 2,
      "name": "getMetadata",
      "comment": {
       "raw": [
        "Returns form metadata - information used to validate the form.",
        " @param state Metadata can depend on state, and will be re-computed on updates"
       ]
      },
      "typeValue": {
       "raw": "(state: T) => Metadata<T>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:FormProps",
      "required": false
     },
     {
      "uid": 3,
      "name": "onSave",
      "comment": {
       "raw": [
        "Occurs when 'save' function is called on Form.",
        " Should save form data (usually with API call to server).",
        " Server can also reject form, and provide validation errors in response.",
        " @param state Form state to save"
       ]
      },
      "typeValue": {
       "raw": "(state: T) => Promise<void | FormSaveResponse<T>>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:FormProps",
      "required": true
     },
     {
      "uid": 4,
      "name": "beforeLeave",
      "comment": {
       "raw": [
        "Called when form is unmounted, but user still have unsaved changes.",
        " Accepts a Promise<boolean> to be returned. If promise resolves to true - save procedure is performed.",
        " The common use-case is to show a modal with \"Save Changes?\" dialog",
        " Skins usually implement this as default behavior. To prevent it, you can pass null to this prop to override it."
       ]
      },
      "typeValue": {
       "raw": "null | () => Promise<boolean>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:FormProps",
      "required": false
     },
     {
      "uid": 5,
      "name": "loadUnsavedChanges",
      "comment": {
       "raw": [
        "Used to restore unsaved user edits from the last session (usually to localstorage, via uuiUserSettings context)",
        " If unsaved changes are detected, this callback is called. If it is resolved - the form restores unsaved edits.",
        " The common use-case is to show a modal with \"You have unsaved changes, restore them?\" dialog",
        " Skins usually implement this as default behavior. To prevent it, you can pass null to this prop to override it."
       ]
      },
      "typeValue": {
       "raw": "() => Promise<void>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:FormProps",
      "required": false
     },
     {
      "uid": 6,
      "name": "onSuccess",
      "comment": {
       "raw": [
        "Called after successful save.",
        " @param state Saved state",
        " @param isSavedBeforeLeave true, if save is triggered via leaving the page, and \"Save Changes?\" dialog"
       ]
      },
      "typeValue": {
       "raw": "(state: T, isSavedBeforeLeave?: boolean | undefined) => any"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:FormProps",
      "required": false
     },
     {
      "uid": 7,
      "name": "onError",
      "comment": {
       "raw": [
        "Called when save fails"
       ]
      },
      "typeValue": {
       "raw": "(error: any) => any"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:FormProps",
      "required": false
     },
     {
      "uid": 8,
      "name": "settingsKey",
      "comment": {
       "raw": [
        "The key, under which form save unsaved state usually to localstorage, via uuiUserSettings context)"
       ]
      },
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "from": "@epam/uui-core:FormProps",
      "required": false
     },
     {
      "uid": 9,
      "name": "validationOn",
      "comment": {
       "raw": [
        "Controls when form validation occurs:",
        " save (default, recommended) - form is validated on save. If form is invalid - it will be revalidated on every change, until become valid",
        " change - form is validated on every user change. Only fields changes in current edit session are validated"
       ]
      },
      "typeValue": {
       "raw": "'change' | 'save'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "change",
        "save"
       ]
      },
      "from": "@epam/uui-core:FormProps",
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui-core:UseTableStateHookParams": {
   "summary": {
    "module": "@epam/uui-core",
    "typeName": {
     "name": "UseTableStateHookParams",
     "nameFull": "UseTableStateHookParams<TFilter, TViewState>"
    },
    "src": "uui-core/src/hooks/useTableState/useTableState.ts",
    "exported": true
   },
   "details": {
    "kind": 263,
    "typeValue": {
     "raw": "UseTableStateHookParams<TFilter, TViewState>",
     "print": [
      "interface UseTableStateHookParams<TFilter = Record<string, any>, TViewState = any> extends UseTableStateHookBaseParams<TFilter, TViewState>, Partial<IEditable<DataTableState<TFilter, TViewState>>> {",
      "}"
     ]
    },
    "props": [
     {
      "uid": 1,
      "name": "columns",
      "comment": {
       "raw": [
        "Columns configuration, can be omitted if used without tables"
       ]
      },
      "typeValue": {
       "raw": "DataColumnProps<any, any, any>[]"
      },
      "from": "@epam/uui-core:UseTableStateHookBaseParams",
      "required": false
     },
     {
      "uid": 2,
      "name": "filters",
      "comment": {
       "raw": [
        "Filters configuration, can be omitted if you don't need filters"
       ]
      },
      "typeValue": {
       "raw": "TableFiltersConfig<TFilter>[]"
      },
      "from": "@epam/uui-core:UseTableStateHookBaseParams",
      "required": false
     },
     {
      "uid": 3,
      "name": "initialPresets",
      "comment": {
       "raw": [
        "Initial presets array"
       ]
      },
      "typeValue": {
       "raw": "ITablePreset<TFilter, TViewState>[]"
      },
      "from": "@epam/uui-core:UseTableStateHookBaseParams",
      "required": false
     },
     {
      "uid": 4,
      "name": "onPresetCreate",
      "comment": {
       "raw": [
        "Called when preset was created. Should return the ID of new preset"
       ]
      },
      "typeValue": {
       "raw": "(preset: ITablePreset<TFilter, TViewState>) => Promise<number>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:UseTableStateHookBaseParams",
      "required": false
     },
     {
      "uid": 5,
      "name": "onPresetUpdate",
      "comment": {
       "raw": [
        "Called when preset was updated"
       ]
      },
      "typeValue": {
       "raw": "(preset: ITablePreset<TFilter, TViewState>) => Promise<void>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:UseTableStateHookBaseParams",
      "required": false
     },
     {
      "uid": 6,
      "name": "onPresetDelete",
      "comment": {
       "raw": [
        "Called when preset was deleted"
       ]
      },
      "typeValue": {
       "raw": "(preset: ITablePreset<TFilter, TViewState>) => Promise<void>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:UseTableStateHookBaseParams",
      "required": false
     },
     {
      "uid": 7,
      "name": "value",
      "comment": {
       "raw": [
        "The current value of component"
       ]
      },
      "typeValue": {
       "raw": "DataTableState<TFilter, TViewState>"
      },
      "from": "@epam/uui-core:IEditable",
      "required": true
     },
     {
      "uid": 8,
      "name": "onValueChange",
      "comment": {
       "raw": [
        "Called when value needs to be changed (usually due to user interaction)"
       ]
      },
      "typeValue": {
       "raw": "(newValue: DataTableState<TFilter, TViewState>) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IEditable",
      "required": true
     },
     {
      "uid": 9,
      "name": "isInvalid",
      "comment": {
       "raw": [
        "True if component contains invalid input"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:ICanBeInvalid",
      "required": false
     },
     {
      "uid": 10,
      "name": "validationMessage",
      "comment": {
       "raw": [
        "Message describing why the value is invalid"
       ]
      },
      "typeValue": {
       "raw": "null | string | number | boolean | React.ReactElement<any, string | React.JSXElementConstructor<any>> | React.ReactFragment | React.ReactPortal"
      },
      "from": "@epam/uui-core:ICanBeInvalid",
      "required": false
     },
     {
      "uid": 11,
      "name": "validationProps",
      "comment": {
       "raw": [
        "If T is a complex value (object or array), this property contains validation states of inner items"
       ]
      },
      "typeValue": {
       "raw": "{ [key: string]: ICanBeInvalid; }"
      },
      "from": "@epam/uui-core:ICanBeInvalid",
      "required": false
     },
     {
      "uid": 12,
      "name": "isDisabled",
      "comment": {
       "raw": [
        "Disable editing, and visually de-emphasize value of the component"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:IDisableable",
      "required": false
     },
     {
      "uid": 13,
      "name": "isReadonly",
      "comment": {
       "raw": [
        "Disable editing. Unlike isDisabled, keep component's value readable."
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:ICanBeReadonly",
      "required": false
     },
     {
      "uid": 14,
      "name": "isRequired",
      "comment": {
       "raw": [
        "Marks that component's value is required and shouldn't be empty"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:ICanBeRequired",
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui-core:UseUuiErrorOptions": {
   "summary": {
    "module": "@epam/uui-core",
    "typeName": {
     "name": "UseUuiErrorOptions",
     "nameFull": "UseUuiErrorOptions"
    },
    "src": "uui-core/src/hooks/useUuiError.ts",
    "exported": true
   },
   "details": {
    "kind": 263,
    "typeValue": {
     "raw": "UseUuiErrorOptions",
     "print": [
      "interface UseUuiErrorOptions {",
      "    errorConfig?: Record<ApiCallErrorType, ErrorPageInfo>;",
      "    recoveryConfig?: Record<ApiRecoveryReason, UuiRecoveryErrorInfo>;",
      "}"
     ]
    },
    "props": [
     {
      "uid": 1,
      "name": "errorConfig",
      "typeValue": {
       "raw": "Record<ApiCallErrorType, ErrorPageInfo>"
      },
      "required": false
     },
     {
      "uid": 2,
      "name": "recoveryConfig",
      "typeValue": {
       "raw": "Record<ApiRecoveryReason, UuiRecoveryErrorInfo>"
      },
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui-core:UseUuiErrorProps": {
   "summary": {
    "module": "@epam/uui-core",
    "typeName": {
     "name": "UseUuiErrorProps",
     "nameFull": "UseUuiErrorProps"
    },
    "src": "uui-core/src/hooks/useUuiError.ts",
    "exported": true
   },
   "details": {
    "kind": 263,
    "typeValue": {
     "raw": "UseUuiErrorProps",
     "print": [
      "interface UseUuiErrorProps {",
      "    getErrorInfo: (error: any, defaultErrorInfo: ErrorPageInfo) => ErrorPageInfo;",
      "    options?: UseUuiErrorOptions;",
      "}"
     ]
    },
    "props": [
     {
      "uid": 1,
      "name": "getErrorInfo",
      "typeValue": {
       "raw": "(error: any, defaultErrorInfo: ErrorPageInfo) => ErrorPageInfo"
      },
      "editor": {
       "type": "func"
      },
      "required": true
     },
     {
      "uid": 2,
      "name": "options",
      "typeValue": {
       "raw": "UseUuiErrorOptions"
      },
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui-core:UseUuiServicesProps": {
   "summary": {
    "module": "@epam/uui-core",
    "typeName": {
     "name": "UseUuiServicesProps",
     "nameFull": "UseUuiServicesProps<TApi, TAppContext>"
    },
    "src": "uui-core/src/hooks/useUuiServices.ts",
    "exported": true
   },
   "details": {
    "kind": 263,
    "typeValue": {
     "raw": "UseUuiServicesProps<TApi, TAppContext>",
     "print": [
      "interface UseUuiServicesProps<TApi, TAppContext> extends UuiServicesProps<TApi> {",
      "    appContext?: TAppContext;",
      "    router: IRouterContext;",
      "}"
     ]
    },
    "props": [
     {
      "uid": 1,
      "name": "appContext",
      "typeValue": {
       "raw": "TAppContext"
      },
      "required": false
     },
     {
      "uid": 2,
      "name": "router",
      "typeValue": {
       "raw": "IRouterContext"
      },
      "required": true
     },
     {
      "uid": 3,
      "name": "apiDefinition",
      "typeValue": {
       "raw": "(processRequest: IProcessRequest) => TApi"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:UuiServicesProps",
      "required": false
     },
     {
      "uid": 4,
      "name": "apiReloginPath",
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "from": "@epam/uui-core:ApiContextProps",
      "required": false
     },
     {
      "uid": 5,
      "name": "apiPingPath",
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "from": "@epam/uui-core:ApiContextProps",
      "required": false
     },
     {
      "uid": 6,
      "name": "apiServerUrl",
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "from": "@epam/uui-core:ApiContextProps",
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui-core:UuiContexts": {
   "summary": {
    "module": "@epam/uui-core",
    "typeName": {
     "name": "UuiContexts",
     "nameFull": "UuiContexts"
    },
    "src": "uui-core/src/types/contexts.ts",
    "exported": true
   },
   "details": {
    "kind": 263,
    "typeValue": {
     "raw": "UuiContexts",
     "print": [
      "interface UuiContexts {",
      "    uuiApi: IApiContext;",
      "    uuiRouter: IRouterContext;",
      "    uuiModals: IModalContext;",
      "    uuiDnD: IDndContext;",
      "    uuiUserSettings: IUserSettingsContext;",
      "    uuiAnalytics: IAnalyticsContext;",
      "    uuiErrors: IErrorContext;",
      "    uuiNotifications: INotificationContext;",
      "    uuiLayout: ILayoutContext;",
      "    uuiLocks: ILockContext;",
      "}"
     ]
    },
    "props": [
     {
      "uid": 1,
      "name": "uuiApi",
      "typeValue": {
       "raw": "IApiContext"
      },
      "required": true
     },
     {
      "uid": 2,
      "name": "uuiRouter",
      "typeValue": {
       "raw": "IRouterContext"
      },
      "required": true
     },
     {
      "uid": 3,
      "name": "uuiModals",
      "typeValue": {
       "raw": "IModalContext"
      },
      "required": true
     },
     {
      "uid": 4,
      "name": "uuiDnD",
      "typeValue": {
       "raw": "IDndContext"
      },
      "required": true
     },
     {
      "uid": 5,
      "name": "uuiUserSettings",
      "typeValue": {
       "raw": "IUserSettingsContext"
      },
      "required": true
     },
     {
      "uid": 6,
      "name": "uuiAnalytics",
      "typeValue": {
       "raw": "IAnalyticsContext"
      },
      "required": true
     },
     {
      "uid": 7,
      "name": "uuiErrors",
      "typeValue": {
       "raw": "IErrorContext"
      },
      "required": true
     },
     {
      "uid": 8,
      "name": "uuiNotifications",
      "typeValue": {
       "raw": "INotificationContext"
      },
      "required": true
     },
     {
      "uid": 9,
      "name": "uuiLayout",
      "typeValue": {
       "raw": "ILayoutContext"
      },
      "required": true
     },
     {
      "uid": 10,
      "name": "uuiLocks",
      "typeValue": {
       "raw": "ILockContext"
      },
      "required": true
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui-core:UuiRecoveryErrorInfo": {
   "summary": {
    "module": "@epam/uui-core",
    "typeName": {
     "name": "UuiRecoveryErrorInfo",
     "nameFull": "UuiRecoveryErrorInfo"
    },
    "src": "uui-core/src/hooks/useUuiError.ts",
    "exported": true
   },
   "details": {
    "kind": 264,
    "typeValue": {
     "raw": "UuiRecoveryErrorInfo",
     "print": [
      "type UuiRecoveryErrorInfo = {",
      "    title: string;",
      "    subtitle: string;",
      "};"
     ]
    },
    "props": [
     {
      "uid": 1,
      "name": "title",
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "required": true
     },
     {
      "uid": 2,
      "name": "subtitle",
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "required": true
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui-core:UuiServicesProps": {
   "summary": {
    "module": "@epam/uui-core",
    "typeName": {
     "name": "UuiServicesProps",
     "nameFull": "UuiServicesProps<TApi>"
    },
    "src": "uui-core/src/hooks/useUuiServices.ts",
    "exported": true
   },
   "details": {
    "kind": 263,
    "typeValue": {
     "raw": "UuiServicesProps<TApi>",
     "print": [
      "interface UuiServicesProps<TApi> extends ApiContextProps {",
      "    apiDefinition?: (processRequest: IProcessRequest) => TApi;",
      "}"
     ]
    },
    "props": [
     {
      "uid": 1,
      "name": "apiDefinition",
      "typeValue": {
       "raw": "(processRequest: IProcessRequest) => TApi"
      },
      "editor": {
       "type": "func"
      },
      "required": false
     },
     {
      "uid": 2,
      "name": "apiReloginPath",
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "from": "@epam/uui-core:ApiContextProps",
      "required": false
     },
     {
      "uid": 3,
      "name": "apiPingPath",
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "from": "@epam/uui-core:ApiContextProps",
      "required": false
     },
     {
      "uid": 4,
      "name": "apiServerUrl",
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "from": "@epam/uui-core:ApiContextProps",
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui-core:ValidationMode": {
   "summary": {
    "module": "@epam/uui-core",
    "typeName": {
     "name": "ValidationMode",
     "nameFull": "ValidationMode"
    },
    "src": "uui-core/src/data/validation/validate.ts",
    "exported": true
   },
   "details": {
    "kind": 264,
    "typeValue": {
     "raw": "'change' | 'save'",
     "print": [
      "type ValidationMode = 'change' | 'save';"
     ]
    }
   }
  },
  "@epam/uui-core:VirtualListRange": {
   "summary": {
    "module": "@epam/uui-core",
    "typeName": {
     "name": "VirtualListRange",
     "nameFull": "VirtualListRange"
    },
    "src": "uui-core/src/types/dataSources.ts",
    "exported": true
   },
   "details": {
    "kind": 263,
    "typeValue": {
     "raw": "VirtualListRange",
     "print": [
      "interface VirtualListRange {",
      "    /**",
      "     * Index of the topmost item, in rendered batch.",
      "     * Note - this item might not be visible, as Virtual List maintain some reserve of rows on top / at the bottom of the list",
      "     */",
      "    topIndex?: number;",
      "    /**",
      "     * Number of currently rendered items.",
      "     * Virtual list updates this value automatically, if it too small.",
      "     * Note Virtual List renders more items, that actually visible,",
      "     * as it need maintain some reserve of rows on top / at the bottom of the list.",
      "     */",
      "    visibleCount?: number;",
      "}"
     ]
    },
    "props": [
     {
      "uid": 1,
      "name": "topIndex",
      "comment": {
       "raw": [
        "Index of the topmost item, in rendered batch.",
        " Note - this item might not be visible, as Virtual List maintain some reserve of rows on top / at the bottom of the list"
       ]
      },
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "required": false
     },
     {
      "uid": 2,
      "name": "visibleCount",
      "comment": {
       "raw": [
        "Number of currently rendered items.",
        " Virtual list updates this value automatically, if it too small.",
        " Note Virtual List renders more items, that actually visible,",
        " as it need maintain some reserve of rows on top / at the bottom of the list."
       ]
      },
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui-core:VirtualListState": {
   "summary": {
    "module": "@epam/uui-core",
    "typeName": {
     "name": "VirtualListState",
     "nameFull": "VirtualListState"
    },
    "src": "uui-core/src/types/dataSources.ts",
    "comment": {
     "raw": [
      "Holds state of a Virtual List - top visible item index, and estimated count of visible items"
     ]
    },
    "exported": true
   },
   "details": {
    "kind": 263,
    "typeValue": {
     "raw": "VirtualListState",
     "print": [
      "/** Holds state of a Virtual List - top visible item index, and estimated count of visible items */",
      "interface VirtualListState extends VirtualListRange {",
      "    /**",
      "     * Virtual list ensures that row with this Index is within the visible area, if not Virtual List .",
      "     * Virtual list updates this value on scroll to null when appear in the visible area.",
      "     * If this value is updated manually, Virtual List would scroll to the specified items.",
      "     * It would attempt to put scroll so this item will be at the top of the list.",
      "     */",
      "    scrollTo?: ScrollToConfig;",
      "    /**",
      "     * Virtual List manually scroll to this Index when it appears not within the visible area.",
      "     * It would attempt to put scroll so this item will be in the middle of the list.",
      "     */",
      "    focusedIndex?: number;",
      "}"
     ]
    },
    "props": [
     {
      "uid": 1,
      "name": "scrollTo",
      "comment": {
       "raw": [
        "Virtual list ensures that row with this Index is within the visible area, if not Virtual List .",
        " Virtual list updates this value on scroll to null when appear in the visible area.",
        " If this value is updated manually, Virtual List would scroll to the specified items.",
        " It would attempt to put scroll so this item will be at the top of the list."
       ]
      },
      "typeValue": {
       "raw": "ScrollToConfig"
      },
      "required": false
     },
     {
      "uid": 2,
      "name": "focusedIndex",
      "comment": {
       "raw": [
        "Virtual List manually scroll to this Index when it appears not within the visible area.",
        " It would attempt to put scroll so this item will be in the middle of the list."
       ]
      },
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "required": false
     },
     {
      "uid": 3,
      "name": "topIndex",
      "comment": {
       "raw": [
        "Index of the topmost item, in rendered batch.",
        " Note - this item might not be visible, as Virtual List maintain some reserve of rows on top / at the bottom of the list"
       ]
      },
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "from": "@epam/uui-core:VirtualListRange",
      "required": false
     },
     {
      "uid": 4,
      "name": "visibleCount",
      "comment": {
       "raw": [
        "Number of currently rendered items.",
        " Virtual list updates this value automatically, if it too small.",
        " Note Virtual List renders more items, that actually visible,",
        " as it need maintain some reserve of rows on top / at the bottom of the list."
       ]
      },
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "from": "@epam/uui-core:VirtualListRange",
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui-core:VPanelProps": {
   "summary": {
    "module": "@epam/uui-core",
    "typeName": {
     "name": "VPanelProps",
     "nameFull": "VPanelProps"
    },
    "src": "uui-core/src/types/props.ts",
    "exported": true
   },
   "details": {
    "kind": 264,
    "typeValue": {
     "raw": "VPanelProps",
     "print": [
      "type VPanelProps = IHasCX & IHasChildren & IClickable & IHasRawProps<HTMLAttributes<HTMLDivElement>> & IHasForwardedRef<HTMLDivElement> & IAnalyticableClick & {",
      "    style?: CSSProperties;",
      "};"
     ]
    },
    "props": [
     {
      "uid": 1,
      "name": "cx",
      "comment": {
       "raw": [
        "CSS class(es) to put on component's root. See {@link https://github.com/JedWatson/classnames#usage} for details"
       ]
      },
      "typeValue": {
       "raw": "null | string | number | boolean | ClassDictionary | ClassArray"
      },
      "typeValueRef": "@epam/uui-core:ClassValue",
      "from": "@epam/uui-core:IHasCX",
      "required": false
     },
     {
      "uid": 2,
      "name": "children",
      "typeValue": {
       "raw": "null | string | number | boolean | React.ReactElement<any, string | React.JSXElementConstructor<any>> | React.ReactFragment | React.ReactPortal"
      },
      "typeValueRef": "@types/react:ReactNode",
      "from": "@epam/uui-core:IHasChildren",
      "required": false
     },
     {
      "uid": 3,
      "name": "onClick",
      "comment": {
       "raw": [
        "Called when component is clicked"
       ]
      },
      "typeValue": {
       "raw": "(e?: any) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IClickable",
      "required": false
     },
     {
      "uid": 4,
      "name": "rawProps",
      "comment": {
       "raw": [
        "Any HTML attributes (native or 'data-') to put on the underlying component"
       ]
      },
      "typeValue": {
       "raw": "React.HTMLAttributes<HTMLDivElement> & Record<`data-${string}`, string>"
      },
      "from": "@epam/uui-core:IHasRawProps",
      "required": false
     },
     {
      "uid": 5,
      "name": "forwardedRef",
      "comment": {
       "raw": [
        "this ref is passed to the underlying component"
       ]
      },
      "typeValue": {
       "raw": "null | (instance: HTMLDivElement | null) => void | React.MutableRefObject<HTMLDivElement | null>"
      },
      "from": "@epam/uui-core:IHasForwardedRef",
      "required": false
     },
     {
      "uid": 6,
      "name": "clickAnalyticsEvent",
      "comment": {
       "raw": [
        "An analytics event to send (via AnalyticsContext) when component is clicked.",
        " See [AnalyticsContext](@link https://uui.epam.com/documents?id=analyticsContext&mode=doc&skin=UUI4_promo&category=contexts)."
       ]
      },
      "typeValue": {
       "raw": "null | { [key: string]: any; name: string; }"
      },
      "from": "@epam/uui-core:IAnalyticableClick",
      "required": false
     },
     {
      "uid": 7,
      "name": "style",
      "typeValue": {
       "raw": "React.CSSProperties"
      },
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui-core:ApiCallStatus": {
   "summary": {
    "module": "@epam/uui-core",
    "typeName": {
     "name": "ApiCallStatus",
     "nameFull": "ApiCallStatus"
    },
    "src": "uui-core/src/types/contexts.ts",
    "exported": false
   }
  },
  "@epam/uui-core:CustomFilterConfig": {
   "summary": {
    "module": "@epam/uui-core",
    "typeName": {
     "name": "CustomFilterConfig",
     "nameFull": "CustomFilterConfig<TFilter>"
    },
    "src": "uui-core/src/types/tables.ts",
    "exported": false
   }
  },
  "@epam/uui-core:DatePickerFilterConfig": {
   "summary": {
    "module": "@epam/uui-core",
    "typeName": {
     "name": "DatePickerFilterConfig",
     "nameFull": "DatePickerFilterConfig<TFilter>"
    },
    "src": "uui-core/src/types/tables.ts",
    "exported": false
   }
  },
  "@epam/uui-core:FilterConfigBase": {
   "summary": {
    "module": "@epam/uui-core",
    "typeName": {
     "name": "FilterConfigBase",
     "nameFull": "FilterConfigBase<TFilter>"
    },
    "src": "uui-core/src/types/tables.ts",
    "exported": false
   }
  },
  "@epam/uui-core:NumericFilterConfig": {
   "summary": {
    "module": "@epam/uui-core",
    "typeName": {
     "name": "NumericFilterConfig",
     "nameFull": "NumericFilterConfig<TFilter>"
    },
    "src": "uui-core/src/types/tables.ts",
    "exported": false
   }
  },
  "@epam/uui-core:RangeDatePickerFilterConfig": {
   "summary": {
    "module": "@epam/uui-core",
    "typeName": {
     "name": "RangeDatePickerFilterConfig",
     "nameFull": "RangeDatePickerFilterConfig<TFilter>"
    },
    "src": "uui-core/src/types/tables.ts",
    "exported": false
   }
  },
  "@epam/uui-core:RouterState": {
   "summary": {
    "module": "@epam/uui-core",
    "typeName": {
     "name": "RouterState",
     "nameFull": "RouterState"
    },
    "src": "uui-core/src/services/routing/interfaces/IRouter6.ts",
    "exported": false
   }
  },
  "@epam/uui-core:UseTableStateHookBaseParams": {
   "summary": {
    "module": "@epam/uui-core",
    "typeName": {
     "name": "UseTableStateHookBaseParams",
     "nameFull": "UseTableStateHookBaseParams<TFilter, TViewState>"
    },
    "src": "uui-core/src/hooks/useTableState/useTableState.ts",
    "exported": false
   }
  },
  "@epam/uui-components:AccordionProps": {
   "summary": {
    "module": "@epam/uui-components",
    "typeName": {
     "name": "AccordionProps",
     "nameFull": "AccordionProps"
    },
    "src": "uui-components/src/layout/Accordion.tsx",
    "exported": true
   },
   "details": {
    "kind": 264,
    "typeValue": {
     "raw": "GeneralAccordionProps | EditableAccordionProps",
     "print": [
      "type AccordionProps = GeneralAccordionProps | EditableAccordionProps;"
     ]
    },
    "props": [
     {
      "uid": 10,
      "name": "title",
      "comment": {
       "raw": [
        "Accordion title"
       ]
      },
      "typeValue": {
       "raw": "string | React.ReactElement<any, string | React.JSXElementConstructor<any>>"
      },
      "from": "@epam/uui-components:GeneralAccordionProps",
      "required": false
     },
     {
      "uid": 11,
      "name": "renderTitle",
      "comment": {
       "raw": [
        "Overrides default title rendering."
       ]
      },
      "typeValue": {
       "raw": "(isOpen: boolean) => React.ReactElement<any, string | React.JSXElementConstructor<any>>"
      },
      "editor": {
       "type": "component"
      },
      "from": "@epam/uui-components:GeneralAccordionProps",
      "required": false
     },
     {
      "uid": 12,
      "name": "dropdownIcon",
      "comment": {
       "raw": [
        "Overrides the default dropdown (folding) icon.Pass null to disable the folding icon completely"
       ]
      },
      "typeValue": {
       "raw": "null | Icon"
      },
      "editor": {
       "type": "component"
      },
      "from": "@epam/uui-components:GeneralAccordionProps",
      "required": false
     },
     {
      "uid": 13,
      "name": "renderAdditionalItems",
      "comment": {
       "raw": [
        "Renders additional items to component's header (after the title, and before the folding icon)"
       ]
      },
      "typeValue": {
       "raw": "(isOpen: boolean) => React.ReactNode"
      },
      "editor": {
       "type": "component"
      },
      "from": "@epam/uui-components:GeneralAccordionProps",
      "required": false
     },
     {
      "uid": 14,
      "name": "cx",
      "comment": {
       "raw": [
        "CSS class(es) to put on component's root. See {@link https://github.com/JedWatson/classnames#usage} for details"
       ]
      },
      "typeValue": {
       "raw": "null | string | number | boolean | ClassDictionary | ClassArray"
      },
      "typeValueRef": "@epam/uui-core:ClassValue",
      "from": "@epam/uui-core:IHasCX",
      "required": false
     },
     {
      "uid": 15,
      "name": "isDisabled",
      "comment": {
       "raw": [
        "Disable editing, and visually de-emphasize value of the component"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:IDisableable",
      "required": false
     },
     {
      "uid": 16,
      "name": "children",
      "typeValue": {
       "raw": "null | string | number | boolean | React.ReactElement<any, string | React.JSXElementConstructor<any>> | React.ReactFragment | React.ReactPortal"
      },
      "typeValueRef": "@types/react:ReactNode",
      "from": "@epam/uui-core:IHasChildren",
      "required": false
     },
     {
      "uid": 17,
      "name": "rawProps",
      "comment": {
       "raw": [
        "Any HTML attributes (native or 'data-') to put on the underlying component"
       ]
      },
      "typeValue": {
       "raw": "React.HTMLAttributes<HTMLDivElement> & Record<`data-${string}`, string>"
      },
      "from": "@epam/uui-core:IHasRawProps",
      "required": false
     },
     {
      "uid": 18,
      "name": "forwardedRef",
      "comment": {
       "raw": [
        "this ref is passed to the underlying component"
       ]
      },
      "typeValue": {
       "raw": "null | (instance: HTMLDivElement | null) => void | React.MutableRefObject<HTMLDivElement | null>"
      },
      "from": "@epam/uui-core:IHasForwardedRef",
      "required": false
     },
     {
      "uid": 19,
      "name": "value",
      "comment": {
       "raw": [
        "The current value of component"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:IEditable",
      "required": true
     },
     {
      "uid": 20,
      "name": "onValueChange",
      "comment": {
       "raw": [
        "Called when value needs to be changed (usually due to user interaction)"
       ]
      },
      "typeValue": {
       "raw": "(newValue: boolean) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IEditable",
      "required": true
     },
     {
      "uid": 21,
      "name": "isInvalid",
      "comment": {
       "raw": [
        "True if component contains invalid input"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:ICanBeInvalid",
      "required": false
     },
     {
      "uid": 22,
      "name": "validationMessage",
      "comment": {
       "raw": [
        "Message describing why the value is invalid"
       ]
      },
      "typeValue": {
       "raw": "null | string | number | boolean | React.ReactElement<any, string | React.JSXElementConstructor<any>> | React.ReactFragment | React.ReactPortal"
      },
      "typeValueRef": "@types/react:ReactNode",
      "from": "@epam/uui-core:ICanBeInvalid",
      "required": false
     },
     {
      "uid": 23,
      "name": "validationProps",
      "comment": {
       "raw": [
        "If T is a complex value (object or array), this property contains validation states of inner items"
       ]
      },
      "typeValue": {
       "raw": "{ [key: string]: ICanBeInvalid; }"
      },
      "from": "@epam/uui-core:ICanBeInvalid",
      "required": false
     },
     {
      "uid": 24,
      "name": "isReadonly",
      "comment": {
       "raw": [
        "Disable editing. Unlike isDisabled, keep component's value readable."
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:ICanBeReadonly",
      "required": false
     },
     {
      "uid": 25,
      "name": "isRequired",
      "comment": {
       "raw": [
        "Marks that component's value is required and shouldn't be empty"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:ICanBeRequired",
      "required": false
     }
    ],
    "propsFromUnion": true
   }
  },
  "@epam/uui-components:AccordionState": {
   "summary": {
    "module": "@epam/uui-components",
    "typeName": {
     "name": "AccordionState",
     "nameFull": "AccordionState"
    },
    "src": "uui-components/src/layout/Accordion.tsx",
    "exported": true
   },
   "details": {
    "kind": 263,
    "typeValue": {
     "raw": "AccordionState",
     "print": [
      "interface AccordionState {",
      "    opened: boolean;",
      "}"
     ]
    },
    "props": [
     {
      "uid": 1,
      "name": "opened",
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "required": true
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui-components:AdaptiveItemProps": {
   "summary": {
    "module": "@epam/uui-components",
    "typeName": {
     "name": "AdaptiveItemProps",
     "nameFull": "AdaptiveItemProps<T>"
    },
    "src": "uui-components/src/adaptivePanel/types.ts",
    "exported": true
   },
   "details": {
    "kind": 264,
    "typeValue": {
     "raw": "AdaptiveItemProps<T>",
     "print": [
      "type AdaptiveItemProps<T = unknown> = T & {",
      "    render: (item: AdaptiveItemProps<T>, hiddenItems?: AdaptiveItemProps<T>[], displayedItems?: AdaptiveItemProps<T>[]) => any;",
      "    priority: number;",
      "    collapsedContainer?: boolean;",
      "    id: string;",
      "};"
     ]
    },
    "props": [
     {
      "uid": 1,
      "name": "render",
      "typeValue": {
       "raw": "(item: AdaptiveItemProps<T>, hiddenItems?: AdaptiveItemProps<T>[] | undefined, displayedItems?: AdaptiveItemProps<T>[] | undefined) => any"
      },
      "editor": {
       "type": "func"
      },
      "required": true
     },
     {
      "uid": 2,
      "name": "priority",
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "required": true
     },
     {
      "uid": 3,
      "name": "collapsedContainer",
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "required": false
     },
     {
      "uid": 4,
      "name": "id",
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "required": true
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui-components:AdaptivePanelProps": {
   "summary": {
    "module": "@epam/uui-components",
    "typeName": {
     "name": "AdaptivePanelProps",
     "nameFull": "AdaptivePanelProps"
    },
    "src": "uui-components/src/adaptivePanel/types.ts",
    "exported": true
   },
   "details": {
    "kind": 263,
    "typeValue": {
     "raw": "AdaptivePanelProps",
     "print": [
      "interface AdaptivePanelProps extends IHasCX, IHasRawProps<React.HTMLAttributes<HTMLDivElement>> {",
      "    items: AdaptiveItemProps[];",
      "}"
     ]
    },
    "props": [
     {
      "uid": 1,
      "name": "items",
      "typeValue": {
       "raw": "{ render: (item: any, hiddenItems?: any[] | undefined, displayedItems?: any[] | undefined) => any; priority: number; collapsedContainer?: boolean | undefined; id: string; }[]"
      },
      "required": true
     },
     {
      "uid": 2,
      "name": "cx",
      "comment": {
       "raw": [
        "CSS class(es) to put on component's root. See {@link https://github.com/JedWatson/classnames#usage} for details"
       ]
      },
      "typeValue": {
       "raw": "null | string | number | boolean | ClassDictionary | ClassArray"
      },
      "typeValueRef": "@epam/uui-core:ClassValue",
      "from": "@epam/uui-core:IHasCX",
      "required": false
     },
     {
      "uid": 3,
      "name": "rawProps",
      "comment": {
       "raw": [
        "Any HTML attributes (native or 'data-') to put on the underlying component"
       ]
      },
      "typeValue": {
       "raw": "React.HTMLAttributes<HTMLDivElement> & Record<`data-${string}`, string>"
      },
      "from": "@epam/uui-core:IHasRawProps",
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui-components:AnchorProps": {
   "summary": {
    "module": "@epam/uui-components",
    "typeName": {
     "name": "AnchorProps",
     "nameFull": "AnchorProps"
    },
    "src": "uui-components/src/navigation/Anchor.tsx",
    "exported": true
   },
   "details": {
    "kind": 263,
    "typeValue": {
     "raw": "AnchorProps",
     "print": [
      "interface AnchorProps extends IHasCX, ICanRedirect, IHasChildren, IDisableable, IClickable, IAnalyticableClick, IHasRawProps<React.ButtonHTMLAttributes<HTMLButtonElement>>, IHasForwardedRef<HTMLAnchorElement | HTMLButtonElement> {",
      "}"
     ]
    },
    "props": [
     {
      "uid": 1,
      "name": "cx",
      "comment": {
       "raw": [
        "CSS class(es) to put on component's root. See {@link https://github.com/JedWatson/classnames#usage} for details"
       ]
      },
      "typeValue": {
       "raw": "null | string | number | boolean | ClassDictionary | ClassArray"
      },
      "typeValueRef": "@epam/uui-core:ClassValue",
      "from": "@epam/uui-core:IHasCX",
      "required": false
     },
     {
      "uid": 2,
      "name": "link",
      "comment": {
       "raw": [
        "Link object to redirect to for SPA-redirects"
       ]
      },
      "typeValue": {
       "raw": "Link"
      },
      "from": "@epam/uui-core:ICanRedirect",
      "required": false
     },
     {
      "uid": 3,
      "name": "href",
      "comment": {
       "raw": [
        "Href (URL) to redirect to, for non-SPA redirects"
       ]
      },
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "from": "@epam/uui-core:ICanRedirect",
      "required": false
     },
     {
      "uid": 4,
      "name": "isLinkActive",
      "comment": {
       "raw": [
        "Highlights component to show that link is active (browser is displaying the page to which link is pointing)"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:ICanRedirect",
      "required": false
     },
     {
      "uid": 5,
      "name": "target",
      "comment": {
       "raw": [
        "Controls where the link should be opened"
       ]
      },
      "typeValue": {
       "raw": "'_blank'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "_blank"
       ]
      },
      "from": "@epam/uui-core:ICanRedirect",
      "required": false
     },
     {
      "uid": 6,
      "name": "children",
      "typeValue": {
       "raw": "null | string | number | boolean | React.ReactElement<any, string | React.JSXElementConstructor<any>> | React.ReactFragment | React.ReactPortal"
      },
      "typeValueRef": "@types/react:ReactNode",
      "from": "@epam/uui-core:IHasChildren",
      "required": false
     },
     {
      "uid": 7,
      "name": "isDisabled",
      "comment": {
       "raw": [
        "Disable editing, and visually de-emphasize value of the component"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:IDisableable",
      "required": false
     },
     {
      "uid": 8,
      "name": "onClick",
      "comment": {
       "raw": [
        "Called when component is clicked"
       ]
      },
      "typeValue": {
       "raw": "(e?: any) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IClickable",
      "required": false
     },
     {
      "uid": 9,
      "name": "clickAnalyticsEvent",
      "comment": {
       "raw": [
        "An analytics event to send (via AnalyticsContext) when component is clicked.",
        " See [AnalyticsContext](@link https://uui.epam.com/documents?id=analyticsContext&mode=doc&skin=UUI4_promo&category=contexts)."
       ]
      },
      "typeValue": {
       "raw": "null | { [key: string]: any; name: string; }"
      },
      "from": "@epam/uui-core:IAnalyticableClick",
      "required": false
     },
     {
      "uid": 10,
      "name": "rawProps",
      "comment": {
       "raw": [
        "Any HTML attributes (native or 'data-') to put on the underlying component"
       ]
      },
      "typeValue": {
       "raw": "React.ButtonHTMLAttributes<HTMLButtonElement> & Record<`data-${string}`, string>"
      },
      "from": "@epam/uui-core:IHasRawProps",
      "required": false
     },
     {
      "uid": 11,
      "name": "forwardedRef",
      "comment": {
       "raw": [
        "this ref is passed to the underlying component"
       ]
      },
      "typeValue": {
       "raw": "null | (instance: HTMLButtonElement | HTMLAnchorElement | null) => void | React.MutableRefObject<HTMLButtonElement | HTMLAnchorElement | null>"
      },
      "from": "@epam/uui-core:IHasForwardedRef",
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui-components:ArrayPickerProps": {
   "summary": {
    "module": "@epam/uui-components",
    "typeName": {
     "name": "ArrayPickerProps",
     "nameFull": "ArrayPickerProps<TId, TItem>"
    },
    "src": "uui-components/src/pickers/bindingHelpers.ts",
    "exported": true
   },
   "details": {
    "kind": 264,
    "typeValue": {
     "raw": "{ selectionMode: 'multi'; valueType: 'id'; emptyValue?: [] | null | undefined; } & IEditable<TId[]> | { selectionMode: 'multi'; valueType: 'entity'; emptyValue?: [] | null | undefined; } & IEditable<TItem[]>",
     "print": [
      "type ArrayPickerProps<TId, TItem> = ({",
      "    selectionMode: 'multi';",
      "    valueType: 'id';",
      "    emptyValue?: [",
      "    ] | null;",
      "} & IEditable<TId[]>) | ({",
      "    selectionMode: 'multi';",
      "    valueType: 'entity';",
      "    emptyValue?: [",
      "    ] | null;",
      "} & IEditable<TItem[]>);"
     ]
    },
    "props": [
     {
      "uid": 12,
      "name": "selectionMode",
      "typeValue": {
       "raw": "'multi'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "multi"
       ]
      },
      "required": true
     },
     {
      "uid": 2,
      "name": "valueType",
      "typeValue": {
       "raw": "'id'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "id"
       ]
      },
      "required": true
     },
     {
      "uid": 14,
      "name": "emptyValue",
      "typeValue": {
       "raw": "null | []"
      },
      "required": false
     },
     {
      "uid": 4,
      "name": "value",
      "comment": {
       "raw": [
        "The current value of component"
       ]
      },
      "typeValue": {
       "raw": "TId[]"
      },
      "from": "@epam/uui-core:IEditable",
      "required": true
     },
     {
      "uid": 5,
      "name": "onValueChange",
      "comment": {
       "raw": [
        "Called when value needs to be changed (usually due to user interaction)"
       ]
      },
      "typeValue": {
       "raw": "(newValue: TId[]) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IEditable",
      "required": true
     },
     {
      "uid": 17,
      "name": "isInvalid",
      "comment": {
       "raw": [
        "True if component contains invalid input"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:ICanBeInvalid",
      "required": false
     },
     {
      "uid": 18,
      "name": "validationMessage",
      "comment": {
       "raw": [
        "Message describing why the value is invalid"
       ]
      },
      "typeValue": {
       "raw": "null | string | number | boolean | React.ReactElement<any, string | React.JSXElementConstructor<any>> | React.ReactFragment | React.ReactPortal"
      },
      "typeValueRef": "@types/react:ReactNode",
      "from": "@epam/uui-core:ICanBeInvalid",
      "required": false
     },
     {
      "uid": 19,
      "name": "validationProps",
      "comment": {
       "raw": [
        "If T is a complex value (object or array), this property contains validation states of inner items"
       ]
      },
      "typeValue": {
       "raw": "{ [key: string]: ICanBeInvalid; }"
      },
      "from": "@epam/uui-core:ICanBeInvalid",
      "required": false
     },
     {
      "uid": 20,
      "name": "isDisabled",
      "comment": {
       "raw": [
        "Disable editing, and visually de-emphasize value of the component"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:IDisableable",
      "required": false
     },
     {
      "uid": 21,
      "name": "isReadonly",
      "comment": {
       "raw": [
        "Disable editing. Unlike isDisabled, keep component's value readable."
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:ICanBeReadonly",
      "required": false
     },
     {
      "uid": 22,
      "name": "isRequired",
      "comment": {
       "raw": [
        "Marks that component's value is required and shouldn't be empty"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:ICanBeRequired",
      "required": false
     },
     {
      "uid": 13,
      "name": "valueType",
      "typeValue": {
       "raw": "'entity'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "entity"
       ]
      },
      "required": true
     },
     {
      "uid": 15,
      "name": "value",
      "comment": {
       "raw": [
        "The current value of component"
       ]
      },
      "typeValue": {
       "raw": "TItem[]"
      },
      "from": "@epam/uui-core:IEditable",
      "required": true
     },
     {
      "uid": 16,
      "name": "onValueChange",
      "comment": {
       "raw": [
        "Called when value needs to be changed (usually due to user interaction)"
       ]
      },
      "typeValue": {
       "raw": "(newValue: TItem[]) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IEditable",
      "required": true
     }
    ],
    "propsFromUnion": true
   }
  },
  "@epam/uui-components:AvatarProps": {
   "summary": {
    "module": "@epam/uui-components",
    "typeName": {
     "name": "AvatarProps",
     "nameFull": "AvatarProps"
    },
    "src": "uui-components/src/widgets/Avatar.tsx",
    "exported": true
   },
   "details": {
    "kind": 263,
    "typeValue": {
     "raw": "AvatarProps",
     "print": [
      "interface AvatarProps extends IHasCX, IHasRawProps<React.ImgHTMLAttributes<HTMLImageElement>>, IHasForwardedRef<HTMLImageElement> {",
      "    /** HTML alt attribute value */",
      "    alt?: string;",
      "    /** Image URL */",
      "    img: string;",
      "    /** Size  */",
      "    size: '12' | '18' | '24' | '30' | '36' | '42' | '48' | '54' | '60' | '72' | '78' | '90' | '144';",
      "    /** True to show placeholder */",
      "    isLoading?: boolean;",
      "    /** Avatar onClick.",
      "     *  @deprecated Property onClick is deprecated and will be removed in future release.",
      "     * */",
      "    onClick?: () => void;",
      "}"
     ]
    },
    "props": [
     {
      "uid": 1,
      "name": "alt",
      "comment": {
       "raw": [
        "HTML alt attribute value"
       ]
      },
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "required": false
     },
     {
      "uid": 2,
      "name": "img",
      "comment": {
       "raw": [
        "Image URL"
       ]
      },
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "required": true
     },
     {
      "uid": 3,
      "name": "size",
      "comment": {
       "raw": [
        "Size"
       ]
      },
      "typeValue": {
       "raw": "'12' | '18' | '24' | '30' | '36' | '42' | '48' | '54' | '60' | '72' | '78' | '90' | '144'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "12",
        "18",
        "24",
        "30",
        "36",
        "42",
        "48",
        "54",
        "60",
        "72",
        "78",
        "90",
        "144"
       ]
      },
      "required": true
     },
     {
      "uid": 4,
      "name": "isLoading",
      "comment": {
       "raw": [
        "True to show placeholder"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "required": false
     },
     {
      "uid": 5,
      "name": "onClick",
      "comment": {
       "raw": [
        "Avatar onClick.",
        "  @deprecated Property onClick is deprecated and will be removed in future release."
       ]
      },
      "typeValue": {
       "raw": "() => void"
      },
      "editor": {
       "type": "func"
      },
      "required": false
     },
     {
      "uid": 6,
      "name": "cx",
      "comment": {
       "raw": [
        "CSS class(es) to put on component's root. See {@link https://github.com/JedWatson/classnames#usage} for details"
       ]
      },
      "typeValue": {
       "raw": "null | string | number | boolean | ClassDictionary | ClassArray"
      },
      "typeValueRef": "@epam/uui-core:ClassValue",
      "from": "@epam/uui-core:IHasCX",
      "required": false
     },
     {
      "uid": 7,
      "name": "rawProps",
      "comment": {
       "raw": [
        "Any HTML attributes (native or 'data-') to put on the underlying component"
       ]
      },
      "typeValue": {
       "raw": "React.ImgHTMLAttributes<HTMLImageElement> & Record<`data-${string}`, string>"
      },
      "from": "@epam/uui-core:IHasRawProps",
      "required": false
     },
     {
      "uid": 8,
      "name": "forwardedRef",
      "comment": {
       "raw": [
        "this ref is passed to the underlying component"
       ]
      },
      "typeValue": {
       "raw": "null | (instance: HTMLImageElement | null) => void | React.MutableRefObject<HTMLImageElement | null>"
      },
      "from": "@epam/uui-core:IHasForwardedRef",
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui-components:AvatarStackProps": {
   "summary": {
    "module": "@epam/uui-components",
    "typeName": {
     "name": "AvatarStackProps",
     "nameFull": "AvatarStackProps"
    },
    "src": "uui-components/src/widgets/AvatarStack.tsx",
    "exported": true
   },
   "details": {
    "kind": 263,
    "typeValue": {
     "raw": "AvatarStackProps",
     "print": [
      "interface AvatarStackProps extends IHasCX, IHasRawProps<React.HTMLAttributes<HTMLDivElement>> {",
      "    avatarSize: '24' | '36' | '48' | '144';",
      "    urlArray: string[];",
      "    direction: 'right' | 'left';",
      "    avatarsCount?: number;",
      "    renderItem?: (url: string) => React.ReactElement;",
      "}"
     ]
    },
    "props": [
     {
      "uid": 1,
      "name": "avatarSize",
      "typeValue": {
       "raw": "'24' | '36' | '48' | '144'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "24",
        "36",
        "48",
        "144"
       ]
      },
      "required": true
     },
     {
      "uid": 2,
      "name": "urlArray",
      "typeValue": {
       "raw": "string[]"
      },
      "required": true
     },
     {
      "uid": 3,
      "name": "direction",
      "typeValue": {
       "raw": "'right' | 'left'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "right",
        "left"
       ]
      },
      "required": true
     },
     {
      "uid": 4,
      "name": "avatarsCount",
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "required": false
     },
     {
      "uid": 5,
      "name": "renderItem",
      "typeValue": {
       "raw": "(url: string) => React.ReactElement<any, string | React.JSXElementConstructor<any>>"
      },
      "editor": {
       "type": "component"
      },
      "required": false
     },
     {
      "uid": 6,
      "name": "cx",
      "comment": {
       "raw": [
        "CSS class(es) to put on component's root. See {@link https://github.com/JedWatson/classnames#usage} for details"
       ]
      },
      "typeValue": {
       "raw": "null | string | number | boolean | ClassDictionary | ClassArray"
      },
      "typeValueRef": "@epam/uui-core:ClassValue",
      "from": "@epam/uui-core:IHasCX",
      "required": false
     },
     {
      "uid": 7,
      "name": "rawProps",
      "comment": {
       "raw": [
        "Any HTML attributes (native or 'data-') to put on the underlying component"
       ]
      },
      "typeValue": {
       "raw": "React.HTMLAttributes<HTMLDivElement> & Record<`data-${string}`, string>"
      },
      "from": "@epam/uui-core:IHasRawProps",
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui-components:BaseRatingProps": {
   "summary": {
    "module": "@epam/uui-components",
    "typeName": {
     "name": "BaseRatingProps",
     "nameFull": "BaseRatingProps<TValue>"
    },
    "src": "uui-components/src/inputs/Rating/BaseRating.tsx",
    "exported": true
   },
   "details": {
    "kind": 263,
    "typeValue": {
     "raw": "BaseRatingProps<TValue>",
     "print": [
      "interface BaseRatingProps<TValue> extends IHasCX, IDisableable, IEditable<TValue>, ICanBeReadonly, IHasRawProps<React.HTMLAttributes<HTMLDivElement>>, IHasForwardedRef<HTMLDivElement> {",
      "    from?: number;",
      "    to?: number;",
      "    /**",
      "     * @default 1",
      "     */",
      "    step?: 0.5 | 1;",
      "    renderRating?: (rating: number, markWidth: number, numberOfMarks: number) => React.ReactNode;",
      "}"
     ]
    },
    "props": [
     {
      "uid": 1,
      "name": "from",
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "required": false
     },
     {
      "uid": 2,
      "name": "to",
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "required": false
     },
     {
      "uid": 3,
      "name": "step",
      "comment": {
       "raw": [
        "@default 1"
       ],
       "tags": {
        "@default": 1
       }
      },
      "typeValue": {
       "raw": "0.5 | 1"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        0.5,
        1
       ]
      },
      "required": false
     },
     {
      "uid": 4,
      "name": "renderRating",
      "typeValue": {
       "raw": "(rating: number, markWidth: number, numberOfMarks: number) => React.ReactNode"
      },
      "editor": {
       "type": "func"
      },
      "required": false
     },
     {
      "uid": 5,
      "name": "cx",
      "comment": {
       "raw": [
        "CSS class(es) to put on component's root. See {@link https://github.com/JedWatson/classnames#usage} for details"
       ]
      },
      "typeValue": {
       "raw": "null | string | number | boolean | ClassDictionary | ClassArray"
      },
      "typeValueRef": "@epam/uui-core:ClassValue",
      "from": "@epam/uui-core:IHasCX",
      "required": false
     },
     {
      "uid": 6,
      "name": "isDisabled",
      "comment": {
       "raw": [
        "Disable editing, and visually de-emphasize value of the component"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:IDisableable",
      "required": false
     },
     {
      "uid": 7,
      "name": "value",
      "comment": {
       "raw": [
        "The current value of component"
       ]
      },
      "typeValue": {
       "raw": "TValue"
      },
      "from": "@epam/uui-core:IEditable",
      "required": true
     },
     {
      "uid": 8,
      "name": "onValueChange",
      "comment": {
       "raw": [
        "Called when value needs to be changed (usually due to user interaction)"
       ]
      },
      "typeValue": {
       "raw": "(newValue: TValue) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IEditable",
      "required": true
     },
     {
      "uid": 9,
      "name": "isInvalid",
      "comment": {
       "raw": [
        "True if component contains invalid input"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:ICanBeInvalid",
      "required": false
     },
     {
      "uid": 10,
      "name": "validationMessage",
      "comment": {
       "raw": [
        "Message describing why the value is invalid"
       ]
      },
      "typeValue": {
       "raw": "null | string | number | boolean | React.ReactElement<any, string | React.JSXElementConstructor<any>> | React.ReactFragment | React.ReactPortal"
      },
      "typeValueRef": "@types/react:ReactNode",
      "from": "@epam/uui-core:ICanBeInvalid",
      "required": false
     },
     {
      "uid": 11,
      "name": "validationProps",
      "comment": {
       "raw": [
        "If T is a complex value (object or array), this property contains validation states of inner items"
       ]
      },
      "typeValue": {
       "raw": "{ [key: string]: ICanBeInvalid; }"
      },
      "from": "@epam/uui-core:ICanBeInvalid",
      "required": false
     },
     {
      "uid": 12,
      "name": "isReadonly",
      "comment": {
       "raw": [
        "Disable editing. Unlike isDisabled, keep component's value readable."
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:ICanBeReadonly",
      "required": false
     },
     {
      "uid": 13,
      "name": "isRequired",
      "comment": {
       "raw": [
        "Marks that component's value is required and shouldn't be empty"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:ICanBeRequired",
      "required": false
     },
     {
      "uid": 14,
      "name": "rawProps",
      "comment": {
       "raw": [
        "Any HTML attributes (native or 'data-') to put on the underlying component"
       ]
      },
      "typeValue": {
       "raw": "React.HTMLAttributes<HTMLDivElement> & Record<`data-${string}`, string>"
      },
      "from": "@epam/uui-core:IHasRawProps",
      "required": false
     },
     {
      "uid": 15,
      "name": "forwardedRef",
      "comment": {
       "raw": [
        "this ref is passed to the underlying component"
       ]
      },
      "typeValue": {
       "raw": "null | (instance: HTMLDivElement | null) => void | React.MutableRefObject<HTMLDivElement | null>"
      },
      "from": "@epam/uui-core:IHasForwardedRef",
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui-components:BaseTimePickerProps": {
   "summary": {
    "module": "@epam/uui-components",
    "typeName": {
     "name": "BaseTimePickerProps",
     "nameFull": "BaseTimePickerProps"
    },
    "src": "uui-components/src/inputs/BaseTimePicker.tsx",
    "exported": true
   },
   "details": {
    "kind": 263,
    "typeValue": {
     "raw": "BaseTimePickerProps",
     "print": [
      "interface BaseTimePickerProps extends IEditable<TimePickerValue | null>, IDisableable, ICanBeReadonly, IHasPlaceholder {",
      "    minutesStep?: number;",
      "    format?: 12 | 24;",
      "    id?: string;",
      "    renderTarget?(props: IDropdownToggler): React.ReactNode;",
      "    rawProps?: {",
      "        input?: IHasRawProps<React.HTMLAttributes<HTMLDivElement>>['rawProps'];",
      "        body?: IHasRawProps<React.HTMLAttributes<HTMLDivElement>>['rawProps'];",
      "    };",
      "    /** CSS class(es) to put on input-part component. See https://github.com/JedWatson/classnames#usage for details */",
      "    inputCx?: CX;",
      "    /** CSS class(es) to put on body-part component. See https://github.com/JedWatson/classnames#usage for details */",
      "    bodyCx?: CX;",
      "}"
     ]
    },
    "props": [
     {
      "uid": 1,
      "name": "minutesStep",
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "required": false
     },
     {
      "uid": 2,
      "name": "format",
      "typeValue": {
       "raw": "12 | 24"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        12,
        24
       ]
      },
      "required": false
     },
     {
      "uid": 3,
      "name": "id",
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "required": false
     },
     {
      "uid": 4,
      "name": "renderTarget",
      "typeValue": {
       "raw": "(props: IDropdownToggler) => React.ReactNode"
      },
      "editor": {
       "type": "component"
      },
      "required": false
     },
     {
      "uid": 5,
      "name": "rawProps",
      "typeValue": {
       "raw": "{ input?: (React.HTMLAttributes<HTMLDivElement> & Record<`data-${string}`, string>) | undefined; body?: (React.HTMLAttributes<HTMLDivElement> & Record<`data-${string}`, string>) | undefined; }"
      },
      "required": false
     },
     {
      "uid": 6,
      "name": "inputCx",
      "comment": {
       "raw": [
        "CSS class(es) to put on input-part component. See https://github.com/JedWatson/classnames#usage for details"
       ]
      },
      "typeValue": {
       "raw": "null | string | number | boolean | ClassDictionary | ClassArray"
      },
      "typeValueRef": "@epam/uui-core:ClassValue",
      "required": false
     },
     {
      "uid": 7,
      "name": "bodyCx",
      "comment": {
       "raw": [
        "CSS class(es) to put on body-part component. See https://github.com/JedWatson/classnames#usage for details"
       ]
      },
      "typeValue": {
       "raw": "null | string | number | boolean | ClassDictionary | ClassArray"
      },
      "typeValueRef": "@epam/uui-core:ClassValue",
      "required": false
     },
     {
      "uid": 8,
      "name": "value",
      "comment": {
       "raw": [
        "The current value of component"
       ]
      },
      "typeValue": {
       "raw": "null | TimePickerValue"
      },
      "from": "@epam/uui-core:IEditable",
      "required": true
     },
     {
      "uid": 9,
      "name": "onValueChange",
      "comment": {
       "raw": [
        "Called when value needs to be changed (usually due to user interaction)"
       ]
      },
      "typeValue": {
       "raw": "(newValue: TimePickerValue | null) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IEditable",
      "required": true
     },
     {
      "uid": 10,
      "name": "isInvalid",
      "comment": {
       "raw": [
        "True if component contains invalid input"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:ICanBeInvalid",
      "required": false
     },
     {
      "uid": 11,
      "name": "validationMessage",
      "comment": {
       "raw": [
        "Message describing why the value is invalid"
       ]
      },
      "typeValue": {
       "raw": "null | string | number | boolean | React.ReactElement<any, string | React.JSXElementConstructor<any>> | React.ReactFragment | React.ReactPortal"
      },
      "typeValueRef": "@types/react:ReactNode",
      "from": "@epam/uui-core:ICanBeInvalid",
      "required": false
     },
     {
      "uid": 12,
      "name": "validationProps",
      "comment": {
       "raw": [
        "If T is a complex value (object or array), this property contains validation states of inner items"
       ]
      },
      "typeValue": {
       "raw": "{ [key: string]: ICanBeInvalid; }"
      },
      "from": "@epam/uui-core:ICanBeInvalid",
      "required": false
     },
     {
      "uid": 13,
      "name": "isDisabled",
      "comment": {
       "raw": [
        "Disable editing, and visually de-emphasize value of the component"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:IDisableable",
      "required": false
     },
     {
      "uid": 14,
      "name": "isReadonly",
      "comment": {
       "raw": [
        "Disable editing. Unlike isDisabled, keep component's value readable."
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:ICanBeReadonly",
      "required": false
     },
     {
      "uid": 15,
      "name": "isRequired",
      "comment": {
       "raw": [
        "Marks that component's value is required and shouldn't be empty"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:ICanBeRequired",
      "required": false
     },
     {
      "uid": 16,
      "name": "placeholder",
      "comment": {
       "raw": [
        "Placeholder to display when empty"
       ]
      },
      "typeValue": {
       "raw": "any"
      },
      "from": "@epam/uui-core:IHasPlaceholder",
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui-components:BlockerProps": {
   "summary": {
    "module": "@epam/uui-components",
    "typeName": {
     "name": "BlockerProps",
     "nameFull": "BlockerProps"
    },
    "src": "uui-components/src/layout/Blocker.tsx",
    "exported": true
   },
   "details": {
    "kind": 263,
    "typeValue": {
     "raw": "BlockerProps",
     "print": [
      "// TBD: move to loveship-specific mods",
      "// import { EpamColor, SpinnerMods } from '@epam/oswald';",
      "interface BlockerProps extends IHasCX, IHasRawProps<React.HTMLAttributes<HTMLDivElement>>, IHasForwardedRef<HTMLDivElement> {",
      "    /** Turns the blocker on or off */",
      "    isEnabled: boolean;",
      "    /** Disables spinner animation display */",
      "    hideSpinner?: boolean;",
      "    /** Sets the minimal height in px, for cases when blocked content is empty */",
      "    spacerHeight?: number;",
      "    /** Replaces default spinner */",
      "    renderSpinner?(props: any): React.ReactNode; // React.ComponentClass<SpinnerMods>;",
      "}"
     ]
    },
    "props": [
     {
      "uid": 1,
      "name": "isEnabled",
      "comment": {
       "raw": [
        "Turns the blocker on or off"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "required": true
     },
     {
      "uid": 2,
      "name": "hideSpinner",
      "comment": {
       "raw": [
        "Disables spinner animation display"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "required": false
     },
     {
      "uid": 3,
      "name": "spacerHeight",
      "comment": {
       "raw": [
        "Sets the minimal height in px, for cases when blocked content is empty"
       ]
      },
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "required": false
     },
     {
      "uid": 4,
      "name": "renderSpinner",
      "comment": {
       "raw": [
        "Replaces default spinner"
       ]
      },
      "typeValue": {
       "raw": "(props: any) => React.ReactNode"
      },
      "editor": {
       "type": "component"
      },
      "required": false
     },
     {
      "uid": 5,
      "name": "cx",
      "comment": {
       "raw": [
        "CSS class(es) to put on component's root. See {@link https://github.com/JedWatson/classnames#usage} for details"
       ]
      },
      "typeValue": {
       "raw": "null | string | number | boolean | ClassDictionary | ClassArray"
      },
      "typeValueRef": "@epam/uui-core:ClassValue",
      "from": "@epam/uui-core:IHasCX",
      "required": false
     },
     {
      "uid": 6,
      "name": "rawProps",
      "comment": {
       "raw": [
        "Any HTML attributes (native or 'data-') to put on the underlying component"
       ]
      },
      "typeValue": {
       "raw": "React.HTMLAttributes<HTMLDivElement> & Record<`data-${string}`, string>"
      },
      "from": "@epam/uui-core:IHasRawProps",
      "required": false
     },
     {
      "uid": 7,
      "name": "forwardedRef",
      "comment": {
       "raw": [
        "this ref is passed to the underlying component"
       ]
      },
      "typeValue": {
       "raw": "null | (instance: HTMLDivElement | null) => void | React.MutableRefObject<HTMLDivElement | null>"
      },
      "from": "@epam/uui-core:IHasForwardedRef",
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui-components:BurgerProps": {
   "summary": {
    "module": "@epam/uui-components",
    "typeName": {
     "name": "BurgerProps",
     "nameFull": "BurgerProps"
    },
    "src": "uui-components/src/navigation/MainMenu/Burger/Burger.tsx",
    "exported": true
   },
   "details": {
    "kind": 263,
    "typeValue": {
     "raw": "BurgerProps",
     "print": [
      "interface BurgerProps extends IHasCX, IHasRawProps<React.HTMLAttributes<HTMLDivElement>>, IHasForwardedRef<HTMLDivElement> {",
      "    burgerIcon?: Icon;",
      "    crossIcon?: Icon;",
      "    width?: number;",
      "    burgerContentCx?: string;",
      "    renderBurgerContent?: (props: {",
      "        onClose: () => void;",
      "    }) => React.ReactNode;",
      "    bg?: string;",
      "    logoUrl?: string;",
      "}"
     ]
    },
    "props": [
     {
      "uid": 1,
      "name": "burgerIcon",
      "typeValue": {
       "raw": "Icon"
      },
      "editor": {
       "type": "component"
      },
      "required": false
     },
     {
      "uid": 2,
      "name": "crossIcon",
      "typeValue": {
       "raw": "Icon"
      },
      "editor": {
       "type": "component"
      },
      "required": false
     },
     {
      "uid": 3,
      "name": "width",
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "required": false
     },
     {
      "uid": 4,
      "name": "burgerContentCx",
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "required": false
     },
     {
      "uid": 5,
      "name": "renderBurgerContent",
      "typeValue": {
       "raw": "(props: { onClose: () => void; }) => React.ReactNode"
      },
      "editor": {
       "type": "component"
      },
      "required": false
     },
     {
      "uid": 6,
      "name": "bg",
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "required": false
     },
     {
      "uid": 7,
      "name": "logoUrl",
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "required": false
     },
     {
      "uid": 8,
      "name": "cx",
      "comment": {
       "raw": [
        "CSS class(es) to put on component's root. See {@link https://github.com/JedWatson/classnames#usage} for details"
       ]
      },
      "typeValue": {
       "raw": "null | string | number | boolean | ClassDictionary | ClassArray"
      },
      "typeValueRef": "@epam/uui-core:ClassValue",
      "from": "@epam/uui-core:IHasCX",
      "required": false
     },
     {
      "uid": 9,
      "name": "rawProps",
      "comment": {
       "raw": [
        "Any HTML attributes (native or 'data-') to put on the underlying component"
       ]
      },
      "typeValue": {
       "raw": "React.HTMLAttributes<HTMLDivElement> & Record<`data-${string}`, string>"
      },
      "from": "@epam/uui-core:IHasRawProps",
      "required": false
     },
     {
      "uid": 10,
      "name": "forwardedRef",
      "comment": {
       "raw": [
        "this ref is passed to the underlying component"
       ]
      },
      "typeValue": {
       "raw": "null | (instance: HTMLDivElement | null) => void | React.MutableRefObject<HTMLDivElement | null>"
      },
      "from": "@epam/uui-core:IHasForwardedRef",
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui-components:ButtonBaseProps": {
   "summary": {
    "module": "@epam/uui-components",
    "typeName": {
     "name": "ButtonBaseProps",
     "nameFull": "ButtonBaseProps"
    },
    "src": "uui-components/src/buttons/ButtonBase.tsx",
    "exported": true
   },
   "details": {
    "kind": 263,
    "typeValue": {
     "raw": "ButtonBaseProps",
     "print": [
      "interface ButtonBaseProps extends ButtonBaseCoreProps, IHasForwardedRef<HTMLButtonElement | HTMLAnchorElement> {",
      "}"
     ]
    },
    "props": [
     {
      "uid": 1,
      "name": "cx",
      "comment": {
       "raw": [
        "CSS class(es) to put on component's root. See {@link https://github.com/JedWatson/classnames#usage} for details"
       ]
      },
      "typeValue": {
       "raw": "null | string | number | boolean | ClassDictionary | ClassArray"
      },
      "typeValueRef": "@epam/uui-core:ClassValue",
      "from": "@epam/uui-core:IHasCX",
      "required": false
     },
     {
      "uid": 2,
      "name": "onClick",
      "comment": {
       "raw": [
        "Called when component is clicked"
       ]
      },
      "typeValue": {
       "raw": "(e?: any) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IClickable",
      "required": false
     },
     {
      "uid": 3,
      "name": "link",
      "comment": {
       "raw": [
        "Link object to redirect to for SPA-redirects"
       ]
      },
      "typeValue": {
       "raw": "Link"
      },
      "from": "@epam/uui-core:ICanRedirect",
      "required": false
     },
     {
      "uid": 4,
      "name": "href",
      "comment": {
       "raw": [
        "Href (URL) to redirect to, for non-SPA redirects"
       ]
      },
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "from": "@epam/uui-core:ICanRedirect",
      "required": false
     },
     {
      "uid": 5,
      "name": "isLinkActive",
      "comment": {
       "raw": [
        "Highlights component to show that link is active (browser is displaying the page to which link is pointing)"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:ICanRedirect",
      "required": false
     },
     {
      "uid": 6,
      "name": "target",
      "comment": {
       "raw": [
        "Controls where the link should be opened"
       ]
      },
      "typeValue": {
       "raw": "'_blank'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "_blank"
       ]
      },
      "from": "@epam/uui-core:ICanRedirect",
      "required": false
     },
     {
      "uid": 7,
      "name": "isDisabled",
      "comment": {
       "raw": [
        "Disable editing, and visually de-emphasize value of the component"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:IDisableable",
      "required": false
     },
     {
      "uid": 8,
      "name": "icon",
      "comment": {
       "raw": [
        "Icon can be a React element (usually an SVG element)"
       ]
      },
      "typeValue": {
       "raw": "Icon"
      },
      "editor": {
       "type": "component"
      },
      "from": "@epam/uui-core:IHasIcon",
      "required": false
     },
     {
      "uid": 9,
      "name": "iconPosition",
      "comment": {
       "raw": [
        "Position of the icon (left of right)"
       ]
      },
      "typeValue": {
       "raw": "'right' | 'left'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "right",
        "left"
       ]
      },
      "from": "@epam/uui-core:IHasIcon",
      "required": false
     },
     {
      "uid": 10,
      "name": "onIconClick",
      "comment": {
       "raw": [
        "Click handler for the icon"
       ]
      },
      "typeValue": {
       "raw": "() => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IHasIcon",
      "required": false
     },
     {
      "uid": 11,
      "name": "clickAnalyticsEvent",
      "comment": {
       "raw": [
        "An analytics event to send (via AnalyticsContext) when component is clicked.",
        " See [AnalyticsContext](@link https://uui.epam.com/documents?id=analyticsContext&mode=doc&skin=UUI4_promo&category=contexts)."
       ]
      },
      "typeValue": {
       "raw": "null | { [key: string]: any; name: string; }"
      },
      "from": "@epam/uui-core:IAnalyticableClick",
      "required": false
     },
     {
      "uid": 12,
      "name": "tabIndex",
      "comment": {
       "raw": [
        "Controls the order of keyboard navigation between components"
       ]
      },
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "from": "@epam/uui-core:IHasTabIndex",
      "required": false
     },
     {
      "uid": 13,
      "name": "rawProps",
      "comment": {
       "raw": [
        "Any HTML attributes (native or 'data-') to put on the underlying component"
       ]
      },
      "typeValue": {
       "raw": "React.ButtonHTMLAttributes<HTMLButtonElement> & Record<`data-${string}`, string>"
      },
      "from": "@epam/uui-core:IHasRawProps",
      "required": false
     },
     {
      "uid": 14,
      "name": "forwardedRef",
      "comment": {
       "raw": [
        "this ref is passed to the underlying component"
       ]
      },
      "typeValue": {
       "raw": "null | (instance: HTMLButtonElement | HTMLAnchorElement | null) => void | React.MutableRefObject<HTMLButtonElement | HTMLAnchorElement | null>"
      },
      "from": "@epam/uui-core:IHasForwardedRef",
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui-components:ButtonProps": {
   "summary": {
    "module": "@epam/uui-components",
    "typeName": {
     "name": "ButtonProps",
     "nameFull": "ButtonProps"
    },
    "src": "uui-components/src/buttons/Button.tsx",
    "exported": true
   },
   "details": {
    "kind": 263,
    "typeValue": {
     "raw": "ButtonProps",
     "print": [
      "interface ButtonProps extends ButtonCoreProps, IHasRawProps<React.ButtonHTMLAttributes<HTMLButtonElement>>, IHasForwardedRef<HTMLButtonElement | HTMLAnchorElement> {",
      "    /** Icon for clear value button (usually cross) */",
      "    clearIcon?: Icon;",
      "    /** CSS classes to put on the caption */",
      "    captionCX?: CX;",
      "    /** CountIndicator component */",
      "    countIndicator?: React.ComponentType<IHasCaption>;",
      "}"
     ]
    },
    "props": [
     {
      "uid": 1,
      "name": "clearIcon",
      "comment": {
       "raw": [
        "Icon for clear value button (usually cross)"
       ]
      },
      "typeValue": {
       "raw": "Icon"
      },
      "editor": {
       "type": "component"
      },
      "required": false
     },
     {
      "uid": 2,
      "name": "captionCX",
      "comment": {
       "raw": [
        "CSS classes to put on the caption"
       ]
      },
      "typeValue": {
       "raw": "null | string | number | boolean | ClassDictionary | ClassArray"
      },
      "typeValueRef": "@epam/uui-core:ClassValue",
      "required": false
     },
     {
      "uid": 3,
      "name": "countIndicator",
      "comment": {
       "raw": [
        "CountIndicator component"
       ]
      },
      "typeValue": {
       "raw": "React.ComponentClass<IHasCaption, any> | React.FunctionComponent<IHasCaption>"
      },
      "required": false
     },
     {
      "uid": 4,
      "name": "dropdownIcon",
      "comment": {
       "raw": [
        "Icon for drop-down toggler"
       ]
      },
      "typeValue": {
       "raw": "Icon"
      },
      "editor": {
       "type": "component"
      },
      "from": "@epam/uui-core:ButtonCoreProps",
      "required": false
     },
     {
      "uid": 5,
      "name": "dropdownIconPosition",
      "comment": {
       "raw": [
        "Position of the dropdown icon ('left' of 'right')"
       ]
      },
      "typeValue": {
       "raw": "'right' | 'left'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "right",
        "left"
       ]
      },
      "from": "@epam/uui-core:ButtonCoreProps",
      "required": false
     },
     {
      "uid": 6,
      "name": "count",
      "typeValue": {
       "raw": "null | string | number | boolean | React.ReactElement<any, string | React.JSXElementConstructor<any>> | React.ReactFragment | React.ReactPortal"
      },
      "typeValueRef": "@types/react:ReactNode",
      "from": "@epam/uui-core:ButtonCoreProps",
      "required": false
     },
     {
      "uid": 7,
      "name": "cx",
      "comment": {
       "raw": [
        "CSS class(es) to put on component's root. See {@link https://github.com/JedWatson/classnames#usage} for details"
       ]
      },
      "typeValue": {
       "raw": "null | string | number | boolean | ClassDictionary | ClassArray"
      },
      "typeValueRef": "@epam/uui-core:ClassValue",
      "from": "@epam/uui-core:IHasCX",
      "required": false
     },
     {
      "uid": 8,
      "name": "onClick",
      "comment": {
       "raw": [
        "Called when component is clicked"
       ]
      },
      "typeValue": {
       "raw": "(e?: any) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IClickable",
      "required": false
     },
     {
      "uid": 9,
      "name": "link",
      "comment": {
       "raw": [
        "Link object to redirect to for SPA-redirects"
       ]
      },
      "typeValue": {
       "raw": "Link"
      },
      "from": "@epam/uui-core:ICanRedirect",
      "required": false
     },
     {
      "uid": 10,
      "name": "href",
      "comment": {
       "raw": [
        "Href (URL) to redirect to, for non-SPA redirects"
       ]
      },
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "from": "@epam/uui-core:ICanRedirect",
      "required": false
     },
     {
      "uid": 11,
      "name": "isLinkActive",
      "comment": {
       "raw": [
        "Highlights component to show that link is active (browser is displaying the page to which link is pointing)"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:ICanRedirect",
      "required": false
     },
     {
      "uid": 12,
      "name": "target",
      "comment": {
       "raw": [
        "Controls where the link should be opened"
       ]
      },
      "typeValue": {
       "raw": "'_blank'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "_blank"
       ]
      },
      "from": "@epam/uui-core:ICanRedirect",
      "required": false
     },
     {
      "uid": 13,
      "name": "isDisabled",
      "comment": {
       "raw": [
        "Disable editing, and visually de-emphasize value of the component"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:IDisableable",
      "required": false
     },
     {
      "uid": 14,
      "name": "icon",
      "comment": {
       "raw": [
        "Icon can be a React element (usually an SVG element)"
       ]
      },
      "typeValue": {
       "raw": "Icon"
      },
      "editor": {
       "type": "component"
      },
      "from": "@epam/uui-core:IHasIcon",
      "required": false
     },
     {
      "uid": 15,
      "name": "iconPosition",
      "comment": {
       "raw": [
        "Position of the icon (left of right)"
       ]
      },
      "typeValue": {
       "raw": "'right' | 'left'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "right",
        "left"
       ]
      },
      "from": "@epam/uui-core:IHasIcon",
      "required": false
     },
     {
      "uid": 16,
      "name": "onIconClick",
      "comment": {
       "raw": [
        "Click handler for the icon"
       ]
      },
      "typeValue": {
       "raw": "() => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IHasIcon",
      "required": false
     },
     {
      "uid": 17,
      "name": "clickAnalyticsEvent",
      "comment": {
       "raw": [
        "An analytics event to send (via AnalyticsContext) when component is clicked.",
        " See [AnalyticsContext](@link https://uui.epam.com/documents?id=analyticsContext&mode=doc&skin=UUI4_promo&category=contexts)."
       ]
      },
      "typeValue": {
       "raw": "null | { [key: string]: any; name: string; }"
      },
      "from": "@epam/uui-core:IAnalyticableClick",
      "required": false
     },
     {
      "uid": 18,
      "name": "tabIndex",
      "comment": {
       "raw": [
        "Controls the order of keyboard navigation between components"
       ]
      },
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "from": "@epam/uui-core:IHasTabIndex",
      "required": false
     },
     {
      "uid": 19,
      "name": "rawProps",
      "comment": {
       "raw": [
        "Any HTML attributes (native or 'data-') to put on the underlying component"
       ]
      },
      "typeValue": {
       "raw": "React.ButtonHTMLAttributes<HTMLButtonElement> & Record<`data-${string}`, string>"
      },
      "from": "@epam/uui-core:IHasRawProps",
      "required": false
     },
     {
      "uid": 20,
      "name": "caption",
      "comment": {
       "raw": [
        "Caption. Can be a string, or React.Elements. Certain components supports minimal markup (<b>,<i>,<a>) in captions."
       ]
      },
      "typeValue": {
       "raw": "any"
      },
      "from": "@epam/uui-core:IHasCaption",
      "required": false
     },
     {
      "uid": 21,
      "name": "onClear",
      "comment": {
       "raw": [
        "Call to clear toggler value"
       ]
      },
      "typeValue": {
       "raw": "(e?: any) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IBasicPickerToggler",
      "required": false
     },
     {
      "uid": 22,
      "name": "isOpen",
      "comment": {
       "raw": [
        "When isDropdown=true, indicate that dropdown is open with chevron icon"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:IDropdownToggler",
      "required": false
     },
     {
      "uid": 23,
      "name": "isDropdown",
      "comment": {
       "raw": [
        "Shows chevron icon, enabling component to act as dropdown toggler"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:IDropdownToggler",
      "required": false
     },
     {
      "uid": 24,
      "name": "toggleDropdownOpening",
      "comment": {
       "raw": [
        "Called when associated dropdown should open or close"
       ]
      },
      "typeValue": {
       "raw": "(value: boolean) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IDropdownToggler",
      "required": false
     },
     {
      "uid": 25,
      "name": "isInteractedOutside",
      "comment": {
       "raw": [
        "Called when component is interacted outside, to close the dropdown"
       ]
      },
      "typeValue": {
       "raw": "(event: Event) => boolean"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IDropdownToggler",
      "required": false
     },
     {
      "uid": 26,
      "name": "ref",
      "comment": {
       "raw": [
        "Component's ref"
       ]
      },
      "typeValue": {
       "raw": "null | (instance: any) => void | React.RefObject<any>"
      },
      "from": "@epam/uui-core:IDropdownToggler",
      "required": false
     },
     {
      "uid": 27,
      "name": "forwardedRef",
      "comment": {
       "raw": [
        "this ref is passed to the underlying component"
       ]
      },
      "typeValue": {
       "raw": "null | (instance: HTMLButtonElement | HTMLAnchorElement | null) => void | React.MutableRefObject<HTMLButtonElement | HTMLAnchorElement | null>"
      },
      "from": "@epam/uui-core:IHasForwardedRef",
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui-components:CalendarPresetsProps": {
   "summary": {
    "module": "@epam/uui-components",
    "typeName": {
     "name": "CalendarPresetsProps",
     "nameFull": "CalendarPresetsProps"
    },
    "src": "uui-components/src/inputs/DatePicker/CalendarPresets.tsx",
    "exported": true
   },
   "details": {
    "kind": 263,
    "typeValue": {
     "raw": "CalendarPresetsProps",
     "print": [
      "interface CalendarPresetsProps extends IHasCX, IHasRawProps<React.HTMLAttributes<HTMLDivElement>>, IHasForwardedRef<HTMLDivElement> {",
      "    presets: RangeDatePickerPresets;",
      "    onPresetSet: (nV: RangeDatePickerPresetValue) => void;",
      "}"
     ]
    },
    "props": [
     {
      "uid": 1,
      "name": "presets",
      "typeValue": {
       "raw": "RangeDatePickerPresets"
      },
      "typeValueRef": "@epam/uui-core:RangeDatePickerPresets",
      "required": true
     },
     {
      "uid": 2,
      "name": "onPresetSet",
      "typeValue": {
       "raw": "(nV: RangeDatePickerPresetValue) => void"
      },
      "editor": {
       "type": "func"
      },
      "required": true
     },
     {
      "uid": 3,
      "name": "cx",
      "comment": {
       "raw": [
        "CSS class(es) to put on component's root. See {@link https://github.com/JedWatson/classnames#usage} for details"
       ]
      },
      "typeValue": {
       "raw": "null | string | number | boolean | ClassDictionary | ClassArray"
      },
      "typeValueRef": "@epam/uui-core:ClassValue",
      "from": "@epam/uui-core:IHasCX",
      "required": false
     },
     {
      "uid": 4,
      "name": "rawProps",
      "comment": {
       "raw": [
        "Any HTML attributes (native or 'data-') to put on the underlying component"
       ]
      },
      "typeValue": {
       "raw": "React.HTMLAttributes<HTMLDivElement> & Record<`data-${string}`, string>"
      },
      "from": "@epam/uui-core:IHasRawProps",
      "required": false
     },
     {
      "uid": 5,
      "name": "forwardedRef",
      "comment": {
       "raw": [
        "this ref is passed to the underlying component"
       ]
      },
      "typeValue": {
       "raw": "null | (instance: HTMLDivElement | null) => void | React.MutableRefObject<HTMLDivElement | null>"
      },
      "from": "@epam/uui-core:IHasForwardedRef",
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui-components:CalendarProps": {
   "summary": {
    "module": "@epam/uui-components",
    "typeName": {
     "name": "CalendarProps",
     "nameFull": "CalendarProps<TSelection>"
    },
    "src": "uui-components/src/inputs/DatePicker/Calendar.tsx",
    "exported": true
   },
   "details": {
    "kind": 263,
    "typeValue": {
     "raw": "CalendarProps<TSelection>",
     "print": [
      "interface CalendarProps<TSelection> extends IHasCX, IHasRawProps<React.HTMLAttributes<HTMLDivElement>>, IHasForwardedRef<HTMLDivElement> {",
      "    value: TSelection;",
      "    onValueChange: (day: Dayjs) => void;",
      "    displayedDate: Dayjs;",
      "    renderDay?: (day: Dayjs, onDayClick: (day: Dayjs) => void) => React.ReactElement<Element>;",
      "    filter?(day: Dayjs): boolean;",
      "    hideAnotherMonths?: boolean;",
      "    getDayCX?: (day: Dayjs) => any;",
      "    isHoliday?: (day: Dayjs) => boolean;",
      "}"
     ]
    },
    "props": [
     {
      "uid": 1,
      "name": "value",
      "typeValue": {
       "raw": "TSelection"
      },
      "required": true
     },
     {
      "uid": 2,
      "name": "onValueChange",
      "typeValue": {
       "raw": "(day: Dayjs) => void"
      },
      "editor": {
       "type": "func"
      },
      "required": true
     },
     {
      "uid": 3,
      "name": "displayedDate",
      "typeValue": {
       "raw": "Dayjs"
      },
      "required": true
     },
     {
      "uid": 4,
      "name": "renderDay",
      "typeValue": {
       "raw": "(day: Dayjs, onDayClick: (day: Dayjs) => void) => React.ReactElement<Element, string | React.JSXElementConstructor<any>>"
      },
      "editor": {
       "type": "component"
      },
      "required": false
     },
     {
      "uid": 5,
      "name": "filter",
      "typeValue": {
       "raw": "(day: Dayjs) => boolean"
      },
      "editor": {
       "type": "func"
      },
      "required": false
     },
     {
      "uid": 6,
      "name": "hideAnotherMonths",
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "required": false
     },
     {
      "uid": 7,
      "name": "getDayCX",
      "typeValue": {
       "raw": "(day: Dayjs) => any"
      },
      "editor": {
       "type": "func"
      },
      "required": false
     },
     {
      "uid": 8,
      "name": "isHoliday",
      "typeValue": {
       "raw": "(day: Dayjs) => boolean"
      },
      "editor": {
       "type": "func"
      },
      "required": false
     },
     {
      "uid": 9,
      "name": "cx",
      "comment": {
       "raw": [
        "CSS class(es) to put on component's root. See {@link https://github.com/JedWatson/classnames#usage} for details"
       ]
      },
      "typeValue": {
       "raw": "null | string | number | boolean | ClassDictionary | ClassArray"
      },
      "typeValueRef": "@epam/uui-core:ClassValue",
      "from": "@epam/uui-core:IHasCX",
      "required": false
     },
     {
      "uid": 10,
      "name": "rawProps",
      "comment": {
       "raw": [
        "Any HTML attributes (native or 'data-') to put on the underlying component"
       ]
      },
      "typeValue": {
       "raw": "React.HTMLAttributes<HTMLDivElement> & Record<`data-${string}`, string>"
      },
      "from": "@epam/uui-core:IHasRawProps",
      "required": false
     },
     {
      "uid": 11,
      "name": "forwardedRef",
      "comment": {
       "raw": [
        "this ref is passed to the underlying component"
       ]
      },
      "typeValue": {
       "raw": "null | (instance: HTMLDivElement | null) => void | React.MutableRefObject<HTMLDivElement | null>"
      },
      "from": "@epam/uui-core:IHasForwardedRef",
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui-components:CarouselProps": {
   "summary": {
    "module": "@epam/uui-components",
    "typeName": {
     "name": "CarouselProps",
     "nameFull": "CarouselProps"
    },
    "src": "uui-components/src/widgets/Carousel.tsx",
    "exported": true
   },
   "details": {
    "kind": 263,
    "typeValue": {
     "raw": "CarouselProps",
     "print": [
      "interface CarouselProps extends IHasCX, IHasRawProps<React.HTMLAttributes<HTMLDivElement>>, IHasForwardedRef<HTMLDivElement> {",
      "    items: Record<string, any>[];",
      "    renderItem: (item: Record<string, any>) => React.ReactNode;",
      "    divideBy: number;",
      "    arrowIcon?: Icon;",
      "}"
     ]
    },
    "props": [
     {
      "uid": 1,
      "name": "items",
      "typeValue": {
       "raw": "Record<string, any>[]"
      },
      "required": true
     },
     {
      "uid": 2,
      "name": "renderItem",
      "typeValue": {
       "raw": "(item: Record<string, any>) => React.ReactNode"
      },
      "editor": {
       "type": "component"
      },
      "required": true
     },
     {
      "uid": 3,
      "name": "divideBy",
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "required": true
     },
     {
      "uid": 4,
      "name": "arrowIcon",
      "typeValue": {
       "raw": "Icon"
      },
      "editor": {
       "type": "component"
      },
      "required": false
     },
     {
      "uid": 5,
      "name": "cx",
      "comment": {
       "raw": [
        "CSS class(es) to put on component's root. See {@link https://github.com/JedWatson/classnames#usage} for details"
       ]
      },
      "typeValue": {
       "raw": "null | string | number | boolean | ClassDictionary | ClassArray"
      },
      "typeValueRef": "@epam/uui-core:ClassValue",
      "from": "@epam/uui-core:IHasCX",
      "required": false
     },
     {
      "uid": 6,
      "name": "rawProps",
      "comment": {
       "raw": [
        "Any HTML attributes (native or 'data-') to put on the underlying component"
       ]
      },
      "typeValue": {
       "raw": "React.HTMLAttributes<HTMLDivElement> & Record<`data-${string}`, string>"
      },
      "from": "@epam/uui-core:IHasRawProps",
      "required": false
     },
     {
      "uid": 7,
      "name": "forwardedRef",
      "comment": {
       "raw": [
        "this ref is passed to the underlying component"
       ]
      },
      "typeValue": {
       "raw": "null | (instance: HTMLDivElement | null) => void | React.MutableRefObject<HTMLDivElement | null>"
      },
      "from": "@epam/uui-core:IHasForwardedRef",
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui-components:CarouselState": {
   "summary": {
    "module": "@epam/uui-components",
    "typeName": {
     "name": "CarouselState",
     "nameFull": "CarouselState"
    },
    "src": "uui-components/src/widgets/Carousel.tsx",
    "exported": true
   },
   "details": {
    "kind": 263,
    "typeValue": {
     "raw": "CarouselState",
     "print": [
      "interface CarouselState {",
      "    activeSlide: number;",
      "}"
     ]
    },
    "props": [
     {
      "uid": 1,
      "name": "activeSlide",
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "required": true
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui-components:CheckboxGroupProps": {
   "summary": {
    "module": "@epam/uui-components",
    "typeName": {
     "name": "CheckboxGroupProps",
     "nameFull": "CheckboxGroupProps<TValue>"
    },
    "src": "uui-components/src/layout/CheckboxGroup.tsx",
    "exported": true
   },
   "details": {
    "kind": 263,
    "typeValue": {
     "raw": "CheckboxGroupProps<TValue>",
     "print": [
      "interface CheckboxGroupProps<TValue> extends ICanBeInvalid, IHasCX, IEditable<TValue[]>, IDisableable, IHasDirection, ICanBeReadonly, IHasRawProps<React.FieldsetHTMLAttributes<HTMLFieldSetElement>>, IHasForwardedRef<HTMLFieldSetElement> {",
      "    /** Overrides the component to render a single checkbox  */",
      "    CheckboxInput?: React.ComponentType<CheckboxProps>;",
      "    /** Each item defines: name: string, id: TValue (which item to put into array when item is checked), renderName() - an alternative to passing name  */",
      "    items: CheckboxGroupItem<TValue>[];",
      "}"
     ]
    },
    "props": [
     {
      "uid": 1,
      "name": "CheckboxInput",
      "comment": {
       "raw": [
        "Overrides the component to render a single checkbox"
       ]
      },
      "typeValue": {
       "raw": "React.ComponentClass<CheckboxProps, any> | React.FunctionComponent<CheckboxProps>"
      },
      "required": false
     },
     {
      "uid": 2,
      "name": "items",
      "comment": {
       "raw": [
        "Each item defines: name: string, id: TValue (which item to put into array when item is checked), renderName() - an alternative to passing name"
       ]
      },
      "typeValue": {
       "raw": "CheckboxGroupItem<TValue>[]"
      },
      "required": true
     },
     {
      "uid": 3,
      "name": "isInvalid",
      "comment": {
       "raw": [
        "True if component contains invalid input"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:ICanBeInvalid",
      "required": false
     },
     {
      "uid": 4,
      "name": "validationMessage",
      "comment": {
       "raw": [
        "Message describing why the value is invalid"
       ]
      },
      "typeValue": {
       "raw": "null | string | number | boolean | React.ReactElement<any, string | React.JSXElementConstructor<any>> | React.ReactFragment | React.ReactPortal"
      },
      "typeValueRef": "@types/react:ReactNode",
      "from": "@epam/uui-core:ICanBeInvalid",
      "required": false
     },
     {
      "uid": 5,
      "name": "validationProps",
      "comment": {
       "raw": [
        "If T is a complex value (object or array), this property contains validation states of inner items"
       ]
      },
      "typeValue": {
       "raw": "{ [key: string]: ICanBeInvalid; }"
      },
      "from": "@epam/uui-core:ICanBeInvalid",
      "required": false
     },
     {
      "uid": 6,
      "name": "cx",
      "comment": {
       "raw": [
        "CSS class(es) to put on component's root. See {@link https://github.com/JedWatson/classnames#usage} for details"
       ]
      },
      "typeValue": {
       "raw": "null | string | number | boolean | ClassDictionary | ClassArray"
      },
      "typeValueRef": "@epam/uui-core:ClassValue",
      "from": "@epam/uui-core:IHasCX",
      "required": false
     },
     {
      "uid": 7,
      "name": "value",
      "comment": {
       "raw": [
        "The current value of component"
       ]
      },
      "typeValue": {
       "raw": "TValue[]"
      },
      "from": "@epam/uui-core:IEditable",
      "required": true
     },
     {
      "uid": 8,
      "name": "onValueChange",
      "comment": {
       "raw": [
        "Called when value needs to be changed (usually due to user interaction)"
       ]
      },
      "typeValue": {
       "raw": "(newValue: TValue[]) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IEditable",
      "required": true
     },
     {
      "uid": 9,
      "name": "isDisabled",
      "comment": {
       "raw": [
        "Disable editing, and visually de-emphasize value of the component"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:IDisableable",
      "required": false
     },
     {
      "uid": 10,
      "name": "isReadonly",
      "comment": {
       "raw": [
        "Disable editing. Unlike isDisabled, keep component's value readable."
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:ICanBeReadonly",
      "required": false
     },
     {
      "uid": 11,
      "name": "isRequired",
      "comment": {
       "raw": [
        "Marks that component's value is required and shouldn't be empty"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:ICanBeRequired",
      "required": false
     },
     {
      "uid": 12,
      "name": "direction",
      "typeValue": {
       "raw": "'vertical' | 'horizontal'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "vertical",
        "horizontal"
       ]
      },
      "from": "@epam/uui-core:IHasDirection",
      "required": false
     },
     {
      "uid": 13,
      "name": "rawProps",
      "comment": {
       "raw": [
        "Any HTML attributes (native or 'data-') to put on the underlying component"
       ]
      },
      "typeValue": {
       "raw": "React.FieldsetHTMLAttributes<HTMLFieldSetElement> & Record<`data-${string}`, string>"
      },
      "from": "@epam/uui-core:IHasRawProps",
      "required": false
     },
     {
      "uid": 14,
      "name": "forwardedRef",
      "comment": {
       "raw": [
        "this ref is passed to the underlying component"
       ]
      },
      "typeValue": {
       "raw": "null | (instance: HTMLFieldSetElement | null) => void | React.MutableRefObject<HTMLFieldSetElement | null>"
      },
      "from": "@epam/uui-core:IHasForwardedRef",
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui-components:CheckboxProps": {
   "summary": {
    "module": "@epam/uui-components",
    "typeName": {
     "name": "CheckboxProps",
     "nameFull": "CheckboxProps"
    },
    "src": "uui-components/src/inputs/Checkbox.tsx",
    "exported": true
   },
   "details": {
    "kind": 263,
    "typeValue": {
     "raw": "CheckboxProps",
     "print": [
      "interface CheckboxProps extends CheckboxCoreProps, IHasTabIndex {",
      "    /** Check icon */",
      "    icon?: Icon;",
      "    /** Indeterminate state icon */",
      "    indeterminateIcon?: Icon;",
      "    renderLabel?(): React.ReactNode;",
      "    id?: string;",
      "}"
     ]
    },
    "props": [
     {
      "uid": 1,
      "name": "icon",
      "comment": {
       "raw": [
        "Check icon"
       ]
      },
      "typeValue": {
       "raw": "Icon"
      },
      "editor": {
       "type": "component"
      },
      "required": false
     },
     {
      "uid": 2,
      "name": "indeterminateIcon",
      "comment": {
       "raw": [
        "Indeterminate state icon"
       ]
      },
      "typeValue": {
       "raw": "Icon"
      },
      "editor": {
       "type": "component"
      },
      "required": false
     },
     {
      "uid": 3,
      "name": "renderLabel",
      "typeValue": {
       "raw": "() => React.ReactNode"
      },
      "editor": {
       "type": "component"
      },
      "required": false
     },
     {
      "uid": 4,
      "name": "id",
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "required": false
     },
     {
      "uid": 5,
      "name": "value",
      "comment": {
       "raw": [
        "The current value of component"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:IEditable",
      "required": true
     },
     {
      "uid": 6,
      "name": "onValueChange",
      "comment": {
       "raw": [
        "Called when value needs to be changed (usually due to user interaction)"
       ]
      },
      "typeValue": {
       "raw": "(newValue: boolean) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IEditable",
      "required": true
     },
     {
      "uid": 7,
      "name": "isInvalid",
      "comment": {
       "raw": [
        "True if component contains invalid input"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:ICanBeInvalid",
      "required": false
     },
     {
      "uid": 8,
      "name": "validationMessage",
      "comment": {
       "raw": [
        "Message describing why the value is invalid"
       ]
      },
      "typeValue": {
       "raw": "null | string | number | boolean | React.ReactElement<any, string | React.JSXElementConstructor<any>> | React.ReactFragment | React.ReactPortal"
      },
      "typeValueRef": "@types/react:ReactNode",
      "from": "@epam/uui-core:ICanBeInvalid",
      "required": false
     },
     {
      "uid": 9,
      "name": "validationProps",
      "comment": {
       "raw": [
        "If T is a complex value (object or array), this property contains validation states of inner items"
       ]
      },
      "typeValue": {
       "raw": "{ [key: string]: ICanBeInvalid; }"
      },
      "from": "@epam/uui-core:ICanBeInvalid",
      "required": false
     },
     {
      "uid": 10,
      "name": "isDisabled",
      "comment": {
       "raw": [
        "Disable editing, and visually de-emphasize value of the component"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:IDisableable",
      "required": false
     },
     {
      "uid": 11,
      "name": "isReadonly",
      "comment": {
       "raw": [
        "Disable editing. Unlike isDisabled, keep component's value readable."
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:ICanBeReadonly",
      "required": false
     },
     {
      "uid": 12,
      "name": "isRequired",
      "comment": {
       "raw": [
        "Marks that component's value is required and shouldn't be empty"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:ICanBeRequired",
      "required": false
     },
     {
      "uid": 13,
      "name": "indeterminate",
      "comment": {
       "raw": [
        "Sets checkbox in indeterminate state (neither checked or unchecked), which usually means that children elements has both values"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:ICheckable",
      "required": false
     },
     {
      "uid": 14,
      "name": "onFocus",
      "comment": {
       "raw": [
        "Called when component gets input focus"
       ]
      },
      "typeValue": {
       "raw": "(e: React.FocusEvent<HTMLInputElement, Element>) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:ICanFocus",
      "required": false
     },
     {
      "uid": 15,
      "name": "onBlur",
      "comment": {
       "raw": [
        "Called when component looses input focus"
       ]
      },
      "typeValue": {
       "raw": "(e: React.FocusEvent<HTMLInputElement, Element>) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:ICanFocus",
      "required": false
     },
     {
      "uid": 16,
      "name": "cx",
      "comment": {
       "raw": [
        "CSS class(es) to put on component's root. See {@link https://github.com/JedWatson/classnames#usage} for details"
       ]
      },
      "typeValue": {
       "raw": "null | string | number | boolean | ClassDictionary | ClassArray"
      },
      "typeValueRef": "@epam/uui-core:ClassValue",
      "from": "@epam/uui-core:IHasCX",
      "required": false
     },
     {
      "uid": 17,
      "name": "label",
      "comment": {
       "raw": [
        "Label. Can be a string, or React.Elements. Certain components supports minimal markup (<b>,<i>,<a>) in captions."
       ]
      },
      "typeValue": {
       "raw": "any"
      },
      "from": "@epam/uui-core:IHasLabel",
      "required": false
     },
     {
      "uid": 18,
      "name": "getValueChangeAnalyticsEvent",
      "comment": {
       "raw": [
        "Given a value, returns an analytics event to send when component is edited.",
        " See [AnalyticsContext](@link https://uui.epam.com/documents?id=analyticsContext&mode=doc&skin=UUI4_promo&category=contexts)."
       ]
      },
      "typeValue": {
       "raw": "(newValue: boolean | null, oldValue: boolean | null) => AnalyticsEvent"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IAnalyticableOnChange",
      "required": false
     },
     {
      "uid": 19,
      "name": "rawProps",
      "comment": {
       "raw": [
        "Any HTML attributes (native or 'data-') to put on the underlying component"
       ]
      },
      "typeValue": {
       "raw": "React.LabelHTMLAttributes<HTMLLabelElement> & Record<`data-${string}`, string>"
      },
      "from": "@epam/uui-core:IHasRawProps",
      "required": false
     },
     {
      "uid": 20,
      "name": "forwardedRef",
      "comment": {
       "raw": [
        "this ref is passed to the underlying component"
       ]
      },
      "typeValue": {
       "raw": "null | (instance: HTMLLabelElement | null) => void | React.MutableRefObject<HTMLLabelElement | null>"
      },
      "from": "@epam/uui-core:IHasForwardedRef",
      "required": false
     },
     {
      "uid": 21,
      "name": "tabIndex",
      "comment": {
       "raw": [
        "Controls the order of keyboard navigation between components"
       ]
      },
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "from": "@epam/uui-core:IHasTabIndex",
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui-components:ColumnsConfigurationRowProps": {
   "summary": {
    "module": "@epam/uui-components",
    "typeName": {
     "name": "ColumnsConfigurationRowProps",
     "nameFull": "ColumnsConfigurationRowProps"
    },
    "src": "uui-components/src/table/columnsConfigurationModal/types.ts",
    "exported": true
   },
   "details": {
    "kind": 263,
    "typeValue": {
     "raw": "ColumnsConfigurationRowProps",
     "print": [
      "interface ColumnsConfigurationRowProps extends GroupedDataColumnProps {",
      "    toggleVisibility: () => void;",
      "    togglePin: () => void;",
      "    onCanAcceptDrop: (props: AcceptDropParams<DndDataType, DndDataType>) => DropPositionOptions | null;",
      "    onDrop: (params: DropParams<DndDataType, DndDataType>) => void;",
      "    columnConfig: IColumnConfig;",
      "    isDndAllowed: boolean;",
      "    isPinned: boolean;",
      "    isPinnedAlways: boolean;",
      "}"
     ]
    },
    "props": [
     {
      "uid": 1,
      "name": "toggleVisibility",
      "typeValue": {
       "raw": "() => void"
      },
      "editor": {
       "type": "func"
      },
      "required": true
     },
     {
      "uid": 2,
      "name": "togglePin",
      "typeValue": {
       "raw": "() => void"
      },
      "editor": {
       "type": "func"
      },
      "required": true
     },
     {
      "uid": 3,
      "name": "onCanAcceptDrop",
      "typeValue": {
       "raw": "(props: AcceptDropParams<DndDataType, DndDataType>) => Partial<Record<DropPosition, boolean>> | null"
      },
      "editor": {
       "type": "func"
      },
      "required": true
     },
     {
      "uid": 4,
      "name": "onDrop",
      "typeValue": {
       "raw": "(params: DropParams<DndDataType, DndDataType>) => void"
      },
      "editor": {
       "type": "func"
      },
      "required": true
     },
     {
      "uid": 5,
      "name": "columnConfig",
      "typeValue": {
       "raw": "IColumnConfig"
      },
      "typeValueRef": "@epam/uui-core:IColumnConfig",
      "required": true
     },
     {
      "uid": 6,
      "name": "isDndAllowed",
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "required": true
     },
     {
      "uid": 7,
      "name": "isPinned",
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "required": true
     },
     {
      "uid": 8,
      "name": "isPinnedAlways",
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "required": true
     },
     {
      "uid": 9,
      "name": "groupKey",
      "typeValue": {
       "raw": "'hidden' | 'displayedUnpinned' | 'displayedPinned'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "hidden",
        "displayedUnpinned",
        "displayedPinned"
       ]
      },
      "from": "@epam/uui-components:GroupedDataColumnProps",
      "required": false
     },
     {
      "uid": 10,
      "name": "key",
      "comment": {
       "raw": [
        "Unique key to identify the column. Used to reference columns, e.g. in ColumnsConfig.",
        " Also, used as React key for cells, header cells, and other components inside tables."
       ]
      },
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "from": "@epam/uui-core:DataColumnProps",
      "required": true
     },
     {
      "uid": 11,
      "name": "caption",
      "comment": {
       "raw": [
        "Column caption. Can be a plain text, or any React Component"
       ]
      },
      "typeValue": {
       "raw": "null | string | number | boolean | React.ReactElement<any, string | React.JSXElementConstructor<any>> | React.ReactFragment | React.ReactPortal"
      },
      "typeValueRef": "@types/react:ReactNode",
      "from": "@epam/uui-core:DataColumnProps",
      "required": false
     },
     {
      "uid": 12,
      "name": "width",
      "comment": {
       "raw": [
        "The width of the column. Usually, columns has exact this width.",
        " When all columns fit, and there's spare horizontal space, you can use 'grow' prop to use this space for certain columns.",
        " DataTable's columns can't shrink below width - table will add horizontal scrolling instead of shrinking columns"
       ]
      },
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "from": "@epam/uui-core:DataColumnProps",
      "required": true
     },
     {
      "uid": 13,
      "name": "minWidth",
      "comment": {
       "raw": [
        "Minimal width to which column can be resized manually"
       ]
      },
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "from": "@epam/uui-core:DataColumnProps",
      "required": false
     },
     {
      "uid": 14,
      "name": "grow",
      "comment": {
       "raw": [
        "The flex grow for the column. Allows column to grow in width if there's spare horizontal space"
       ]
      },
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "from": "@epam/uui-core:DataColumnProps",
      "required": false
     },
     {
      "uid": 15,
      "name": "textAlign",
      "comment": {
       "raw": [
        "Aligns cell content horizontally"
       ]
      },
      "typeValue": {
       "raw": "'right' | 'left' | 'center'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "right",
        "left",
        "center"
       ]
      },
      "from": "@epam/uui-core:DataColumnProps",
      "required": false
     },
     {
      "uid": 16,
      "name": "justifyContent",
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "from": "@epam/uui-core:DataColumnProps",
      "required": false
     },
     {
      "uid": 17,
      "name": "alignSelf",
      "comment": {
       "raw": [
        "Align cell content vertically"
       ]
      },
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "from": "@epam/uui-core:DataColumnProps",
      "required": false
     },
     {
      "uid": 18,
      "name": "isSortable",
      "comment": {
       "raw": [
        "Enables sorting arrows on the column.",
        " Sorting state is kept in DataSourceState.sorting"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:DataColumnProps",
      "required": false
     },
     {
      "uid": 19,
      "name": "isAlwaysVisible",
      "comment": {
       "raw": [
        "Disallows to hide column via ColumnsConfiguration"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:DataColumnProps",
      "required": false
     },
     {
      "uid": 20,
      "name": "isHiddenByDefault",
      "comment": {
       "raw": [
        "Makes column hidden by default. User can turn it on later, via ColumnsConfiguration"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:DataColumnProps",
      "required": false
     },
     {
      "uid": 21,
      "name": "info",
      "comment": {
       "raw": [
        "Info tooltip displayed in the table header"
       ]
      },
      "typeValue": {
       "raw": "null | string | number | boolean | React.ReactElement<any, string | React.JSXElementConstructor<any>> | React.ReactFragment | React.ReactPortal"
      },
      "typeValueRef": "@types/react:ReactNode",
      "from": "@epam/uui-core:DataColumnProps",
      "required": false
     },
     {
      "uid": 22,
      "name": "isFilterActive",
      "comment": {
       "raw": [
        "Should return true, if current filter affects the column.",
        " Usually, this prop is filled automatically by the useTableState hook.",
        " If you use the useTableState hook, you don't need to specify it manually."
       ]
      },
      "typeValue": {
       "raw": "(filter: any, column: DataColumnProps<any, any, any>) => boolean"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:DataColumnProps",
      "required": false
     },
     {
      "uid": 23,
      "name": "canCopy",
      "comment": {
       "raw": [
        "A pure function that defines that column value can be copied to the other column."
       ]
      },
      "typeValue": {
       "raw": "(cell: DataTableSelectedCellData<any, any, any>) => boolean"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:DataColumnProps",
      "required": false
     },
     {
      "uid": 24,
      "name": "canAcceptCopy",
      "comment": {
       "raw": [
        "A pure function that defines that column accepts copying other column value into it"
       ]
      },
      "typeValue": {
       "raw": "(from: DataTableSelectedCellData<any, any, any>, to: DataTableSelectedCellData<any, any, any>) => boolean"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:DataColumnProps",
      "required": false
     },
     {
      "uid": 25,
      "name": "render",
      "comment": {
       "raw": [
        "Render the cell content. The item props is the value of the whole row (TItem)."
       ]
      },
      "typeValue": {
       "raw": "(item: any, props: DataRowProps<any, any>) => any"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:DataColumnProps",
      "required": false
     },
     {
      "uid": 26,
      "name": "renderCell",
      "comment": {
       "raw": [
        "Overrides rendering of the whole cell"
       ]
      },
      "typeValue": {
       "raw": "(cellProps: RenderCellProps<any, any>) => any"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:DataColumnProps",
      "required": false
     },
     {
      "uid": 27,
      "name": "renderDropdown",
      "comment": {
       "raw": [
        "Renders column header dropdown.",
        " Usually, this prop is filled automatically by the useTableState hook.",
        " If you use the useTableState hook, you don't need to specify it manually."
       ]
      },
      "typeValue": {
       "raw": "() => React.ReactNode"
      },
      "editor": {
       "type": "component"
      },
      "from": "@epam/uui-core:DataColumnProps",
      "required": false
     },
     {
      "uid": 28,
      "name": "renderFilter",
      "comment": {
       "raw": [
        "Renders column filter.",
        " If you use useTableState hook, and you specify filter for the column, default filter will be rendered automatically.",
        " You can use this prop to render a custom filter component."
       ]
      },
      "typeValue": {
       "raw": "(lens: ILens<any>, dropdownProps: IDropdownBodyProps) => React.ReactNode"
      },
      "editor": {
       "type": "component"
      },
      "from": "@epam/uui-core:DataColumnProps",
      "required": false
     },
     {
      "uid": 29,
      "name": "fix",
      "comment": {
       "raw": [
        "If specified, will make column fixed - it would not scroll horizontally"
       ]
      },
      "typeValue": {
       "raw": "'right' | 'left'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "right",
        "left"
       ]
      },
      "from": "@epam/uui-core:ICanBeFixed",
      "required": false
     },
     {
      "uid": 30,
      "name": "cx",
      "comment": {
       "raw": [
        "CSS class(es) to put on component's root. See {@link https://github.com/JedWatson/classnames#usage} for details"
       ]
      },
      "typeValue": {
       "raw": "null | string | number | boolean | ClassDictionary | ClassArray"
      },
      "typeValueRef": "@epam/uui-core:ClassValue",
      "from": "@epam/uui-core:IHasCX",
      "required": false
     },
     {
      "uid": 31,
      "name": "onClick",
      "comment": {
       "raw": [
        "Called when component is clicked"
       ]
      },
      "typeValue": {
       "raw": "(e?: any) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IClickable",
      "required": false
     },
     {
      "uid": 32,
      "name": "rawProps",
      "comment": {
       "raw": [
        "Any HTML attributes (native or 'data-') to put on the underlying component"
       ]
      },
      "typeValue": {
       "raw": "HTMLDivElement & Record<`data-${string}`, string>"
      },
      "from": "@epam/uui-core:IHasRawProps",
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui-components:ControlGroupProps": {
   "summary": {
    "module": "@epam/uui-components",
    "typeName": {
     "name": "ControlGroupProps",
     "nameFull": "ControlGroupProps"
    },
    "src": "uui-components/src/layout/ControlGroup.tsx",
    "exported": true
   },
   "details": {
    "kind": 263,
    "typeValue": {
     "raw": "ControlGroupProps",
     "print": [
      "interface ControlGroupProps extends IHasCX, IHasChildren, IHasRawProps<React.HTMLAttributes<HTMLDivElement>>, IHasForwardedRef<HTMLDivElement> {",
      "}"
     ]
    },
    "props": [
     {
      "uid": 1,
      "name": "cx",
      "comment": {
       "raw": [
        "CSS class(es) to put on component's root. See {@link https://github.com/JedWatson/classnames#usage} for details"
       ]
      },
      "typeValue": {
       "raw": "null | string | number | boolean | ClassDictionary | ClassArray"
      },
      "typeValueRef": "@epam/uui-core:ClassValue",
      "from": "@epam/uui-core:IHasCX",
      "required": false
     },
     {
      "uid": 2,
      "name": "children",
      "typeValue": {
       "raw": "null | string | number | boolean | React.ReactElement<any, string | React.JSXElementConstructor<any>> | React.ReactFragment | React.ReactPortal"
      },
      "typeValueRef": "@types/react:ReactNode",
      "from": "@epam/uui-core:IHasChildren",
      "required": false
     },
     {
      "uid": 3,
      "name": "rawProps",
      "comment": {
       "raw": [
        "Any HTML attributes (native or 'data-') to put on the underlying component"
       ]
      },
      "typeValue": {
       "raw": "React.HTMLAttributes<HTMLDivElement> & Record<`data-${string}`, string>"
      },
      "from": "@epam/uui-core:IHasRawProps",
      "required": false
     },
     {
      "uid": 4,
      "name": "forwardedRef",
      "comment": {
       "raw": [
        "this ref is passed to the underlying component"
       ]
      },
      "typeValue": {
       "raw": "null | (instance: HTMLDivElement | null) => void | React.MutableRefObject<HTMLDivElement | null>"
      },
      "from": "@epam/uui-core:IHasForwardedRef",
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui-components:ControlIconProps": {
   "summary": {
    "module": "@epam/uui-components",
    "typeName": {
     "name": "ControlIconProps",
     "nameFull": "ControlIconProps"
    },
    "src": "uui-components/src/layout/IconContainer.tsx",
    "exported": true
   },
   "details": {
    "kind": 263,
    "typeValue": {
     "raw": "ControlIconProps",
     "print": [
      "interface ControlIconProps extends IHasCX, IDisableable, IHasRawProps<React.HTMLAttributes<HTMLDivElement>>, IHasTabIndex {",
      "    /** Icon to display */",
      "    icon?: Icon;",
      "    /** Flips the icon vertically */",
      "    flipY?: boolean;",
      "    /** Rotate the icon (cw stands for 'clock-wise', ccw stands for 'counter clock-wise)) */",
      "    rotate?: '0' | '90cw' | '180' | '90ccw';",
      "    /** Click handler */",
      "    onClick?(e: React.SyntheticEvent<HTMLDivElement>): void;",
      "    /** CSS style prop to put on the component */",
      "    style?: React.CSSProperties;",
      "    /** Icon size in pixels (both width and height, as icons are assumed to be square-shaped) */",
      "    size?: number;",
      "}"
     ]
    },
    "props": [
     {
      "uid": 1,
      "name": "icon",
      "comment": {
       "raw": [
        "Icon to display"
       ]
      },
      "typeValue": {
       "raw": "Icon"
      },
      "editor": {
       "type": "component"
      },
      "required": false
     },
     {
      "uid": 2,
      "name": "flipY",
      "comment": {
       "raw": [
        "Flips the icon vertically"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "required": false
     },
     {
      "uid": 3,
      "name": "rotate",
      "comment": {
       "raw": [
        "Rotate the icon (cw stands for 'clock-wise', ccw stands for 'counter clock-wise))"
       ]
      },
      "typeValue": {
       "raw": "'0' | '90cw' | '180' | '90ccw'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "0",
        "180",
        "90cw",
        "90ccw"
       ]
      },
      "required": false
     },
     {
      "uid": 4,
      "name": "onClick",
      "comment": {
       "raw": [
        "Click handler"
       ]
      },
      "typeValue": {
       "raw": "(e: React.SyntheticEvent<HTMLDivElement, Event>) => void"
      },
      "editor": {
       "type": "func"
      },
      "required": false
     },
     {
      "uid": 5,
      "name": "style",
      "comment": {
       "raw": [
        "CSS style prop to put on the component"
       ]
      },
      "typeValue": {
       "raw": "React.CSSProperties"
      },
      "required": false
     },
     {
      "uid": 6,
      "name": "size",
      "comment": {
       "raw": [
        "Icon size in pixels (both width and height, as icons are assumed to be square-shaped)"
       ]
      },
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "required": false
     },
     {
      "uid": 7,
      "name": "cx",
      "comment": {
       "raw": [
        "CSS class(es) to put on component's root. See {@link https://github.com/JedWatson/classnames#usage} for details"
       ]
      },
      "typeValue": {
       "raw": "null | string | number | boolean | ClassDictionary | ClassArray"
      },
      "typeValueRef": "@epam/uui-core:ClassValue",
      "from": "@epam/uui-core:IHasCX",
      "required": false
     },
     {
      "uid": 8,
      "name": "isDisabled",
      "comment": {
       "raw": [
        "Disable editing, and visually de-emphasize value of the component"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:IDisableable",
      "required": false
     },
     {
      "uid": 9,
      "name": "rawProps",
      "comment": {
       "raw": [
        "Any HTML attributes (native or 'data-') to put on the underlying component"
       ]
      },
      "typeValue": {
       "raw": "React.HTMLAttributes<HTMLDivElement> & Record<`data-${string}`, string>"
      },
      "from": "@epam/uui-core:IHasRawProps",
      "required": false
     },
     {
      "uid": 10,
      "name": "tabIndex",
      "comment": {
       "raw": [
        "Controls the order of keyboard navigation between components"
       ]
      },
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "from": "@epam/uui-core:IHasTabIndex",
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui-components:DataSourceKeyboardParams": {
   "summary": {
    "module": "@epam/uui-components",
    "typeName": {
     "name": "DataSourceKeyboardParams",
     "nameFull": "DataSourceKeyboardParams"
    },
    "src": "uui-components/src/pickers/KeyboardUtils.tsx",
    "exported": true
   },
   "details": {
    "kind": 263,
    "typeValue": {
     "raw": "DataSourceKeyboardParams",
     "print": [
      "interface DataSourceKeyboardParams extends IEditable<DataSourceState> {",
      "    listView: IDataSourceView<any, any, any>;",
      "    rows: DataRowProps<any, any>[];",
      "    searchPosition: PickerInputSearchPosition;",
      "}"
     ]
    },
    "props": [
     {
      "uid": 1,
      "name": "listView",
      "typeValue": {
       "raw": "IDataSourceView<any, any, any>"
      },
      "typeValueRef": "@epam/uui-core:IDataSourceView",
      "required": true
     },
     {
      "uid": 2,
      "name": "rows",
      "typeValue": {
       "raw": "DataRowProps<any, any>[]"
      },
      "required": true
     },
     {
      "uid": 3,
      "name": "searchPosition",
      "typeValue": {
       "raw": "'input' | 'body' | 'none'"
      },
      "typeValueRef": "@epam/uui-components:PickerInputSearchPosition",
      "editor": {
       "type": "oneOf",
       "options": [
        "input",
        "body",
        "none"
       ]
      },
      "required": true
     },
     {
      "uid": 4,
      "name": "value",
      "comment": {
       "raw": [
        "The current value of component"
       ]
      },
      "typeValue": {
       "raw": "DataSourceState<Record<string, any>, any>"
      },
      "from": "@epam/uui-core:IEditable",
      "required": true
     },
     {
      "uid": 5,
      "name": "onValueChange",
      "comment": {
       "raw": [
        "Called when value needs to be changed (usually due to user interaction)"
       ]
      },
      "typeValue": {
       "raw": "(newValue: DataSourceState<Record<string, any>, any>) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IEditable",
      "required": true
     },
     {
      "uid": 6,
      "name": "isInvalid",
      "comment": {
       "raw": [
        "True if component contains invalid input"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:ICanBeInvalid",
      "required": false
     },
     {
      "uid": 7,
      "name": "validationMessage",
      "comment": {
       "raw": [
        "Message describing why the value is invalid"
       ]
      },
      "typeValue": {
       "raw": "null | string | number | boolean | React.ReactElement<any, string | React.JSXElementConstructor<any>> | React.ReactFragment | React.ReactPortal"
      },
      "typeValueRef": "@types/react:ReactNode",
      "from": "@epam/uui-core:ICanBeInvalid",
      "required": false
     },
     {
      "uid": 8,
      "name": "validationProps",
      "comment": {
       "raw": [
        "If T is a complex value (object or array), this property contains validation states of inner items"
       ]
      },
      "typeValue": {
       "raw": "{ [key: string]: ICanBeInvalid; }"
      },
      "from": "@epam/uui-core:ICanBeInvalid",
      "required": false
     },
     {
      "uid": 9,
      "name": "isDisabled",
      "comment": {
       "raw": [
        "Disable editing, and visually de-emphasize value of the component"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:IDisableable",
      "required": false
     },
     {
      "uid": 10,
      "name": "isReadonly",
      "comment": {
       "raw": [
        "Disable editing. Unlike isDisabled, keep component's value readable."
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:ICanBeReadonly",
      "required": false
     },
     {
      "uid": 11,
      "name": "isRequired",
      "comment": {
       "raw": [
        "Marks that component's value is required and shouldn't be empty"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:ICanBeRequired",
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui-components:DataTableSelectionProviderProps": {
   "summary": {
    "module": "@epam/uui-components",
    "typeName": {
     "name": "DataTableSelectionProviderProps",
     "nameFull": "DataTableSelectionProviderProps<TItem, TId, TFilter>"
    },
    "src": "uui-components/src/table/tableCellsSelection/DataTableSelectionProvider.tsx",
    "exported": true
   },
   "details": {
    "kind": 263,
    "typeValue": {
     "raw": "DataTableSelectionProviderProps<TItem, TId, TFilter>",
     "print": [
      "interface DataTableSelectionProviderProps<TItem, TId, TFilter> extends React.PropsWithChildren {",
      "    rows: DataRowProps<TItem, TId>[];",
      "    columns: DataColumnProps<TItem, TId>[];",
      "    onCopy?: (copyFrom: DataTableSelectedCellData<TItem, TId, TFilter>, selectedCells: DataTableSelectedCellData<TItem, TId, TFilter>[]) => void;",
      "}"
     ]
    },
    "props": [
     {
      "uid": 1,
      "name": "rows",
      "typeValue": {
       "raw": "DataRowProps<TItem, TId>[]"
      },
      "required": true
     },
     {
      "uid": 2,
      "name": "columns",
      "typeValue": {
       "raw": "DataColumnProps<TItem, TId, any>[]"
      },
      "required": true
     },
     {
      "uid": 3,
      "name": "onCopy",
      "typeValue": {
       "raw": "(copyFrom: DataTableSelectedCellData<TItem, TId, TFilter>, selectedCells: DataTableSelectedCellData<TItem, TId, TFilter>[]) => void"
      },
      "editor": {
       "type": "func"
      },
      "required": false
     },
     {
      "uid": 4,
      "name": "children",
      "typeValue": {
       "raw": "null | string | number | boolean | React.ReactElement<any, string | React.JSXElementConstructor<any>> | React.ReactFragment | React.ReactPortal"
      },
      "typeValueRef": "@types/react:ReactNode",
      "from": "@types/react:PropsWithChildren",
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui-components:DatePickerBodyBaseOptions": {
   "summary": {
    "module": "@epam/uui-components",
    "typeName": {
     "name": "DatePickerBodyBaseOptions",
     "nameFull": "DatePickerBodyBaseOptions"
    },
    "src": "uui-components/src/inputs/DatePicker/DatePickerBodyBase.tsx",
    "exported": true
   },
   "details": {
    "kind": 263,
    "typeValue": {
     "raw": "DatePickerBodyBaseOptions",
     "print": [
      "interface DatePickerBodyBaseOptions extends IHasCX, IHasRawProps<React.HTMLAttributes<HTMLDivElement>>, IHasForwardedRef<HTMLDivElement> {",
      "    filter?(day: Dayjs): boolean;",
      "    changeIsOpen?(newValue: boolean): void;",
      "    presets?: RangeDatePickerPresets;",
      "    renderDay?: (day: Dayjs, onDayClick: (day: Dayjs) => void) => React.ReactElement<Element>;",
      "}"
     ]
    },
    "props": [
     {
      "uid": 1,
      "name": "filter",
      "typeValue": {
       "raw": "(day: Dayjs) => boolean"
      },
      "editor": {
       "type": "func"
      },
      "required": false
     },
     {
      "uid": 2,
      "name": "changeIsOpen",
      "typeValue": {
       "raw": "(newValue: boolean) => void"
      },
      "editor": {
       "type": "func"
      },
      "required": false
     },
     {
      "uid": 3,
      "name": "presets",
      "typeValue": {
       "raw": "RangeDatePickerPresets"
      },
      "required": false
     },
     {
      "uid": 4,
      "name": "renderDay",
      "typeValue": {
       "raw": "(day: Dayjs, onDayClick: (day: Dayjs) => void) => React.ReactElement<Element, string | React.JSXElementConstructor<any>>"
      },
      "editor": {
       "type": "component"
      },
      "required": false
     },
     {
      "uid": 5,
      "name": "cx",
      "comment": {
       "raw": [
        "CSS class(es) to put on component's root. See {@link https://github.com/JedWatson/classnames#usage} for details"
       ]
      },
      "typeValue": {
       "raw": "null | string | number | boolean | ClassDictionary | ClassArray"
      },
      "typeValueRef": "@epam/uui-core:ClassValue",
      "from": "@epam/uui-core:IHasCX",
      "required": false
     },
     {
      "uid": 6,
      "name": "rawProps",
      "comment": {
       "raw": [
        "Any HTML attributes (native or 'data-') to put on the underlying component"
       ]
      },
      "typeValue": {
       "raw": "React.HTMLAttributes<HTMLDivElement> & Record<`data-${string}`, string>"
      },
      "from": "@epam/uui-core:IHasRawProps",
      "required": false
     },
     {
      "uid": 7,
      "name": "forwardedRef",
      "comment": {
       "raw": [
        "this ref is passed to the underlying component"
       ]
      },
      "typeValue": {
       "raw": "null | (instance: HTMLDivElement | null) => void | React.MutableRefObject<HTMLDivElement | null>"
      },
      "from": "@epam/uui-core:IHasForwardedRef",
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui-components:DatePickerBodyBaseProps": {
   "summary": {
    "module": "@epam/uui-components",
    "typeName": {
     "name": "DatePickerBodyBaseProps",
     "nameFull": "DatePickerBodyBaseProps<TSelection>"
    },
    "src": "uui-components/src/inputs/DatePicker/DatePickerBodyBase.tsx",
    "exported": true
   },
   "details": {
    "kind": 263,
    "typeValue": {
     "raw": "DatePickerBodyBaseProps<TSelection>",
     "print": [
      "interface DatePickerBodyBaseProps<TSelection> extends DatePickerBodyBaseOptions {",
      "    value: PickerBodyValue<TSelection>;",
      "    setSelectedDate: (newDate: TSelection) => void;",
      "    setDisplayedDateAndView: (displayedDate: Dayjs, view: ViewType) => void;",
      "}"
     ]
    },
    "props": [
     {
      "uid": 1,
      "name": "value",
      "typeValue": {
       "raw": "PickerBodyValue<TSelection>"
      },
      "required": true
     },
     {
      "uid": 2,
      "name": "setSelectedDate",
      "typeValue": {
       "raw": "(newDate: TSelection) => void"
      },
      "editor": {
       "type": "func"
      },
      "required": true
     },
     {
      "uid": 3,
      "name": "setDisplayedDateAndView",
      "typeValue": {
       "raw": "(displayedDate: Dayjs, view: ViewType) => void"
      },
      "editor": {
       "type": "func"
      },
      "required": true
     },
     {
      "uid": 4,
      "name": "filter",
      "typeValue": {
       "raw": "(day: Dayjs) => boolean"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-components:DatePickerBodyBaseOptions",
      "required": false
     },
     {
      "uid": 5,
      "name": "changeIsOpen",
      "typeValue": {
       "raw": "(newValue: boolean) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-components:DatePickerBodyBaseOptions",
      "required": false
     },
     {
      "uid": 6,
      "name": "presets",
      "typeValue": {
       "raw": "RangeDatePickerPresets"
      },
      "from": "@epam/uui-components:DatePickerBodyBaseOptions",
      "required": false
     },
     {
      "uid": 7,
      "name": "renderDay",
      "typeValue": {
       "raw": "(day: Dayjs, onDayClick: (day: Dayjs) => void) => React.ReactElement<Element, string | React.JSXElementConstructor<any>>"
      },
      "editor": {
       "type": "component"
      },
      "from": "@epam/uui-components:DatePickerBodyBaseOptions",
      "required": false
     },
     {
      "uid": 8,
      "name": "cx",
      "comment": {
       "raw": [
        "CSS class(es) to put on component's root. See {@link https://github.com/JedWatson/classnames#usage} for details"
       ]
      },
      "typeValue": {
       "raw": "null | string | number | boolean | ClassDictionary | ClassArray"
      },
      "typeValueRef": "@epam/uui-core:ClassValue",
      "from": "@epam/uui-core:IHasCX",
      "required": false
     },
     {
      "uid": 9,
      "name": "rawProps",
      "comment": {
       "raw": [
        "Any HTML attributes (native or 'data-') to put on the underlying component"
       ]
      },
      "typeValue": {
       "raw": "React.HTMLAttributes<HTMLDivElement> & Record<`data-${string}`, string>"
      },
      "from": "@epam/uui-core:IHasRawProps",
      "required": false
     },
     {
      "uid": 10,
      "name": "forwardedRef",
      "comment": {
       "raw": [
        "this ref is passed to the underlying component"
       ]
      },
      "typeValue": {
       "raw": "null | (instance: HTMLDivElement | null) => void | React.MutableRefObject<HTMLDivElement | null>"
      },
      "from": "@epam/uui-core:IHasForwardedRef",
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui-components:DatePickerState": {
   "summary": {
    "module": "@epam/uui-components",
    "typeName": {
     "name": "DatePickerState",
     "nameFull": "DatePickerState"
    },
    "src": "uui-components/src/inputs/DatePicker/BaseDatePicker.tsx",
    "exported": true
   },
   "details": {
    "kind": 263,
    "typeValue": {
     "raw": "DatePickerState",
     "print": [
      "interface DatePickerState extends PickerBodyValue<string> {",
      "    isOpen: boolean;",
      "    inputValue: string | null;",
      "}"
     ]
    },
    "props": [
     {
      "uid": 1,
      "name": "isOpen",
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "required": true
     },
     {
      "uid": 2,
      "name": "inputValue",
      "typeValue": {
       "raw": "null | string"
      },
      "editor": {
       "type": "string"
      },
      "required": false
     },
     {
      "uid": 3,
      "name": "selectedDate",
      "typeValue": {
       "raw": "null | string"
      },
      "editor": {
       "type": "string"
      },
      "from": "@epam/uui-components:PickerBodyValue",
      "required": false
     },
     {
      "uid": 4,
      "name": "displayedDate",
      "typeValue": {
       "raw": "Dayjs"
      },
      "from": "@epam/uui-components:PickerBodyValue",
      "required": true
     },
     {
      "uid": 5,
      "name": "view",
      "typeValue": {
       "raw": "'DAY_SELECTION' | 'MONTH_SELECTION' | 'YEAR_SELECTION'"
      },
      "typeValueRef": "@epam/uui-components:ViewType",
      "editor": {
       "type": "oneOf",
       "options": [
        "DAY_SELECTION",
        "MONTH_SELECTION",
        "YEAR_SELECTION"
       ]
      },
      "from": "@epam/uui-components:PickerBodyValue",
      "required": true
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui-components:DayProps": {
   "summary": {
    "module": "@epam/uui-components",
    "typeName": {
     "name": "DayProps",
     "nameFull": "DayProps"
    },
    "src": "uui-components/src/inputs/DatePicker/Day.tsx",
    "exported": true
   },
   "details": {
    "kind": 263,
    "typeValue": {
     "raw": "DayProps",
     "print": [
      "interface DayProps extends IEditable<Dayjs>, IHasRawProps<React.HTMLAttributes<HTMLDivElement>>, IHasForwardedRef<HTMLDivElement> {",
      "    filter?(day: Dayjs): boolean;",
      "    getDayCX?: (day: Dayjs) => CX;",
      "    renderDayNumber?: (param: Dayjs) => any;",
      "    isSelected?: boolean;",
      "    isHoliday?: boolean;",
      "}"
     ]
    },
    "props": [
     {
      "uid": 1,
      "name": "filter",
      "typeValue": {
       "raw": "(day: Dayjs) => boolean"
      },
      "editor": {
       "type": "func"
      },
      "required": false
     },
     {
      "uid": 2,
      "name": "getDayCX",
      "typeValue": {
       "raw": "(day: Dayjs) => ClassValue"
      },
      "editor": {
       "type": "func"
      },
      "required": false
     },
     {
      "uid": 3,
      "name": "renderDayNumber",
      "typeValue": {
       "raw": "(param: Dayjs) => any"
      },
      "editor": {
       "type": "func"
      },
      "required": false
     },
     {
      "uid": 4,
      "name": "isSelected",
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "required": false
     },
     {
      "uid": 5,
      "name": "isHoliday",
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "required": false
     },
     {
      "uid": 6,
      "name": "value",
      "comment": {
       "raw": [
        "The current value of component"
       ]
      },
      "typeValue": {
       "raw": "Dayjs"
      },
      "from": "@epam/uui-core:IEditable",
      "required": true
     },
     {
      "uid": 7,
      "name": "onValueChange",
      "comment": {
       "raw": [
        "Called when value needs to be changed (usually due to user interaction)"
       ]
      },
      "typeValue": {
       "raw": "(newValue: Dayjs) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IEditable",
      "required": true
     },
     {
      "uid": 8,
      "name": "isInvalid",
      "comment": {
       "raw": [
        "True if component contains invalid input"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:ICanBeInvalid",
      "required": false
     },
     {
      "uid": 9,
      "name": "validationMessage",
      "comment": {
       "raw": [
        "Message describing why the value is invalid"
       ]
      },
      "typeValue": {
       "raw": "null | string | number | boolean | React.ReactElement<any, string | React.JSXElementConstructor<any>> | React.ReactFragment | React.ReactPortal"
      },
      "typeValueRef": "@types/react:ReactNode",
      "from": "@epam/uui-core:ICanBeInvalid",
      "required": false
     },
     {
      "uid": 10,
      "name": "validationProps",
      "comment": {
       "raw": [
        "If T is a complex value (object or array), this property contains validation states of inner items"
       ]
      },
      "typeValue": {
       "raw": "{ [key: string]: ICanBeInvalid; }"
      },
      "from": "@epam/uui-core:ICanBeInvalid",
      "required": false
     },
     {
      "uid": 11,
      "name": "isDisabled",
      "comment": {
       "raw": [
        "Disable editing, and visually de-emphasize value of the component"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:IDisableable",
      "required": false
     },
     {
      "uid": 12,
      "name": "isReadonly",
      "comment": {
       "raw": [
        "Disable editing. Unlike isDisabled, keep component's value readable."
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:ICanBeReadonly",
      "required": false
     },
     {
      "uid": 13,
      "name": "isRequired",
      "comment": {
       "raw": [
        "Marks that component's value is required and shouldn't be empty"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:ICanBeRequired",
      "required": false
     },
     {
      "uid": 14,
      "name": "rawProps",
      "comment": {
       "raw": [
        "Any HTML attributes (native or 'data-') to put on the underlying component"
       ]
      },
      "typeValue": {
       "raw": "React.HTMLAttributes<HTMLDivElement> & Record<`data-${string}`, string>"
      },
      "from": "@epam/uui-core:IHasRawProps",
      "required": false
     },
     {
      "uid": 15,
      "name": "forwardedRef",
      "comment": {
       "raw": [
        "this ref is passed to the underlying component"
       ]
      },
      "typeValue": {
       "raw": "null | (instance: HTMLDivElement | null) => void | React.MutableRefObject<HTMLDivElement | null>"
      },
      "from": "@epam/uui-core:IHasForwardedRef",
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui-components:DragHandleProps": {
   "summary": {
    "module": "@epam/uui-components",
    "typeName": {
     "name": "DragHandleProps",
     "nameFull": "DragHandleProps"
    },
    "src": "uui-components/src/dnd/DragHandle.tsx",
    "exported": true
   },
   "details": {
    "kind": 263,
    "typeValue": {
     "raw": "DragHandleProps",
     "print": [
      "interface DragHandleProps extends IHasCX, IHasRawProps<React.HTMLAttributes<HTMLDivElement>>, IDisableable {",
      "}"
     ]
    },
    "props": [
     {
      "uid": 1,
      "name": "cx",
      "comment": {
       "raw": [
        "CSS class(es) to put on component's root. See {@link https://github.com/JedWatson/classnames#usage} for details"
       ]
      },
      "typeValue": {
       "raw": "null | string | number | boolean | ClassDictionary | ClassArray"
      },
      "typeValueRef": "@epam/uui-core:ClassValue",
      "from": "@epam/uui-core:IHasCX",
      "required": false
     },
     {
      "uid": 2,
      "name": "rawProps",
      "comment": {
       "raw": [
        "Any HTML attributes (native or 'data-') to put on the underlying component"
       ]
      },
      "typeValue": {
       "raw": "React.HTMLAttributes<HTMLDivElement> & Record<`data-${string}`, string>"
      },
      "from": "@epam/uui-core:IHasRawProps",
      "required": false
     },
     {
      "uid": 3,
      "name": "isDisabled",
      "comment": {
       "raw": [
        "Disable editing, and visually de-emphasize value of the component"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:IDisableable",
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui-components:DropdownContainerProps": {
   "summary": {
    "module": "@epam/uui-components",
    "typeName": {
     "name": "DropdownContainerProps",
     "nameFull": "DropdownContainerProps"
    },
    "src": "uui-components/src/overlays/DropdownContainer.tsx",
    "exported": true
   },
   "details": {
    "kind": 263,
    "typeValue": {
     "raw": "DropdownContainerProps",
     "print": [
      "interface DropdownContainerProps extends IHasCX, IHasChildren, IHasRawProps<React.HTMLAttributes<HTMLDivElement>>, IHasForwardedRef<HTMLDivElement>, IDropdownBodyProps {",
      "    width?: number | 'auto';",
      "    maxWidth?: number;",
      "    height?: number;",
      "    showArrow?: boolean;",
      "    style?: React.CSSProperties;",
      "    /**",
      "     * Pass true to wrap DropdownContainer with FocusLock component to support keyboard navigation.",
      "     * If omitted, true value will be used.",
      "     *",
      "     * After DropdownContainer appeared the focus will be set on the first focusable element inside.",
      "     * @default true",
      "     */",
      "    focusLock?: boolean;",
      "    /**",
      "     * Pass true to return focus into initial position on unmount.",
      "     * If omitted, true value will be used. It's used if focusLock=true.",
      "     * */",
      "    returnFocus?: boolean;",
      "    /**",
      "     * Pass true to lock focus within DropdownContainer.",
      "     * If omitted, true value will be used. It's used if focusLock=true.",
      "     */",
      "    persistentFocus?: boolean;",
      "    /**",
      "     * Pass any extra props to the FocusLock wrapper.",
      "     */",
      "    lockProps?: Record<string, any>;",
      "    /**",
      "     * Pass an array of ref pointing to the nodes, which focus lock should consider and a part of it. This is a way of focus scattering.",
      "     */",
      "    shards?: Array<React.RefObject<HTMLElement>>;",
      "    /**",
      "     * Pass element name if you need to change internal FocusLock div element, to any other.",
      "     */",
      "    as?: string;",
      "    /**",
      "     * Pass true to handle Escape key press and call props.onClose().",
      "     * If omitted, true value will be used. It's used if focusLock=true.",
      "     */",
      "    closeOnEsc?: boolean;",
      "    /** Called on keyDown event in DropdownContainer.",
      "     Can be used to provide your own handlers.",
      "     */",
      "    onKeyDown?(e: React.KeyboardEvent<HTMLElement>): void;",
      "}"
     ]
    },
    "props": [
     {
      "uid": 1,
      "name": "width",
      "typeValue": {
       "raw": "number | 'auto'"
      },
      "required": false
     },
     {
      "uid": 2,
      "name": "maxWidth",
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "required": false
     },
     {
      "uid": 3,
      "name": "height",
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "required": false
     },
     {
      "uid": 4,
      "name": "showArrow",
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "required": false
     },
     {
      "uid": 5,
      "name": "style",
      "typeValue": {
       "raw": "React.CSSProperties"
      },
      "required": false
     },
     {
      "uid": 6,
      "name": "focusLock",
      "comment": {
       "raw": [
        "Pass true to wrap DropdownContainer with FocusLock component to support keyboard navigation.",
        " If omitted, true value will be used.",
        "",
        " After DropdownContainer appeared the focus will be set on the first focusable element inside.",
        " @default true"
       ],
       "tags": {
        "@default": true
       }
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "required": false
     },
     {
      "uid": 7,
      "name": "returnFocus",
      "comment": {
       "raw": [
        "Pass true to return focus into initial position on unmount.",
        " If omitted, true value will be used. It's used if focusLock=true."
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "required": false
     },
     {
      "uid": 8,
      "name": "persistentFocus",
      "comment": {
       "raw": [
        "Pass true to lock focus within DropdownContainer.",
        " If omitted, true value will be used. It's used if focusLock=true."
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "required": false
     },
     {
      "uid": 9,
      "name": "lockProps",
      "comment": {
       "raw": [
        "Pass any extra props to the FocusLock wrapper."
       ]
      },
      "typeValue": {
       "raw": "Record<string, any>"
      },
      "required": false
     },
     {
      "uid": 10,
      "name": "shards",
      "comment": {
       "raw": [
        "Pass an array of ref pointing to the nodes, which focus lock should consider and a part of it. This is a way of focus scattering."
       ]
      },
      "typeValue": {
       "raw": "React.RefObject<HTMLElement>[]"
      },
      "required": false
     },
     {
      "uid": 11,
      "name": "as",
      "comment": {
       "raw": [
        "Pass element name if you need to change internal FocusLock div element, to any other."
       ]
      },
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "required": false
     },
     {
      "uid": 12,
      "name": "closeOnEsc",
      "comment": {
       "raw": [
        "Pass true to handle Escape key press and call props.onClose().",
        " If omitted, true value will be used. It's used if focusLock=true."
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "required": false
     },
     {
      "uid": 13,
      "name": "onKeyDown",
      "comment": {
       "raw": [
        "Called on keyDown event in DropdownContainer.",
        "     Can be used to provide your own handlers."
       ]
      },
      "typeValue": {
       "raw": "(e: React.KeyboardEvent<HTMLElement>) => void"
      },
      "editor": {
       "type": "func"
      },
      "required": false
     },
     {
      "uid": 14,
      "name": "cx",
      "comment": {
       "raw": [
        "CSS class(es) to put on component's root. See {@link https://github.com/JedWatson/classnames#usage} for details"
       ]
      },
      "typeValue": {
       "raw": "null | string | number | boolean | ClassDictionary | ClassArray"
      },
      "typeValueRef": "@epam/uui-core:ClassValue",
      "from": "@epam/uui-core:IHasCX",
      "required": false
     },
     {
      "uid": 15,
      "name": "children",
      "typeValue": {
       "raw": "null | string | number | boolean | React.ReactElement<any, string | React.JSXElementConstructor<any>> | React.ReactFragment | React.ReactPortal"
      },
      "typeValueRef": "@types/react:ReactNode",
      "from": "@epam/uui-core:IHasChildren",
      "required": false
     },
     {
      "uid": 16,
      "name": "rawProps",
      "comment": {
       "raw": [
        "Any HTML attributes (native or 'data-') to put on the underlying component"
       ]
      },
      "typeValue": {
       "raw": "React.HTMLAttributes<HTMLDivElement> & Record<`data-${string}`, string>"
      },
      "from": "@epam/uui-core:IHasRawProps",
      "required": false
     },
     {
      "uid": 17,
      "name": "forwardedRef",
      "comment": {
       "raw": [
        "this ref is passed to the underlying component"
       ]
      },
      "typeValue": {
       "raw": "null | (instance: HTMLDivElement | null) => void | React.MutableRefObject<HTMLDivElement | null>"
      },
      "from": "@epam/uui-core:IHasForwardedRef",
      "required": false
     },
     {
      "uid": 18,
      "name": "onClose",
      "comment": {
       "raw": [
        "Call to close the Dropdown body"
       ]
      },
      "typeValue": {
       "raw": "() => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IDropdownBodyProps",
      "required": false
     },
     {
      "uid": 19,
      "name": "togglerWidth",
      "comment": {
       "raw": [
        "The width of the toggler, which can be used to adjust the body width to it"
       ]
      },
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "from": "@epam/uui-core:IDropdownBodyProps",
      "required": false
     },
     {
      "uid": 20,
      "name": "togglerHeight",
      "comment": {
       "raw": [
        "The height of the toggler"
       ]
      },
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "from": "@epam/uui-core:IDropdownBodyProps",
      "required": false
     },
     {
      "uid": 21,
      "name": "scheduleUpdate",
      "comment": {
       "raw": [
        "Call to force recompute dropdown position"
       ]
      },
      "typeValue": {
       "raw": "() => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IDropdownBodyProps",
      "required": false
     },
     {
      "uid": 22,
      "name": "isOpen",
      "comment": {
       "raw": [
        "Indicates that dropdown is open"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:IDropdownBodyProps",
      "required": false
     },
     {
      "uid": 23,
      "name": "arrowProps",
      "comment": {
       "raw": [
        "Props that should be provided to the arrow component"
       ]
      },
      "typeValue": {
       "raw": "PopperArrowProps"
      },
      "from": "@epam/uui-core:IDropdownBodyProps",
      "required": false
     },
     {
      "uid": 24,
      "name": "placement",
      "comment": {
       "raw": [
        "Dropdown position relative to the input. See [Popper Docs](@link https://popper.js.org/)"
       ]
      },
      "typeValue": {
       "raw": "'right' | 'left' | 'top' | 'bottom' | 'auto' | 'auto-start' | 'auto-end' | 'top-start' | 'top-end' | 'bottom-start' | 'bottom-end' | 'right-start' | 'right-end' | 'left-start' | 'left-end'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "right",
        "left",
        "top",
        "bottom",
        "auto",
        "auto-start",
        "auto-end",
        "top-start",
        "top-end",
        "bottom-start",
        "bottom-end",
        "right-start",
        "right-end",
        "left-start",
        "left-end"
       ]
      },
      "from": "@epam/uui-core:IDropdownBodyProps",
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui-components:DropSpotRenderParams": {
   "summary": {
    "module": "@epam/uui-components",
    "typeName": {
     "name": "DropSpotRenderParams",
     "nameFull": "DropSpotRenderParams"
    },
    "src": "uui-components/src/widgets/DropSpot.tsx",
    "exported": true
   },
   "details": {
    "kind": 263,
    "typeValue": {
     "raw": "DropSpotRenderParams",
     "print": [
      "interface DropSpotRenderParams extends DropSpotState {",
      "    eventHandlers: EventHandlers;",
      "}"
     ]
    },
    "props": [
     {
      "uid": 1,
      "name": "eventHandlers",
      "typeValue": {
       "raw": "EventHandlers"
      },
      "required": true
     },
     {
      "uid": 2,
      "name": "isDraggingOver",
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-components:DropSpotState",
      "required": true
     },
     {
      "uid": 3,
      "name": "isDragStart",
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-components:DropSpotState",
      "required": true
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui-components:FlexSpacerProps": {
   "summary": {
    "module": "@epam/uui-components",
    "typeName": {
     "name": "FlexSpacerProps",
     "nameFull": "FlexSpacerProps"
    },
    "src": "uui-components/src/layout/flexItems/FlexSpacer.tsx",
    "exported": true
   },
   "details": {
    "kind": 263,
    "typeValue": {
     "raw": "FlexSpacerProps",
     "print": [
      "interface FlexSpacerProps extends IAdaptiveItem {",
      "}"
     ]
    },
    "props": [
     {
      "uid": 1,
      "name": "estimatedWidth",
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "from": "@epam/uui-core:IAdaptiveItem",
      "required": false
     },
     {
      "uid": 2,
      "name": "priority",
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "from": "@epam/uui-core:IAdaptiveItem",
      "required": false
     },
     {
      "uid": 3,
      "name": "showInBurgerMenu",
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:IAdaptiveItem",
      "required": false
     },
     {
      "uid": 4,
      "name": "collapseToMore",
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:IAdaptiveItem",
      "required": false
     },
     {
      "uid": 5,
      "name": "collapsedContainer",
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:IAdaptiveItem",
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui-components:HeaderCellContentProps": {
   "summary": {
    "module": "@epam/uui-components",
    "typeName": {
     "name": "HeaderCellContentProps",
     "nameFull": "HeaderCellContentProps"
    },
    "src": "uui-components/src/table/DataTableHeaderCell.tsx",
    "exported": true
   },
   "details": {
    "kind": 263,
    "typeValue": {
     "raw": "HeaderCellContentProps",
     "print": [
      "interface HeaderCellContentProps extends DndActorRenderParams {",
      "    onResizeStart: (e: React.MouseEvent) => void;",
      "    onResizeEnd: (e: React.MouseEvent) => void;",
      "    onResize: (e: MouseEvent) => void;",
      "    toggleSort: (e: React.MouseEvent) => void;",
      "}"
     ]
    },
    "props": [
     {
      "uid": 1,
      "name": "onResizeStart",
      "typeValue": {
       "raw": "(e: React.MouseEvent<Element, MouseEvent>) => void"
      },
      "editor": {
       "type": "func"
      },
      "required": true
     },
     {
      "uid": 2,
      "name": "onResizeEnd",
      "typeValue": {
       "raw": "(e: React.MouseEvent<Element, MouseEvent>) => void"
      },
      "editor": {
       "type": "func"
      },
      "required": true
     },
     {
      "uid": 3,
      "name": "onResize",
      "typeValue": {
       "raw": "(e: MouseEvent) => void"
      },
      "editor": {
       "type": "func"
      },
      "required": true
     },
     {
      "uid": 4,
      "name": "toggleSort",
      "typeValue": {
       "raw": "(e: React.MouseEvent<Element, MouseEvent>) => void"
      },
      "editor": {
       "type": "func"
      },
      "required": true
     },
     {
      "uid": 5,
      "name": "isDraggable",
      "comment": {
       "raw": [
        "True, if the element can be dragged. Doesn't mean that DnD is active."
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:DndActorRenderParams",
      "required": true
     },
     {
      "uid": 6,
      "name": "isDraggedOut",
      "comment": {
       "raw": [
        "True, if the element is dragged out. True for placeholder left when it's element it dragged out. False for Drag Ghost."
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:DndActorRenderParams",
      "required": true
     },
     {
      "uid": 7,
      "name": "isDragGhost",
      "comment": {
       "raw": [
        "True, if the element is rendered as Drag Ghost. All other flags are false for drag ghost."
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:DndActorRenderParams",
      "required": true
     },
     {
      "uid": 8,
      "name": "isDraggedOver",
      "comment": {
       "raw": [
        "True, if the element is being dragged over, even if drop is not accepted by the element (canAcceptDrop returned false)"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:DndActorRenderParams",
      "required": true
     },
     {
      "uid": 9,
      "name": "isDropAccepted",
      "comment": {
       "raw": [
        "True, if the element is being dragged over, and drop on it is accepted - canAcceptDrop returned true"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:DndActorRenderParams",
      "required": true
     },
     {
      "uid": 10,
      "name": "isDndInProgress",
      "comment": {
       "raw": [
        "True if any drag and drop operation is in progress, even if the element not being dragged"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:DndActorRenderParams",
      "required": true
     },
     {
      "uid": 11,
      "name": "dragData",
      "comment": {
       "raw": [
        "Drag data associated with the element. Specified always, even if there is no DnD operation happening."
       ]
      },
      "typeValue": {
       "raw": "any"
      },
      "from": "@epam/uui-core:DndActorRenderParams",
      "required": false
     },
     {
      "uid": 12,
      "name": "position",
      "comment": {
       "raw": [
        "Drop position. Chosen from accepted drop positions according to pointer coordinates"
       ]
      },
      "typeValue": {
       "raw": "'right' | 'left' | 'top' | 'bottom' | 'inside'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "right",
        "left",
        "top",
        "bottom",
        "inside"
       ]
      },
      "from": "@epam/uui-core:DndActorRenderParams",
      "required": false
     },
     {
      "uid": 13,
      "name": "eventHandlers",
      "comment": {
       "raw": [
        "Event handlers. Component is expected to pass these events to the top element it renders.",
        " As onClick event on the element will be overwritten, use DndActorProps.onClick to receive click events on the element"
       ]
      },
      "typeValue": {
       "raw": "{ onTouchStart?(e: React.TouchEvent<Element>): void; onPointerDown?(e: React.PointerEvent<Element>): void; onPointerEnter?(e: React.PointerEvent<any>): void; onPointerMove?(e: React.PointerEvent<any>): void; onPointerLeave?(e: React.PointerEvent<any>): void; onPointerUp?(e: React.PointerEvent<any>): void; }"
      },
      "from": "@epam/uui-core:DndActorRenderParams",
      "required": true
     },
     {
      "uid": 14,
      "name": "classNames",
      "comment": {
       "raw": [
        "CSS class names to add to the element.",
        " Some of these markers are used by the DndActor internally, so they must be added even if no used by component itself to apply styles."
       ]
      },
      "typeValue": {
       "raw": "string[]"
      },
      "from": "@epam/uui-core:DndActorRenderParams",
      "required": true
     },
     {
      "uid": 15,
      "name": "ref",
      "comment": {
       "raw": [
        "Ref to the DOM element to perform DnD actions"
       ]
      },
      "typeValue": {
       "raw": "null | (instance: any) => void | React.RefObject<any>"
      },
      "from": "@epam/uui-core:DndActorRenderParams",
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui-components:IconButtonBaseProps": {
   "summary": {
    "module": "@epam/uui-components",
    "typeName": {
     "name": "IconButtonBaseProps",
     "nameFull": "IconButtonBaseProps"
    },
    "src": "uui-components/src/buttons/IconButton.tsx",
    "exported": true
   },
   "details": {
    "kind": 263,
    "typeValue": {
     "raw": "IconButtonBaseProps",
     "print": [
      "interface IconButtonBaseProps extends ButtonBaseProps {",
      "}"
     ]
    },
    "props": [
     {
      "uid": 1,
      "name": "cx",
      "comment": {
       "raw": [
        "CSS class(es) to put on component's root. See {@link https://github.com/JedWatson/classnames#usage} for details"
       ]
      },
      "typeValue": {
       "raw": "null | string | number | boolean | ClassDictionary | ClassArray"
      },
      "typeValueRef": "@epam/uui-core:ClassValue",
      "from": "@epam/uui-core:IHasCX",
      "required": false
     },
     {
      "uid": 2,
      "name": "onClick",
      "comment": {
       "raw": [
        "Called when component is clicked"
       ]
      },
      "typeValue": {
       "raw": "(e?: any) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IClickable",
      "required": false
     },
     {
      "uid": 3,
      "name": "link",
      "comment": {
       "raw": [
        "Link object to redirect to for SPA-redirects"
       ]
      },
      "typeValue": {
       "raw": "Link"
      },
      "from": "@epam/uui-core:ICanRedirect",
      "required": false
     },
     {
      "uid": 4,
      "name": "href",
      "comment": {
       "raw": [
        "Href (URL) to redirect to, for non-SPA redirects"
       ]
      },
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "from": "@epam/uui-core:ICanRedirect",
      "required": false
     },
     {
      "uid": 5,
      "name": "isLinkActive",
      "comment": {
       "raw": [
        "Highlights component to show that link is active (browser is displaying the page to which link is pointing)"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:ICanRedirect",
      "required": false
     },
     {
      "uid": 6,
      "name": "target",
      "comment": {
       "raw": [
        "Controls where the link should be opened"
       ]
      },
      "typeValue": {
       "raw": "'_blank'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "_blank"
       ]
      },
      "from": "@epam/uui-core:ICanRedirect",
      "required": false
     },
     {
      "uid": 7,
      "name": "isDisabled",
      "comment": {
       "raw": [
        "Disable editing, and visually de-emphasize value of the component"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:IDisableable",
      "required": false
     },
     {
      "uid": 8,
      "name": "icon",
      "comment": {
       "raw": [
        "Icon can be a React element (usually an SVG element)"
       ]
      },
      "typeValue": {
       "raw": "Icon"
      },
      "editor": {
       "type": "component"
      },
      "from": "@epam/uui-core:IHasIcon",
      "required": false
     },
     {
      "uid": 9,
      "name": "iconPosition",
      "comment": {
       "raw": [
        "Position of the icon (left of right)"
       ]
      },
      "typeValue": {
       "raw": "'right' | 'left'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "right",
        "left"
       ]
      },
      "from": "@epam/uui-core:IHasIcon",
      "required": false
     },
     {
      "uid": 10,
      "name": "onIconClick",
      "comment": {
       "raw": [
        "Click handler for the icon"
       ]
      },
      "typeValue": {
       "raw": "() => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IHasIcon",
      "required": false
     },
     {
      "uid": 11,
      "name": "clickAnalyticsEvent",
      "comment": {
       "raw": [
        "An analytics event to send (via AnalyticsContext) when component is clicked.",
        " See [AnalyticsContext](@link https://uui.epam.com/documents?id=analyticsContext&mode=doc&skin=UUI4_promo&category=contexts)."
       ]
      },
      "typeValue": {
       "raw": "null | { [key: string]: any; name: string; }"
      },
      "from": "@epam/uui-core:IAnalyticableClick",
      "required": false
     },
     {
      "uid": 12,
      "name": "tabIndex",
      "comment": {
       "raw": [
        "Controls the order of keyboard navigation between components"
       ]
      },
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "from": "@epam/uui-core:IHasTabIndex",
      "required": false
     },
     {
      "uid": 13,
      "name": "rawProps",
      "comment": {
       "raw": [
        "Any HTML attributes (native or 'data-') to put on the underlying component"
       ]
      },
      "typeValue": {
       "raw": "React.ButtonHTMLAttributes<HTMLButtonElement> & Record<`data-${string}`, string>"
      },
      "from": "@epam/uui-core:IHasRawProps",
      "required": false
     },
     {
      "uid": 14,
      "name": "forwardedRef",
      "comment": {
       "raw": [
        "this ref is passed to the underlying component"
       ]
      },
      "typeValue": {
       "raw": "null | (instance: HTMLButtonElement | HTMLAnchorElement | null) => void | React.MutableRefObject<HTMLButtonElement | HTMLAnchorElement | null>"
      },
      "from": "@epam/uui-core:IHasForwardedRef",
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui-components:InputAddonProps": {
   "summary": {
    "module": "@epam/uui-components",
    "typeName": {
     "name": "InputAddonProps",
     "nameFull": "InputAddonProps"
    },
    "src": "uui-components/src/inputs/InputAddon.tsx",
    "exported": true
   },
   "details": {
    "kind": 263,
    "typeValue": {
     "raw": "InputAddonProps",
     "print": [
      "interface InputAddonProps extends IHasCX {",
      "    content: string;",
      "}"
     ]
    },
    "props": [
     {
      "uid": 1,
      "name": "content",
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "required": true
     },
     {
      "uid": 2,
      "name": "cx",
      "comment": {
       "raw": [
        "CSS class(es) to put on component's root. See {@link https://github.com/JedWatson/classnames#usage} for details"
       ]
      },
      "typeValue": {
       "raw": "null | string | number | boolean | ClassDictionary | ClassArray"
      },
      "typeValueRef": "@epam/uui-core:ClassValue",
      "from": "@epam/uui-core:IHasCX",
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui-components:IProgressBarProps": {
   "summary": {
    "module": "@epam/uui-components",
    "typeName": {
     "name": "IProgressBarProps",
     "nameFull": "IProgressBarProps"
    },
    "src": "uui-components/src/widgets/Loaders/ProgressBar.tsx",
    "exported": true
   },
   "details": {
    "kind": 263,
    "typeValue": {
     "raw": "IProgressBarProps",
     "print": [
      "interface IProgressBarProps extends IHasCX, IHasRawProps<React.HTMLAttributes<HTMLDivElement>> {",
      "    progress: number;",
      "    label?: string;",
      "    hideLabel?: boolean;",
      "}"
     ]
    },
    "props": [
     {
      "uid": 1,
      "name": "progress",
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "required": true
     },
     {
      "uid": 2,
      "name": "label",
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "required": false
     },
     {
      "uid": 3,
      "name": "hideLabel",
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "required": false
     },
     {
      "uid": 4,
      "name": "cx",
      "comment": {
       "raw": [
        "CSS class(es) to put on component's root. See {@link https://github.com/JedWatson/classnames#usage} for details"
       ]
      },
      "typeValue": {
       "raw": "null | string | number | boolean | ClassDictionary | ClassArray"
      },
      "typeValueRef": "@epam/uui-core:ClassValue",
      "from": "@epam/uui-core:IHasCX",
      "required": false
     },
     {
      "uid": 5,
      "name": "rawProps",
      "comment": {
       "raw": [
        "Any HTML attributes (native or 'data-') to put on the underlying component"
       ]
      },
      "typeValue": {
       "raw": "React.HTMLAttributes<HTMLDivElement> & Record<`data-${string}`, string>"
      },
      "from": "@epam/uui-core:IHasRawProps",
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui-components:IRenderInputProps": {
   "summary": {
    "module": "@epam/uui-components",
    "typeName": {
     "name": "IRenderInputProps",
     "nameFull": "IRenderInputProps"
    },
    "src": "uui-components/src/inputs/TextInput.tsx",
    "exported": true
   },
   "details": {
    "kind": 264,
    "typeValue": {
     "raw": "IRenderInputProps",
     "print": [
      "type IRenderInputProps = React.DetailedHTMLProps<React.InputHTMLAttributes<HTMLInputElement>, HTMLInputElement>;"
     ]
    },
    "props": [
     {
      "uid": 1,
      "name": "ref",
      "typeValue": {
       "raw": "null | string | (instance: HTMLInputElement | null) => void | React.RefObject<HTMLInputElement>"
      },
      "from": "@types/react:ClassAttributes",
      "required": false
     },
     {
      "uid": 2,
      "name": "key",
      "typeValue": {
       "raw": "null | string | number"
      },
      "from": "@types/react:Attributes",
      "required": false
     },
     {
      "uid": 3,
      "name": "accept",
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "from": "@types/react:InputHTMLAttributes",
      "required": false
     },
     {
      "uid": 4,
      "name": "alt",
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "from": "@types/react:InputHTMLAttributes",
      "required": false
     },
     {
      "uid": 5,
      "name": "autoComplete",
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "from": "@types/react:InputHTMLAttributes",
      "required": false
     },
     {
      "uid": 6,
      "name": "autoFocus",
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@types/react:InputHTMLAttributes",
      "required": false
     },
     {
      "uid": 7,
      "name": "capture",
      "typeValue": {
       "raw": "boolean | 'user' | 'environment'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        false,
        true,
        "user",
        "environment"
       ]
      },
      "from": "@types/react:InputHTMLAttributes",
      "required": false
     },
     {
      "uid": 8,
      "name": "checked",
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@types/react:InputHTMLAttributes",
      "required": false
     },
     {
      "uid": 9,
      "name": "crossOrigin",
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "from": "@types/react:InputHTMLAttributes",
      "required": false
     },
     {
      "uid": 10,
      "name": "disabled",
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@types/react:InputHTMLAttributes",
      "required": false
     },
     {
      "uid": 11,
      "name": "enterKeyHint",
      "typeValue": {
       "raw": "'enter' | 'done' | 'go' | 'next' | 'previous' | 'search' | 'send'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "enter",
        "done",
        "go",
        "next",
        "previous",
        "search",
        "send"
       ]
      },
      "from": "@types/react:InputHTMLAttributes",
      "required": false
     },
     {
      "uid": 12,
      "name": "form",
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "from": "@types/react:InputHTMLAttributes",
      "required": false
     },
     {
      "uid": 13,
      "name": "formAction",
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "from": "@types/react:InputHTMLAttributes",
      "required": false
     },
     {
      "uid": 14,
      "name": "formEncType",
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "from": "@types/react:InputHTMLAttributes",
      "required": false
     },
     {
      "uid": 15,
      "name": "formMethod",
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "from": "@types/react:InputHTMLAttributes",
      "required": false
     },
     {
      "uid": 16,
      "name": "formNoValidate",
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@types/react:InputHTMLAttributes",
      "required": false
     },
     {
      "uid": 17,
      "name": "formTarget",
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "from": "@types/react:InputHTMLAttributes",
      "required": false
     },
     {
      "uid": 18,
      "name": "height",
      "typeValue": {
       "raw": "string | number"
      },
      "from": "@types/react:InputHTMLAttributes",
      "required": false
     },
     {
      "uid": 19,
      "name": "list",
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "from": "@types/react:InputHTMLAttributes",
      "required": false
     },
     {
      "uid": 20,
      "name": "max",
      "typeValue": {
       "raw": "string | number"
      },
      "from": "@types/react:InputHTMLAttributes",
      "required": false
     },
     {
      "uid": 21,
      "name": "maxLength",
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "from": "@types/react:InputHTMLAttributes",
      "required": false
     },
     {
      "uid": 22,
      "name": "min",
      "typeValue": {
       "raw": "string | number"
      },
      "from": "@types/react:InputHTMLAttributes",
      "required": false
     },
     {
      "uid": 23,
      "name": "minLength",
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "from": "@types/react:InputHTMLAttributes",
      "required": false
     },
     {
      "uid": 24,
      "name": "multiple",
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@types/react:InputHTMLAttributes",
      "required": false
     },
     {
      "uid": 25,
      "name": "name",
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "from": "@types/react:InputHTMLAttributes",
      "required": false
     },
     {
      "uid": 26,
      "name": "pattern",
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "from": "@types/react:InputHTMLAttributes",
      "required": false
     },
     {
      "uid": 27,
      "name": "placeholder",
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "from": "@types/react:InputHTMLAttributes",
      "required": false
     },
     {
      "uid": 28,
      "name": "readOnly",
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@types/react:InputHTMLAttributes",
      "required": false
     },
     {
      "uid": 29,
      "name": "required",
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@types/react:InputHTMLAttributes",
      "required": false
     },
     {
      "uid": 30,
      "name": "size",
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "from": "@types/react:InputHTMLAttributes",
      "required": false
     },
     {
      "uid": 31,
      "name": "src",
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "from": "@types/react:InputHTMLAttributes",
      "required": false
     },
     {
      "uid": 32,
      "name": "step",
      "typeValue": {
       "raw": "string | number"
      },
      "from": "@types/react:InputHTMLAttributes",
      "required": false
     },
     {
      "uid": 33,
      "name": "type",
      "typeValue": {
       "raw": "'number' | 'hidden' | string & {} | 'search' | 'button' | 'checkbox' | 'color' | 'date' | 'datetime-local' | 'email' | 'file' | 'image' | 'month' | 'password' | 'radio' | 'range' | 'reset' | 'submit' | 'tel' | 'text' | 'time' | 'url' | 'week'"
      },
      "from": "@types/react:InputHTMLAttributes",
      "required": false
     },
     {
      "uid": 34,
      "name": "value",
      "typeValue": {
       "raw": "string | number | readonly string[]"
      },
      "from": "@types/react:InputHTMLAttributes",
      "required": false
     },
     {
      "uid": 35,
      "name": "width",
      "typeValue": {
       "raw": "string | number"
      },
      "from": "@types/react:InputHTMLAttributes",
      "required": false
     },
     {
      "uid": 36,
      "name": "onChange",
      "typeValue": {
       "raw": "React.ChangeEventHandler<HTMLInputElement>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@types/react:InputHTMLAttributes",
      "required": false
     },
     {
      "uid": 37,
      "name": "defaultChecked",
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@types/react:HTMLAttributes",
      "required": false
     },
     {
      "uid": 38,
      "name": "defaultValue",
      "typeValue": {
       "raw": "string | number | readonly string[]"
      },
      "from": "@types/react:HTMLAttributes",
      "required": false
     },
     {
      "uid": 39,
      "name": "suppressContentEditableWarning",
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@types/react:HTMLAttributes",
      "required": false
     },
     {
      "uid": 40,
      "name": "suppressHydrationWarning",
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@types/react:HTMLAttributes",
      "required": false
     },
     {
      "uid": 41,
      "name": "accessKey",
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "from": "@types/react:HTMLAttributes",
      "required": false
     },
     {
      "uid": 42,
      "name": "className",
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "from": "@types/react:HTMLAttributes",
      "required": false
     },
     {
      "uid": 43,
      "name": "contentEditable",
      "typeValue": {
       "raw": "boolean | 'inherit' | 'true' | 'false'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        false,
        true,
        "inherit",
        "true",
        "false"
       ]
      },
      "from": "@types/react:HTMLAttributes",
      "required": false
     },
     {
      "uid": 44,
      "name": "contextMenu",
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "from": "@types/react:HTMLAttributes",
      "required": false
     },
     {
      "uid": 45,
      "name": "dir",
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "from": "@types/react:HTMLAttributes",
      "required": false
     },
     {
      "uid": 46,
      "name": "draggable",
      "typeValue": {
       "raw": "boolean | 'true' | 'false'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        false,
        true,
        "true",
        "false"
       ]
      },
      "from": "@types/react:HTMLAttributes",
      "required": false
     },
     {
      "uid": 47,
      "name": "hidden",
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@types/react:HTMLAttributes",
      "required": false
     },
     {
      "uid": 48,
      "name": "id",
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "from": "@types/react:HTMLAttributes",
      "required": false
     },
     {
      "uid": 49,
      "name": "lang",
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "from": "@types/react:HTMLAttributes",
      "required": false
     },
     {
      "uid": 50,
      "name": "nonce",
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "from": "@types/react:HTMLAttributes",
      "required": false
     },
     {
      "uid": 51,
      "name": "slot",
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "from": "@types/react:HTMLAttributes",
      "required": false
     },
     {
      "uid": 52,
      "name": "spellCheck",
      "typeValue": {
       "raw": "boolean | 'true' | 'false'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        false,
        true,
        "true",
        "false"
       ]
      },
      "from": "@types/react:HTMLAttributes",
      "required": false
     },
     {
      "uid": 53,
      "name": "style",
      "typeValue": {
       "raw": "React.CSSProperties"
      },
      "from": "@types/react:HTMLAttributes",
      "required": false
     },
     {
      "uid": 54,
      "name": "tabIndex",
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "from": "@types/react:HTMLAttributes",
      "required": false
     },
     {
      "uid": 55,
      "name": "title",
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "from": "@types/react:HTMLAttributes",
      "required": false
     },
     {
      "uid": 56,
      "name": "translate",
      "typeValue": {
       "raw": "'yes' | 'no'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "yes",
        "no"
       ]
      },
      "from": "@types/react:HTMLAttributes",
      "required": false
     },
     {
      "uid": 57,
      "name": "radioGroup",
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "from": "@types/react:HTMLAttributes",
      "required": false
     },
     {
      "uid": 58,
      "name": "role",
      "typeValue": {
       "raw": "string & {} | 'none' | 'search' | 'button' | 'checkbox' | 'radio' | 'alert' | 'alertdialog' | 'application' | 'article' | 'banner' | 'cell' | 'columnheader' | 'combobox' | 'complementary' | 'contentinfo' | 'definition' | 'dialog' | 'directory' | 'document' | 'feed' | 'figure' | 'form' | 'grid' | 'gridcell' | 'group' | 'heading' | 'img' | 'link' | 'list' | 'listbox' | 'listitem' | 'log' | 'main' | 'marquee' | 'math' | 'menu' | 'menubar' | 'menuitem' | 'menuitemcheckbox' | 'menuitemradio' | 'navigation' | 'note' | 'option' | 'presentation' | 'progressbar' | 'radiogroup' | 'region' | 'row' | 'rowgroup' | 'rowheader' | 'scrollbar' | 'searchbox' | 'separator' | 'slider' | 'spinbutton' | 'status' | 'switch' | 'tab' | 'table' | 'tablist' | 'tabpanel' | 'term' | 'textbox' | 'timer' | 'toolbar' | 'tooltip' | 'tree' | 'treegrid' | 'treeitem'"
      },
      "from": "@types/react:HTMLAttributes",
      "required": false
     },
     {
      "uid": 59,
      "name": "about",
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "from": "@types/react:HTMLAttributes",
      "required": false
     },
     {
      "uid": 60,
      "name": "datatype",
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "from": "@types/react:HTMLAttributes",
      "required": false
     },
     {
      "uid": 61,
      "name": "inlist",
      "typeValue": {
       "raw": "any"
      },
      "from": "@types/react:HTMLAttributes",
      "required": false
     },
     {
      "uid": 62,
      "name": "prefix",
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "from": "@types/react:HTMLAttributes",
      "required": false
     },
     {
      "uid": 63,
      "name": "property",
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "from": "@types/react:HTMLAttributes",
      "required": false
     },
     {
      "uid": 64,
      "name": "resource",
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "from": "@types/react:HTMLAttributes",
      "required": false
     },
     {
      "uid": 65,
      "name": "typeof",
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "from": "@types/react:HTMLAttributes",
      "required": false
     },
     {
      "uid": 66,
      "name": "vocab",
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "from": "@types/react:HTMLAttributes",
      "required": false
     },
     {
      "uid": 67,
      "name": "autoCapitalize",
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "from": "@types/react:HTMLAttributes",
      "required": false
     },
     {
      "uid": 68,
      "name": "autoCorrect",
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "from": "@types/react:HTMLAttributes",
      "required": false
     },
     {
      "uid": 69,
      "name": "autoSave",
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "from": "@types/react:HTMLAttributes",
      "required": false
     },
     {
      "uid": 70,
      "name": "color",
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "from": "@types/react:HTMLAttributes",
      "required": false
     },
     {
      "uid": 71,
      "name": "itemProp",
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "from": "@types/react:HTMLAttributes",
      "required": false
     },
     {
      "uid": 72,
      "name": "itemScope",
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@types/react:HTMLAttributes",
      "required": false
     },
     {
      "uid": 73,
      "name": "itemType",
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "from": "@types/react:HTMLAttributes",
      "required": false
     },
     {
      "uid": 74,
      "name": "itemID",
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "from": "@types/react:HTMLAttributes",
      "required": false
     },
     {
      "uid": 75,
      "name": "itemRef",
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "from": "@types/react:HTMLAttributes",
      "required": false
     },
     {
      "uid": 76,
      "name": "results",
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "from": "@types/react:HTMLAttributes",
      "required": false
     },
     {
      "uid": 77,
      "name": "security",
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "from": "@types/react:HTMLAttributes",
      "required": false
     },
     {
      "uid": 78,
      "name": "unselectable",
      "typeValue": {
       "raw": "'on' | 'off'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "on",
        "off"
       ]
      },
      "from": "@types/react:HTMLAttributes",
      "required": false
     },
     {
      "uid": 79,
      "name": "inputMode",
      "comment": {
       "raw": [
        "Hints at the type of data that might be entered by the user while editing the element or its contents",
        " @see https://html.spec.whatwg.org/multipage/interaction.html#input-modalities:-the-inputmode-attribute"
       ]
      },
      "typeValue": {
       "raw": "'none' | 'search' | 'email' | 'tel' | 'text' | 'url' | 'numeric' | 'decimal'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "none",
        "search",
        "email",
        "tel",
        "text",
        "url",
        "numeric",
        "decimal"
       ]
      },
      "from": "@types/react:HTMLAttributes",
      "required": false
     },
     {
      "uid": 80,
      "name": "is",
      "comment": {
       "raw": [
        "Specify that a standard HTML element should behave like a defined custom built-in element",
        " @see https://html.spec.whatwg.org/multipage/custom-elements.html#attr-is"
       ]
      },
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "from": "@types/react:HTMLAttributes",
      "required": false
     },
     {
      "uid": 81,
      "name": "'aria-activedescendant'",
      "comment": {
       "raw": [
        "Identifies the currently active element when DOM focus is on a composite widget, textbox, group, or application."
       ]
      },
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "from": "@types/react:AriaAttributes",
      "required": false
     },
     {
      "uid": 82,
      "name": "'aria-atomic'",
      "comment": {
       "raw": [
        "Indicates whether assistive technologies will present all, or only parts of, the changed region based on the change notifications defined by the aria-relevant attribute."
       ]
      },
      "typeValue": {
       "raw": "boolean | 'true' | 'false'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        false,
        true,
        "true",
        "false"
       ]
      },
      "from": "@types/react:AriaAttributes",
      "required": false
     },
     {
      "uid": 83,
      "name": "'aria-autocomplete'",
      "comment": {
       "raw": [
        "Indicates whether inputting text could trigger display of one or more predictions of the user's intended value for an input and specifies how predictions would be",
        " presented if they are made."
       ]
      },
      "typeValue": {
       "raw": "'none' | 'list' | 'inline' | 'both'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "none",
        "list",
        "inline",
        "both"
       ]
      },
      "from": "@types/react:AriaAttributes",
      "required": false
     },
     {
      "uid": 84,
      "name": "'aria-busy'",
      "comment": {
       "raw": [
        "Indicates an element is being modified and that assistive technologies MAY want to wait until the modifications are complete before exposing them to the user."
       ]
      },
      "typeValue": {
       "raw": "boolean | 'true' | 'false'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        false,
        true,
        "true",
        "false"
       ]
      },
      "from": "@types/react:AriaAttributes",
      "required": false
     },
     {
      "uid": 85,
      "name": "'aria-checked'",
      "comment": {
       "raw": [
        "Indicates the current \"checked\" state of checkboxes, radio buttons, and other widgets.",
        " @see aria-pressed @see aria-selected."
       ]
      },
      "typeValue": {
       "raw": "boolean | 'true' | 'false' | 'mixed'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        false,
        true,
        "true",
        "false",
        "mixed"
       ]
      },
      "from": "@types/react:AriaAttributes",
      "required": false
     },
     {
      "uid": 86,
      "name": "'aria-colcount'",
      "comment": {
       "raw": [
        "Defines the total number of columns in a table, grid, or treegrid.",
        " @see aria-colindex."
       ]
      },
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "from": "@types/react:AriaAttributes",
      "required": false
     },
     {
      "uid": 87,
      "name": "'aria-colindex'",
      "comment": {
       "raw": [
        "Defines an element's column index or position with respect to the total number of columns within a table, grid, or treegrid.",
        " @see aria-colcount @see aria-colspan."
       ]
      },
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "from": "@types/react:AriaAttributes",
      "required": false
     },
     {
      "uid": 88,
      "name": "'aria-colspan'",
      "comment": {
       "raw": [
        "Defines the number of columns spanned by a cell or gridcell within a table, grid, or treegrid.",
        " @see aria-colindex @see aria-rowspan."
       ]
      },
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "from": "@types/react:AriaAttributes",
      "required": false
     },
     {
      "uid": 89,
      "name": "'aria-controls'",
      "comment": {
       "raw": [
        "Identifies the element (or elements) whose contents or presence are controlled by the current element.",
        " @see aria-owns."
       ]
      },
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "from": "@types/react:AriaAttributes",
      "required": false
     },
     {
      "uid": 90,
      "name": "'aria-current'",
      "comment": {
       "raw": [
        "Indicates the element that represents the current item within a container or set of related elements."
       ]
      },
      "typeValue": {
       "raw": "boolean | 'date' | 'time' | 'true' | 'false' | 'page' | 'step' | 'location'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        false,
        true,
        "date",
        "time",
        "true",
        "false",
        "page",
        "step",
        "location"
       ]
      },
      "from": "@types/react:AriaAttributes",
      "required": false
     },
     {
      "uid": 91,
      "name": "'aria-describedby'",
      "comment": {
       "raw": [
        "Identifies the element (or elements) that describes the object.",
        " @see aria-labelledby"
       ]
      },
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "from": "@types/react:AriaAttributes",
      "required": false
     },
     {
      "uid": 92,
      "name": "'aria-details'",
      "comment": {
       "raw": [
        "Identifies the element that provides a detailed, extended description for the object.",
        " @see aria-describedby."
       ]
      },
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "from": "@types/react:AriaAttributes",
      "required": false
     },
     {
      "uid": 93,
      "name": "'aria-disabled'",
      "comment": {
       "raw": [
        "Indicates that the element is perceivable but disabled, so it is not editable or otherwise operable.",
        " @see aria-hidden @see aria-readonly."
       ]
      },
      "typeValue": {
       "raw": "boolean | 'true' | 'false'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        false,
        true,
        "true",
        "false"
       ]
      },
      "from": "@types/react:AriaAttributes",
      "required": false
     },
     {
      "uid": 94,
      "name": "'aria-dropeffect'",
      "comment": {
       "raw": [
        "Indicates what functions can be performed when a dragged object is released on the drop target.",
        " @deprecated in ARIA 1.1"
       ]
      },
      "typeValue": {
       "raw": "'none' | 'link' | 'copy' | 'execute' | 'move' | 'popup'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "none",
        "link",
        "copy",
        "execute",
        "move",
        "popup"
       ]
      },
      "from": "@types/react:AriaAttributes",
      "required": false
     },
     {
      "uid": 95,
      "name": "'aria-errormessage'",
      "comment": {
       "raw": [
        "Identifies the element that provides an error message for the object.",
        " @see aria-invalid @see aria-describedby."
       ]
      },
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "from": "@types/react:AriaAttributes",
      "required": false
     },
     {
      "uid": 96,
      "name": "'aria-expanded'",
      "comment": {
       "raw": [
        "Indicates whether the element, or another grouping element it controls, is currently expanded or collapsed."
       ]
      },
      "typeValue": {
       "raw": "boolean | 'true' | 'false'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        false,
        true,
        "true",
        "false"
       ]
      },
      "from": "@types/react:AriaAttributes",
      "required": false
     },
     {
      "uid": 97,
      "name": "'aria-flowto'",
      "comment": {
       "raw": [
        "Identifies the next element (or elements) in an alternate reading order of content which, at the user's discretion,",
        " allows assistive technology to override the general default of reading in document source order."
       ]
      },
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "from": "@types/react:AriaAttributes",
      "required": false
     },
     {
      "uid": 98,
      "name": "'aria-grabbed'",
      "comment": {
       "raw": [
        "Indicates an element's \"grabbed\" state in a drag-and-drop operation.",
        " @deprecated in ARIA 1.1"
       ]
      },
      "typeValue": {
       "raw": "boolean | 'true' | 'false'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        false,
        true,
        "true",
        "false"
       ]
      },
      "from": "@types/react:AriaAttributes",
      "required": false
     },
     {
      "uid": 99,
      "name": "'aria-haspopup'",
      "comment": {
       "raw": [
        "Indicates the availability and type of interactive popup element, such as menu or dialog, that can be triggered by an element."
       ]
      },
      "typeValue": {
       "raw": "boolean | 'true' | 'false' | 'dialog' | 'grid' | 'listbox' | 'menu' | 'tree'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        false,
        true,
        "true",
        "false",
        "dialog",
        "grid",
        "listbox",
        "menu",
        "tree"
       ]
      },
      "from": "@types/react:AriaAttributes",
      "required": false
     },
     {
      "uid": 100,
      "name": "'aria-hidden'",
      "comment": {
       "raw": [
        "Indicates whether the element is exposed to an accessibility API.",
        " @see aria-disabled."
       ]
      },
      "typeValue": {
       "raw": "boolean | 'true' | 'false'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        false,
        true,
        "true",
        "false"
       ]
      },
      "from": "@types/react:AriaAttributes",
      "required": false
     },
     {
      "uid": 101,
      "name": "'aria-invalid'",
      "comment": {
       "raw": [
        "Indicates the entered value does not conform to the format expected by the application.",
        " @see aria-errormessage."
       ]
      },
      "typeValue": {
       "raw": "boolean | 'true' | 'false' | 'grammar' | 'spelling'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        false,
        true,
        "true",
        "false",
        "grammar",
        "spelling"
       ]
      },
      "from": "@types/react:AriaAttributes",
      "required": false
     },
     {
      "uid": 102,
      "name": "'aria-keyshortcuts'",
      "comment": {
       "raw": [
        "Indicates keyboard shortcuts that an author has implemented to activate or give focus to an element."
       ]
      },
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "from": "@types/react:AriaAttributes",
      "required": false
     },
     {
      "uid": 103,
      "name": "'aria-label'",
      "comment": {
       "raw": [
        "Defines a string value that labels the current element.",
        " @see aria-labelledby."
       ]
      },
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "from": "@types/react:AriaAttributes",
      "required": false
     },
     {
      "uid": 104,
      "name": "'aria-labelledby'",
      "comment": {
       "raw": [
        "Identifies the element (or elements) that labels the current element.",
        " @see aria-describedby."
       ]
      },
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "from": "@types/react:AriaAttributes",
      "required": false
     },
     {
      "uid": 105,
      "name": "'aria-level'",
      "comment": {
       "raw": [
        "Defines the hierarchical level of an element within a structure."
       ]
      },
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "from": "@types/react:AriaAttributes",
      "required": false
     },
     {
      "uid": 106,
      "name": "'aria-live'",
      "comment": {
       "raw": [
        "Indicates that an element will be updated, and describes the types of updates the user agents, assistive technologies, and user can expect from the live region."
       ]
      },
      "typeValue": {
       "raw": "'off' | 'assertive' | 'polite'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "off",
        "assertive",
        "polite"
       ]
      },
      "from": "@types/react:AriaAttributes",
      "required": false
     },
     {
      "uid": 107,
      "name": "'aria-modal'",
      "comment": {
       "raw": [
        "Indicates whether an element is modal when displayed."
       ]
      },
      "typeValue": {
       "raw": "boolean | 'true' | 'false'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        false,
        true,
        "true",
        "false"
       ]
      },
      "from": "@types/react:AriaAttributes",
      "required": false
     },
     {
      "uid": 108,
      "name": "'aria-multiline'",
      "comment": {
       "raw": [
        "Indicates whether a text box accepts multiple lines of input or only a single line."
       ]
      },
      "typeValue": {
       "raw": "boolean | 'true' | 'false'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        false,
        true,
        "true",
        "false"
       ]
      },
      "from": "@types/react:AriaAttributes",
      "required": false
     },
     {
      "uid": 109,
      "name": "'aria-multiselectable'",
      "comment": {
       "raw": [
        "Indicates that the user may select more than one item from the current selectable descendants."
       ]
      },
      "typeValue": {
       "raw": "boolean | 'true' | 'false'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        false,
        true,
        "true",
        "false"
       ]
      },
      "from": "@types/react:AriaAttributes",
      "required": false
     },
     {
      "uid": 110,
      "name": "'aria-orientation'",
      "comment": {
       "raw": [
        "Indicates whether the element's orientation is horizontal, vertical, or unknown/ambiguous."
       ]
      },
      "typeValue": {
       "raw": "'vertical' | 'horizontal'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "vertical",
        "horizontal"
       ]
      },
      "from": "@types/react:AriaAttributes",
      "required": false
     },
     {
      "uid": 111,
      "name": "'aria-owns'",
      "comment": {
       "raw": [
        "Identifies an element (or elements) in order to define a visual, functional, or contextual parent/child relationship",
        " between DOM elements where the DOM hierarchy cannot be used to represent the relationship.",
        " @see aria-controls."
       ]
      },
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "from": "@types/react:AriaAttributes",
      "required": false
     },
     {
      "uid": 112,
      "name": "'aria-placeholder'",
      "comment": {
       "raw": [
        "Defines a short hint (a word or short phrase) intended to aid the user with data entry when the control has no value.",
        " A hint could be a sample value or a brief description of the expected format."
       ]
      },
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "from": "@types/react:AriaAttributes",
      "required": false
     },
     {
      "uid": 113,
      "name": "'aria-posinset'",
      "comment": {
       "raw": [
        "Defines an element's number or position in the current set of listitems or treeitems. Not required if all elements in the set are present in the DOM.",
        " @see aria-setsize."
       ]
      },
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "from": "@types/react:AriaAttributes",
      "required": false
     },
     {
      "uid": 114,
      "name": "'aria-pressed'",
      "comment": {
       "raw": [
        "Indicates the current \"pressed\" state of toggle buttons.",
        " @see aria-checked @see aria-selected."
       ]
      },
      "typeValue": {
       "raw": "boolean | 'true' | 'false' | 'mixed'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        false,
        true,
        "true",
        "false",
        "mixed"
       ]
      },
      "from": "@types/react:AriaAttributes",
      "required": false
     },
     {
      "uid": 115,
      "name": "'aria-readonly'",
      "comment": {
       "raw": [
        "Indicates that the element is not editable, but is otherwise operable.",
        " @see aria-disabled."
       ]
      },
      "typeValue": {
       "raw": "boolean | 'true' | 'false'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        false,
        true,
        "true",
        "false"
       ]
      },
      "from": "@types/react:AriaAttributes",
      "required": false
     },
     {
      "uid": 116,
      "name": "'aria-relevant'",
      "comment": {
       "raw": [
        "Indicates what notifications the user agent will trigger when the accessibility tree within a live region is modified.",
        " @see aria-atomic."
       ]
      },
      "typeValue": {
       "raw": "'text' | 'additions' | 'additions removals' | 'additions text' | 'all' | 'removals' | 'removals additions' | 'removals text' | 'text additions' | 'text removals'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "text",
        "additions",
        "additions removals",
        "additions text",
        "all",
        "removals",
        "removals additions",
        "removals text",
        "text additions",
        "text removals"
       ]
      },
      "from": "@types/react:AriaAttributes",
      "required": false
     },
     {
      "uid": 117,
      "name": "'aria-required'",
      "comment": {
       "raw": [
        "Indicates that user input is required on the element before a form may be submitted."
       ]
      },
      "typeValue": {
       "raw": "boolean | 'true' | 'false'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        false,
        true,
        "true",
        "false"
       ]
      },
      "from": "@types/react:AriaAttributes",
      "required": false
     },
     {
      "uid": 118,
      "name": "'aria-roledescription'",
      "comment": {
       "raw": [
        "Defines a human-readable, author-localized description for the role of an element."
       ]
      },
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "from": "@types/react:AriaAttributes",
      "required": false
     },
     {
      "uid": 119,
      "name": "'aria-rowcount'",
      "comment": {
       "raw": [
        "Defines the total number of rows in a table, grid, or treegrid.",
        " @see aria-rowindex."
       ]
      },
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "from": "@types/react:AriaAttributes",
      "required": false
     },
     {
      "uid": 120,
      "name": "'aria-rowindex'",
      "comment": {
       "raw": [
        "Defines an element's row index or position with respect to the total number of rows within a table, grid, or treegrid.",
        " @see aria-rowcount @see aria-rowspan."
       ]
      },
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "from": "@types/react:AriaAttributes",
      "required": false
     },
     {
      "uid": 121,
      "name": "'aria-rowspan'",
      "comment": {
       "raw": [
        "Defines the number of rows spanned by a cell or gridcell within a table, grid, or treegrid.",
        " @see aria-rowindex @see aria-colspan."
       ]
      },
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "from": "@types/react:AriaAttributes",
      "required": false
     },
     {
      "uid": 122,
      "name": "'aria-selected'",
      "comment": {
       "raw": [
        "Indicates the current \"selected\" state of various widgets.",
        " @see aria-checked @see aria-pressed."
       ]
      },
      "typeValue": {
       "raw": "boolean | 'true' | 'false'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        false,
        true,
        "true",
        "false"
       ]
      },
      "from": "@types/react:AriaAttributes",
      "required": false
     },
     {
      "uid": 123,
      "name": "'aria-setsize'",
      "comment": {
       "raw": [
        "Defines the number of items in the current set of listitems or treeitems. Not required if all elements in the set are present in the DOM.",
        " @see aria-posinset."
       ]
      },
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "from": "@types/react:AriaAttributes",
      "required": false
     },
     {
      "uid": 124,
      "name": "'aria-sort'",
      "comment": {
       "raw": [
        "Indicates if items in a table or grid are sorted in ascending or descending order."
       ]
      },
      "typeValue": {
       "raw": "'none' | 'ascending' | 'descending' | 'other'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "none",
        "ascending",
        "descending",
        "other"
       ]
      },
      "from": "@types/react:AriaAttributes",
      "required": false
     },
     {
      "uid": 125,
      "name": "'aria-valuemax'",
      "comment": {
       "raw": [
        "Defines the maximum allowed value for a range widget."
       ]
      },
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "from": "@types/react:AriaAttributes",
      "required": false
     },
     {
      "uid": 126,
      "name": "'aria-valuemin'",
      "comment": {
       "raw": [
        "Defines the minimum allowed value for a range widget."
       ]
      },
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "from": "@types/react:AriaAttributes",
      "required": false
     },
     {
      "uid": 127,
      "name": "'aria-valuenow'",
      "comment": {
       "raw": [
        "Defines the current value for a range widget.",
        " @see aria-valuetext."
       ]
      },
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "from": "@types/react:AriaAttributes",
      "required": false
     },
     {
      "uid": 128,
      "name": "'aria-valuetext'",
      "comment": {
       "raw": [
        "Defines the human readable text alternative of aria-valuenow for a range widget."
       ]
      },
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "from": "@types/react:AriaAttributes",
      "required": false
     },
     {
      "uid": 129,
      "name": "children",
      "typeValue": {
       "raw": "null | string | number | boolean | React.ReactElement<any, string | React.JSXElementConstructor<any>> | React.ReactFragment | React.ReactPortal"
      },
      "typeValueRef": "@types/react:ReactNode",
      "from": "@types/react:DOMAttributes",
      "required": false
     },
     {
      "uid": 130,
      "name": "dangerouslySetInnerHTML",
      "typeValue": {
       "raw": "{ __html: string; }"
      },
      "from": "@types/react:DOMAttributes",
      "required": false
     },
     {
      "uid": 131,
      "name": "onCopy",
      "typeValue": {
       "raw": "React.ClipboardEventHandler<HTMLInputElement>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@types/react:DOMAttributes",
      "required": false
     },
     {
      "uid": 132,
      "name": "onCopyCapture",
      "typeValue": {
       "raw": "React.ClipboardEventHandler<HTMLInputElement>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@types/react:DOMAttributes",
      "required": false
     },
     {
      "uid": 133,
      "name": "onCut",
      "typeValue": {
       "raw": "React.ClipboardEventHandler<HTMLInputElement>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@types/react:DOMAttributes",
      "required": false
     },
     {
      "uid": 134,
      "name": "onCutCapture",
      "typeValue": {
       "raw": "React.ClipboardEventHandler<HTMLInputElement>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@types/react:DOMAttributes",
      "required": false
     },
     {
      "uid": 135,
      "name": "onPaste",
      "typeValue": {
       "raw": "React.ClipboardEventHandler<HTMLInputElement>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@types/react:DOMAttributes",
      "required": false
     },
     {
      "uid": 136,
      "name": "onPasteCapture",
      "typeValue": {
       "raw": "React.ClipboardEventHandler<HTMLInputElement>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@types/react:DOMAttributes",
      "required": false
     },
     {
      "uid": 137,
      "name": "onCompositionEnd",
      "typeValue": {
       "raw": "React.CompositionEventHandler<HTMLInputElement>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@types/react:DOMAttributes",
      "required": false
     },
     {
      "uid": 138,
      "name": "onCompositionEndCapture",
      "typeValue": {
       "raw": "React.CompositionEventHandler<HTMLInputElement>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@types/react:DOMAttributes",
      "required": false
     },
     {
      "uid": 139,
      "name": "onCompositionStart",
      "typeValue": {
       "raw": "React.CompositionEventHandler<HTMLInputElement>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@types/react:DOMAttributes",
      "required": false
     },
     {
      "uid": 140,
      "name": "onCompositionStartCapture",
      "typeValue": {
       "raw": "React.CompositionEventHandler<HTMLInputElement>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@types/react:DOMAttributes",
      "required": false
     },
     {
      "uid": 141,
      "name": "onCompositionUpdate",
      "typeValue": {
       "raw": "React.CompositionEventHandler<HTMLInputElement>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@types/react:DOMAttributes",
      "required": false
     },
     {
      "uid": 142,
      "name": "onCompositionUpdateCapture",
      "typeValue": {
       "raw": "React.CompositionEventHandler<HTMLInputElement>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@types/react:DOMAttributes",
      "required": false
     },
     {
      "uid": 143,
      "name": "onFocus",
      "typeValue": {
       "raw": "React.FocusEventHandler<HTMLInputElement>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@types/react:DOMAttributes",
      "required": false
     },
     {
      "uid": 144,
      "name": "onFocusCapture",
      "typeValue": {
       "raw": "React.FocusEventHandler<HTMLInputElement>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@types/react:DOMAttributes",
      "required": false
     },
     {
      "uid": 145,
      "name": "onBlur",
      "typeValue": {
       "raw": "React.FocusEventHandler<HTMLInputElement>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@types/react:DOMAttributes",
      "required": false
     },
     {
      "uid": 146,
      "name": "onBlurCapture",
      "typeValue": {
       "raw": "React.FocusEventHandler<HTMLInputElement>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@types/react:DOMAttributes",
      "required": false
     },
     {
      "uid": 147,
      "name": "onChangeCapture",
      "typeValue": {
       "raw": "React.FormEventHandler<HTMLInputElement>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@types/react:DOMAttributes",
      "required": false
     },
     {
      "uid": 148,
      "name": "onBeforeInput",
      "typeValue": {
       "raw": "React.FormEventHandler<HTMLInputElement>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@types/react:DOMAttributes",
      "required": false
     },
     {
      "uid": 149,
      "name": "onBeforeInputCapture",
      "typeValue": {
       "raw": "React.FormEventHandler<HTMLInputElement>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@types/react:DOMAttributes",
      "required": false
     },
     {
      "uid": 150,
      "name": "onInput",
      "typeValue": {
       "raw": "React.FormEventHandler<HTMLInputElement>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@types/react:DOMAttributes",
      "required": false
     },
     {
      "uid": 151,
      "name": "onInputCapture",
      "typeValue": {
       "raw": "React.FormEventHandler<HTMLInputElement>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@types/react:DOMAttributes",
      "required": false
     },
     {
      "uid": 152,
      "name": "onReset",
      "typeValue": {
       "raw": "React.FormEventHandler<HTMLInputElement>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@types/react:DOMAttributes",
      "required": false
     },
     {
      "uid": 153,
      "name": "onResetCapture",
      "typeValue": {
       "raw": "React.FormEventHandler<HTMLInputElement>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@types/react:DOMAttributes",
      "required": false
     },
     {
      "uid": 154,
      "name": "onSubmit",
      "typeValue": {
       "raw": "React.FormEventHandler<HTMLInputElement>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@types/react:DOMAttributes",
      "required": false
     },
     {
      "uid": 155,
      "name": "onSubmitCapture",
      "typeValue": {
       "raw": "React.FormEventHandler<HTMLInputElement>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@types/react:DOMAttributes",
      "required": false
     },
     {
      "uid": 156,
      "name": "onInvalid",
      "typeValue": {
       "raw": "React.FormEventHandler<HTMLInputElement>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@types/react:DOMAttributes",
      "required": false
     },
     {
      "uid": 157,
      "name": "onInvalidCapture",
      "typeValue": {
       "raw": "React.FormEventHandler<HTMLInputElement>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@types/react:DOMAttributes",
      "required": false
     },
     {
      "uid": 158,
      "name": "onLoad",
      "typeValue": {
       "raw": "React.ReactEventHandler<HTMLInputElement>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@types/react:DOMAttributes",
      "required": false
     },
     {
      "uid": 159,
      "name": "onLoadCapture",
      "typeValue": {
       "raw": "React.ReactEventHandler<HTMLInputElement>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@types/react:DOMAttributes",
      "required": false
     },
     {
      "uid": 160,
      "name": "onError",
      "typeValue": {
       "raw": "React.ReactEventHandler<HTMLInputElement>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@types/react:DOMAttributes",
      "required": false
     },
     {
      "uid": 161,
      "name": "onErrorCapture",
      "typeValue": {
       "raw": "React.ReactEventHandler<HTMLInputElement>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@types/react:DOMAttributes",
      "required": false
     },
     {
      "uid": 162,
      "name": "onKeyDown",
      "typeValue": {
       "raw": "React.KeyboardEventHandler<HTMLInputElement>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@types/react:DOMAttributes",
      "required": false
     },
     {
      "uid": 163,
      "name": "onKeyDownCapture",
      "typeValue": {
       "raw": "React.KeyboardEventHandler<HTMLInputElement>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@types/react:DOMAttributes",
      "required": false
     },
     {
      "uid": 164,
      "name": "onKeyPress",
      "comment": {
       "raw": [
        "@deprecated"
       ]
      },
      "typeValue": {
       "raw": "React.KeyboardEventHandler<HTMLInputElement>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@types/react:DOMAttributes",
      "required": false
     },
     {
      "uid": 165,
      "name": "onKeyPressCapture",
      "comment": {
       "raw": [
        "@deprecated"
       ]
      },
      "typeValue": {
       "raw": "React.KeyboardEventHandler<HTMLInputElement>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@types/react:DOMAttributes",
      "required": false
     },
     {
      "uid": 166,
      "name": "onKeyUp",
      "typeValue": {
       "raw": "React.KeyboardEventHandler<HTMLInputElement>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@types/react:DOMAttributes",
      "required": false
     },
     {
      "uid": 167,
      "name": "onKeyUpCapture",
      "typeValue": {
       "raw": "React.KeyboardEventHandler<HTMLInputElement>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@types/react:DOMAttributes",
      "required": false
     },
     {
      "uid": 168,
      "name": "onAbort",
      "typeValue": {
       "raw": "React.ReactEventHandler<HTMLInputElement>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@types/react:DOMAttributes",
      "required": false
     },
     {
      "uid": 169,
      "name": "onAbortCapture",
      "typeValue": {
       "raw": "React.ReactEventHandler<HTMLInputElement>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@types/react:DOMAttributes",
      "required": false
     },
     {
      "uid": 170,
      "name": "onCanPlay",
      "typeValue": {
       "raw": "React.ReactEventHandler<HTMLInputElement>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@types/react:DOMAttributes",
      "required": false
     },
     {
      "uid": 171,
      "name": "onCanPlayCapture",
      "typeValue": {
       "raw": "React.ReactEventHandler<HTMLInputElement>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@types/react:DOMAttributes",
      "required": false
     },
     {
      "uid": 172,
      "name": "onCanPlayThrough",
      "typeValue": {
       "raw": "React.ReactEventHandler<HTMLInputElement>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@types/react:DOMAttributes",
      "required": false
     },
     {
      "uid": 173,
      "name": "onCanPlayThroughCapture",
      "typeValue": {
       "raw": "React.ReactEventHandler<HTMLInputElement>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@types/react:DOMAttributes",
      "required": false
     },
     {
      "uid": 174,
      "name": "onDurationChange",
      "typeValue": {
       "raw": "React.ReactEventHandler<HTMLInputElement>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@types/react:DOMAttributes",
      "required": false
     },
     {
      "uid": 175,
      "name": "onDurationChangeCapture",
      "typeValue": {
       "raw": "React.ReactEventHandler<HTMLInputElement>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@types/react:DOMAttributes",
      "required": false
     },
     {
      "uid": 176,
      "name": "onEmptied",
      "typeValue": {
       "raw": "React.ReactEventHandler<HTMLInputElement>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@types/react:DOMAttributes",
      "required": false
     },
     {
      "uid": 177,
      "name": "onEmptiedCapture",
      "typeValue": {
       "raw": "React.ReactEventHandler<HTMLInputElement>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@types/react:DOMAttributes",
      "required": false
     },
     {
      "uid": 178,
      "name": "onEncrypted",
      "typeValue": {
       "raw": "React.ReactEventHandler<HTMLInputElement>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@types/react:DOMAttributes",
      "required": false
     },
     {
      "uid": 179,
      "name": "onEncryptedCapture",
      "typeValue": {
       "raw": "React.ReactEventHandler<HTMLInputElement>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@types/react:DOMAttributes",
      "required": false
     },
     {
      "uid": 180,
      "name": "onEnded",
      "typeValue": {
       "raw": "React.ReactEventHandler<HTMLInputElement>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@types/react:DOMAttributes",
      "required": false
     },
     {
      "uid": 181,
      "name": "onEndedCapture",
      "typeValue": {
       "raw": "React.ReactEventHandler<HTMLInputElement>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@types/react:DOMAttributes",
      "required": false
     },
     {
      "uid": 182,
      "name": "onLoadedData",
      "typeValue": {
       "raw": "React.ReactEventHandler<HTMLInputElement>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@types/react:DOMAttributes",
      "required": false
     },
     {
      "uid": 183,
      "name": "onLoadedDataCapture",
      "typeValue": {
       "raw": "React.ReactEventHandler<HTMLInputElement>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@types/react:DOMAttributes",
      "required": false
     },
     {
      "uid": 184,
      "name": "onLoadedMetadata",
      "typeValue": {
       "raw": "React.ReactEventHandler<HTMLInputElement>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@types/react:DOMAttributes",
      "required": false
     },
     {
      "uid": 185,
      "name": "onLoadedMetadataCapture",
      "typeValue": {
       "raw": "React.ReactEventHandler<HTMLInputElement>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@types/react:DOMAttributes",
      "required": false
     },
     {
      "uid": 186,
      "name": "onLoadStart",
      "typeValue": {
       "raw": "React.ReactEventHandler<HTMLInputElement>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@types/react:DOMAttributes",
      "required": false
     },
     {
      "uid": 187,
      "name": "onLoadStartCapture",
      "typeValue": {
       "raw": "React.ReactEventHandler<HTMLInputElement>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@types/react:DOMAttributes",
      "required": false
     },
     {
      "uid": 188,
      "name": "onPause",
      "typeValue": {
       "raw": "React.ReactEventHandler<HTMLInputElement>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@types/react:DOMAttributes",
      "required": false
     },
     {
      "uid": 189,
      "name": "onPauseCapture",
      "typeValue": {
       "raw": "React.ReactEventHandler<HTMLInputElement>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@types/react:DOMAttributes",
      "required": false
     },
     {
      "uid": 190,
      "name": "onPlay",
      "typeValue": {
       "raw": "React.ReactEventHandler<HTMLInputElement>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@types/react:DOMAttributes",
      "required": false
     },
     {
      "uid": 191,
      "name": "onPlayCapture",
      "typeValue": {
       "raw": "React.ReactEventHandler<HTMLInputElement>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@types/react:DOMAttributes",
      "required": false
     },
     {
      "uid": 192,
      "name": "onPlaying",
      "typeValue": {
       "raw": "React.ReactEventHandler<HTMLInputElement>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@types/react:DOMAttributes",
      "required": false
     },
     {
      "uid": 193,
      "name": "onPlayingCapture",
      "typeValue": {
       "raw": "React.ReactEventHandler<HTMLInputElement>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@types/react:DOMAttributes",
      "required": false
     },
     {
      "uid": 194,
      "name": "onProgress",
      "typeValue": {
       "raw": "React.ReactEventHandler<HTMLInputElement>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@types/react:DOMAttributes",
      "required": false
     },
     {
      "uid": 195,
      "name": "onProgressCapture",
      "typeValue": {
       "raw": "React.ReactEventHandler<HTMLInputElement>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@types/react:DOMAttributes",
      "required": false
     },
     {
      "uid": 196,
      "name": "onRateChange",
      "typeValue": {
       "raw": "React.ReactEventHandler<HTMLInputElement>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@types/react:DOMAttributes",
      "required": false
     },
     {
      "uid": 197,
      "name": "onRateChangeCapture",
      "typeValue": {
       "raw": "React.ReactEventHandler<HTMLInputElement>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@types/react:DOMAttributes",
      "required": false
     },
     {
      "uid": 198,
      "name": "onResize",
      "typeValue": {
       "raw": "React.ReactEventHandler<HTMLInputElement>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@types/react:DOMAttributes",
      "required": false
     },
     {
      "uid": 199,
      "name": "onResizeCapture",
      "typeValue": {
       "raw": "React.ReactEventHandler<HTMLInputElement>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@types/react:DOMAttributes",
      "required": false
     },
     {
      "uid": 200,
      "name": "onSeeked",
      "typeValue": {
       "raw": "React.ReactEventHandler<HTMLInputElement>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@types/react:DOMAttributes",
      "required": false
     },
     {
      "uid": 201,
      "name": "onSeekedCapture",
      "typeValue": {
       "raw": "React.ReactEventHandler<HTMLInputElement>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@types/react:DOMAttributes",
      "required": false
     },
     {
      "uid": 202,
      "name": "onSeeking",
      "typeValue": {
       "raw": "React.ReactEventHandler<HTMLInputElement>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@types/react:DOMAttributes",
      "required": false
     },
     {
      "uid": 203,
      "name": "onSeekingCapture",
      "typeValue": {
       "raw": "React.ReactEventHandler<HTMLInputElement>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@types/react:DOMAttributes",
      "required": false
     },
     {
      "uid": 204,
      "name": "onStalled",
      "typeValue": {
       "raw": "React.ReactEventHandler<HTMLInputElement>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@types/react:DOMAttributes",
      "required": false
     },
     {
      "uid": 205,
      "name": "onStalledCapture",
      "typeValue": {
       "raw": "React.ReactEventHandler<HTMLInputElement>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@types/react:DOMAttributes",
      "required": false
     },
     {
      "uid": 206,
      "name": "onSuspend",
      "typeValue": {
       "raw": "React.ReactEventHandler<HTMLInputElement>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@types/react:DOMAttributes",
      "required": false
     },
     {
      "uid": 207,
      "name": "onSuspendCapture",
      "typeValue": {
       "raw": "React.ReactEventHandler<HTMLInputElement>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@types/react:DOMAttributes",
      "required": false
     },
     {
      "uid": 208,
      "name": "onTimeUpdate",
      "typeValue": {
       "raw": "React.ReactEventHandler<HTMLInputElement>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@types/react:DOMAttributes",
      "required": false
     },
     {
      "uid": 209,
      "name": "onTimeUpdateCapture",
      "typeValue": {
       "raw": "React.ReactEventHandler<HTMLInputElement>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@types/react:DOMAttributes",
      "required": false
     },
     {
      "uid": 210,
      "name": "onVolumeChange",
      "typeValue": {
       "raw": "React.ReactEventHandler<HTMLInputElement>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@types/react:DOMAttributes",
      "required": false
     },
     {
      "uid": 211,
      "name": "onVolumeChangeCapture",
      "typeValue": {
       "raw": "React.ReactEventHandler<HTMLInputElement>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@types/react:DOMAttributes",
      "required": false
     },
     {
      "uid": 212,
      "name": "onWaiting",
      "typeValue": {
       "raw": "React.ReactEventHandler<HTMLInputElement>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@types/react:DOMAttributes",
      "required": false
     },
     {
      "uid": 213,
      "name": "onWaitingCapture",
      "typeValue": {
       "raw": "React.ReactEventHandler<HTMLInputElement>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@types/react:DOMAttributes",
      "required": false
     },
     {
      "uid": 214,
      "name": "onAuxClick",
      "typeValue": {
       "raw": "React.MouseEventHandler<HTMLInputElement>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@types/react:DOMAttributes",
      "required": false
     },
     {
      "uid": 215,
      "name": "onAuxClickCapture",
      "typeValue": {
       "raw": "React.MouseEventHandler<HTMLInputElement>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@types/react:DOMAttributes",
      "required": false
     },
     {
      "uid": 216,
      "name": "onClick",
      "typeValue": {
       "raw": "React.MouseEventHandler<HTMLInputElement>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@types/react:DOMAttributes",
      "required": false
     },
     {
      "uid": 217,
      "name": "onClickCapture",
      "typeValue": {
       "raw": "React.MouseEventHandler<HTMLInputElement>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@types/react:DOMAttributes",
      "required": false
     },
     {
      "uid": 218,
      "name": "onContextMenu",
      "typeValue": {
       "raw": "React.MouseEventHandler<HTMLInputElement>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@types/react:DOMAttributes",
      "required": false
     },
     {
      "uid": 219,
      "name": "onContextMenuCapture",
      "typeValue": {
       "raw": "React.MouseEventHandler<HTMLInputElement>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@types/react:DOMAttributes",
      "required": false
     },
     {
      "uid": 220,
      "name": "onDoubleClick",
      "typeValue": {
       "raw": "React.MouseEventHandler<HTMLInputElement>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@types/react:DOMAttributes",
      "required": false
     },
     {
      "uid": 221,
      "name": "onDoubleClickCapture",
      "typeValue": {
       "raw": "React.MouseEventHandler<HTMLInputElement>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@types/react:DOMAttributes",
      "required": false
     },
     {
      "uid": 222,
      "name": "onDrag",
      "typeValue": {
       "raw": "React.DragEventHandler<HTMLInputElement>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@types/react:DOMAttributes",
      "required": false
     },
     {
      "uid": 223,
      "name": "onDragCapture",
      "typeValue": {
       "raw": "React.DragEventHandler<HTMLInputElement>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@types/react:DOMAttributes",
      "required": false
     },
     {
      "uid": 224,
      "name": "onDragEnd",
      "typeValue": {
       "raw": "React.DragEventHandler<HTMLInputElement>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@types/react:DOMAttributes",
      "required": false
     },
     {
      "uid": 225,
      "name": "onDragEndCapture",
      "typeValue": {
       "raw": "React.DragEventHandler<HTMLInputElement>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@types/react:DOMAttributes",
      "required": false
     },
     {
      "uid": 226,
      "name": "onDragEnter",
      "typeValue": {
       "raw": "React.DragEventHandler<HTMLInputElement>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@types/react:DOMAttributes",
      "required": false
     },
     {
      "uid": 227,
      "name": "onDragEnterCapture",
      "typeValue": {
       "raw": "React.DragEventHandler<HTMLInputElement>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@types/react:DOMAttributes",
      "required": false
     },
     {
      "uid": 228,
      "name": "onDragExit",
      "typeValue": {
       "raw": "React.DragEventHandler<HTMLInputElement>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@types/react:DOMAttributes",
      "required": false
     },
     {
      "uid": 229,
      "name": "onDragExitCapture",
      "typeValue": {
       "raw": "React.DragEventHandler<HTMLInputElement>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@types/react:DOMAttributes",
      "required": false
     },
     {
      "uid": 230,
      "name": "onDragLeave",
      "typeValue": {
       "raw": "React.DragEventHandler<HTMLInputElement>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@types/react:DOMAttributes",
      "required": false
     },
     {
      "uid": 231,
      "name": "onDragLeaveCapture",
      "typeValue": {
       "raw": "React.DragEventHandler<HTMLInputElement>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@types/react:DOMAttributes",
      "required": false
     },
     {
      "uid": 232,
      "name": "onDragOver",
      "typeValue": {
       "raw": "React.DragEventHandler<HTMLInputElement>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@types/react:DOMAttributes",
      "required": false
     },
     {
      "uid": 233,
      "name": "onDragOverCapture",
      "typeValue": {
       "raw": "React.DragEventHandler<HTMLInputElement>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@types/react:DOMAttributes",
      "required": false
     },
     {
      "uid": 234,
      "name": "onDragStart",
      "typeValue": {
       "raw": "React.DragEventHandler<HTMLInputElement>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@types/react:DOMAttributes",
      "required": false
     },
     {
      "uid": 235,
      "name": "onDragStartCapture",
      "typeValue": {
       "raw": "React.DragEventHandler<HTMLInputElement>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@types/react:DOMAttributes",
      "required": false
     },
     {
      "uid": 236,
      "name": "onDrop",
      "typeValue": {
       "raw": "React.DragEventHandler<HTMLInputElement>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@types/react:DOMAttributes",
      "required": false
     },
     {
      "uid": 237,
      "name": "onDropCapture",
      "typeValue": {
       "raw": "React.DragEventHandler<HTMLInputElement>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@types/react:DOMAttributes",
      "required": false
     },
     {
      "uid": 238,
      "name": "onMouseDown",
      "typeValue": {
       "raw": "React.MouseEventHandler<HTMLInputElement>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@types/react:DOMAttributes",
      "required": false
     },
     {
      "uid": 239,
      "name": "onMouseDownCapture",
      "typeValue": {
       "raw": "React.MouseEventHandler<HTMLInputElement>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@types/react:DOMAttributes",
      "required": false
     },
     {
      "uid": 240,
      "name": "onMouseEnter",
      "typeValue": {
       "raw": "React.MouseEventHandler<HTMLInputElement>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@types/react:DOMAttributes",
      "required": false
     },
     {
      "uid": 241,
      "name": "onMouseLeave",
      "typeValue": {
       "raw": "React.MouseEventHandler<HTMLInputElement>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@types/react:DOMAttributes",
      "required": false
     },
     {
      "uid": 242,
      "name": "onMouseMove",
      "typeValue": {
       "raw": "React.MouseEventHandler<HTMLInputElement>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@types/react:DOMAttributes",
      "required": false
     },
     {
      "uid": 243,
      "name": "onMouseMoveCapture",
      "typeValue": {
       "raw": "React.MouseEventHandler<HTMLInputElement>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@types/react:DOMAttributes",
      "required": false
     },
     {
      "uid": 244,
      "name": "onMouseOut",
      "typeValue": {
       "raw": "React.MouseEventHandler<HTMLInputElement>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@types/react:DOMAttributes",
      "required": false
     },
     {
      "uid": 245,
      "name": "onMouseOutCapture",
      "typeValue": {
       "raw": "React.MouseEventHandler<HTMLInputElement>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@types/react:DOMAttributes",
      "required": false
     },
     {
      "uid": 246,
      "name": "onMouseOver",
      "typeValue": {
       "raw": "React.MouseEventHandler<HTMLInputElement>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@types/react:DOMAttributes",
      "required": false
     },
     {
      "uid": 247,
      "name": "onMouseOverCapture",
      "typeValue": {
       "raw": "React.MouseEventHandler<HTMLInputElement>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@types/react:DOMAttributes",
      "required": false
     },
     {
      "uid": 248,
      "name": "onMouseUp",
      "typeValue": {
       "raw": "React.MouseEventHandler<HTMLInputElement>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@types/react:DOMAttributes",
      "required": false
     },
     {
      "uid": 249,
      "name": "onMouseUpCapture",
      "typeValue": {
       "raw": "React.MouseEventHandler<HTMLInputElement>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@types/react:DOMAttributes",
      "required": false
     },
     {
      "uid": 250,
      "name": "onSelect",
      "typeValue": {
       "raw": "React.ReactEventHandler<HTMLInputElement>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@types/react:DOMAttributes",
      "required": false
     },
     {
      "uid": 251,
      "name": "onSelectCapture",
      "typeValue": {
       "raw": "React.ReactEventHandler<HTMLInputElement>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@types/react:DOMAttributes",
      "required": false
     },
     {
      "uid": 252,
      "name": "onTouchCancel",
      "typeValue": {
       "raw": "React.TouchEventHandler<HTMLInputElement>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@types/react:DOMAttributes",
      "required": false
     },
     {
      "uid": 253,
      "name": "onTouchCancelCapture",
      "typeValue": {
       "raw": "React.TouchEventHandler<HTMLInputElement>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@types/react:DOMAttributes",
      "required": false
     },
     {
      "uid": 254,
      "name": "onTouchEnd",
      "typeValue": {
       "raw": "React.TouchEventHandler<HTMLInputElement>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@types/react:DOMAttributes",
      "required": false
     },
     {
      "uid": 255,
      "name": "onTouchEndCapture",
      "typeValue": {
       "raw": "React.TouchEventHandler<HTMLInputElement>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@types/react:DOMAttributes",
      "required": false
     },
     {
      "uid": 256,
      "name": "onTouchMove",
      "typeValue": {
       "raw": "React.TouchEventHandler<HTMLInputElement>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@types/react:DOMAttributes",
      "required": false
     },
     {
      "uid": 257,
      "name": "onTouchMoveCapture",
      "typeValue": {
       "raw": "React.TouchEventHandler<HTMLInputElement>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@types/react:DOMAttributes",
      "required": false
     },
     {
      "uid": 258,
      "name": "onTouchStart",
      "typeValue": {
       "raw": "React.TouchEventHandler<HTMLInputElement>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@types/react:DOMAttributes",
      "required": false
     },
     {
      "uid": 259,
      "name": "onTouchStartCapture",
      "typeValue": {
       "raw": "React.TouchEventHandler<HTMLInputElement>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@types/react:DOMAttributes",
      "required": false
     },
     {
      "uid": 260,
      "name": "onPointerDown",
      "typeValue": {
       "raw": "React.PointerEventHandler<HTMLInputElement>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@types/react:DOMAttributes",
      "required": false
     },
     {
      "uid": 261,
      "name": "onPointerDownCapture",
      "typeValue": {
       "raw": "React.PointerEventHandler<HTMLInputElement>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@types/react:DOMAttributes",
      "required": false
     },
     {
      "uid": 262,
      "name": "onPointerMove",
      "typeValue": {
       "raw": "React.PointerEventHandler<HTMLInputElement>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@types/react:DOMAttributes",
      "required": false
     },
     {
      "uid": 263,
      "name": "onPointerMoveCapture",
      "typeValue": {
       "raw": "React.PointerEventHandler<HTMLInputElement>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@types/react:DOMAttributes",
      "required": false
     },
     {
      "uid": 264,
      "name": "onPointerUp",
      "typeValue": {
       "raw": "React.PointerEventHandler<HTMLInputElement>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@types/react:DOMAttributes",
      "required": false
     },
     {
      "uid": 265,
      "name": "onPointerUpCapture",
      "typeValue": {
       "raw": "React.PointerEventHandler<HTMLInputElement>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@types/react:DOMAttributes",
      "required": false
     },
     {
      "uid": 266,
      "name": "onPointerCancel",
      "typeValue": {
       "raw": "React.PointerEventHandler<HTMLInputElement>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@types/react:DOMAttributes",
      "required": false
     },
     {
      "uid": 267,
      "name": "onPointerCancelCapture",
      "typeValue": {
       "raw": "React.PointerEventHandler<HTMLInputElement>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@types/react:DOMAttributes",
      "required": false
     },
     {
      "uid": 268,
      "name": "onPointerEnter",
      "typeValue": {
       "raw": "React.PointerEventHandler<HTMLInputElement>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@types/react:DOMAttributes",
      "required": false
     },
     {
      "uid": 269,
      "name": "onPointerEnterCapture",
      "typeValue": {
       "raw": "React.PointerEventHandler<HTMLInputElement>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@types/react:DOMAttributes",
      "required": false
     },
     {
      "uid": 270,
      "name": "onPointerLeave",
      "typeValue": {
       "raw": "React.PointerEventHandler<HTMLInputElement>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@types/react:DOMAttributes",
      "required": false
     },
     {
      "uid": 271,
      "name": "onPointerLeaveCapture",
      "typeValue": {
       "raw": "React.PointerEventHandler<HTMLInputElement>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@types/react:DOMAttributes",
      "required": false
     },
     {
      "uid": 272,
      "name": "onPointerOver",
      "typeValue": {
       "raw": "React.PointerEventHandler<HTMLInputElement>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@types/react:DOMAttributes",
      "required": false
     },
     {
      "uid": 273,
      "name": "onPointerOverCapture",
      "typeValue": {
       "raw": "React.PointerEventHandler<HTMLInputElement>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@types/react:DOMAttributes",
      "required": false
     },
     {
      "uid": 274,
      "name": "onPointerOut",
      "typeValue": {
       "raw": "React.PointerEventHandler<HTMLInputElement>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@types/react:DOMAttributes",
      "required": false
     },
     {
      "uid": 275,
      "name": "onPointerOutCapture",
      "typeValue": {
       "raw": "React.PointerEventHandler<HTMLInputElement>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@types/react:DOMAttributes",
      "required": false
     },
     {
      "uid": 276,
      "name": "onGotPointerCapture",
      "typeValue": {
       "raw": "React.PointerEventHandler<HTMLInputElement>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@types/react:DOMAttributes",
      "required": false
     },
     {
      "uid": 277,
      "name": "onGotPointerCaptureCapture",
      "typeValue": {
       "raw": "React.PointerEventHandler<HTMLInputElement>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@types/react:DOMAttributes",
      "required": false
     },
     {
      "uid": 278,
      "name": "onLostPointerCapture",
      "typeValue": {
       "raw": "React.PointerEventHandler<HTMLInputElement>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@types/react:DOMAttributes",
      "required": false
     },
     {
      "uid": 279,
      "name": "onLostPointerCaptureCapture",
      "typeValue": {
       "raw": "React.PointerEventHandler<HTMLInputElement>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@types/react:DOMAttributes",
      "required": false
     },
     {
      "uid": 280,
      "name": "onScroll",
      "typeValue": {
       "raw": "React.UIEventHandler<HTMLInputElement>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@types/react:DOMAttributes",
      "required": false
     },
     {
      "uid": 281,
      "name": "onScrollCapture",
      "typeValue": {
       "raw": "React.UIEventHandler<HTMLInputElement>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@types/react:DOMAttributes",
      "required": false
     },
     {
      "uid": 282,
      "name": "onWheel",
      "typeValue": {
       "raw": "React.WheelEventHandler<HTMLInputElement>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@types/react:DOMAttributes",
      "required": false
     },
     {
      "uid": 283,
      "name": "onWheelCapture",
      "typeValue": {
       "raw": "React.WheelEventHandler<HTMLInputElement>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@types/react:DOMAttributes",
      "required": false
     },
     {
      "uid": 284,
      "name": "onAnimationStart",
      "typeValue": {
       "raw": "React.AnimationEventHandler<HTMLInputElement>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@types/react:DOMAttributes",
      "required": false
     },
     {
      "uid": 285,
      "name": "onAnimationStartCapture",
      "typeValue": {
       "raw": "React.AnimationEventHandler<HTMLInputElement>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@types/react:DOMAttributes",
      "required": false
     },
     {
      "uid": 286,
      "name": "onAnimationEnd",
      "typeValue": {
       "raw": "React.AnimationEventHandler<HTMLInputElement>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@types/react:DOMAttributes",
      "required": false
     },
     {
      "uid": 287,
      "name": "onAnimationEndCapture",
      "typeValue": {
       "raw": "React.AnimationEventHandler<HTMLInputElement>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@types/react:DOMAttributes",
      "required": false
     },
     {
      "uid": 288,
      "name": "onAnimationIteration",
      "typeValue": {
       "raw": "React.AnimationEventHandler<HTMLInputElement>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@types/react:DOMAttributes",
      "required": false
     },
     {
      "uid": 289,
      "name": "onAnimationIterationCapture",
      "typeValue": {
       "raw": "React.AnimationEventHandler<HTMLInputElement>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@types/react:DOMAttributes",
      "required": false
     },
     {
      "uid": 290,
      "name": "onTransitionEnd",
      "typeValue": {
       "raw": "React.TransitionEventHandler<HTMLInputElement>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@types/react:DOMAttributes",
      "required": false
     },
     {
      "uid": 291,
      "name": "onTransitionEndCapture",
      "typeValue": {
       "raw": "React.TransitionEventHandler<HTMLInputElement>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@types/react:DOMAttributes",
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui-components:IScrollSpyApi": {
   "summary": {
    "module": "@epam/uui-components",
    "typeName": {
     "name": "IScrollSpyApi",
     "nameFull": "IScrollSpyApi"
    },
    "src": "uui-components/src/navigation/ScrollSpy.tsx",
    "exported": true
   },
   "details": {
    "kind": 263,
    "typeValue": {
     "raw": "IScrollSpyApi",
     "print": [
      "interface IScrollSpyApi {",
      "    scrollToElement: (item?: string) => void;",
      "    currentActive: string;",
      "    setRef: (ref: HTMLElement) => void;",
      "}"
     ]
    },
    "props": [
     {
      "uid": 1,
      "name": "scrollToElement",
      "typeValue": {
       "raw": "(item?: string | undefined) => void"
      },
      "editor": {
       "type": "func"
      },
      "required": true
     },
     {
      "uid": 2,
      "name": "currentActive",
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "required": true
     },
     {
      "uid": 3,
      "name": "setRef",
      "typeValue": {
       "raw": "(ref: HTMLElement) => void"
      },
      "editor": {
       "type": "func"
      },
      "required": true
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui-components:IScrollSpyProps": {
   "summary": {
    "module": "@epam/uui-components",
    "typeName": {
     "name": "IScrollSpyProps",
     "nameFull": "IScrollSpyProps"
    },
    "src": "uui-components/src/navigation/ScrollSpy.tsx",
    "exported": true
   },
   "details": {
    "kind": 263,
    "typeValue": {
     "raw": "IScrollSpyProps",
     "print": [
      "interface IScrollSpyProps {",
      "    elements?: Readonly<string[]>;",
      "    initialActive?: string;",
      "    options?: IntersectionObserverInit;",
      "}"
     ]
    },
    "props": [
     {
      "uid": 1,
      "name": "elements",
      "typeValue": {
       "raw": "readonly string[]"
      },
      "required": false
     },
     {
      "uid": 2,
      "name": "initialActive",
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "required": false
     },
     {
      "uid": 3,
      "name": "options",
      "typeValue": {
       "raw": "IntersectionObserverInit"
      },
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui-components:LabeledInputProps": {
   "summary": {
    "module": "@epam/uui-components",
    "typeName": {
     "name": "LabeledInputProps",
     "nameFull": "LabeledInputProps"
    },
    "src": "uui-components/src/layout/LabeledInput.tsx",
    "exported": true
   },
   "details": {
    "kind": 263,
    "typeValue": {
     "raw": "LabeledInputProps",
     "print": [
      "interface LabeledInputProps extends LabeledInputCoreProps {",
      "    /** Overrides the default Tooltip component to use for info tooltip */",
      "    Tooltip?: React.ComponentType<TooltipProps>;",
      "    /** Overrides the default info icon */",
      "    infoIcon?: Icon;",
      "}"
     ]
    },
    "props": [
     {
      "uid": 1,
      "name": "Tooltip",
      "comment": {
       "raw": [
        "Overrides the default Tooltip component to use for info tooltip"
       ]
      },
      "typeValue": {
       "raw": "React.ComponentClass<TooltipProps, any> | React.FunctionComponent<TooltipProps>"
      },
      "required": false
     },
     {
      "uid": 2,
      "name": "infoIcon",
      "comment": {
       "raw": [
        "Overrides the default info icon"
       ]
      },
      "typeValue": {
       "raw": "Icon"
      },
      "editor": {
       "type": "component"
      },
      "required": false
     },
     {
      "uid": 3,
      "name": "labelPosition",
      "comment": {
       "raw": [
        "Position of the label, relative to the wrapped component (top of left)"
       ]
      },
      "typeValue": {
       "raw": "'left' | 'top'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "left",
        "top"
       ]
      },
      "from": "@epam/uui-core:LabeledInputCoreProps",
      "required": false
     },
     {
      "uid": 4,
      "name": "info",
      "comment": {
       "raw": [
        "Info hint text to show in tooltip"
       ]
      },
      "typeValue": {
       "raw": "null | string | number | boolean | React.ReactElement<any, string | React.JSXElementConstructor<any>> | React.ReactFragment | React.ReactPortal"
      },
      "typeValueRef": "@types/react:ReactNode",
      "from": "@epam/uui-core:LabeledInputCoreProps",
      "required": false
     },
     {
      "uid": 5,
      "name": "isOptional",
      "comment": {
       "raw": [
        "Marks related field as optional"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:LabeledInputCoreProps",
      "required": false
     },
     {
      "uid": 6,
      "name": "htmlFor",
      "comment": {
       "raw": [
        "HTML 'for' tag to bind the label to a component.",
        " Can be used when component can't be wrapped by the LabeledInput, e.g. when form is layed out as table with labels and inputs placed into different columns"
       ]
      },
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "from": "@epam/uui-core:LabeledInputCoreProps",
      "required": false
     },
     {
      "uid": 7,
      "name": "value",
      "comment": {
       "raw": [
        "A value from LabeledInput children"
       ]
      },
      "typeValue": {
       "raw": "any"
      },
      "from": "@epam/uui-core:LabeledInputCoreProps",
      "required": false
     },
     {
      "uid": 8,
      "name": "maxLength",
      "comment": {
       "raw": [
        "Maximum text length, in characters"
       ]
      },
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "from": "@epam/uui-core:LabeledInputCoreProps",
      "required": false
     },
     {
      "uid": 9,
      "name": "charCounter",
      "comment": {
       "raw": [
        "Showing current text length, in characters and maxLength"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:LabeledInputCoreProps",
      "required": false
     },
     {
      "uid": 10,
      "name": "footnote",
      "comment": {
       "raw": [
        "Additional info positioned at the bottom of LabeledInput"
       ]
      },
      "typeValue": {
       "raw": "null | string | number | boolean | React.ReactElement<any, string | React.JSXElementConstructor<any>> | React.ReactFragment | React.ReactPortal"
      },
      "typeValueRef": "@types/react:ReactNode",
      "from": "@epam/uui-core:LabeledInputCoreProps",
      "required": false
     },
     {
      "uid": 11,
      "name": "sidenote",
      "comment": {
       "raw": [
        "Additional info positioned to the right side of label"
       ]
      },
      "typeValue": {
       "raw": "null | string | number | boolean | React.ReactElement<any, string | React.JSXElementConstructor<any>> | React.ReactFragment | React.ReactPortal"
      },
      "typeValueRef": "@types/react:ReactNode",
      "from": "@epam/uui-core:LabeledInputCoreProps",
      "required": false
     },
     {
      "uid": 12,
      "name": "isInvalid",
      "comment": {
       "raw": [
        "True if component contains invalid input"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:ICanBeInvalid",
      "required": false
     },
     {
      "uid": 13,
      "name": "validationMessage",
      "comment": {
       "raw": [
        "Message describing why the value is invalid"
       ]
      },
      "typeValue": {
       "raw": "null | string | number | boolean | React.ReactElement<any, string | React.JSXElementConstructor<any>> | React.ReactFragment | React.ReactPortal"
      },
      "typeValueRef": "@types/react:ReactNode",
      "from": "@epam/uui-core:ICanBeInvalid",
      "required": false
     },
     {
      "uid": 14,
      "name": "validationProps",
      "comment": {
       "raw": [
        "If T is a complex value (object or array), this property contains validation states of inner items"
       ]
      },
      "typeValue": {
       "raw": "{ [key: string]: ICanBeInvalid; }"
      },
      "from": "@epam/uui-core:ICanBeInvalid",
      "required": false
     },
     {
      "uid": 15,
      "name": "cx",
      "comment": {
       "raw": [
        "CSS class(es) to put on component's root. See {@link https://github.com/JedWatson/classnames#usage} for details"
       ]
      },
      "typeValue": {
       "raw": "null | string | number | boolean | ClassDictionary | ClassArray"
      },
      "typeValueRef": "@epam/uui-core:ClassValue",
      "from": "@epam/uui-core:IHasCX",
      "required": false
     },
     {
      "uid": 16,
      "name": "label",
      "comment": {
       "raw": [
        "Label. Can be a string, or React.Elements. Certain components supports minimal markup (<b>,<i>,<a>) in captions."
       ]
      },
      "typeValue": {
       "raw": "any"
      },
      "from": "@epam/uui-core:IHasLabel",
      "required": false
     },
     {
      "uid": 17,
      "name": "children",
      "typeValue": {
       "raw": "null | string | number | boolean | React.ReactElement<any, string | React.JSXElementConstructor<any>> | React.ReactFragment | React.ReactPortal"
      },
      "typeValueRef": "@types/react:ReactNode",
      "from": "@epam/uui-core:IHasChildren",
      "required": false
     },
     {
      "uid": 18,
      "name": "isRequired",
      "comment": {
       "raw": [
        "Marks that component's value is required and shouldn't be empty"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:ICanBeRequired",
      "required": false
     },
     {
      "uid": 19,
      "name": "rawProps",
      "comment": {
       "raw": [
        "Any HTML attributes (native or 'data-') to put on the underlying component"
       ]
      },
      "typeValue": {
       "raw": "React.HTMLAttributes<HTMLDivElement> & Record<`data-${string}`, string>"
      },
      "from": "@epam/uui-core:IHasRawProps",
      "required": false
     },
     {
      "uid": 20,
      "name": "forwardedRef",
      "comment": {
       "raw": [
        "this ref is passed to the underlying component"
       ]
      },
      "typeValue": {
       "raw": "null | (instance: HTMLDivElement | null) => void | React.MutableRefObject<HTMLDivElement | null>"
      },
      "from": "@epam/uui-core:IHasForwardedRef",
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui-components:MainMenuCustomElementProps": {
   "summary": {
    "module": "@epam/uui-components",
    "typeName": {
     "name": "MainMenuCustomElementProps",
     "nameFull": "MainMenuCustomElementProps"
    },
    "src": "uui-components/src/navigation/MainMenu/MainMenuCustomElement.tsx",
    "exported": true
   },
   "details": {
    "kind": 263,
    "typeValue": {
     "raw": "MainMenuCustomElementProps",
     "print": [
      "interface MainMenuCustomElementProps extends IAdaptiveItem, IHasChildren {",
      "}"
     ]
    },
    "props": [
     {
      "uid": 1,
      "name": "estimatedWidth",
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "from": "@epam/uui-core:IAdaptiveItem",
      "required": false
     },
     {
      "uid": 2,
      "name": "priority",
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "from": "@epam/uui-core:IAdaptiveItem",
      "required": false
     },
     {
      "uid": 3,
      "name": "showInBurgerMenu",
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:IAdaptiveItem",
      "required": false
     },
     {
      "uid": 4,
      "name": "collapseToMore",
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:IAdaptiveItem",
      "required": false
     },
     {
      "uid": 5,
      "name": "collapsedContainer",
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:IAdaptiveItem",
      "required": false
     },
     {
      "uid": 6,
      "name": "children",
      "typeValue": {
       "raw": "null | string | number | boolean | React.ReactElement<any, string | React.JSXElementConstructor<any>> | React.ReactFragment | React.ReactPortal"
      },
      "typeValueRef": "@types/react:ReactNode",
      "from": "@epam/uui-core:IHasChildren",
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui-components:MainMenuDropdownProps": {
   "summary": {
    "module": "@epam/uui-components",
    "typeName": {
     "name": "MainMenuDropdownProps",
     "nameFull": "MainMenuDropdownProps"
    },
    "src": "uui-components/src/navigation/MainMenu/MainMenu.tsx",
    "exported": true
   },
   "details": {
    "kind": 263,
    "typeValue": {
     "raw": "MainMenuDropdownProps",
     "print": [
      "interface MainMenuDropdownProps extends IHasChildren, IHasCaption, IAdaptiveItem, ICanRedirect, IHasCX, IHasRawProps<React.HTMLAttributes<HTMLElement>> {",
      "    renderBody?: (props: DropdownBodyProps) => React.ReactNode;",
      "}"
     ]
    },
    "props": [
     {
      "uid": 1,
      "name": "renderBody",
      "typeValue": {
       "raw": "(props: DropdownBodyProps) => React.ReactNode"
      },
      "editor": {
       "type": "component"
      },
      "required": false
     },
     {
      "uid": 2,
      "name": "children",
      "typeValue": {
       "raw": "null | string | number | boolean | React.ReactElement<any, string | React.JSXElementConstructor<any>> | React.ReactFragment | React.ReactPortal"
      },
      "typeValueRef": "@types/react:ReactNode",
      "from": "@epam/uui-core:IHasChildren",
      "required": false
     },
     {
      "uid": 3,
      "name": "caption",
      "comment": {
       "raw": [
        "Caption. Can be a string, or React.Elements. Certain components supports minimal markup (<b>,<i>,<a>) in captions."
       ]
      },
      "typeValue": {
       "raw": "any"
      },
      "from": "@epam/uui-core:IHasCaption",
      "required": false
     },
     {
      "uid": 4,
      "name": "estimatedWidth",
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "from": "@epam/uui-core:IAdaptiveItem",
      "required": false
     },
     {
      "uid": 5,
      "name": "priority",
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "from": "@epam/uui-core:IAdaptiveItem",
      "required": false
     },
     {
      "uid": 6,
      "name": "showInBurgerMenu",
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:IAdaptiveItem",
      "required": false
     },
     {
      "uid": 7,
      "name": "collapseToMore",
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:IAdaptiveItem",
      "required": false
     },
     {
      "uid": 8,
      "name": "collapsedContainer",
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:IAdaptiveItem",
      "required": false
     },
     {
      "uid": 9,
      "name": "link",
      "comment": {
       "raw": [
        "Link object to redirect to for SPA-redirects"
       ]
      },
      "typeValue": {
       "raw": "Link"
      },
      "from": "@epam/uui-core:ICanRedirect",
      "required": false
     },
     {
      "uid": 10,
      "name": "href",
      "comment": {
       "raw": [
        "Href (URL) to redirect to, for non-SPA redirects"
       ]
      },
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "from": "@epam/uui-core:ICanRedirect",
      "required": false
     },
     {
      "uid": 11,
      "name": "isLinkActive",
      "comment": {
       "raw": [
        "Highlights component to show that link is active (browser is displaying the page to which link is pointing)"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:ICanRedirect",
      "required": false
     },
     {
      "uid": 12,
      "name": "target",
      "comment": {
       "raw": [
        "Controls where the link should be opened"
       ]
      },
      "typeValue": {
       "raw": "'_blank'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "_blank"
       ]
      },
      "from": "@epam/uui-core:ICanRedirect",
      "required": false
     },
     {
      "uid": 13,
      "name": "cx",
      "comment": {
       "raw": [
        "CSS class(es) to put on component's root. See {@link https://github.com/JedWatson/classnames#usage} for details"
       ]
      },
      "typeValue": {
       "raw": "null | string | number | boolean | ClassDictionary | ClassArray"
      },
      "typeValueRef": "@epam/uui-core:ClassValue",
      "from": "@epam/uui-core:IHasCX",
      "required": false
     },
     {
      "uid": 14,
      "name": "rawProps",
      "comment": {
       "raw": [
        "Any HTML attributes (native or 'data-') to put on the underlying component"
       ]
      },
      "typeValue": {
       "raw": "React.HTMLAttributes<HTMLElement> & Record<`data-${string}`, string>"
      },
      "from": "@epam/uui-core:IHasRawProps",
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui-components:MainMenuLogoProps": {
   "summary": {
    "module": "@epam/uui-components",
    "typeName": {
     "name": "MainMenuLogoProps",
     "nameFull": "MainMenuLogoProps"
    },
    "src": "uui-components/src/navigation/MainMenu/MainMenuLogo.tsx",
    "exported": true
   },
   "details": {
    "kind": 263,
    "typeValue": {
     "raw": "MainMenuLogoProps",
     "print": [
      "interface MainMenuLogoProps extends IAdaptiveItem, ICanRedirect, IHasRawProps<React.HTMLAttributes<HTMLDivElement>>, IHasForwardedRef<HTMLDivElement> {",
      "    logoUrl?: string;",
      "    logoBgColor?: string;",
      "    showArrow?: boolean;",
      "    onContextMenu?: any;",
      "    link?: Link;",
      "    onClick?: (e: React.MouseEvent) => any;",
      "}"
     ]
    },
    "props": [
     {
      "uid": 1,
      "name": "logoUrl",
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "required": false
     },
     {
      "uid": 2,
      "name": "logoBgColor",
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "required": false
     },
     {
      "uid": 3,
      "name": "showArrow",
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "required": false
     },
     {
      "uid": 4,
      "name": "onContextMenu",
      "typeValue": {
       "raw": "any"
      },
      "required": false
     },
     {
      "uid": 5,
      "name": "link",
      "typeValue": {
       "raw": "Link"
      },
      "required": false
     },
     {
      "uid": 6,
      "name": "onClick",
      "typeValue": {
       "raw": "(e: React.MouseEvent<Element, MouseEvent>) => any"
      },
      "editor": {
       "type": "func"
      },
      "required": false
     },
     {
      "uid": 7,
      "name": "estimatedWidth",
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "from": "@epam/uui-core:IAdaptiveItem",
      "required": false
     },
     {
      "uid": 8,
      "name": "priority",
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "from": "@epam/uui-core:IAdaptiveItem",
      "required": false
     },
     {
      "uid": 9,
      "name": "showInBurgerMenu",
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:IAdaptiveItem",
      "required": false
     },
     {
      "uid": 10,
      "name": "collapseToMore",
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:IAdaptiveItem",
      "required": false
     },
     {
      "uid": 11,
      "name": "collapsedContainer",
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:IAdaptiveItem",
      "required": false
     },
     {
      "uid": 12,
      "name": "href",
      "comment": {
       "raw": [
        "Href (URL) to redirect to, for non-SPA redirects"
       ]
      },
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "from": "@epam/uui-core:ICanRedirect",
      "required": false
     },
     {
      "uid": 13,
      "name": "isLinkActive",
      "comment": {
       "raw": [
        "Highlights component to show that link is active (browser is displaying the page to which link is pointing)"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:ICanRedirect",
      "required": false
     },
     {
      "uid": 14,
      "name": "target",
      "comment": {
       "raw": [
        "Controls where the link should be opened"
       ]
      },
      "typeValue": {
       "raw": "'_blank'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "_blank"
       ]
      },
      "from": "@epam/uui-core:ICanRedirect",
      "required": false
     },
     {
      "uid": 15,
      "name": "rawProps",
      "comment": {
       "raw": [
        "Any HTML attributes (native or 'data-') to put on the underlying component"
       ]
      },
      "typeValue": {
       "raw": "React.HTMLAttributes<HTMLDivElement> & Record<`data-${string}`, string>"
      },
      "from": "@epam/uui-core:IHasRawProps",
      "required": false
     },
     {
      "uid": 16,
      "name": "forwardedRef",
      "comment": {
       "raw": [
        "this ref is passed to the underlying component"
       ]
      },
      "typeValue": {
       "raw": "null | (instance: HTMLDivElement | null) => void | React.MutableRefObject<HTMLDivElement | null>"
      },
      "from": "@epam/uui-core:IHasForwardedRef",
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui-components:MainMenuProps": {
   "summary": {
    "module": "@epam/uui-components",
    "typeName": {
     "name": "MainMenuProps",
     "nameFull": "MainMenuProps"
    },
    "src": "uui-components/src/navigation/MainMenu/MainMenu.tsx",
    "exported": true
   },
   "details": {
    "kind": 263,
    "typeValue": {
     "raw": "MainMenuProps",
     "print": [
      "interface MainMenuProps extends IHasCX, IHasRawProps<React.HTMLAttributes<HTMLDivElement>>, IHasForwardedRef<HTMLDivElement> {",
      "    items?: AdaptiveItemProps[];",
      "    children?: any;",
      "    externalGap?: number;",
      "    appLogoUrl?: string;",
      "    appLogoBgColor?: string;",
      "    customerLogoUrl?: string;",
      "    customerLogoBgColor?: string;",
      "    customerLogoWidth?: number;",
      "    isTransparent?: boolean;",
      "    renderBurger?: (props: {",
      "        onClose: () => void;",
      "    }) => React.ReactNode;",
      "    alwaysShowBurger?: boolean;",
      "    serverBadge?: string;",
      "    tooltipTechInfo?: React.ReactNode;",
      "    logoLink?: Link;",
      "    logoHref?: string;",
      "    logoWidth?: number;",
      "    onLogoClick?: (e: MouseEvent) => any;",
      "    customerLogoLink?: Link;",
      "    customerLogoHref?: string;",
      "    MainMenuDropdown?: React.ComponentType<MainMenuDropdownProps>;",
      "    Burger?: React.ComponentType<BurgerProps>;",
      "}"
     ]
    },
    "props": [
     {
      "uid": 1,
      "name": "items",
      "typeValue": {
       "raw": "{ render: (item: any, hiddenItems?: any[] | undefined, displayedItems?: any[] | undefined) => any; priority: number; collapsedContainer?: boolean | undefined; id: string; }[]"
      },
      "required": false
     },
     {
      "uid": 2,
      "name": "children",
      "typeValue": {
       "raw": "any"
      },
      "required": false
     },
     {
      "uid": 3,
      "name": "externalGap",
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "required": false
     },
     {
      "uid": 4,
      "name": "appLogoUrl",
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "required": false
     },
     {
      "uid": 5,
      "name": "appLogoBgColor",
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "required": false
     },
     {
      "uid": 6,
      "name": "customerLogoUrl",
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "required": false
     },
     {
      "uid": 7,
      "name": "customerLogoBgColor",
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "required": false
     },
     {
      "uid": 8,
      "name": "customerLogoWidth",
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "required": false
     },
     {
      "uid": 9,
      "name": "isTransparent",
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "required": false
     },
     {
      "uid": 10,
      "name": "renderBurger",
      "typeValue": {
       "raw": "(props: { onClose: () => void; }) => React.ReactNode"
      },
      "editor": {
       "type": "component"
      },
      "required": false
     },
     {
      "uid": 11,
      "name": "alwaysShowBurger",
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "required": false
     },
     {
      "uid": 12,
      "name": "serverBadge",
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "required": false
     },
     {
      "uid": 13,
      "name": "tooltipTechInfo",
      "typeValue": {
       "raw": "null | string | number | boolean | React.ReactElement<any, string | React.JSXElementConstructor<any>> | React.ReactFragment | React.ReactPortal"
      },
      "typeValueRef": "@types/react:ReactNode",
      "required": false
     },
     {
      "uid": 14,
      "name": "logoLink",
      "typeValue": {
       "raw": "Link"
      },
      "required": false
     },
     {
      "uid": 15,
      "name": "logoHref",
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "required": false
     },
     {
      "uid": 16,
      "name": "logoWidth",
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "required": false
     },
     {
      "uid": 17,
      "name": "onLogoClick",
      "typeValue": {
       "raw": "(e: React.MouseEvent<Element, MouseEvent>) => any"
      },
      "editor": {
       "type": "func"
      },
      "required": false
     },
     {
      "uid": 18,
      "name": "customerLogoLink",
      "typeValue": {
       "raw": "Link"
      },
      "required": false
     },
     {
      "uid": 19,
      "name": "customerLogoHref",
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "required": false
     },
     {
      "uid": 20,
      "name": "MainMenuDropdown",
      "typeValue": {
       "raw": "React.ComponentClass<MainMenuDropdownProps, any> | React.FunctionComponent<MainMenuDropdownProps>"
      },
      "required": false
     },
     {
      "uid": 21,
      "name": "Burger",
      "typeValue": {
       "raw": "React.ComponentClass<BurgerProps, any> | React.FunctionComponent<BurgerProps>"
      },
      "required": false
     },
     {
      "uid": 22,
      "name": "cx",
      "comment": {
       "raw": [
        "CSS class(es) to put on component's root. See {@link https://github.com/JedWatson/classnames#usage} for details"
       ]
      },
      "typeValue": {
       "raw": "null | string | number | boolean | ClassDictionary | ClassArray"
      },
      "typeValueRef": "@epam/uui-core:ClassValue",
      "from": "@epam/uui-core:IHasCX",
      "required": false
     },
     {
      "uid": 23,
      "name": "rawProps",
      "comment": {
       "raw": [
        "Any HTML attributes (native or 'data-') to put on the underlying component"
       ]
      },
      "typeValue": {
       "raw": "React.HTMLAttributes<HTMLDivElement> & Record<`data-${string}`, string>"
      },
      "from": "@epam/uui-core:IHasRawProps",
      "required": false
     },
     {
      "uid": 24,
      "name": "forwardedRef",
      "comment": {
       "raw": [
        "this ref is passed to the underlying component"
       ]
      },
      "typeValue": {
       "raw": "null | (instance: HTMLDivElement | null) => void | React.MutableRefObject<HTMLDivElement | null>"
      },
      "from": "@epam/uui-core:IHasForwardedRef",
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui-components:MonthSelectionProps": {
   "summary": {
    "module": "@epam/uui-components",
    "typeName": {
     "name": "MonthSelectionProps",
     "nameFull": "MonthSelectionProps"
    },
    "src": "uui-components/src/inputs/DatePicker/MonthSelection.tsx",
    "exported": true
   },
   "details": {
    "kind": 263,
    "typeValue": {
     "raw": "MonthSelectionProps",
     "print": [
      "interface MonthSelectionProps extends IEditable<Dayjs>, IHasCX, IHasRawProps<React.HTMLAttributes<HTMLDivElement>>, IHasForwardedRef<HTMLDivElement> {",
      "    selectedDate: Dayjs;",
      "}"
     ]
    },
    "props": [
     {
      "uid": 1,
      "name": "selectedDate",
      "typeValue": {
       "raw": "Dayjs"
      },
      "required": true
     },
     {
      "uid": 2,
      "name": "value",
      "comment": {
       "raw": [
        "The current value of component"
       ]
      },
      "typeValue": {
       "raw": "Dayjs"
      },
      "from": "@epam/uui-core:IEditable",
      "required": true
     },
     {
      "uid": 3,
      "name": "onValueChange",
      "comment": {
       "raw": [
        "Called when value needs to be changed (usually due to user interaction)"
       ]
      },
      "typeValue": {
       "raw": "(newValue: Dayjs) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IEditable",
      "required": true
     },
     {
      "uid": 4,
      "name": "isInvalid",
      "comment": {
       "raw": [
        "True if component contains invalid input"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:ICanBeInvalid",
      "required": false
     },
     {
      "uid": 5,
      "name": "validationMessage",
      "comment": {
       "raw": [
        "Message describing why the value is invalid"
       ]
      },
      "typeValue": {
       "raw": "null | string | number | boolean | React.ReactElement<any, string | React.JSXElementConstructor<any>> | React.ReactFragment | React.ReactPortal"
      },
      "typeValueRef": "@types/react:ReactNode",
      "from": "@epam/uui-core:ICanBeInvalid",
      "required": false
     },
     {
      "uid": 6,
      "name": "validationProps",
      "comment": {
       "raw": [
        "If T is a complex value (object or array), this property contains validation states of inner items"
       ]
      },
      "typeValue": {
       "raw": "{ [key: string]: ICanBeInvalid; }"
      },
      "from": "@epam/uui-core:ICanBeInvalid",
      "required": false
     },
     {
      "uid": 7,
      "name": "isDisabled",
      "comment": {
       "raw": [
        "Disable editing, and visually de-emphasize value of the component"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:IDisableable",
      "required": false
     },
     {
      "uid": 8,
      "name": "isReadonly",
      "comment": {
       "raw": [
        "Disable editing. Unlike isDisabled, keep component's value readable."
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:ICanBeReadonly",
      "required": false
     },
     {
      "uid": 9,
      "name": "isRequired",
      "comment": {
       "raw": [
        "Marks that component's value is required and shouldn't be empty"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:ICanBeRequired",
      "required": false
     },
     {
      "uid": 10,
      "name": "cx",
      "comment": {
       "raw": [
        "CSS class(es) to put on component's root. See {@link https://github.com/JedWatson/classnames#usage} for details"
       ]
      },
      "typeValue": {
       "raw": "null | string | number | boolean | ClassDictionary | ClassArray"
      },
      "typeValueRef": "@epam/uui-core:ClassValue",
      "from": "@epam/uui-core:IHasCX",
      "required": false
     },
     {
      "uid": 11,
      "name": "rawProps",
      "comment": {
       "raw": [
        "Any HTML attributes (native or 'data-') to put on the underlying component"
       ]
      },
      "typeValue": {
       "raw": "React.HTMLAttributes<HTMLDivElement> & Record<`data-${string}`, string>"
      },
      "from": "@epam/uui-core:IHasRawProps",
      "required": false
     },
     {
      "uid": 12,
      "name": "forwardedRef",
      "comment": {
       "raw": [
        "this ref is passed to the underlying component"
       ]
      },
      "typeValue": {
       "raw": "null | (instance: HTMLDivElement | null) => void | React.MutableRefObject<HTMLDivElement | null>"
      },
      "from": "@epam/uui-core:IHasForwardedRef",
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui-components:NumericInputProps": {
   "summary": {
    "module": "@epam/uui-components",
    "typeName": {
     "name": "NumericInputProps",
     "nameFull": "NumericInputProps"
    },
    "src": "uui-components/src/inputs/NumericInput.tsx",
    "exported": true
   },
   "details": {
    "kind": 263,
    "typeValue": {
     "raw": "NumericInputProps",
     "print": [
      "interface NumericInputProps extends ICanFocus<HTMLInputElement>, IHasCX, IClickable, IDisableable, IEditable<number | null>, IHasPlaceholder, ICanBeReadonly, IAnalyticableOnChange<number>, IHasRawProps<React.HTMLAttributes<HTMLDivElement>>, IHasForwardedRef<HTMLDivElement> {",
      "    /** Maximum value (default is Number.MAX_SAFE_INTEGER) */",
      "    max?: number;",
      "    /**",
      "     * Minimum value (default is 0)",
      "     * @default 0",
      "     */",
      "    min?: number;",
      "    /** Overrides the up/increase icon */",
      "    upIcon?: Icon;",
      "    /** Overrides the down/decrease icon */",
      "    downIcon?: Icon;",
      "    /** Increase/decrease step on up/down icons clicks and up/down arrow keys */",
      "    step?: number;",
      "    /** CSS classes to put directly on the Input element */",
      "    inputCx?: CX;",
      "    /** HTML ID */",
      "    id?: string;",
      "    /** Turn off up/down (increase/decrease) buttons */",
      "    disableArrows?: boolean;",
      "    /** Align text inside the component. Useful for tables (in cell-mode) - to align numbers in table column */",
      "    align?: 'left' | 'right';",
      "    /**",
      "     * Turns off locale-based formatting, standard Number.toString() is used instead",
      "     * @default false",
      "     */",
      "    disableLocaleFormatting?: boolean;",
      "    /** Number formatting options. See #{link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/NumberFormat/NumberFormat} */",
      "    formatOptions?: Intl.NumberFormatOptions;",
      "    /**",
      "     * A function to convert current input value to displayed text.",
      "     * Overrides standard Intl-based formatting.",
      "     * If passed, only maximumFractionDigits considered from formatOptions when both properties provided.",
      "     * Formatting is applied only when input is not focused.",
      "     */",
      "    formatValue?(value: number): string;",
      "}"
     ]
    },
    "props": [
     {
      "uid": 1,
      "name": "max",
      "comment": {
       "raw": [
        "Maximum value (default is Number.MAX_SAFE_INTEGER)"
       ]
      },
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "required": false
     },
     {
      "uid": 2,
      "name": "min",
      "comment": {
       "raw": [
        "Minimum value (default is 0)",
        " @default 0"
       ],
       "tags": {
        "@default": 0
       }
      },
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "required": false
     },
     {
      "uid": 3,
      "name": "upIcon",
      "comment": {
       "raw": [
        "Overrides the up/increase icon"
       ]
      },
      "typeValue": {
       "raw": "Icon"
      },
      "editor": {
       "type": "component"
      },
      "required": false
     },
     {
      "uid": 4,
      "name": "downIcon",
      "comment": {
       "raw": [
        "Overrides the down/decrease icon"
       ]
      },
      "typeValue": {
       "raw": "Icon"
      },
      "editor": {
       "type": "component"
      },
      "required": false
     },
     {
      "uid": 5,
      "name": "step",
      "comment": {
       "raw": [
        "Increase/decrease step on up/down icons clicks and up/down arrow keys"
       ]
      },
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "required": false
     },
     {
      "uid": 6,
      "name": "inputCx",
      "comment": {
       "raw": [
        "CSS classes to put directly on the Input element"
       ]
      },
      "typeValue": {
       "raw": "null | string | number | boolean | ClassDictionary | ClassArray"
      },
      "typeValueRef": "@epam/uui-core:ClassValue",
      "required": false
     },
     {
      "uid": 7,
      "name": "id",
      "comment": {
       "raw": [
        "HTML ID"
       ]
      },
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "required": false
     },
     {
      "uid": 8,
      "name": "disableArrows",
      "comment": {
       "raw": [
        "Turn off up/down (increase/decrease) buttons"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "required": false
     },
     {
      "uid": 9,
      "name": "align",
      "comment": {
       "raw": [
        "Align text inside the component. Useful for tables (in cell-mode) - to align numbers in table column"
       ]
      },
      "typeValue": {
       "raw": "'right' | 'left'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "right",
        "left"
       ]
      },
      "required": false
     },
     {
      "uid": 10,
      "name": "disableLocaleFormatting",
      "comment": {
       "raw": [
        "Turns off locale-based formatting, standard Number.toString() is used instead",
        " @default false"
       ],
       "tags": {
        "@default": false
       }
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "required": false
     },
     {
      "uid": 11,
      "name": "formatOptions",
      "comment": {
       "raw": [
        "Number formatting options. See #{link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/NumberFormat/NumberFormat}"
       ]
      },
      "typeValue": {
       "raw": "Intl.NumberFormatOptions"
      },
      "required": false
     },
     {
      "uid": 12,
      "name": "formatValue",
      "comment": {
       "raw": [
        "A function to convert current input value to displayed text.",
        " Overrides standard Intl-based formatting.",
        " If passed, only maximumFractionDigits considered from formatOptions when both properties provided.",
        " Formatting is applied only when input is not focused."
       ]
      },
      "typeValue": {
       "raw": "(value: number) => string"
      },
      "editor": {
       "type": "func"
      },
      "required": false
     },
     {
      "uid": 13,
      "name": "onFocus",
      "comment": {
       "raw": [
        "Called when component gets input focus"
       ]
      },
      "typeValue": {
       "raw": "(e: React.FocusEvent<HTMLInputElement, Element>) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:ICanFocus",
      "required": false
     },
     {
      "uid": 14,
      "name": "onBlur",
      "comment": {
       "raw": [
        "Called when component looses input focus"
       ]
      },
      "typeValue": {
       "raw": "(e: React.FocusEvent<HTMLInputElement, Element>) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:ICanFocus",
      "required": false
     },
     {
      "uid": 15,
      "name": "cx",
      "comment": {
       "raw": [
        "CSS class(es) to put on component's root. See {@link https://github.com/JedWatson/classnames#usage} for details"
       ]
      },
      "typeValue": {
       "raw": "null | string | number | boolean | ClassDictionary | ClassArray"
      },
      "typeValueRef": "@epam/uui-core:ClassValue",
      "from": "@epam/uui-core:IHasCX",
      "required": false
     },
     {
      "uid": 16,
      "name": "onClick",
      "comment": {
       "raw": [
        "Called when component is clicked"
       ]
      },
      "typeValue": {
       "raw": "(e?: any) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IClickable",
      "required": false
     },
     {
      "uid": 17,
      "name": "isDisabled",
      "comment": {
       "raw": [
        "Disable editing, and visually de-emphasize value of the component"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:IDisableable",
      "required": false
     },
     {
      "uid": 18,
      "name": "value",
      "comment": {
       "raw": [
        "The current value of component"
       ]
      },
      "typeValue": {
       "raw": "null | number"
      },
      "editor": {
       "type": "number"
      },
      "from": "@epam/uui-core:IEditable",
      "required": true
     },
     {
      "uid": 19,
      "name": "onValueChange",
      "comment": {
       "raw": [
        "Called when value needs to be changed (usually due to user interaction)"
       ]
      },
      "typeValue": {
       "raw": "(newValue: number | null) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IEditable",
      "required": true
     },
     {
      "uid": 20,
      "name": "isInvalid",
      "comment": {
       "raw": [
        "True if component contains invalid input"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:ICanBeInvalid",
      "required": false
     },
     {
      "uid": 21,
      "name": "validationMessage",
      "comment": {
       "raw": [
        "Message describing why the value is invalid"
       ]
      },
      "typeValue": {
       "raw": "null | string | number | boolean | React.ReactElement<any, string | React.JSXElementConstructor<any>> | React.ReactFragment | React.ReactPortal"
      },
      "typeValueRef": "@types/react:ReactNode",
      "from": "@epam/uui-core:ICanBeInvalid",
      "required": false
     },
     {
      "uid": 22,
      "name": "validationProps",
      "comment": {
       "raw": [
        "If T is a complex value (object or array), this property contains validation states of inner items"
       ]
      },
      "typeValue": {
       "raw": "{ [key: string]: ICanBeInvalid; }"
      },
      "from": "@epam/uui-core:ICanBeInvalid",
      "required": false
     },
     {
      "uid": 23,
      "name": "isReadonly",
      "comment": {
       "raw": [
        "Disable editing. Unlike isDisabled, keep component's value readable."
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:ICanBeReadonly",
      "required": false
     },
     {
      "uid": 24,
      "name": "isRequired",
      "comment": {
       "raw": [
        "Marks that component's value is required and shouldn't be empty"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:ICanBeRequired",
      "required": false
     },
     {
      "uid": 25,
      "name": "placeholder",
      "comment": {
       "raw": [
        "Placeholder to display when empty"
       ]
      },
      "typeValue": {
       "raw": "any"
      },
      "from": "@epam/uui-core:IHasPlaceholder",
      "required": false
     },
     {
      "uid": 26,
      "name": "getValueChangeAnalyticsEvent",
      "comment": {
       "raw": [
        "Given a value, returns an analytics event to send when component is edited.",
        " See [AnalyticsContext](@link https://uui.epam.com/documents?id=analyticsContext&mode=doc&skin=UUI4_promo&category=contexts)."
       ]
      },
      "typeValue": {
       "raw": "(newValue: number | null, oldValue: number | null) => AnalyticsEvent"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IAnalyticableOnChange",
      "required": false
     },
     {
      "uid": 27,
      "name": "rawProps",
      "comment": {
       "raw": [
        "Any HTML attributes (native or 'data-') to put on the underlying component"
       ]
      },
      "typeValue": {
       "raw": "React.HTMLAttributes<HTMLDivElement> & Record<`data-${string}`, string>"
      },
      "from": "@epam/uui-core:IHasRawProps",
      "required": false
     },
     {
      "uid": 28,
      "name": "forwardedRef",
      "comment": {
       "raw": [
        "this ref is passed to the underlying component"
       ]
      },
      "typeValue": {
       "raw": "null | (instance: HTMLDivElement | null) => void | React.MutableRefObject<HTMLDivElement | null>"
      },
      "from": "@epam/uui-core:IHasForwardedRef",
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui-components:PaginatorParams": {
   "summary": {
    "module": "@epam/uui-components",
    "typeName": {
     "name": "PaginatorParams",
     "nameFull": "PaginatorParams"
    },
    "src": "uui-components/src/widgets/Paginator.tsx",
    "exported": true
   },
   "details": {
    "kind": 263,
    "typeValue": {
     "raw": "PaginatorParams",
     "print": [
      "interface PaginatorParams extends IHasRawProps<React.ReactHTMLElement<HTMLElement>> {",
      "    size: '24' | '30';",
      "    pages: PaginatorItem[];",
      "    goToNext(): void;",
      "    goToPrev(): void;",
      "    isLast: boolean;",
      "    isFirst: boolean;",
      "}"
     ]
    },
    "props": [
     {
      "uid": 1,
      "name": "size",
      "typeValue": {
       "raw": "'24' | '30'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "24",
        "30"
       ]
      },
      "required": true
     },
     {
      "uid": 2,
      "name": "pages",
      "typeValue": {
       "raw": "PaginatorItem[]"
      },
      "required": true
     },
     {
      "uid": 3,
      "name": "goToNext",
      "typeValue": {
       "raw": "() => void"
      },
      "editor": {
       "type": "func"
      },
      "required": true
     },
     {
      "uid": 4,
      "name": "goToPrev",
      "typeValue": {
       "raw": "() => void"
      },
      "editor": {
       "type": "func"
      },
      "required": true
     },
     {
      "uid": 5,
      "name": "isLast",
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "required": true
     },
     {
      "uid": 6,
      "name": "isFirst",
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "required": true
     },
     {
      "uid": 7,
      "name": "rawProps",
      "comment": {
       "raw": [
        "Any HTML attributes (native or 'data-') to put on the underlying component"
       ]
      },
      "typeValue": {
       "raw": "React.ReactHTMLElement<HTMLElement> & Record<`data-${string}`, string>"
      },
      "from": "@epam/uui-core:IHasRawProps",
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui-components:PaginatorProps": {
   "summary": {
    "module": "@epam/uui-components",
    "typeName": {
     "name": "PaginatorProps",
     "nameFull": "PaginatorProps"
    },
    "src": "uui-components/src/widgets/Paginator.tsx",
    "exported": true
   },
   "details": {
    "kind": 263,
    "typeValue": {
     "raw": "PaginatorProps",
     "print": [
      "interface PaginatorProps extends IEditable<number>, IAnalyticableOnChange<number>, IHasRawProps<React.ReactHTMLElement<HTMLElement>> {",
      "    /** Component size */",
      "    size: '24' | '30';",
      "    /** Total number of pages */",
      "    totalPages: number;",
      "    /** Override default rendering, keeping the component behavior */",
      "    render?(params: PaginatorParams): any;",
      "}"
     ]
    },
    "props": [
     {
      "uid": 1,
      "name": "size",
      "comment": {
       "raw": [
        "Component size"
       ]
      },
      "typeValue": {
       "raw": "'24' | '30'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "24",
        "30"
       ]
      },
      "required": true
     },
     {
      "uid": 2,
      "name": "totalPages",
      "comment": {
       "raw": [
        "Total number of pages"
       ]
      },
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "required": true
     },
     {
      "uid": 3,
      "name": "render",
      "comment": {
       "raw": [
        "Override default rendering, keeping the component behavior"
       ]
      },
      "typeValue": {
       "raw": "(params: PaginatorParams) => any"
      },
      "editor": {
       "type": "func"
      },
      "required": false
     },
     {
      "uid": 4,
      "name": "value",
      "comment": {
       "raw": [
        "The current value of component"
       ]
      },
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "from": "@epam/uui-core:IEditable",
      "required": true
     },
     {
      "uid": 5,
      "name": "onValueChange",
      "comment": {
       "raw": [
        "Called when value needs to be changed (usually due to user interaction)"
       ]
      },
      "typeValue": {
       "raw": "(newValue: number) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IEditable",
      "required": true
     },
     {
      "uid": 6,
      "name": "isInvalid",
      "comment": {
       "raw": [
        "True if component contains invalid input"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:ICanBeInvalid",
      "required": false
     },
     {
      "uid": 7,
      "name": "validationMessage",
      "comment": {
       "raw": [
        "Message describing why the value is invalid"
       ]
      },
      "typeValue": {
       "raw": "null | string | number | boolean | React.ReactElement<any, string | React.JSXElementConstructor<any>> | React.ReactFragment | React.ReactPortal"
      },
      "typeValueRef": "@types/react:ReactNode",
      "from": "@epam/uui-core:ICanBeInvalid",
      "required": false
     },
     {
      "uid": 8,
      "name": "validationProps",
      "comment": {
       "raw": [
        "If T is a complex value (object or array), this property contains validation states of inner items"
       ]
      },
      "typeValue": {
       "raw": "{ [key: string]: ICanBeInvalid; }"
      },
      "from": "@epam/uui-core:ICanBeInvalid",
      "required": false
     },
     {
      "uid": 9,
      "name": "isDisabled",
      "comment": {
       "raw": [
        "Disable editing, and visually de-emphasize value of the component"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:IDisableable",
      "required": false
     },
     {
      "uid": 10,
      "name": "isReadonly",
      "comment": {
       "raw": [
        "Disable editing. Unlike isDisabled, keep component's value readable."
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:ICanBeReadonly",
      "required": false
     },
     {
      "uid": 11,
      "name": "isRequired",
      "comment": {
       "raw": [
        "Marks that component's value is required and shouldn't be empty"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:ICanBeRequired",
      "required": false
     },
     {
      "uid": 12,
      "name": "getValueChangeAnalyticsEvent",
      "comment": {
       "raw": [
        "Given a value, returns an analytics event to send when component is edited.",
        " See [AnalyticsContext](@link https://uui.epam.com/documents?id=analyticsContext&mode=doc&skin=UUI4_promo&category=contexts)."
       ]
      },
      "typeValue": {
       "raw": "(newValue: number | null, oldValue: number | null) => AnalyticsEvent"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IAnalyticableOnChange",
      "required": false
     },
     {
      "uid": 13,
      "name": "rawProps",
      "comment": {
       "raw": [
        "Any HTML attributes (native or 'data-') to put on the underlying component"
       ]
      },
      "typeValue": {
       "raw": "React.ReactHTMLElement<HTMLElement> & Record<`data-${string}`, string>"
      },
      "from": "@epam/uui-core:IHasRawProps",
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui-components:PickerBindingHelper": {
   "summary": {
    "module": "@epam/uui-components",
    "typeName": {
     "name": "PickerBindingHelper",
     "nameFull": "PickerBindingHelper<TItem, TId>"
    },
    "src": "uui-components/src/pickers/bindingHelpers.ts",
    "exported": true
   },
   "details": {
    "kind": 263,
    "typeValue": {
     "raw": "PickerBindingHelper<TItem, TId>",
     "print": [
      "interface PickerBindingHelper<TItem, TId> {",
      "    dataSourceStateToValue(dsState: DataSourceState<any, TId>, props: PickerBaseProps<TId, TItem>, dataSource: IDataSource<TItem, TId, any>): any;",
      "    applyValueToDataSourceState(dsState: DataSourceState<any, TId>, value: any, props: PickerBaseProps<TId, TItem>, dataSource: IDataSource<TItem, TId, any>): DataSourceState<any, TId>;",
      "}"
     ]
    },
    "props": [
     {
      "uid": 1,
      "name": "dataSourceStateToValue",
      "typeValue": {
       "raw": "(dsState: DataSourceState<any, TId>, props: PickerBaseProps<TId, TItem>, dataSource: IDataSource<TItem, TId, any>) => any"
      },
      "editor": {
       "type": "func"
      },
      "required": true
     },
     {
      "uid": 2,
      "name": "applyValueToDataSourceState",
      "typeValue": {
       "raw": "(dsState: DataSourceState<any, TId>, value: any, props: PickerBaseProps<TId, TItem>, dataSource: IDataSource<TItem, TId, any>) => DataSourceState<any, TId>"
      },
      "editor": {
       "type": "func"
      },
      "required": true
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui-components:PickerBindingProps": {
   "summary": {
    "module": "@epam/uui-components",
    "typeName": {
     "name": "PickerBindingProps",
     "nameFull": "PickerBindingProps<TItem, TId>"
    },
    "src": "uui-components/src/pickers/bindingHelpers.ts",
    "exported": true
   },
   "details": {
    "kind": 264,
    "typeValue": {
     "raw": "{ selectionMode: 'single'; valueType: 'id'; } & IEditable<TId> | { selectionMode: 'single'; valueType?: 'entity' | undefined; } & IEditable<TItem> | { selectionMode: 'multi'; valueType: 'id'; emptyValue?: [] | null | undefined; } & IEditable<TId[]> | { selectionMode: 'multi'; valueType: 'entity'; emptyValue?: [] | null | undefined; } & IEditable<TItem[]>",
     "print": [
      "type PickerBindingProps<TItem, TId> = SinglePickerProps<TId, TItem> | ArrayPickerProps<TId, TItem>;"
     ]
    },
    "props": [
     {
      "uid": 11,
      "name": "selectionMode",
      "typeValue": {
       "raw": "'single'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "single"
       ]
      },
      "from": "@epam/uui-components:SinglePickerProps",
      "required": true
     },
     {
      "uid": 2,
      "name": "valueType",
      "typeValue": {
       "raw": "'id'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "id"
       ]
      },
      "from": "@epam/uui-components:SinglePickerProps",
      "required": true
     },
     {
      "uid": 3,
      "name": "value",
      "comment": {
       "raw": [
        "The current value of component"
       ]
      },
      "typeValue": {
       "raw": "TId"
      },
      "from": "@epam/uui-core:IEditable",
      "required": true
     },
     {
      "uid": 4,
      "name": "onValueChange",
      "comment": {
       "raw": [
        "Called when value needs to be changed (usually due to user interaction)"
       ]
      },
      "typeValue": {
       "raw": "(newValue: TId) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IEditable",
      "required": true
     },
     {
      "uid": 37,
      "name": "isInvalid",
      "comment": {
       "raw": [
        "True if component contains invalid input"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:ICanBeInvalid",
      "required": false
     },
     {
      "uid": 38,
      "name": "validationMessage",
      "comment": {
       "raw": [
        "Message describing why the value is invalid"
       ]
      },
      "typeValue": {
       "raw": "null | string | number | boolean | React.ReactElement<any, string | React.JSXElementConstructor<any>> | React.ReactFragment | React.ReactPortal"
      },
      "typeValueRef": "@types/react:ReactNode",
      "from": "@epam/uui-core:ICanBeInvalid",
      "required": false
     },
     {
      "uid": 39,
      "name": "validationProps",
      "comment": {
       "raw": [
        "If T is a complex value (object or array), this property contains validation states of inner items"
       ]
      },
      "typeValue": {
       "raw": "{ [key: string]: ICanBeInvalid; }"
      },
      "from": "@epam/uui-core:ICanBeInvalid",
      "required": false
     },
     {
      "uid": 40,
      "name": "isDisabled",
      "comment": {
       "raw": [
        "Disable editing, and visually de-emphasize value of the component"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:IDisableable",
      "required": false
     },
     {
      "uid": 41,
      "name": "isReadonly",
      "comment": {
       "raw": [
        "Disable editing. Unlike isDisabled, keep component's value readable."
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:ICanBeReadonly",
      "required": false
     },
     {
      "uid": 42,
      "name": "isRequired",
      "comment": {
       "raw": [
        "Marks that component's value is required and shouldn't be empty"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:ICanBeRequired",
      "required": false
     },
     {
      "uid": 12,
      "name": "valueType",
      "typeValue": {
       "raw": "'entity'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "entity"
       ]
      },
      "from": "@epam/uui-components:SinglePickerProps",
      "required": false
     },
     {
      "uid": 13,
      "name": "value",
      "comment": {
       "raw": [
        "The current value of component"
       ]
      },
      "typeValue": {
       "raw": "TItem"
      },
      "from": "@epam/uui-core:IEditable",
      "required": true
     },
     {
      "uid": 14,
      "name": "onValueChange",
      "comment": {
       "raw": [
        "Called when value needs to be changed (usually due to user interaction)"
       ]
      },
      "typeValue": {
       "raw": "(newValue: TItem) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IEditable",
      "required": true
     },
     {
      "uid": 32,
      "name": "selectionMode",
      "typeValue": {
       "raw": "'multi'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "multi"
       ]
      },
      "from": "@epam/uui-components:ArrayPickerProps",
      "required": true
     },
     {
      "uid": 22,
      "name": "valueType",
      "typeValue": {
       "raw": "'id'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "id"
       ]
      },
      "from": "@epam/uui-components:ArrayPickerProps",
      "required": true
     },
     {
      "uid": 34,
      "name": "emptyValue",
      "typeValue": {
       "raw": "null | []"
      },
      "from": "@epam/uui-components:ArrayPickerProps",
      "required": false
     },
     {
      "uid": 24,
      "name": "value",
      "comment": {
       "raw": [
        "The current value of component"
       ]
      },
      "typeValue": {
       "raw": "TId[]"
      },
      "from": "@epam/uui-core:IEditable",
      "required": true
     },
     {
      "uid": 25,
      "name": "onValueChange",
      "comment": {
       "raw": [
        "Called when value needs to be changed (usually due to user interaction)"
       ]
      },
      "typeValue": {
       "raw": "(newValue: TId[]) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IEditable",
      "required": true
     },
     {
      "uid": 33,
      "name": "valueType",
      "typeValue": {
       "raw": "'entity'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "entity"
       ]
      },
      "from": "@epam/uui-components:ArrayPickerProps",
      "required": true
     },
     {
      "uid": 35,
      "name": "value",
      "comment": {
       "raw": [
        "The current value of component"
       ]
      },
      "typeValue": {
       "raw": "TItem[]"
      },
      "from": "@epam/uui-core:IEditable",
      "required": true
     },
     {
      "uid": 36,
      "name": "onValueChange",
      "comment": {
       "raw": [
        "Called when value needs to be changed (usually due to user interaction)"
       ]
      },
      "typeValue": {
       "raw": "(newValue: TItem[]) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IEditable",
      "required": true
     }
    ],
    "propsFromUnion": true
   }
  },
  "@epam/uui-components:PickerBindingValueType": {
   "summary": {
    "module": "@epam/uui-components",
    "typeName": {
     "name": "PickerBindingValueType",
     "nameFull": "PickerBindingValueType"
    },
    "src": "uui-components/src/pickers/bindingHelpers.ts",
    "exported": true
   },
   "details": {
    "kind": 264,
    "typeValue": {
     "raw": "'scalar' | 'array'",
     "print": [
      "type PickerBindingValueType = 'scalar' | 'array';"
     ]
    }
   }
  },
  "@epam/uui-components:PickerBodyBaseProps": {
   "summary": {
    "module": "@epam/uui-components",
    "typeName": {
     "name": "PickerBodyBaseProps",
     "nameFull": "PickerBodyBaseProps"
    },
    "src": "uui-components/src/pickers/PickerBodyBase.tsx",
    "exported": true
   },
   "details": {
    "kind": 263,
    "typeValue": {
     "raw": "PickerBodyBaseProps",
     "print": [
      "interface PickerBodyBaseProps extends DataSourceListProps, IEditable<DataSourceState>, IHasRawProps<React.HTMLAttributes<HTMLDivElement>> {",
      "    onKeyDown?(e: React.KeyboardEvent<HTMLElement>): void;",
      "    renderNotFound?: () => React.ReactNode;",
      "    rows: React.ReactNode[];",
      "    scheduleUpdate?: () => void;",
      "    search: IEditable<string>;",
      "    showSearch?: boolean | 'auto';",
      "    fixedBodyPosition?: boolean;",
      "    searchDebounceDelay?: number;",
      "}"
     ]
    },
    "props": [
     {
      "uid": 1,
      "name": "onKeyDown",
      "typeValue": {
       "raw": "(e: React.KeyboardEvent<HTMLElement>) => void"
      },
      "editor": {
       "type": "func"
      },
      "required": false
     },
     {
      "uid": 2,
      "name": "renderNotFound",
      "typeValue": {
       "raw": "() => React.ReactNode"
      },
      "editor": {
       "type": "component"
      },
      "required": false
     },
     {
      "uid": 3,
      "name": "rows",
      "typeValue": {
       "raw": "React.ReactNode[]"
      },
      "required": true
     },
     {
      "uid": 4,
      "name": "scheduleUpdate",
      "typeValue": {
       "raw": "() => void"
      },
      "editor": {
       "type": "func"
      },
      "required": false
     },
     {
      "uid": 5,
      "name": "search",
      "typeValue": {
       "raw": "IEditable<string>"
      },
      "required": true
     },
     {
      "uid": 6,
      "name": "showSearch",
      "typeValue": {
       "raw": "boolean | 'auto'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        false,
        true,
        "auto"
       ]
      },
      "required": false
     },
     {
      "uid": 7,
      "name": "fixedBodyPosition",
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "required": false
     },
     {
      "uid": 8,
      "name": "searchDebounceDelay",
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "required": false
     },
     {
      "uid": 9,
      "name": "selectAll",
      "comment": {
       "raw": [
        "ICheckable object for Select All behavior.",
        " If omitted, Select All action will be absent."
       ]
      },
      "typeValue": {
       "raw": "ICheckable"
      },
      "from": "@epam/uui-core:DataSourceListProps",
      "required": false
     },
     {
      "uid": 10,
      "name": "isReloading",
      "comment": {
       "raw": [
        "Signals that data is reloading on search/sort/filter/reload."
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:DataSourceListProps",
      "required": false
     },
     {
      "uid": 11,
      "name": "rowsCount",
      "comment": {
       "raw": [
        "Count of rows, after applying filter, and folding on tree nodes.",
        " Obsolete! Please switch to exactRowsCount / knownRowsCount"
       ]
      },
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "from": "@epam/uui-core:DataSourceListCounts",
      "required": false
     },
     {
      "uid": 12,
      "name": "exactRowsCount",
      "comment": {
       "raw": [
        "Count of rows, if all rows loaded. Can be null while initial loading, or if API doesn't return count"
       ]
      },
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "from": "@epam/uui-core:DataSourceListCounts",
      "required": false
     },
     {
      "uid": 13,
      "name": "knownRowsCount",
      "comment": {
       "raw": [
        "There's at least knownRowsCount rows. There can be more if list is lazy loaded.",
        " Equals to exactRowsCount if all rows are loaded, or if API returns rows count",
        " Otherwise, exactRowsCount will be null, and knownRowsCount will specify number of loaded rows."
       ]
      },
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "from": "@epam/uui-core:DataSourceListCounts",
      "required": false
     },
     {
      "uid": 14,
      "name": "totalCount",
      "comment": {
       "raw": [
        "Total count of items, before applying the filter. If there's a tree, it counts all nodes, including folded children"
       ]
      },
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "from": "@epam/uui-core:DataSourceListCounts",
      "required": false
     },
     {
      "uid": 15,
      "name": "value",
      "comment": {
       "raw": [
        "The current value of component"
       ]
      },
      "typeValue": {
       "raw": "DataSourceState<Record<string, any>, any>"
      },
      "from": "@epam/uui-core:IEditable",
      "required": true
     },
     {
      "uid": 16,
      "name": "onValueChange",
      "comment": {
       "raw": [
        "Called when value needs to be changed (usually due to user interaction)"
       ]
      },
      "typeValue": {
       "raw": "(newValue: DataSourceState<Record<string, any>, any>) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IEditable",
      "required": true
     },
     {
      "uid": 17,
      "name": "isInvalid",
      "comment": {
       "raw": [
        "True if component contains invalid input"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:ICanBeInvalid",
      "required": false
     },
     {
      "uid": 18,
      "name": "validationMessage",
      "comment": {
       "raw": [
        "Message describing why the value is invalid"
       ]
      },
      "typeValue": {
       "raw": "null | string | number | boolean | React.ReactElement<any, string | React.JSXElementConstructor<any>> | React.ReactFragment | React.ReactPortal"
      },
      "typeValueRef": "@types/react:ReactNode",
      "from": "@epam/uui-core:ICanBeInvalid",
      "required": false
     },
     {
      "uid": 19,
      "name": "validationProps",
      "comment": {
       "raw": [
        "If T is a complex value (object or array), this property contains validation states of inner items"
       ]
      },
      "typeValue": {
       "raw": "{ [key: string]: ICanBeInvalid; }"
      },
      "from": "@epam/uui-core:ICanBeInvalid",
      "required": false
     },
     {
      "uid": 20,
      "name": "isDisabled",
      "comment": {
       "raw": [
        "Disable editing, and visually de-emphasize value of the component"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:IDisableable",
      "required": false
     },
     {
      "uid": 21,
      "name": "isReadonly",
      "comment": {
       "raw": [
        "Disable editing. Unlike isDisabled, keep component's value readable."
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:ICanBeReadonly",
      "required": false
     },
     {
      "uid": 22,
      "name": "isRequired",
      "comment": {
       "raw": [
        "Marks that component's value is required and shouldn't be empty"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:ICanBeRequired",
      "required": false
     },
     {
      "uid": 23,
      "name": "rawProps",
      "comment": {
       "raw": [
        "Any HTML attributes (native or 'data-') to put on the underlying component"
       ]
      },
      "typeValue": {
       "raw": "React.HTMLAttributes<HTMLDivElement> & Record<`data-${string}`, string>"
      },
      "from": "@epam/uui-core:IHasRawProps",
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui-components:PickerBodyValue": {
   "summary": {
    "module": "@epam/uui-components",
    "typeName": {
     "name": "PickerBodyValue",
     "nameFull": "PickerBodyValue<TSelection>"
    },
    "src": "uui-components/src/inputs/DatePicker/DatePickerBodyBase.tsx",
    "exported": true
   },
   "details": {
    "kind": 263,
    "typeValue": {
     "raw": "PickerBodyValue<TSelection>",
     "print": [
      "interface PickerBodyValue<TSelection> {",
      "    selectedDate: TSelection | null;",
      "    displayedDate: Dayjs;",
      "    view: ViewType;",
      "}"
     ]
    },
    "props": [
     {
      "uid": 1,
      "name": "selectedDate",
      "typeValue": {
       "raw": "null | TSelection"
      },
      "required": false
     },
     {
      "uid": 2,
      "name": "displayedDate",
      "typeValue": {
       "raw": "Dayjs"
      },
      "required": true
     },
     {
      "uid": 3,
      "name": "view",
      "typeValue": {
       "raw": "'DAY_SELECTION' | 'MONTH_SELECTION' | 'YEAR_SELECTION'"
      },
      "typeValueRef": "@epam/uui-components:ViewType",
      "editor": {
       "type": "oneOf",
       "options": [
        "DAY_SELECTION",
        "MONTH_SELECTION",
        "YEAR_SELECTION"
       ]
      },
      "required": true
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui-components:PickerInputBaseProps": {
   "summary": {
    "module": "@epam/uui-components",
    "typeName": {
     "name": "PickerInputBaseProps",
     "nameFull": "PickerInputBaseProps<TItem, TId>"
    },
    "src": "uui-components/src/pickers/hooks/types.ts",
    "exported": true
   },
   "details": {
    "kind": 264,
    "typeValue": {
     "raw": "PickerBaseOptions<TItem, TId> & { selectionMode: 'single'; valueType?: 'id' | undefined; } & IEditable<TId> & IAnalyticableOnChange<any> & ICanFocus<HTMLElement> & IHasPlaceholder & IDisableable & ICanBeReadonly & IHasIcon & { editMode?: PickerInputEditMode | undefined; maxItems?: number | undefined; minBodyWidth?: number | undefined; isSingleLine?: boolean | undefined; dropdownPlacement?: Placement | undefined; renderToggler?: ((props: PickerTogglerProps<TItem, TId>) => React.ReactNode) | undefined; searchPosition?: PickerInputSearchPosition | undefined; disableClear?: boolean | undefined; minCharsToSearch?: number | undefined; dropdownHeight?: number | undefined; autoFocus?: boolean | undefined; rawProps?: { input?: (React.HTMLAttributes<HTMLDivElement> & Record<`data-${string}`, string>) | undefined; body?: (React.HTMLAttributes<HTMLDivElement> & Record<`data-${string}`, string>) | undefined; } | undefined; renderFooter?: ((props: PickerInputFooterProps<TItem, TId>) => React.ReactNode) | undefined; fixedBodyPosition?: boolean | undefined; portalTarget?: HTMLElement | undefined; inputCx?: ClassValue; bodyCx?: ClassValue; highlightSearchMatches?: boolean | undefined; searchDebounceDelay?: number | undefined; } | PickerBaseOptions<TItem, TId> & { selectionMode: 'single'; valueType: 'entity'; } & IEditable<TItem> & IAnalyticableOnChange<any> & ICanFocus<HTMLElement> & IHasPlaceholder & IDisableable & ICanBeReadonly & IHasIcon & { editMode?: PickerInputEditMode | undefined; maxItems?: number | undefined; minBodyWidth?: number | undefined; isSingleLine?: boolean | undefined; dropdownPlacement?: Placement | undefined; renderToggler?: ((props: PickerTogglerProps<TItem, TId>) => React.ReactNode) | undefined; searchPosition?: PickerInputSearchPosition | undefined; disableClear?: boolean | undefined; minCharsToSearch?: number | undefined; dropdownHeight?: number | undefined; autoFocus?: boolean | undefined; rawProps?: { input?: (React.HTMLAttributes<HTMLDivElement> & Record<`data-${string}`, string>) | undefined; body?: (React.HTMLAttributes<HTMLDivElement> & Record<`data-${string}`, string>) | undefined; } | undefined; renderFooter?: ((props: PickerInputFooterProps<TItem, TId>) => React.ReactNode) | undefined; fixedBodyPosition?: boolean | undefined; portalTarget?: HTMLElement | undefined; inputCx?: ClassValue; bodyCx?: ClassValue; highlightSearchMatches?: boolean | undefined; searchDebounceDelay?: number | undefined; } | PickerBaseOptions<TItem, TId> & { selectionMode: 'multi'; valueType?: 'id' | undefined; emptyValue?: [] | null | undefined; } & IEditable<TId[]> & IAnalyticableOnChange<any> & ICanFocus<HTMLElement> & IHasPlaceholder & IDisableable & ICanBeReadonly & IHasIcon & { editMode?: PickerInputEditMode | undefined; maxItems?: number | undefined; minBodyWidth?: number | undefined; isSingleLine?: boolean | undefined; dropdownPlacement?: Placement | undefined; renderToggler?: ((props: PickerTogglerProps<TItem, TId>) => React.ReactNode) | undefined; searchPosition?: PickerInputSearchPosition | undefined; disableClear?: boolean | undefined; minCharsToSearch?: number | undefined; dropdownHeight?: number | undefined; autoFocus?: boolean | undefined; rawProps?: { input?: (React.HTMLAttributes<HTMLDivElement> & Record<`data-${string}`, string>) | undefined; body?: (React.HTMLAttributes<HTMLDivElement> & Record<`data-${string}`, string>) | undefined; } | undefined; renderFooter?: ((props: PickerInputFooterProps<TItem, TId>) => React.ReactNode) | undefined; fixedBodyPosition?: boolean | undefined; portalTarget?: HTMLElement | undefined; inputCx?: ClassValue; bodyCx?: ClassValue; highlightSearchMatches?: boolean | undefined; searchDebounceDelay?: number | undefined; } | PickerBaseOptions<TItem, TId> & { selectionMode: 'multi'; valueType: 'entity'; emptyValue?: [] | null | undefined; } & IEditable<TItem[]> & IAnalyticableOnChange<any> & ICanFocus<HTMLElement> & IHasPlaceholder & IDisableable & ICanBeReadonly & IHasIcon & { editMode?: PickerInputEditMode | undefined; maxItems?: number | undefined; minBodyWidth?: number | undefined; isSingleLine?: boolean | undefined; dropdownPlacement?: Placement | undefined; renderToggler?: ((props: PickerTogglerProps<TItem, TId>) => React.ReactNode) | undefined; searchPosition?: PickerInputSearchPosition | undefined; disableClear?: boolean | undefined; minCharsToSearch?: number | undefined; dropdownHeight?: number | undefined; autoFocus?: boolean | undefined; rawProps?: { input?: (React.HTMLAttributes<HTMLDivElement> & Record<`data-${string}`, string>) | undefined; body?: (React.HTMLAttributes<HTMLDivElement> & Record<`data-${string}`, string>) | undefined; } | undefined; renderFooter?: ((props: PickerInputFooterProps<TItem, TId>) => React.ReactNode) | undefined; fixedBodyPosition?: boolean | undefined; portalTarget?: HTMLElement | undefined; inputCx?: ClassValue; bodyCx?: ClassValue; highlightSearchMatches?: boolean | undefined; searchDebounceDelay?: number | undefined; }",
     "print": [
      "type PickerInputBaseProps<TItem, TId> = PickerBaseProps<TItem, TId> & ICanFocus<HTMLElement> & IHasPlaceholder & IDisableable & ICanBeReadonly & IHasIcon & {",
      "    /** dropdown (default) - show selection in dropdown; modal - opens modal window to select items */",
      "    editMode?: PickerInputEditMode;",
      "    /** Maximum number of tags to display in input, before collapsing to \"N items selected\" mode */",
      "    maxItems?: number;",
      "    /** Minimum width of dropdown body */",
      "    minBodyWidth?: number;",
      "    /** Prevents selected items tags to occupy multiple lines  */",
      "    isSingleLine?: boolean;",
      "    /** Dropdown position relative to the input. See [Popper Docs](@link https://popper.js.org/) */",
      "    dropdownPlacement?: Placement;",
      "    /** Replaces default 'toggler' - an input to which Picker attaches dropdown */",
      "    renderToggler?: (props: PickerTogglerProps<TItem, TId>) => React.ReactNode;",
      "    /**",
      "      *  Defines where search field is:",
      "      * 'input' - try to place search inside the toggler (default for single-select),",
      "      * 'body' - put search inside the dropdown (default for multi-select)",
      "      * 'none' - disables search completely",
      "      *",
      "      * Note: 'searchPosition' cannot be 'input' if 'editMode' is 'modal'",
      "      */",
      "    searchPosition?: PickerInputSearchPosition;",
      "    /** Disallow to clear Picker value (cross icon) */",
      "    disableClear?: boolean;",
      "    /**",
      "     * Minimum characters to type, before search will trigger. If input characters number is less then 'minCharsToSearch', it will disable opening dropdown body.",
      "     * By default search triggers after input value is changed.",
      "     *",
      "     * Note: defined minCharsToSearch isn't compatible with searchPosition=body.",
      "     */",
      "    minCharsToSearch?: number;",
      "    /** Overrides default height of the dropdown body */",
      "    dropdownHeight?: number;",
      "    /** Sets focus to component when it's mounted */",
      "    autoFocus?: boolean;",
      "    /** HTML attributes to put directly to the input and body elements */",
      "    rawProps?: {",
      "        input?: IHasRawProps<React.HTMLAttributes<HTMLDivElement>>['rawProps'];",
      "        body?: IHasRawProps<React.HTMLAttributes<HTMLDivElement>>['rawProps'];",
      "    };",
      "    /** Adds custom footer to the dropdown body */",
      "    renderFooter?: (props: PickerInputFooterProps<TItem, TId>) => React.ReactNode;",
      "    /** Disables moving the dropdown body, when togglers is moved. Used in filters panel, to prevent filter selection to 'jump' after adding a filter. */",
      "    fixedBodyPosition?: boolean;",
      "    portalTarget?: HTMLElement;",
      "    /** CSS class(es) to put on input-part component. See https://github.com/JedWatson/classnames#usage for details */",
      "    inputCx?: CX;",
      "    /** CSS class(es) to put on body-part component. See https://github.com/JedWatson/classnames#usage for details */",
      "    bodyCx?: CX;",
      "    /**",
      "     * Enables highlighting of the items' text with search-matching results.",
      "     * */",
      "    highlightSearchMatches?: boolean;",
      "    /** Search input debounce delay in ms. Default value is 500ms */",
      "    searchDebounceDelay?: number;",
      "};"
     ]
    },
    "props": [
     {
      "uid": 151,
      "name": "entityName",
      "comment": {
       "raw": [
        "Name of the entity being selected. Affects wording like \"Please select [entity]\""
       ]
      },
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "from": "@epam/uui-core:PickerBaseOptions",
      "required": false
     },
     {
      "uid": 152,
      "name": "entityPluralName",
      "comment": {
       "raw": [
        "Plural name of the entity being selected. Affects wording like \"X [entities] selected\""
       ]
      },
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "from": "@epam/uui-core:PickerBaseOptions",
      "required": false
     },
     {
      "uid": 153,
      "name": "dataSource",
      "comment": {
       "raw": [
        "Datasource to get data for the picker"
       ]
      },
      "typeValue": {
       "raw": "IDataSource<TItem, TId, any>"
      },
      "from": "@epam/uui-core:PickerBaseOptions",
      "required": true
     },
     {
      "uid": 154,
      "name": "getName",
      "comment": {
       "raw": [
        "A pure function that gets entity name from entity object.",
        "     Default: (item) => item.name."
       ]
      },
      "typeValue": {
       "raw": "(item: TItem) => string"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:PickerBaseOptions",
      "required": false
     },
     {
      "uid": 155,
      "name": "renderRow",
      "comment": {
       "raw": [
        "Allow to customize how each selectable row is rendered. Can be used to add subtitles, avatars, etc."
       ]
      },
      "typeValue": {
       "raw": "(props: DataRowProps<TItem, TId>, dataSourceState: DataSourceState<Record<string, any>, any>) => React.ReactNode"
      },
      "editor": {
       "type": "component"
      },
      "from": "@epam/uui-core:PickerBaseOptions",
      "required": false
     },
     {
      "uid": 156,
      "name": "getRowOptions",
      "comment": {
       "raw": [
        "Gets options for each row. Allow to make rows non-selectable, as well as many other tweaks."
       ]
      },
      "typeValue": {
       "raw": "(item: TItem, index: number) => DataRowOptions<TItem, TId>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:PickerBaseOptions",
      "required": false
     },
     {
      "uid": 157,
      "name": "renderNotFound",
      "comment": {
       "raw": [
        "Overrides the default 'no records found' banner.",
        " The 'search' callback parameter allows to distinguish cases when there's no records at all, and when current search doesn't find anything."
       ]
      },
      "typeValue": {
       "raw": "(props: { search: string; onClose: () => void; }) => React.ReactNode"
      },
      "editor": {
       "type": "component"
      },
      "from": "@epam/uui-core:PickerBaseOptions",
      "required": false
     },
     {
      "uid": 158,
      "name": "emptyValue",
      "comment": {
       "raw": [
        "Defines which value is to set on clear. E.g. you can put an empty array instead of null for empty multi-select Pickers"
       ]
      },
      "typeValue": {
       "raw": "null | []"
      },
      "from": "@epam/uui-core:PickerBaseOptions",
      "required": false
     },
     {
      "uid": 159,
      "name": "sortBy",
      "comment": {
       "raw": [
        "Defines how items should be sorted. By default, items are shown in order they are provided to the DataSource"
       ]
      },
      "typeValue": {
       "raw": "(item: TItem, sorting: SortingOption<any>) => any"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:PickerBaseOptions",
      "required": false
     },
     {
      "uid": 160,
      "name": "filter",
      "comment": {
       "raw": [
        "Additional filter to apply to the DataSource. Can be used to limit selection somehow, w/o re-building the DataSource. E.g. in the linked pickers scenario."
       ]
      },
      "typeValue": {
       "raw": "any"
      },
      "from": "@epam/uui-core:PickerBaseOptions",
      "required": false
     },
     {
      "uid": 161,
      "name": "sorting",
      "comment": {
       "raw": [
        "Defines sorting to pass to the DataSource"
       ]
      },
      "typeValue": {
       "raw": "SortingOption<any>"
      },
      "from": "@epam/uui-core:PickerBaseOptions",
      "required": false
     },
     {
      "uid": 162,
      "name": "cascadeSelection",
      "comment": {
       "raw": [
        "Controls how the selection (checking items) of a parent node affects the selection of its all children, and vice versa.",
        " - false: All nodes are selected independently (default).",
        " - true or 'explicit': Selecting a parent node explicitly selects all its children. Unchecking the last parent's child unchecks its parent.",
        " - 'implicit': Selecting a parent node means that all children are considered checked.",
        "   The user sees all these nodes as checked on the UI, but only the selected parent is visible in the PickerInput tags, and only the checked",
        "   parent is present in the Picker's value or DataSourceState.checked array. When the user unchecks the first child of such a parent,",
        "   its parents become unchecked and all children but the unchecked one become checked, making children's selection explicit. If the last",
        "   unchecked child gets checked, all children from the checked are removed, returning to the implicit state when only the parent is checked."
       ]
      },
      "typeValue": {
       "raw": "boolean | 'implicit' | 'explicit'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        false,
        true,
        "implicit",
        "explicit"
       ]
      },
      "from": "@epam/uui-core:PickerBaseOptions",
      "required": false
     },
     {
      "uid": 163,
      "name": "isFoldedByDefault",
      "comment": {
       "raw": [
        "You can return true for all, or some items to fold them."
       ]
      },
      "typeValue": {
       "raw": "(item: TItem) => boolean"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:PickerBaseOptions",
      "required": false
     },
     {
      "uid": 164,
      "name": "getSearchFields",
      "comment": {
       "raw": [
        "Given an item, should return an array of string fields to search on. By default, the search is performed on item.name field."
       ]
      },
      "typeValue": {
       "raw": "(item: TItem) => string[]"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:PickerBaseOptions",
      "required": false
     },
     {
      "uid": 65,
      "name": "selectionMode",
      "comment": {
       "raw": [
        "If 'single' provided - only one item is selected. In case of 'multi' - multiple items are selected"
       ]
      },
      "typeValue": {
       "raw": "'single'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "single"
       ]
      },
      "from": "@epam/uui-core:SinglePickerProps",
      "required": true
     },
     {
      "uid": 16,
      "name": "valueType",
      "comment": {
       "raw": [
        "Defines what to use in value/onValueChange: 'id' - item id (TId). 'entity' - the item itself (TItem)"
       ]
      },
      "typeValue": {
       "raw": "'id'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "id"
       ]
      },
      "from": "@epam/uui-core:SinglePickerProps",
      "required": false
     },
     {
      "uid": 17,
      "name": "value",
      "comment": {
       "raw": [
        "The current value of component"
       ]
      },
      "typeValue": {
       "raw": "TId"
      },
      "from": "@epam/uui-core:IEditable",
      "required": true
     },
     {
      "uid": 18,
      "name": "onValueChange",
      "comment": {
       "raw": [
        "Called when value needs to be changed (usually due to user interaction)"
       ]
      },
      "typeValue": {
       "raw": "(newValue: TId) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IEditable",
      "required": true
     },
     {
      "uid": 169,
      "name": "isInvalid",
      "comment": {
       "raw": [
        "True if component contains invalid input"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:ICanBeInvalid",
      "required": false
     },
     {
      "uid": 170,
      "name": "validationMessage",
      "comment": {
       "raw": [
        "Message describing why the value is invalid"
       ]
      },
      "typeValue": {
       "raw": "null | string | number | boolean | React.ReactElement<any, string | React.JSXElementConstructor<any>> | React.ReactFragment | React.ReactPortal"
      },
      "typeValueRef": "@types/react:ReactNode",
      "from": "@epam/uui-core:ICanBeInvalid",
      "required": false
     },
     {
      "uid": 171,
      "name": "validationProps",
      "comment": {
       "raw": [
        "If T is a complex value (object or array), this property contains validation states of inner items"
       ]
      },
      "typeValue": {
       "raw": "{ [key: string]: ICanBeInvalid; }"
      },
      "from": "@epam/uui-core:ICanBeInvalid",
      "required": false
     },
     {
      "uid": 172,
      "name": "isDisabled",
      "comment": {
       "raw": [
        "Disable editing, and visually de-emphasize value of the component"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:IDisableable",
      "required": false
     },
     {
      "uid": 173,
      "name": "isReadonly",
      "comment": {
       "raw": [
        "Disable editing. Unlike isDisabled, keep component's value readable."
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:ICanBeReadonly",
      "required": false
     },
     {
      "uid": 174,
      "name": "isRequired",
      "comment": {
       "raw": [
        "Marks that component's value is required and shouldn't be empty"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:ICanBeRequired",
      "required": false
     },
     {
      "uid": 175,
      "name": "getValueChangeAnalyticsEvent",
      "comment": {
       "raw": [
        "Given a value, returns an analytics event to send when component is edited.",
        " See [AnalyticsContext](@link https://uui.epam.com/documents?id=analyticsContext&mode=doc&skin=UUI4_promo&category=contexts)."
       ]
      },
      "typeValue": {
       "raw": "(newValue: any, oldValue: any) => AnalyticsEvent"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IAnalyticableOnChange",
      "required": false
     },
     {
      "uid": 176,
      "name": "onFocus",
      "comment": {
       "raw": [
        "Called when component gets input focus"
       ]
      },
      "typeValue": {
       "raw": "(e: React.FocusEvent<HTMLElement, Element>) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:ICanFocus",
      "required": false
     },
     {
      "uid": 177,
      "name": "onBlur",
      "comment": {
       "raw": [
        "Called when component looses input focus"
       ]
      },
      "typeValue": {
       "raw": "(e: React.FocusEvent<HTMLElement, Element>) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:ICanFocus",
      "required": false
     },
     {
      "uid": 178,
      "name": "placeholder",
      "comment": {
       "raw": [
        "Placeholder to display when empty"
       ]
      },
      "typeValue": {
       "raw": "any"
      },
      "from": "@epam/uui-core:IHasPlaceholder",
      "required": false
     },
     {
      "uid": 179,
      "name": "icon",
      "comment": {
       "raw": [
        "Icon can be a React element (usually an SVG element)"
       ]
      },
      "typeValue": {
       "raw": "Icon"
      },
      "editor": {
       "type": "component"
      },
      "from": "@epam/uui-core:IHasIcon",
      "required": false
     },
     {
      "uid": 180,
      "name": "iconPosition",
      "comment": {
       "raw": [
        "Position of the icon (left of right)"
       ]
      },
      "typeValue": {
       "raw": "'right' | 'left'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "right",
        "left"
       ]
      },
      "from": "@epam/uui-core:IHasIcon",
      "required": false
     },
     {
      "uid": 181,
      "name": "onIconClick",
      "comment": {
       "raw": [
        "Click handler for the icon"
       ]
      },
      "typeValue": {
       "raw": "() => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IHasIcon",
      "required": false
     },
     {
      "uid": 182,
      "name": "editMode",
      "comment": {
       "raw": [
        "dropdown (default) - show selection in dropdown; modal - opens modal window to select items"
       ]
      },
      "typeValue": {
       "raw": "'dropdown' | 'modal'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "dropdown",
        "modal"
       ]
      },
      "required": false
     },
     {
      "uid": 183,
      "name": "maxItems",
      "comment": {
       "raw": [
        "Maximum number of tags to display in input, before collapsing to \"N items selected\" mode"
       ]
      },
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "required": false
     },
     {
      "uid": 184,
      "name": "minBodyWidth",
      "comment": {
       "raw": [
        "Minimum width of dropdown body"
       ]
      },
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "required": false
     },
     {
      "uid": 185,
      "name": "isSingleLine",
      "comment": {
       "raw": [
        "Prevents selected items tags to occupy multiple lines"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "required": false
     },
     {
      "uid": 186,
      "name": "dropdownPlacement",
      "comment": {
       "raw": [
        "Dropdown position relative to the input. See [Popper Docs](@link https://popper.js.org/)"
       ]
      },
      "typeValue": {
       "raw": "'right' | 'left' | 'top' | 'bottom' | 'auto' | 'auto-start' | 'auto-end' | 'top-start' | 'top-end' | 'bottom-start' | 'bottom-end' | 'right-start' | 'right-end' | 'left-start' | 'left-end'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "right",
        "left",
        "top",
        "bottom",
        "auto",
        "auto-start",
        "auto-end",
        "top-start",
        "top-end",
        "bottom-start",
        "bottom-end",
        "right-start",
        "right-end",
        "left-start",
        "left-end"
       ]
      },
      "required": false
     },
     {
      "uid": 187,
      "name": "renderToggler",
      "comment": {
       "raw": [
        "Replaces default 'toggler' - an input to which Picker attaches dropdown"
       ]
      },
      "typeValue": {
       "raw": "(props: PickerTogglerProps<TItem, TId>) => React.ReactNode"
      },
      "editor": {
       "type": "component"
      },
      "required": false
     },
     {
      "uid": 188,
      "name": "searchPosition",
      "comment": {
       "raw": [
        "Defines where search field is:",
        " 'input' - try to place search inside the toggler (default for single-select),",
        " 'body' - put search inside the dropdown (default for multi-select)",
        " 'none' - disables search completely",
        "",
        " Note: 'searchPosition' cannot be 'input' if 'editMode' is 'modal'"
       ]
      },
      "typeValue": {
       "raw": "'input' | 'body' | 'none'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "input",
        "body",
        "none"
       ]
      },
      "required": false
     },
     {
      "uid": 189,
      "name": "disableClear",
      "comment": {
       "raw": [
        "Disallow to clear Picker value (cross icon)"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "required": false
     },
     {
      "uid": 190,
      "name": "minCharsToSearch",
      "comment": {
       "raw": [
        "Minimum characters to type, before search will trigger. If input characters number is less then 'minCharsToSearch', it will disable opening dropdown body.",
        " By default search triggers after input value is changed.",
        "",
        " Note: defined minCharsToSearch isn't compatible with searchPosition=body."
       ]
      },
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "required": false
     },
     {
      "uid": 191,
      "name": "dropdownHeight",
      "comment": {
       "raw": [
        "Overrides default height of the dropdown body"
       ]
      },
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "required": false
     },
     {
      "uid": 192,
      "name": "autoFocus",
      "comment": {
       "raw": [
        "Sets focus to component when it's mounted"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "required": false
     },
     {
      "uid": 193,
      "name": "rawProps",
      "comment": {
       "raw": [
        "HTML attributes to put directly to the input and body elements"
       ]
      },
      "typeValue": {
       "raw": "{ input?: (React.HTMLAttributes<HTMLDivElement> & Record<`data-${string}`, string>) | undefined; body?: (React.HTMLAttributes<HTMLDivElement> & Record<`data-${string}`, string>) | undefined; }"
      },
      "required": false
     },
     {
      "uid": 194,
      "name": "renderFooter",
      "comment": {
       "raw": [
        "Adds custom footer to the dropdown body"
       ]
      },
      "typeValue": {
       "raw": "(props: PickerInputFooterProps<TItem, TId>) => React.ReactNode"
      },
      "editor": {
       "type": "component"
      },
      "required": false
     },
     {
      "uid": 195,
      "name": "fixedBodyPosition",
      "comment": {
       "raw": [
        "Disables moving the dropdown body, when togglers is moved. Used in filters panel, to prevent filter selection to 'jump' after adding a filter."
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "required": false
     },
     {
      "uid": 196,
      "name": "portalTarget",
      "typeValue": {
       "raw": "HTMLElement"
      },
      "required": false
     },
     {
      "uid": 197,
      "name": "inputCx",
      "comment": {
       "raw": [
        "CSS class(es) to put on input-part component. See https://github.com/JedWatson/classnames#usage for details"
       ]
      },
      "typeValue": {
       "raw": "null | string | number | boolean | ClassDictionary | ClassArray"
      },
      "typeValueRef": "@epam/uui-core:ClassValue",
      "required": false
     },
     {
      "uid": 198,
      "name": "bodyCx",
      "comment": {
       "raw": [
        "CSS class(es) to put on body-part component. See https://github.com/JedWatson/classnames#usage for details"
       ]
      },
      "typeValue": {
       "raw": "null | string | number | boolean | ClassDictionary | ClassArray"
      },
      "typeValueRef": "@epam/uui-core:ClassValue",
      "required": false
     },
     {
      "uid": 199,
      "name": "highlightSearchMatches",
      "comment": {
       "raw": [
        "Enables highlighting of the items' text with search-matching results."
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "required": false
     },
     {
      "uid": 200,
      "name": "searchDebounceDelay",
      "comment": {
       "raw": [
        "Search input debounce delay in ms. Default value is 500ms"
       ]
      },
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "required": false
     },
     {
      "uid": 66,
      "name": "valueType",
      "comment": {
       "raw": [
        "Defines what to use in value/onValueChange: 'id' - item id (TId). 'entity' - the item itself (TItem)"
       ]
      },
      "typeValue": {
       "raw": "'entity'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "entity"
       ]
      },
      "from": "@epam/uui-core:SinglePickerProps",
      "required": true
     },
     {
      "uid": 67,
      "name": "value",
      "comment": {
       "raw": [
        "The current value of component"
       ]
      },
      "typeValue": {
       "raw": "TItem"
      },
      "from": "@epam/uui-core:IEditable",
      "required": true
     },
     {
      "uid": 68,
      "name": "onValueChange",
      "comment": {
       "raw": [
        "Called when value needs to be changed (usually due to user interaction)"
       ]
      },
      "typeValue": {
       "raw": "(newValue: TItem) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IEditable",
      "required": true
     },
     {
      "uid": 165,
      "name": "selectionMode",
      "comment": {
       "raw": [
        "If 'single' provided - only one item is selected. In case of 'multi' - multiple items are selected"
       ]
      },
      "typeValue": {
       "raw": "'multi'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "multi"
       ]
      },
      "from": "@epam/uui-core:ArrayPickerProps",
      "required": true
     },
     {
      "uid": 116,
      "name": "valueType",
      "comment": {
       "raw": [
        "Defines what to use in value/onValueChange: 'id' - item id (TId). 'entity' - the item itself (TItem)"
       ]
      },
      "typeValue": {
       "raw": "'id'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "id"
       ]
      },
      "from": "@epam/uui-core:ArrayPickerProps",
      "required": false
     },
     {
      "uid": 117,
      "name": "value",
      "comment": {
       "raw": [
        "The current value of component"
       ]
      },
      "typeValue": {
       "raw": "TId[]"
      },
      "from": "@epam/uui-core:IEditable",
      "required": true
     },
     {
      "uid": 118,
      "name": "onValueChange",
      "comment": {
       "raw": [
        "Called when value needs to be changed (usually due to user interaction)"
       ]
      },
      "typeValue": {
       "raw": "(newValue: TId[]) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IEditable",
      "required": true
     },
     {
      "uid": 166,
      "name": "valueType",
      "comment": {
       "raw": [
        "Defines what to use in value/onValueChange: 'id' - item id (TId). 'entity' - the item itself (TItem)"
       ]
      },
      "typeValue": {
       "raw": "'entity'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "entity"
       ]
      },
      "from": "@epam/uui-core:ArrayPickerProps",
      "required": true
     },
     {
      "uid": 167,
      "name": "value",
      "comment": {
       "raw": [
        "The current value of component"
       ]
      },
      "typeValue": {
       "raw": "TItem[]"
      },
      "from": "@epam/uui-core:IEditable",
      "required": true
     },
     {
      "uid": 168,
      "name": "onValueChange",
      "comment": {
       "raw": [
        "Called when value needs to be changed (usually due to user interaction)"
       ]
      },
      "typeValue": {
       "raw": "(newValue: TItem[]) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IEditable",
      "required": true
     }
    ],
    "propsFromUnion": true
   }
  },
  "@epam/uui-components:PickerListBaseProps": {
   "summary": {
    "module": "@epam/uui-components",
    "typeName": {
     "name": "PickerListBaseProps",
     "nameFull": "PickerListBaseProps<TItem, TId>"
    },
    "src": "uui-components/src/pickers/hooks/types.ts",
    "exported": true
   },
   "details": {
    "kind": 264,
    "typeValue": {
     "raw": "PickerBaseOptions<TItem, TId> & { selectionMode: 'single'; valueType?: 'id' | undefined; } & IEditable<TId> & IAnalyticableOnChange<any> & { maxDefaultItems?: number | undefined; maxTotalItems?: number | undefined; defaultIds?: TId[] | undefined; settingsKey?: string | undefined; sortBy?(item: TItem, sorting: SortingOption<any>): string; } | PickerBaseOptions<TItem, TId> & { selectionMode: 'single'; valueType: 'entity'; } & IEditable<TItem> & IAnalyticableOnChange<any> & { maxDefaultItems?: number | undefined; maxTotalItems?: number | undefined; defaultIds?: TId[] | undefined; settingsKey?: string | undefined; sortBy?(item: TItem, sorting: SortingOption<any>): string; } | PickerBaseOptions<TItem, TId> & { selectionMode: 'multi'; valueType?: 'id' | undefined; emptyValue?: [] | null | undefined; } & IEditable<TId[]> & IAnalyticableOnChange<any> & { maxDefaultItems?: number | undefined; maxTotalItems?: number | undefined; defaultIds?: TId[] | undefined; settingsKey?: string | undefined; sortBy?(item: TItem, sorting: SortingOption<any>): string; } | PickerBaseOptions<TItem, TId> & { selectionMode: 'multi'; valueType: 'entity'; emptyValue?: [] | null | undefined; } & IEditable<TItem[]> & IAnalyticableOnChange<any> & { maxDefaultItems?: number | undefined; maxTotalItems?: number | undefined; defaultIds?: TId[] | undefined; settingsKey?: string | undefined; sortBy?(item: TItem, sorting: SortingOption<any>): string; }",
     "print": [
      "type PickerListBaseProps<TItem, TId> = Exclude<PickerBaseProps<TItem, TId>, 'cascadeSelection'> & {",
      "    /**",
      "     * Number of default items to show initially, when nothing is selected.",
      "     * @default 10",
      "     */",
      "    maxDefaultItems?: number;",
      "    /**",
      "     * Maximum total number of items to show, including selected",
      "     * @default 50",
      "     */",
      "    maxTotalItems?: number;",
      "    /**",
      "     * Ids of items to show first.",
      "     * If not specified, top props.maxDefaultItems will be shown according to the DataSource sorting settings (default is 10)",
      "     */",
      "    defaultIds?: TId[];",
      "    /** If provided, top picks will be automatically adjusted based on last user selection, and stored as user setting under provided key */",
      "    settingsKey?: string;",
      "    sortBy?(item: TItem, sorting: SortingOption): string;",
      "};"
     ]
    },
    "props": [
     {
      "uid": 88,
      "name": "entityName",
      "comment": {
       "raw": [
        "Name of the entity being selected. Affects wording like \"Please select [entity]\""
       ]
      },
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "from": "@epam/uui-core:PickerBaseOptions",
      "required": false
     },
     {
      "uid": 89,
      "name": "entityPluralName",
      "comment": {
       "raw": [
        "Plural name of the entity being selected. Affects wording like \"X [entities] selected\""
       ]
      },
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "from": "@epam/uui-core:PickerBaseOptions",
      "required": false
     },
     {
      "uid": 90,
      "name": "dataSource",
      "comment": {
       "raw": [
        "Datasource to get data for the picker"
       ]
      },
      "typeValue": {
       "raw": "IDataSource<TItem, TId, any>"
      },
      "from": "@epam/uui-core:PickerBaseOptions",
      "required": true
     },
     {
      "uid": 91,
      "name": "getName",
      "comment": {
       "raw": [
        "A pure function that gets entity name from entity object.",
        "     Default: (item) => item.name."
       ]
      },
      "typeValue": {
       "raw": "(item: TItem) => string"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:PickerBaseOptions",
      "required": false
     },
     {
      "uid": 92,
      "name": "renderRow",
      "comment": {
       "raw": [
        "Allow to customize how each selectable row is rendered. Can be used to add subtitles, avatars, etc."
       ]
      },
      "typeValue": {
       "raw": "(props: DataRowProps<TItem, TId>, dataSourceState: DataSourceState<Record<string, any>, any>) => React.ReactNode"
      },
      "editor": {
       "type": "component"
      },
      "from": "@epam/uui-core:PickerBaseOptions",
      "required": false
     },
     {
      "uid": 93,
      "name": "getRowOptions",
      "comment": {
       "raw": [
        "Gets options for each row. Allow to make rows non-selectable, as well as many other tweaks."
       ]
      },
      "typeValue": {
       "raw": "(item: TItem, index: number) => DataRowOptions<TItem, TId>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:PickerBaseOptions",
      "required": false
     },
     {
      "uid": 94,
      "name": "renderNotFound",
      "comment": {
       "raw": [
        "Overrides the default 'no records found' banner.",
        " The 'search' callback parameter allows to distinguish cases when there's no records at all, and when current search doesn't find anything."
       ]
      },
      "typeValue": {
       "raw": "(props: { search: string; onClose: () => void; }) => React.ReactNode"
      },
      "editor": {
       "type": "component"
      },
      "from": "@epam/uui-core:PickerBaseOptions",
      "required": false
     },
     {
      "uid": 95,
      "name": "emptyValue",
      "comment": {
       "raw": [
        "Defines which value is to set on clear. E.g. you can put an empty array instead of null for empty multi-select Pickers"
       ]
      },
      "typeValue": {
       "raw": "null | []"
      },
      "from": "@epam/uui-core:PickerBaseOptions",
      "required": false
     },
     {
      "uid": 96,
      "name": "sortBy",
      "comment": {
       "raw": [
        "Defines how items should be sorted. By default, items are shown in order they are provided to the DataSource"
       ]
      },
      "typeValue": {
       "raw": "((item: TItem, sorting: SortingOption<any>) => any) & ((item: TItem, sorting: SortingOption<any>) => string)"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:PickerBaseOptions",
      "required": false
     },
     {
      "uid": 97,
      "name": "filter",
      "comment": {
       "raw": [
        "Additional filter to apply to the DataSource. Can be used to limit selection somehow, w/o re-building the DataSource. E.g. in the linked pickers scenario."
       ]
      },
      "typeValue": {
       "raw": "any"
      },
      "from": "@epam/uui-core:PickerBaseOptions",
      "required": false
     },
     {
      "uid": 98,
      "name": "sorting",
      "comment": {
       "raw": [
        "Defines sorting to pass to the DataSource"
       ]
      },
      "typeValue": {
       "raw": "SortingOption<any>"
      },
      "from": "@epam/uui-core:PickerBaseOptions",
      "required": false
     },
     {
      "uid": 99,
      "name": "cascadeSelection",
      "comment": {
       "raw": [
        "Controls how the selection (checking items) of a parent node affects the selection of its all children, and vice versa.",
        " - false: All nodes are selected independently (default).",
        " - true or 'explicit': Selecting a parent node explicitly selects all its children. Unchecking the last parent's child unchecks its parent.",
        " - 'implicit': Selecting a parent node means that all children are considered checked.",
        "   The user sees all these nodes as checked on the UI, but only the selected parent is visible in the PickerInput tags, and only the checked",
        "   parent is present in the Picker's value or DataSourceState.checked array. When the user unchecks the first child of such a parent,",
        "   its parents become unchecked and all children but the unchecked one become checked, making children's selection explicit. If the last",
        "   unchecked child gets checked, all children from the checked are removed, returning to the implicit state when only the parent is checked."
       ]
      },
      "typeValue": {
       "raw": "boolean | 'implicit' | 'explicit'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        false,
        true,
        "implicit",
        "explicit"
       ]
      },
      "from": "@epam/uui-core:PickerBaseOptions",
      "required": false
     },
     {
      "uid": 100,
      "name": "isFoldedByDefault",
      "comment": {
       "raw": [
        "You can return true for all, or some items to fold them."
       ]
      },
      "typeValue": {
       "raw": "(item: TItem) => boolean"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:PickerBaseOptions",
      "required": false
     },
     {
      "uid": 101,
      "name": "getSearchFields",
      "comment": {
       "raw": [
        "Given an item, should return an array of string fields to search on. By default, the search is performed on item.name field."
       ]
      },
      "typeValue": {
       "raw": "(item: TItem) => string[]"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:PickerBaseOptions",
      "required": false
     },
     {
      "uid": 44,
      "name": "selectionMode",
      "comment": {
       "raw": [
        "If 'single' provided - only one item is selected. In case of 'multi' - multiple items are selected"
       ]
      },
      "typeValue": {
       "raw": "'single'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "single"
       ]
      },
      "from": "@epam/uui-core:SinglePickerProps",
      "required": true
     },
     {
      "uid": 16,
      "name": "valueType",
      "comment": {
       "raw": [
        "Defines what to use in value/onValueChange: 'id' - item id (TId). 'entity' - the item itself (TItem)"
       ]
      },
      "typeValue": {
       "raw": "'id'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "id"
       ]
      },
      "from": "@epam/uui-core:SinglePickerProps",
      "required": false
     },
     {
      "uid": 17,
      "name": "value",
      "comment": {
       "raw": [
        "The current value of component"
       ]
      },
      "typeValue": {
       "raw": "TId"
      },
      "from": "@epam/uui-core:IEditable",
      "required": true
     },
     {
      "uid": 18,
      "name": "onValueChange",
      "comment": {
       "raw": [
        "Called when value needs to be changed (usually due to user interaction)"
       ]
      },
      "typeValue": {
       "raw": "(newValue: TId) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IEditable",
      "required": true
     },
     {
      "uid": 106,
      "name": "isInvalid",
      "comment": {
       "raw": [
        "True if component contains invalid input"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:ICanBeInvalid",
      "required": false
     },
     {
      "uid": 107,
      "name": "validationMessage",
      "comment": {
       "raw": [
        "Message describing why the value is invalid"
       ]
      },
      "typeValue": {
       "raw": "null | string | number | boolean | React.ReactElement<any, string | React.JSXElementConstructor<any>> | React.ReactFragment | React.ReactPortal"
      },
      "typeValueRef": "@types/react:ReactNode",
      "from": "@epam/uui-core:ICanBeInvalid",
      "required": false
     },
     {
      "uid": 108,
      "name": "validationProps",
      "comment": {
       "raw": [
        "If T is a complex value (object or array), this property contains validation states of inner items"
       ]
      },
      "typeValue": {
       "raw": "{ [key: string]: ICanBeInvalid; }"
      },
      "from": "@epam/uui-core:ICanBeInvalid",
      "required": false
     },
     {
      "uid": 109,
      "name": "isDisabled",
      "comment": {
       "raw": [
        "Disable editing, and visually de-emphasize value of the component"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:IDisableable",
      "required": false
     },
     {
      "uid": 110,
      "name": "isReadonly",
      "comment": {
       "raw": [
        "Disable editing. Unlike isDisabled, keep component's value readable."
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:ICanBeReadonly",
      "required": false
     },
     {
      "uid": 111,
      "name": "isRequired",
      "comment": {
       "raw": [
        "Marks that component's value is required and shouldn't be empty"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:ICanBeRequired",
      "required": false
     },
     {
      "uid": 112,
      "name": "getValueChangeAnalyticsEvent",
      "comment": {
       "raw": [
        "Given a value, returns an analytics event to send when component is edited.",
        " See [AnalyticsContext](@link https://uui.epam.com/documents?id=analyticsContext&mode=doc&skin=UUI4_promo&category=contexts)."
       ]
      },
      "typeValue": {
       "raw": "(newValue: any, oldValue: any) => AnalyticsEvent"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IAnalyticableOnChange",
      "required": false
     },
     {
      "uid": 113,
      "name": "maxDefaultItems",
      "comment": {
       "raw": [
        "Number of default items to show initially, when nothing is selected.",
        " @default 10"
       ],
       "tags": {
        "@default": 10
       }
      },
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "required": false
     },
     {
      "uid": 114,
      "name": "maxTotalItems",
      "comment": {
       "raw": [
        "Maximum total number of items to show, including selected",
        " @default 50"
       ],
       "tags": {
        "@default": 50
       }
      },
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "required": false
     },
     {
      "uid": 115,
      "name": "defaultIds",
      "comment": {
       "raw": [
        "Ids of items to show first.",
        " If not specified, top props.maxDefaultItems will be shown according to the DataSource sorting settings (default is 10)"
       ]
      },
      "typeValue": {
       "raw": "TId[]"
      },
      "required": false
     },
     {
      "uid": 116,
      "name": "settingsKey",
      "comment": {
       "raw": [
        "If provided, top picks will be automatically adjusted based on last user selection, and stored as user setting under provided key"
       ]
      },
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "required": false
     },
     {
      "uid": 45,
      "name": "valueType",
      "comment": {
       "raw": [
        "Defines what to use in value/onValueChange: 'id' - item id (TId). 'entity' - the item itself (TItem)"
       ]
      },
      "typeValue": {
       "raw": "'entity'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "entity"
       ]
      },
      "from": "@epam/uui-core:SinglePickerProps",
      "required": true
     },
     {
      "uid": 46,
      "name": "value",
      "comment": {
       "raw": [
        "The current value of component"
       ]
      },
      "typeValue": {
       "raw": "TItem"
      },
      "from": "@epam/uui-core:IEditable",
      "required": true
     },
     {
      "uid": 47,
      "name": "onValueChange",
      "comment": {
       "raw": [
        "Called when value needs to be changed (usually due to user interaction)"
       ]
      },
      "typeValue": {
       "raw": "(newValue: TItem) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IEditable",
      "required": true
     },
     {
      "uid": 102,
      "name": "selectionMode",
      "comment": {
       "raw": [
        "If 'single' provided - only one item is selected. In case of 'multi' - multiple items are selected"
       ]
      },
      "typeValue": {
       "raw": "'multi'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "multi"
       ]
      },
      "from": "@epam/uui-core:ArrayPickerProps",
      "required": true
     },
     {
      "uid": 74,
      "name": "valueType",
      "comment": {
       "raw": [
        "Defines what to use in value/onValueChange: 'id' - item id (TId). 'entity' - the item itself (TItem)"
       ]
      },
      "typeValue": {
       "raw": "'id'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "id"
       ]
      },
      "from": "@epam/uui-core:ArrayPickerProps",
      "required": false
     },
     {
      "uid": 75,
      "name": "value",
      "comment": {
       "raw": [
        "The current value of component"
       ]
      },
      "typeValue": {
       "raw": "TId[]"
      },
      "from": "@epam/uui-core:IEditable",
      "required": true
     },
     {
      "uid": 76,
      "name": "onValueChange",
      "comment": {
       "raw": [
        "Called when value needs to be changed (usually due to user interaction)"
       ]
      },
      "typeValue": {
       "raw": "(newValue: TId[]) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IEditable",
      "required": true
     },
     {
      "uid": 103,
      "name": "valueType",
      "comment": {
       "raw": [
        "Defines what to use in value/onValueChange: 'id' - item id (TId). 'entity' - the item itself (TItem)"
       ]
      },
      "typeValue": {
       "raw": "'entity'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "entity"
       ]
      },
      "from": "@epam/uui-core:ArrayPickerProps",
      "required": true
     },
     {
      "uid": 104,
      "name": "value",
      "comment": {
       "raw": [
        "The current value of component"
       ]
      },
      "typeValue": {
       "raw": "TItem[]"
      },
      "from": "@epam/uui-core:IEditable",
      "required": true
     },
     {
      "uid": 105,
      "name": "onValueChange",
      "comment": {
       "raw": [
        "Called when value needs to be changed (usually due to user interaction)"
       ]
      },
      "typeValue": {
       "raw": "(newValue: TItem[]) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IEditable",
      "required": true
     }
    ],
    "propsFromUnion": true
   }
  },
  "@epam/uui-components:PickerModalArrayProps": {
   "summary": {
    "module": "@epam/uui-components",
    "typeName": {
     "name": "PickerModalArrayProps",
     "nameFull": "PickerModalArrayProps<TId, TItem>"
    },
    "src": "uui-components/src/pickers/hooks/types.ts",
    "exported": true
   },
   "details": {
    "kind": 264,
    "typeValue": {
     "raw": "{ selectionMode: 'multi'; valueType: 'id'; initialValue: TId[]; } & IModal<TId[], any> | { selectionMode: 'multi'; valueType: 'entity'; initialValue: TItem[]; } & IModal<TItem[], any>",
     "print": [
      "type PickerModalArrayProps<TId, TItem> = ({",
      "    selectionMode: 'multi';",
      "    valueType: 'id';",
      "    initialValue: TId[];",
      "} & IModal<TId[]>) | ({",
      "    selectionMode: 'multi';",
      "    valueType: 'entity';",
      "    initialValue: TItem[];",
      "} & IModal<TItem[]>);"
     ]
    },
    "props": [
     {
      "uid": 11,
      "name": "selectionMode",
      "typeValue": {
       "raw": "'multi'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "multi"
       ]
      },
      "required": true
     },
     {
      "uid": 2,
      "name": "valueType",
      "typeValue": {
       "raw": "'id'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "id"
       ]
      },
      "required": true
     },
     {
      "uid": 3,
      "name": "initialValue",
      "typeValue": {
       "raw": "TId[]"
      },
      "required": true
     },
     {
      "uid": 14,
      "name": "isActive",
      "comment": {
       "raw": [
        "Indicates whether the modal is currently displayed"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:IModal",
      "required": false
     },
     {
      "uid": 15,
      "name": "key",
      "comment": {
       "raw": [
        "Unique key of the modal"
       ]
      },
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "from": "@epam/uui-core:IModal",
      "required": true
     },
     {
      "uid": 16,
      "name": "zIndex",
      "comment": {
       "raw": [
        "Modal zIndex value. Calculated via LayoutContext."
       ]
      },
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "from": "@epam/uui-core:IModal",
      "required": true
     },
     {
      "uid": 7,
      "name": "success",
      "comment": {
       "raw": [
        "Call to successfully close the modal. It's resolves `modalContext.show()` promise with provided value."
       ]
      },
      "typeValue": {
       "raw": "(result: TId[]) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IModal",
      "required": true
     },
     {
      "uid": 18,
      "name": "abort",
      "comment": {
       "raw": [
        "Call to close the modal with abort action. It's rejects `modalContext.show()` promise with provided value."
       ]
      },
      "typeValue": {
       "raw": "(result?: any) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IModal",
      "required": true
     },
     {
      "uid": 19,
      "name": "parameters",
      "comment": {
       "raw": [
        "Parameters that provided via second param of `modalContext.show` method"
       ]
      },
      "typeValue": {
       "raw": "any"
      },
      "from": "@epam/uui-core:IModal",
      "required": false
     },
     {
      "uid": 20,
      "name": "depth",
      "comment": {
       "raw": [
        "Depth of current modal layer"
       ]
      },
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "from": "@epam/uui-core:IModal",
      "required": false
     },
     {
      "uid": 12,
      "name": "valueType",
      "typeValue": {
       "raw": "'entity'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "entity"
       ]
      },
      "required": true
     },
     {
      "uid": 13,
      "name": "initialValue",
      "typeValue": {
       "raw": "TItem[]"
      },
      "required": true
     },
     {
      "uid": 17,
      "name": "success",
      "comment": {
       "raw": [
        "Call to successfully close the modal. It's resolves `modalContext.show()` promise with provided value."
       ]
      },
      "typeValue": {
       "raw": "(result: TItem[]) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IModal",
      "required": true
     }
    ],
    "propsFromUnion": true
   }
  },
  "@epam/uui-components:PickerModalOptions": {
   "summary": {
    "module": "@epam/uui-components",
    "typeName": {
     "name": "PickerModalOptions",
     "nameFull": "PickerModalOptions<TItem, TId>"
    },
    "src": "uui-components/src/pickers/hooks/types.ts",
    "exported": true
   },
   "details": {
    "kind": 263,
    "typeValue": {
     "raw": "PickerModalOptions<TItem, TId>",
     "print": [
      "interface PickerModalOptions<TItem, TId> extends IHasRawProps<React.HTMLAttributes<HTMLDivElement>> {",
      "    renderFilter?(editableFilter: IEditable<any>): React.ReactNode;",
      "    renderFooter?: (props: PickerFooterProps<TItem, TId> & Partial<IModal<any>>) => React.ReactNode;",
      "    /**",
      "     * @default false",
      "     */",
      "    disallowClickOutside?: boolean;",
      "}"
     ]
    },
    "props": [
     {
      "uid": 1,
      "name": "renderFilter",
      "typeValue": {
       "raw": "(editableFilter: IEditable<any>) => React.ReactNode"
      },
      "editor": {
       "type": "component"
      },
      "required": false
     },
     {
      "uid": 2,
      "name": "renderFooter",
      "typeValue": {
       "raw": "(props: PickerFooterProps<TItem, TId> & Partial<IModal<any, any>>) => React.ReactNode"
      },
      "editor": {
       "type": "component"
      },
      "required": false
     },
     {
      "uid": 3,
      "name": "disallowClickOutside",
      "comment": {
       "raw": [
        "@default false"
       ],
       "tags": {
        "@default": false
       }
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "required": false
     },
     {
      "uid": 4,
      "name": "rawProps",
      "comment": {
       "raw": [
        "Any HTML attributes (native or 'data-') to put on the underlying component"
       ]
      },
      "typeValue": {
       "raw": "React.HTMLAttributes<HTMLDivElement> & Record<`data-${string}`, string>"
      },
      "from": "@epam/uui-core:IHasRawProps",
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui-components:PickerModalScalarProps": {
   "summary": {
    "module": "@epam/uui-components",
    "typeName": {
     "name": "PickerModalScalarProps",
     "nameFull": "PickerModalScalarProps<TId, TItem>"
    },
    "src": "uui-components/src/pickers/hooks/types.ts",
    "exported": true
   },
   "details": {
    "kind": 264,
    "typeValue": {
     "raw": "{ selectionMode: 'single'; valueType: 'id'; initialValue: TId; } & IModal<TId, any> | { selectionMode: 'single'; valueType: 'entity'; initialValue: TItem; } & IModal<TItem, any>",
     "print": [
      "type PickerModalScalarProps<TId, TItem> = ({",
      "    selectionMode: 'single';",
      "    valueType: 'id';",
      "    initialValue: TId;",
      "} & IModal<TId>) | ({",
      "    selectionMode: 'single';",
      "    valueType: 'entity';",
      "    initialValue: TItem;",
      "} & IModal<TItem>);"
     ]
    },
    "props": [
     {
      "uid": 11,
      "name": "selectionMode",
      "typeValue": {
       "raw": "'single'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "single"
       ]
      },
      "required": true
     },
     {
      "uid": 2,
      "name": "valueType",
      "typeValue": {
       "raw": "'id'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "id"
       ]
      },
      "required": true
     },
     {
      "uid": 3,
      "name": "initialValue",
      "typeValue": {
       "raw": "TId"
      },
      "required": true
     },
     {
      "uid": 14,
      "name": "isActive",
      "comment": {
       "raw": [
        "Indicates whether the modal is currently displayed"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:IModal",
      "required": false
     },
     {
      "uid": 15,
      "name": "key",
      "comment": {
       "raw": [
        "Unique key of the modal"
       ]
      },
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "from": "@epam/uui-core:IModal",
      "required": true
     },
     {
      "uid": 16,
      "name": "zIndex",
      "comment": {
       "raw": [
        "Modal zIndex value. Calculated via LayoutContext."
       ]
      },
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "from": "@epam/uui-core:IModal",
      "required": true
     },
     {
      "uid": 7,
      "name": "success",
      "comment": {
       "raw": [
        "Call to successfully close the modal. It's resolves `modalContext.show()` promise with provided value."
       ]
      },
      "typeValue": {
       "raw": "(result: TId) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IModal",
      "required": true
     },
     {
      "uid": 18,
      "name": "abort",
      "comment": {
       "raw": [
        "Call to close the modal with abort action. It's rejects `modalContext.show()` promise with provided value."
       ]
      },
      "typeValue": {
       "raw": "(result?: any) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IModal",
      "required": true
     },
     {
      "uid": 19,
      "name": "parameters",
      "comment": {
       "raw": [
        "Parameters that provided via second param of `modalContext.show` method"
       ]
      },
      "typeValue": {
       "raw": "any"
      },
      "from": "@epam/uui-core:IModal",
      "required": false
     },
     {
      "uid": 20,
      "name": "depth",
      "comment": {
       "raw": [
        "Depth of current modal layer"
       ]
      },
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "from": "@epam/uui-core:IModal",
      "required": false
     },
     {
      "uid": 12,
      "name": "valueType",
      "typeValue": {
       "raw": "'entity'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "entity"
       ]
      },
      "required": true
     },
     {
      "uid": 13,
      "name": "initialValue",
      "typeValue": {
       "raw": "TItem"
      },
      "required": true
     },
     {
      "uid": 17,
      "name": "success",
      "comment": {
       "raw": [
        "Call to successfully close the modal. It's resolves `modalContext.show()` promise with provided value."
       ]
      },
      "typeValue": {
       "raw": "(result: TItem) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IModal",
      "required": true
     }
    ],
    "propsFromUnion": true
   }
  },
  "@epam/uui-components:PickerTogglerProps": {
   "summary": {
    "module": "@epam/uui-components",
    "typeName": {
     "name": "PickerTogglerProps",
     "nameFull": "PickerTogglerProps<TItem, TId>"
    },
    "src": "uui-components/src/pickers/PickerToggler.tsx",
    "exported": true
   },
   "details": {
    "kind": 263,
    "typeValue": {
     "raw": "PickerTogglerProps<TItem, TId>",
     "print": [
      "interface PickerTogglerProps<TItem = any, TId = any> extends IPickerToggler<TItem, TId>, ICanFocus<HTMLElement>, IHasIcon, IHasCX, ICanBeReadonly, IHasRawProps<React.HTMLAttributes<HTMLElement>> {",
      "    cancelIcon?: Icon;",
      "    dropdownIcon?: Icon;",
      "    autoFocus?: boolean;",
      "    renderItem?(props: DataRowProps<TItem, TId>): React.ReactNode;",
      "    getName?: (item: TItem) => string;",
      "    entityName?: string;",
      "    maxItems?: number;",
      "    isSingleLine?: boolean;",
      "    pickerMode: 'single' | 'multi';",
      "    searchPosition: 'input' | 'body' | 'none';",
      "    onKeyDown?(e: React.KeyboardEvent<HTMLElement>): void;",
      "    closePickerBody(): void;",
      "    disableSearch?: boolean;",
      "    disableClear?: boolean;",
      "    minCharsToSearch?: number;",
      "}"
     ]
    },
    "props": [
     {
      "uid": 1,
      "name": "cancelIcon",
      "typeValue": {
       "raw": "Icon"
      },
      "editor": {
       "type": "component"
      },
      "required": false
     },
     {
      "uid": 2,
      "name": "dropdownIcon",
      "typeValue": {
       "raw": "Icon"
      },
      "editor": {
       "type": "component"
      },
      "required": false
     },
     {
      "uid": 3,
      "name": "autoFocus",
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "required": false
     },
     {
      "uid": 4,
      "name": "renderItem",
      "typeValue": {
       "raw": "(props: DataRowProps<TItem, TId>) => React.ReactNode"
      },
      "editor": {
       "type": "component"
      },
      "required": false
     },
     {
      "uid": 5,
      "name": "getName",
      "typeValue": {
       "raw": "(item: TItem) => string"
      },
      "editor": {
       "type": "func"
      },
      "required": false
     },
     {
      "uid": 6,
      "name": "entityName",
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "required": false
     },
     {
      "uid": 7,
      "name": "maxItems",
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "required": false
     },
     {
      "uid": 8,
      "name": "isSingleLine",
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "required": false
     },
     {
      "uid": 9,
      "name": "pickerMode",
      "typeValue": {
       "raw": "'multi' | 'single'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "multi",
        "single"
       ]
      },
      "required": true
     },
     {
      "uid": 10,
      "name": "searchPosition",
      "typeValue": {
       "raw": "'input' | 'body' | 'none'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "input",
        "body",
        "none"
       ]
      },
      "required": true
     },
     {
      "uid": 11,
      "name": "onKeyDown",
      "typeValue": {
       "raw": "(e: React.KeyboardEvent<HTMLElement>) => void"
      },
      "editor": {
       "type": "func"
      },
      "required": false
     },
     {
      "uid": 12,
      "name": "closePickerBody",
      "typeValue": {
       "raw": "() => void"
      },
      "editor": {
       "type": "func"
      },
      "required": true
     },
     {
      "uid": 13,
      "name": "disableSearch",
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "required": false
     },
     {
      "uid": 14,
      "name": "disableClear",
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "required": false
     },
     {
      "uid": 15,
      "name": "minCharsToSearch",
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "required": false
     },
     {
      "uid": 16,
      "name": "selection",
      "comment": {
       "raw": [
        "Array of selected rows"
       ]
      },
      "typeValue": {
       "raw": "DataRowProps<TItem, TId>[]"
      },
      "from": "@epam/uui-core:IPickerToggler",
      "required": false
     },
     {
      "uid": 17,
      "name": "selectedRowsCount",
      "comment": {
       "raw": [
        "Amount of selected items"
       ]
      },
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "from": "@epam/uui-core:IPickerToggler",
      "required": false
     },
     {
      "uid": 18,
      "name": "onClear",
      "comment": {
       "raw": [
        "Call to clear toggler value"
       ]
      },
      "typeValue": {
       "raw": "(e?: any) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IBasicPickerToggler",
      "required": false
     },
     {
      "uid": 19,
      "name": "isOpen",
      "comment": {
       "raw": [
        "When isDropdown=true, indicate that dropdown is open with chevron icon"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:IDropdownToggler",
      "required": false
     },
     {
      "uid": 20,
      "name": "isDropdown",
      "comment": {
       "raw": [
        "Shows chevron icon, enabling component to act as dropdown toggler"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:IDropdownToggler",
      "required": false
     },
     {
      "uid": 21,
      "name": "toggleDropdownOpening",
      "comment": {
       "raw": [
        "Called when associated dropdown should open or close"
       ]
      },
      "typeValue": {
       "raw": "(value: boolean) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IDropdownToggler",
      "required": false
     },
     {
      "uid": 22,
      "name": "isInteractedOutside",
      "comment": {
       "raw": [
        "Called when component is interacted outside, to close the dropdown"
       ]
      },
      "typeValue": {
       "raw": "(event: Event) => boolean"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IDropdownToggler",
      "required": false
     },
     {
      "uid": 23,
      "name": "ref",
      "comment": {
       "raw": [
        "Component's ref"
       ]
      },
      "typeValue": {
       "raw": "null | (instance: any) => void | React.RefObject<any>"
      },
      "from": "@epam/uui-core:IDropdownToggler",
      "required": false
     },
     {
      "uid": 24,
      "name": "isDisabled",
      "comment": {
       "raw": [
        "Disables component"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:IDropdownToggler",
      "required": false
     },
     {
      "uid": 25,
      "name": "caption",
      "comment": {
       "raw": [
        "Caption. Can be a string, or React.Elements. Certain components supports minimal markup (<b>,<i>,<a>) in captions."
       ]
      },
      "typeValue": {
       "raw": "any"
      },
      "from": "@epam/uui-core:IHasCaption",
      "required": false
     },
     {
      "uid": 26,
      "name": "onClick",
      "comment": {
       "raw": [
        "Called when component is clicked"
       ]
      },
      "typeValue": {
       "raw": "(e?: any) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IClickable",
      "required": false
     },
     {
      "uid": 27,
      "name": "value",
      "comment": {
       "raw": [
        "The current value of component"
       ]
      },
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "from": "@epam/uui-core:IEditable",
      "required": true
     },
     {
      "uid": 28,
      "name": "onValueChange",
      "comment": {
       "raw": [
        "Called when value needs to be changed (usually due to user interaction)"
       ]
      },
      "typeValue": {
       "raw": "(newValue: string) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IEditable",
      "required": true
     },
     {
      "uid": 29,
      "name": "isInvalid",
      "comment": {
       "raw": [
        "True if component contains invalid input"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:ICanBeInvalid",
      "required": false
     },
     {
      "uid": 30,
      "name": "validationMessage",
      "comment": {
       "raw": [
        "Message describing why the value is invalid"
       ]
      },
      "typeValue": {
       "raw": "null | string | number | boolean | React.ReactElement<any, string | React.JSXElementConstructor<any>> | React.ReactFragment | React.ReactPortal"
      },
      "from": "@epam/uui-core:ICanBeInvalid",
      "required": false
     },
     {
      "uid": 31,
      "name": "validationProps",
      "comment": {
       "raw": [
        "If T is a complex value (object or array), this property contains validation states of inner items"
       ]
      },
      "typeValue": {
       "raw": "{ [key: string]: ICanBeInvalid; }"
      },
      "from": "@epam/uui-core:ICanBeInvalid",
      "required": false
     },
     {
      "uid": 32,
      "name": "isReadonly",
      "comment": {
       "raw": [
        "Disable editing. Unlike isDisabled, keep component's value readable."
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:ICanBeReadonly",
      "required": false
     },
     {
      "uid": 33,
      "name": "isRequired",
      "comment": {
       "raw": [
        "Marks that component's value is required and shouldn't be empty"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:ICanBeRequired",
      "required": false
     },
     {
      "uid": 34,
      "name": "placeholder",
      "comment": {
       "raw": [
        "Placeholder to display when empty"
       ]
      },
      "typeValue": {
       "raw": "any"
      },
      "from": "@epam/uui-core:IHasPlaceholder",
      "required": false
     },
     {
      "uid": 35,
      "name": "onFocus",
      "comment": {
       "raw": [
        "Called when component gets input focus"
       ]
      },
      "typeValue": {
       "raw": "(e: React.FocusEvent<HTMLElement, Element>) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:ICanFocus",
      "required": false
     },
     {
      "uid": 36,
      "name": "onBlur",
      "comment": {
       "raw": [
        "Called when component looses input focus"
       ]
      },
      "typeValue": {
       "raw": "(e: React.FocusEvent<HTMLElement, Element>) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:ICanFocus",
      "required": false
     },
     {
      "uid": 37,
      "name": "icon",
      "comment": {
       "raw": [
        "Icon can be a React element (usually an SVG element)"
       ]
      },
      "typeValue": {
       "raw": "Icon"
      },
      "editor": {
       "type": "component"
      },
      "from": "@epam/uui-core:IHasIcon",
      "required": false
     },
     {
      "uid": 38,
      "name": "iconPosition",
      "comment": {
       "raw": [
        "Position of the icon (left of right)"
       ]
      },
      "typeValue": {
       "raw": "'right' | 'left'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "right",
        "left"
       ]
      },
      "from": "@epam/uui-core:IHasIcon",
      "required": false
     },
     {
      "uid": 39,
      "name": "onIconClick",
      "comment": {
       "raw": [
        "Click handler for the icon"
       ]
      },
      "typeValue": {
       "raw": "() => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IHasIcon",
      "required": false
     },
     {
      "uid": 40,
      "name": "cx",
      "comment": {
       "raw": [
        "CSS class(es) to put on component's root. See {@link https://github.com/JedWatson/classnames#usage} for details"
       ]
      },
      "typeValue": {
       "raw": "null | string | number | boolean | ClassDictionary | ClassArray"
      },
      "typeValueRef": "@epam/uui-core:ClassValue",
      "from": "@epam/uui-core:IHasCX",
      "required": false
     },
     {
      "uid": 41,
      "name": "rawProps",
      "comment": {
       "raw": [
        "Any HTML attributes (native or 'data-') to put on the underlying component"
       ]
      },
      "typeValue": {
       "raw": "React.HTMLAttributes<HTMLElement> & Record<`data-${string}`, string>"
      },
      "from": "@epam/uui-core:IHasRawProps",
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui-components:PortalProps": {
   "summary": {
    "module": "@epam/uui-components",
    "typeName": {
     "name": "PortalProps",
     "nameFull": "PortalProps"
    },
    "src": "uui-components/src/overlays/Portal.tsx",
    "exported": true
   },
   "details": {
    "kind": 263,
    "typeValue": {
     "raw": "PortalProps",
     "print": [
      "interface PortalProps extends IHasChildren {",
      "    target?: HTMLElement;",
      "    key?: string;",
      "}"
     ]
    },
    "props": [
     {
      "uid": 1,
      "name": "target",
      "typeValue": {
       "raw": "HTMLElement"
      },
      "required": false
     },
     {
      "uid": 2,
      "name": "key",
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "required": false
     },
     {
      "uid": 3,
      "name": "children",
      "typeValue": {
       "raw": "null | string | number | boolean | React.ReactElement<any, string | React.JSXElementConstructor<any>> | React.ReactFragment | React.ReactPortal"
      },
      "typeValueRef": "@types/react:ReactNode",
      "from": "@epam/uui-core:IHasChildren",
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui-components:PositionValues": {
   "summary": {
    "module": "@epam/uui-components",
    "typeName": {
     "name": "PositionValues",
     "nameFull": "PositionValues"
    },
    "src": "uui-components/src/layout/ScrollBars.tsx",
    "exported": true
   },
   "details": {
    "kind": 263,
    "typeValue": {
     "raw": "PositionValues",
     "print": [
      "interface PositionValues extends positionValues {",
      "}"
     ]
    },
    "props": [
     {
      "uid": 1,
      "name": "top",
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "from": "node_modules/react-custom-scrollbars-2/index.d.ts:positionValues",
      "required": true
     },
     {
      "uid": 2,
      "name": "left",
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "from": "node_modules/react-custom-scrollbars-2/index.d.ts:positionValues",
      "required": true
     },
     {
      "uid": 3,
      "name": "clientWidth",
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "from": "node_modules/react-custom-scrollbars-2/index.d.ts:positionValues",
      "required": true
     },
     {
      "uid": 4,
      "name": "clientHeight",
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "from": "node_modules/react-custom-scrollbars-2/index.d.ts:positionValues",
      "required": true
     },
     {
      "uid": 5,
      "name": "scrollWidth",
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "from": "node_modules/react-custom-scrollbars-2/index.d.ts:positionValues",
      "required": true
     },
     {
      "uid": 6,
      "name": "scrollHeight",
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "from": "node_modules/react-custom-scrollbars-2/index.d.ts:positionValues",
      "required": true
     },
     {
      "uid": 7,
      "name": "scrollLeft",
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "from": "node_modules/react-custom-scrollbars-2/index.d.ts:positionValues",
      "required": true
     },
     {
      "uid": 8,
      "name": "scrollTop",
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "from": "node_modules/react-custom-scrollbars-2/index.d.ts:positionValues",
      "required": true
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui-components:RadioGroupItem": {
   "summary": {
    "module": "@epam/uui-components",
    "typeName": {
     "name": "RadioGroupItem",
     "nameFull": "RadioGroupItem<TValue>"
    },
    "src": "uui-components/src/layout/RadioGroup.tsx",
    "exported": true
   },
   "details": {
    "kind": 263,
    "typeValue": {
     "raw": "RadioGroupItem<TValue>",
     "print": [
      "interface RadioGroupItem<TValue> extends IDisableable {",
      "    name?: string;",
      "    renderName?: () => React.ReactNode;",
      "    id: TValue;",
      "}"
     ]
    },
    "props": [
     {
      "uid": 1,
      "name": "name",
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "required": false
     },
     {
      "uid": 2,
      "name": "renderName",
      "typeValue": {
       "raw": "() => React.ReactNode"
      },
      "editor": {
       "type": "component"
      },
      "required": false
     },
     {
      "uid": 3,
      "name": "id",
      "typeValue": {
       "raw": "TValue"
      },
      "required": true
     },
     {
      "uid": 4,
      "name": "isDisabled",
      "comment": {
       "raw": [
        "Disable editing, and visually de-emphasize value of the component"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:IDisableable",
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui-components:RadioGroupProps": {
   "summary": {
    "module": "@epam/uui-components",
    "typeName": {
     "name": "RadioGroupProps",
     "nameFull": "RadioGroupProps<TValue>"
    },
    "src": "uui-components/src/layout/RadioGroup.tsx",
    "exported": true
   },
   "details": {
    "kind": 263,
    "typeValue": {
     "raw": "RadioGroupProps<TValue>",
     "print": [
      "interface RadioGroupProps<TValue> extends IHasCX, IEditable<TValue>, IDisableable, IHasDirection, ICanBeReadonly, IHasRawProps<React.FieldsetHTMLAttributes<HTMLFieldSetElement>>, IHasForwardedRef<HTMLFieldSetElement> {",
      "    RadioInput?: React.ComponentType<RadioInputProps>;",
      "    items: RadioGroupItem<TValue>[];",
      "    radioInputProps?: RadioInputProps & {",
      "        key: React.Key;",
      "    };",
      "}"
     ]
    },
    "props": [
     {
      "uid": 1,
      "name": "RadioInput",
      "typeValue": {
       "raw": "React.ComponentClass<RadioInputProps, any> | React.FunctionComponent<RadioInputProps>"
      },
      "required": false
     },
     {
      "uid": 2,
      "name": "items",
      "typeValue": {
       "raw": "RadioGroupItem<TValue>[]"
      },
      "required": true
     },
     {
      "uid": 3,
      "name": "radioInputProps",
      "typeValue": {
       "raw": "RadioInputProps & { key: React.Key; }"
      },
      "required": false
     },
     {
      "uid": 4,
      "name": "cx",
      "comment": {
       "raw": [
        "CSS class(es) to put on component's root. See {@link https://github.com/JedWatson/classnames#usage} for details"
       ]
      },
      "typeValue": {
       "raw": "null | string | number | boolean | ClassDictionary | ClassArray"
      },
      "typeValueRef": "@epam/uui-core:ClassValue",
      "from": "@epam/uui-core:IHasCX",
      "required": false
     },
     {
      "uid": 5,
      "name": "value",
      "comment": {
       "raw": [
        "The current value of component"
       ]
      },
      "typeValue": {
       "raw": "TValue"
      },
      "from": "@epam/uui-core:IEditable",
      "required": true
     },
     {
      "uid": 6,
      "name": "onValueChange",
      "comment": {
       "raw": [
        "Called when value needs to be changed (usually due to user interaction)"
       ]
      },
      "typeValue": {
       "raw": "(newValue: TValue) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IEditable",
      "required": true
     },
     {
      "uid": 7,
      "name": "isInvalid",
      "comment": {
       "raw": [
        "True if component contains invalid input"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:ICanBeInvalid",
      "required": false
     },
     {
      "uid": 8,
      "name": "validationMessage",
      "comment": {
       "raw": [
        "Message describing why the value is invalid"
       ]
      },
      "typeValue": {
       "raw": "null | string | number | boolean | React.ReactElement<any, string | React.JSXElementConstructor<any>> | React.ReactFragment | React.ReactPortal"
      },
      "typeValueRef": "@types/react:ReactNode",
      "from": "@epam/uui-core:ICanBeInvalid",
      "required": false
     },
     {
      "uid": 9,
      "name": "validationProps",
      "comment": {
       "raw": [
        "If T is a complex value (object or array), this property contains validation states of inner items"
       ]
      },
      "typeValue": {
       "raw": "{ [key: string]: ICanBeInvalid; }"
      },
      "from": "@epam/uui-core:ICanBeInvalid",
      "required": false
     },
     {
      "uid": 10,
      "name": "isDisabled",
      "comment": {
       "raw": [
        "Disable editing, and visually de-emphasize value of the component"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:IDisableable",
      "required": false
     },
     {
      "uid": 11,
      "name": "isReadonly",
      "comment": {
       "raw": [
        "Disable editing. Unlike isDisabled, keep component's value readable."
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:ICanBeReadonly",
      "required": false
     },
     {
      "uid": 12,
      "name": "isRequired",
      "comment": {
       "raw": [
        "Marks that component's value is required and shouldn't be empty"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:ICanBeRequired",
      "required": false
     },
     {
      "uid": 13,
      "name": "direction",
      "typeValue": {
       "raw": "'vertical' | 'horizontal'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "vertical",
        "horizontal"
       ]
      },
      "from": "@epam/uui-core:IHasDirection",
      "required": false
     },
     {
      "uid": 14,
      "name": "rawProps",
      "comment": {
       "raw": [
        "Any HTML attributes (native or 'data-') to put on the underlying component"
       ]
      },
      "typeValue": {
       "raw": "React.FieldsetHTMLAttributes<HTMLFieldSetElement> & Record<`data-${string}`, string>"
      },
      "from": "@epam/uui-core:IHasRawProps",
      "required": false
     },
     {
      "uid": 15,
      "name": "forwardedRef",
      "comment": {
       "raw": [
        "this ref is passed to the underlying component"
       ]
      },
      "typeValue": {
       "raw": "null | (instance: HTMLFieldSetElement | null) => void | React.MutableRefObject<HTMLFieldSetElement | null>"
      },
      "from": "@epam/uui-core:IHasForwardedRef",
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui-components:RadioInputProps": {
   "summary": {
    "module": "@epam/uui-components",
    "typeName": {
     "name": "RadioInputProps",
     "nameFull": "RadioInputProps"
    },
    "src": "uui-components/src/inputs/RadioInput.tsx",
    "exported": true
   },
   "details": {
    "kind": 263,
    "typeValue": {
     "raw": "RadioInputProps",
     "print": [
      "interface RadioInputProps extends IHasCX, IDisableable, IEditable<boolean>, IHasLabel, ICanBeReadonly, IAnalyticableOnChange<boolean>, IHasRawProps<React.LabelHTMLAttributes<HTMLLabelElement>>, IHasForwardedRef<HTMLLabelElement> {",
      "    icon?: Icon;",
      "    renderLabel?(): React.ReactNode;",
      "    tabIndex?: number;",
      "    id?: string;",
      "}"
     ]
    },
    "props": [
     {
      "uid": 1,
      "name": "icon",
      "typeValue": {
       "raw": "Icon"
      },
      "editor": {
       "type": "component"
      },
      "required": false
     },
     {
      "uid": 2,
      "name": "renderLabel",
      "typeValue": {
       "raw": "() => React.ReactNode"
      },
      "editor": {
       "type": "component"
      },
      "required": false
     },
     {
      "uid": 3,
      "name": "tabIndex",
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "required": false
     },
     {
      "uid": 4,
      "name": "id",
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "required": false
     },
     {
      "uid": 5,
      "name": "cx",
      "comment": {
       "raw": [
        "CSS class(es) to put on component's root. See {@link https://github.com/JedWatson/classnames#usage} for details"
       ]
      },
      "typeValue": {
       "raw": "null | string | number | boolean | ClassDictionary | ClassArray"
      },
      "typeValueRef": "@epam/uui-core:ClassValue",
      "from": "@epam/uui-core:IHasCX",
      "required": false
     },
     {
      "uid": 6,
      "name": "isDisabled",
      "comment": {
       "raw": [
        "Disable editing, and visually de-emphasize value of the component"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:IDisableable",
      "required": false
     },
     {
      "uid": 7,
      "name": "value",
      "comment": {
       "raw": [
        "The current value of component"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:IEditable",
      "required": true
     },
     {
      "uid": 8,
      "name": "onValueChange",
      "comment": {
       "raw": [
        "Called when value needs to be changed (usually due to user interaction)"
       ]
      },
      "typeValue": {
       "raw": "(newValue: boolean) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IEditable",
      "required": true
     },
     {
      "uid": 9,
      "name": "isInvalid",
      "comment": {
       "raw": [
        "True if component contains invalid input"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:ICanBeInvalid",
      "required": false
     },
     {
      "uid": 10,
      "name": "validationMessage",
      "comment": {
       "raw": [
        "Message describing why the value is invalid"
       ]
      },
      "typeValue": {
       "raw": "null | string | number | boolean | React.ReactElement<any, string | React.JSXElementConstructor<any>> | React.ReactFragment | React.ReactPortal"
      },
      "typeValueRef": "@types/react:ReactNode",
      "from": "@epam/uui-core:ICanBeInvalid",
      "required": false
     },
     {
      "uid": 11,
      "name": "validationProps",
      "comment": {
       "raw": [
        "If T is a complex value (object or array), this property contains validation states of inner items"
       ]
      },
      "typeValue": {
       "raw": "{ [key: string]: ICanBeInvalid; }"
      },
      "from": "@epam/uui-core:ICanBeInvalid",
      "required": false
     },
     {
      "uid": 12,
      "name": "isReadonly",
      "comment": {
       "raw": [
        "Disable editing. Unlike isDisabled, keep component's value readable."
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:ICanBeReadonly",
      "required": false
     },
     {
      "uid": 13,
      "name": "isRequired",
      "comment": {
       "raw": [
        "Marks that component's value is required and shouldn't be empty"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:ICanBeRequired",
      "required": false
     },
     {
      "uid": 14,
      "name": "label",
      "comment": {
       "raw": [
        "Label. Can be a string, or React.Elements. Certain components supports minimal markup (<b>,<i>,<a>) in captions."
       ]
      },
      "typeValue": {
       "raw": "any"
      },
      "from": "@epam/uui-core:IHasLabel",
      "required": false
     },
     {
      "uid": 15,
      "name": "getValueChangeAnalyticsEvent",
      "comment": {
       "raw": [
        "Given a value, returns an analytics event to send when component is edited.",
        " See [AnalyticsContext](@link https://uui.epam.com/documents?id=analyticsContext&mode=doc&skin=UUI4_promo&category=contexts)."
       ]
      },
      "typeValue": {
       "raw": "(newValue: boolean | null, oldValue: boolean | null) => AnalyticsEvent"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IAnalyticableOnChange",
      "required": false
     },
     {
      "uid": 16,
      "name": "rawProps",
      "comment": {
       "raw": [
        "Any HTML attributes (native or 'data-') to put on the underlying component"
       ]
      },
      "typeValue": {
       "raw": "React.LabelHTMLAttributes<HTMLLabelElement> & Record<`data-${string}`, string>"
      },
      "from": "@epam/uui-core:IHasRawProps",
      "required": false
     },
     {
      "uid": 17,
      "name": "forwardedRef",
      "comment": {
       "raw": [
        "this ref is passed to the underlying component"
       ]
      },
      "typeValue": {
       "raw": "null | (instance: HTMLLabelElement | null) => void | React.MutableRefObject<HTMLLabelElement | null>"
      },
      "from": "@epam/uui-core:IHasForwardedRef",
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui-components:RangeSliderState": {
   "summary": {
    "module": "@epam/uui-components",
    "typeName": {
     "name": "RangeSliderState",
     "nameFull": "RangeSliderState"
    },
    "src": "uui-components/src/inputs/Slider/RangeSlider.tsx",
    "exported": true
   },
   "details": {
    "kind": 263,
    "typeValue": {
     "raw": "RangeSliderState",
     "print": [
      "interface RangeSliderState extends SliderBaseState {",
      "    activeHandle: string | null;",
      "}"
     ]
    },
    "props": [
     {
      "uid": 1,
      "name": "activeHandle",
      "typeValue": {
       "raw": "null | string"
      },
      "editor": {
       "type": "string"
      },
      "required": false
     },
     {
      "uid": 2,
      "name": "isActive",
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-components:SliderBaseState",
      "required": true
     },
     {
      "uid": 3,
      "name": "valueWidth",
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "from": "@epam/uui-components:SliderBaseState",
      "required": true
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui-components:RangeSliderValue": {
   "summary": {
    "module": "@epam/uui-components",
    "typeName": {
     "name": "RangeSliderValue",
     "nameFull": "RangeSliderValue"
    },
    "src": "uui-components/src/inputs/Slider/RangeSlider.tsx",
    "exported": true
   },
   "details": {
    "kind": 263,
    "typeValue": {
     "raw": "RangeSliderValue",
     "print": [
      "interface RangeSliderValue {",
      "    from: number;",
      "    to: number;",
      "}"
     ]
    },
    "props": [
     {
      "uid": 1,
      "name": "from",
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "required": true
     },
     {
      "uid": 2,
      "name": "to",
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "required": true
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui-components:RatingProps": {
   "summary": {
    "module": "@epam/uui-components",
    "typeName": {
     "name": "RatingProps",
     "nameFull": "RatingProps"
    },
    "src": "uui-components/src/inputs/Rating/Rating.tsx",
    "exported": true
   },
   "details": {
    "kind": 263,
    "typeValue": {
     "raw": "RatingProps",
     "print": [
      "interface RatingProps extends BaseRatingProps<number> {",
      "    filledStarIcon?: Icon;",
      "    emptyStarIcon?: Icon;",
      "    hideTooltip?: boolean;",
      "    hint?: (value: number) => string;",
      "    Tooltip?: React.ComponentType<TooltipProps>;",
      "}"
     ]
    },
    "props": [
     {
      "uid": 1,
      "name": "filledStarIcon",
      "typeValue": {
       "raw": "Icon"
      },
      "editor": {
       "type": "component"
      },
      "required": false
     },
     {
      "uid": 2,
      "name": "emptyStarIcon",
      "typeValue": {
       "raw": "Icon"
      },
      "editor": {
       "type": "component"
      },
      "required": false
     },
     {
      "uid": 3,
      "name": "hideTooltip",
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "required": false
     },
     {
      "uid": 4,
      "name": "hint",
      "typeValue": {
       "raw": "(value: number) => string"
      },
      "editor": {
       "type": "func"
      },
      "required": false
     },
     {
      "uid": 5,
      "name": "Tooltip",
      "typeValue": {
       "raw": "React.ComponentClass<TooltipProps, any> | React.FunctionComponent<TooltipProps>"
      },
      "required": false
     },
     {
      "uid": 6,
      "name": "from",
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "from": "@epam/uui-components:BaseRatingProps",
      "required": false
     },
     {
      "uid": 7,
      "name": "to",
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "from": "@epam/uui-components:BaseRatingProps",
      "required": false
     },
     {
      "uid": 8,
      "name": "step",
      "comment": {
       "raw": [
        "@default 1"
       ],
       "tags": {
        "@default": 1
       }
      },
      "typeValue": {
       "raw": "0.5 | 1"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        0.5,
        1
       ]
      },
      "from": "@epam/uui-components:BaseRatingProps",
      "required": false
     },
     {
      "uid": 9,
      "name": "renderRating",
      "typeValue": {
       "raw": "(rating: number, markWidth: number, numberOfMarks: number) => React.ReactNode"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-components:BaseRatingProps",
      "required": false
     },
     {
      "uid": 10,
      "name": "cx",
      "comment": {
       "raw": [
        "CSS class(es) to put on component's root. See {@link https://github.com/JedWatson/classnames#usage} for details"
       ]
      },
      "typeValue": {
       "raw": "null | string | number | boolean | ClassDictionary | ClassArray"
      },
      "typeValueRef": "@epam/uui-core:ClassValue",
      "from": "@epam/uui-core:IHasCX",
      "required": false
     },
     {
      "uid": 11,
      "name": "isDisabled",
      "comment": {
       "raw": [
        "Disable editing, and visually de-emphasize value of the component"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:IDisableable",
      "required": false
     },
     {
      "uid": 12,
      "name": "value",
      "comment": {
       "raw": [
        "The current value of component"
       ]
      },
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "from": "@epam/uui-core:IEditable",
      "required": true
     },
     {
      "uid": 13,
      "name": "onValueChange",
      "comment": {
       "raw": [
        "Called when value needs to be changed (usually due to user interaction)"
       ]
      },
      "typeValue": {
       "raw": "(newValue: number) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IEditable",
      "required": true
     },
     {
      "uid": 14,
      "name": "isInvalid",
      "comment": {
       "raw": [
        "True if component contains invalid input"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:ICanBeInvalid",
      "required": false
     },
     {
      "uid": 15,
      "name": "validationMessage",
      "comment": {
       "raw": [
        "Message describing why the value is invalid"
       ]
      },
      "typeValue": {
       "raw": "null | string | number | boolean | React.ReactElement<any, string | React.JSXElementConstructor<any>> | React.ReactFragment | React.ReactPortal"
      },
      "typeValueRef": "@types/react:ReactNode",
      "from": "@epam/uui-core:ICanBeInvalid",
      "required": false
     },
     {
      "uid": 16,
      "name": "validationProps",
      "comment": {
       "raw": [
        "If T is a complex value (object or array), this property contains validation states of inner items"
       ]
      },
      "typeValue": {
       "raw": "{ [key: string]: ICanBeInvalid; }"
      },
      "from": "@epam/uui-core:ICanBeInvalid",
      "required": false
     },
     {
      "uid": 17,
      "name": "isReadonly",
      "comment": {
       "raw": [
        "Disable editing. Unlike isDisabled, keep component's value readable."
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:ICanBeReadonly",
      "required": false
     },
     {
      "uid": 18,
      "name": "isRequired",
      "comment": {
       "raw": [
        "Marks that component's value is required and shouldn't be empty"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:ICanBeRequired",
      "required": false
     },
     {
      "uid": 19,
      "name": "rawProps",
      "comment": {
       "raw": [
        "Any HTML attributes (native or 'data-') to put on the underlying component"
       ]
      },
      "typeValue": {
       "raw": "React.HTMLAttributes<HTMLDivElement> & Record<`data-${string}`, string>"
      },
      "from": "@epam/uui-core:IHasRawProps",
      "required": false
     },
     {
      "uid": 20,
      "name": "forwardedRef",
      "comment": {
       "raw": [
        "this ref is passed to the underlying component"
       ]
      },
      "typeValue": {
       "raw": "null | (instance: HTMLDivElement | null) => void | React.MutableRefObject<HTMLDivElement | null>"
      },
      "from": "@epam/uui-core:IHasForwardedRef",
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui-components:RichTextViewProps": {
   "summary": {
    "module": "@epam/uui-components",
    "typeName": {
     "name": "RichTextViewProps",
     "nameFull": "RichTextViewProps"
    },
    "src": "uui-components/src/RichTextView.tsx",
    "exported": true
   },
   "details": {
    "kind": 263,
    "typeValue": {
     "raw": "RichTextViewProps",
     "print": [
      "interface RichTextViewProps extends IHasCX, IHasChildren, IHasRawProps<React.HTMLAttributes<HTMLDivElement>> {",
      "    htmlContent?: any;",
      "}"
     ]
    },
    "props": [
     {
      "uid": 1,
      "name": "htmlContent",
      "typeValue": {
       "raw": "any"
      },
      "required": false
     },
     {
      "uid": 2,
      "name": "cx",
      "comment": {
       "raw": [
        "CSS class(es) to put on component's root. See {@link https://github.com/JedWatson/classnames#usage} for details"
       ]
      },
      "typeValue": {
       "raw": "null | string | number | boolean | ClassDictionary | ClassArray"
      },
      "typeValueRef": "@epam/uui-core:ClassValue",
      "from": "@epam/uui-core:IHasCX",
      "required": false
     },
     {
      "uid": 3,
      "name": "children",
      "typeValue": {
       "raw": "null | string | number | boolean | React.ReactElement<any, string | React.JSXElementConstructor<any>> | React.ReactFragment | React.ReactPortal"
      },
      "typeValueRef": "@types/react:ReactNode",
      "from": "@epam/uui-core:IHasChildren",
      "required": false
     },
     {
      "uid": 4,
      "name": "rawProps",
      "comment": {
       "raw": [
        "Any HTML attributes (native or 'data-') to put on the underlying component"
       ]
      },
      "typeValue": {
       "raw": "React.HTMLAttributes<HTMLDivElement> & Record<`data-${string}`, string>"
      },
      "from": "@epam/uui-core:IHasRawProps",
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui-components:ScrollbarProps": {
   "summary": {
    "module": "@epam/uui-components",
    "typeName": {
     "name": "ScrollbarProps",
     "nameFull": "ScrollbarProps"
    },
    "src": "uui-components/src/layout/ScrollBars.tsx",
    "exported": true
   },
   "details": {
    "kind": 263,
    "typeValue": {
     "raw": "ScrollbarProps",
     "print": [
      "interface ScrollbarProps extends IHasCX, Omit<LibScrollbarProps, 'ref'>, IHasRawProps<Scrollbars> {",
      "    hasTopShadow?: boolean;",
      "    hasBottomShadow?: boolean;",
      "    renderView?: (props: any) => React.ReactElement;",
      "}"
     ]
    },
    "props": [
     {
      "uid": 1,
      "name": "hasTopShadow",
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "required": false
     },
     {
      "uid": 2,
      "name": "hasBottomShadow",
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "required": false
     },
     {
      "uid": 3,
      "name": "renderView",
      "typeValue": {
       "raw": "(props: any) => React.ReactElement<any, string | React.JSXElementConstructor<any>>"
      },
      "editor": {
       "type": "component"
      },
      "required": false
     },
     {
      "uid": 4,
      "name": "cx",
      "comment": {
       "raw": [
        "CSS class(es) to put on component's root. See {@link https://github.com/JedWatson/classnames#usage} for details"
       ]
      },
      "typeValue": {
       "raw": "null | string | number | boolean | ClassDictionary | ClassArray"
      },
      "typeValueRef": "@epam/uui-core:ClassValue",
      "from": "@epam/uui-core:IHasCX",
      "required": false
     },
     {
      "uid": 5,
      "name": "id",
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "from": "@types/react:HTMLAttributes",
      "required": false
     },
     {
      "uid": 6,
      "name": "tabIndex",
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "from": "@types/react:HTMLAttributes",
      "required": false
     },
     {
      "uid": 7,
      "name": "hidden",
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@types/react:HTMLAttributes",
      "required": false
     },
     {
      "uid": 8,
      "name": "start",
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "from": "@types/react:AllHTMLAttributes",
      "required": false
     },
     {
      "uid": 9,
      "name": "value",
      "typeValue": {
       "raw": "string | number | readonly string[]"
      },
      "from": "@types/react:AllHTMLAttributes",
      "required": false
     },
     {
      "uid": 10,
      "name": "color",
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "from": "@types/react:HTMLAttributes",
      "required": false
     },
     {
      "uid": 11,
      "name": "form",
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "from": "@types/react:AllHTMLAttributes",
      "required": false
     },
     {
      "uid": 12,
      "name": "list",
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "from": "@types/react:AllHTMLAttributes",
      "required": false
     },
     {
      "uid": 13,
      "name": "step",
      "typeValue": {
       "raw": "string | number"
      },
      "from": "@types/react:AllHTMLAttributes",
      "required": false
     },
     {
      "uid": 14,
      "name": "key",
      "typeValue": {
       "raw": "null | string | number"
      },
      "from": "@types/react:Attributes",
      "required": false
     },
     {
      "uid": 15,
      "name": "placeholder",
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "from": "@types/react:AllHTMLAttributes",
      "required": false
     },
     {
      "uid": 16,
      "name": "onScroll",
      "typeValue": {
       "raw": "React.UIEventHandler<any>"
      },
      "editor": {
       "type": "func"
      },
      "from": "node_modules/react-custom-scrollbars-2/index.d.ts:ScrollbarProps",
      "required": false
     },
     {
      "uid": 17,
      "name": "onScrollFrame",
      "typeValue": {
       "raw": "(values: ReactCustomScrollbars.positionValues) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "node_modules/react-custom-scrollbars-2/index.d.ts:ScrollbarProps",
      "required": false
     },
     {
      "uid": 18,
      "name": "onScrollStart",
      "typeValue": {
       "raw": "() => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "node_modules/react-custom-scrollbars-2/index.d.ts:ScrollbarProps",
      "required": false
     },
     {
      "uid": 19,
      "name": "onScrollStop",
      "typeValue": {
       "raw": "() => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "node_modules/react-custom-scrollbars-2/index.d.ts:ScrollbarProps",
      "required": false
     },
     {
      "uid": 20,
      "name": "onUpdate",
      "typeValue": {
       "raw": "(values: ReactCustomScrollbars.positionValues) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "node_modules/react-custom-scrollbars-2/index.d.ts:ScrollbarProps",
      "required": false
     },
     {
      "uid": 21,
      "name": "renderTrackHorizontal",
      "typeValue": {
       "raw": "React.ComponentClass<any, any> | React.FunctionComponent<any>"
      },
      "from": "node_modules/react-custom-scrollbars-2/index.d.ts:ScrollbarProps",
      "required": false
     },
     {
      "uid": 22,
      "name": "renderTrackVertical",
      "typeValue": {
       "raw": "React.ComponentClass<any, any> | React.FunctionComponent<any>"
      },
      "from": "node_modules/react-custom-scrollbars-2/index.d.ts:ScrollbarProps",
      "required": false
     },
     {
      "uid": 23,
      "name": "renderThumbHorizontal",
      "typeValue": {
       "raw": "React.ComponentClass<any, any> | React.FunctionComponent<any>"
      },
      "from": "node_modules/react-custom-scrollbars-2/index.d.ts:ScrollbarProps",
      "required": false
     },
     {
      "uid": 24,
      "name": "renderThumbVertical",
      "typeValue": {
       "raw": "React.ComponentClass<any, any> | React.FunctionComponent<any>"
      },
      "from": "node_modules/react-custom-scrollbars-2/index.d.ts:ScrollbarProps",
      "required": false
     },
     {
      "uid": 25,
      "name": "tagName",
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "from": "node_modules/react-custom-scrollbars-2/index.d.ts:ScrollbarProps",
      "required": false
     },
     {
      "uid": 26,
      "name": "hideTracksWhenNotNeeded",
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "node_modules/react-custom-scrollbars-2/index.d.ts:ScrollbarProps",
      "required": false
     },
     {
      "uid": 27,
      "name": "autoHide",
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "node_modules/react-custom-scrollbars-2/index.d.ts:ScrollbarProps",
      "required": false
     },
     {
      "uid": 28,
      "name": "autoHideTimeout",
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "from": "node_modules/react-custom-scrollbars-2/index.d.ts:ScrollbarProps",
      "required": false
     },
     {
      "uid": 29,
      "name": "autoHideDuration",
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "from": "node_modules/react-custom-scrollbars-2/index.d.ts:ScrollbarProps",
      "required": false
     },
     {
      "uid": 30,
      "name": "thumbSize",
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "from": "node_modules/react-custom-scrollbars-2/index.d.ts:ScrollbarProps",
      "required": false
     },
     {
      "uid": 31,
      "name": "thumbMinSize",
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "from": "node_modules/react-custom-scrollbars-2/index.d.ts:ScrollbarProps",
      "required": false
     },
     {
      "uid": 32,
      "name": "universal",
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "node_modules/react-custom-scrollbars-2/index.d.ts:ScrollbarProps",
      "required": false
     },
     {
      "uid": 33,
      "name": "autoHeight",
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "node_modules/react-custom-scrollbars-2/index.d.ts:ScrollbarProps",
      "required": false
     },
     {
      "uid": 34,
      "name": "autoHeightMin",
      "typeValue": {
       "raw": "string | number"
      },
      "from": "node_modules/react-custom-scrollbars-2/index.d.ts:ScrollbarProps",
      "required": false
     },
     {
      "uid": 35,
      "name": "autoHeightMax",
      "typeValue": {
       "raw": "string | number"
      },
      "from": "node_modules/react-custom-scrollbars-2/index.d.ts:ScrollbarProps",
      "required": false
     },
     {
      "uid": 36,
      "name": "style",
      "typeValue": {
       "raw": "React.CSSProperties"
      },
      "from": "node_modules/react-custom-scrollbars-2/index.d.ts:ScrollbarProps",
      "required": false
     },
     {
      "uid": 37,
      "name": "accept",
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "from": "@types/react:AllHTMLAttributes",
      "required": false
     },
     {
      "uid": 38,
      "name": "acceptCharset",
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "from": "@types/react:AllHTMLAttributes",
      "required": false
     },
     {
      "uid": 39,
      "name": "action",
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "from": "@types/react:AllHTMLAttributes",
      "required": false
     },
     {
      "uid": 40,
      "name": "allowFullScreen",
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@types/react:AllHTMLAttributes",
      "required": false
     },
     {
      "uid": 41,
      "name": "allowTransparency",
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@types/react:AllHTMLAttributes",
      "required": false
     },
     {
      "uid": 42,
      "name": "alt",
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "from": "@types/react:AllHTMLAttributes",
      "required": false
     },
     {
      "uid": 43,
      "name": "as",
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "from": "@types/react:AllHTMLAttributes",
      "required": false
     },
     {
      "uid": 44,
      "name": "async",
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@types/react:AllHTMLAttributes",
      "required": false
     },
     {
      "uid": 45,
      "name": "autoComplete",
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "from": "@types/react:AllHTMLAttributes",
      "required": false
     },
     {
      "uid": 46,
      "name": "autoFocus",
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@types/react:AllHTMLAttributes",
      "required": false
     },
     {
      "uid": 47,
      "name": "autoPlay",
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@types/react:AllHTMLAttributes",
      "required": false
     },
     {
      "uid": 48,
      "name": "capture",
      "typeValue": {
       "raw": "boolean | 'user' | 'environment'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        false,
        true,
        "user",
        "environment"
       ]
      },
      "from": "@types/react:AllHTMLAttributes",
      "required": false
     },
     {
      "uid": 49,
      "name": "cellPadding",
      "typeValue": {
       "raw": "string | number"
      },
      "from": "@types/react:AllHTMLAttributes",
      "required": false
     },
     {
      "uid": 50,
      "name": "cellSpacing",
      "typeValue": {
       "raw": "string | number"
      },
      "from": "@types/react:AllHTMLAttributes",
      "required": false
     },
     {
      "uid": 51,
      "name": "charSet",
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "from": "@types/react:AllHTMLAttributes",
      "required": false
     },
     {
      "uid": 52,
      "name": "challenge",
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "from": "@types/react:AllHTMLAttributes",
      "required": false
     },
     {
      "uid": 53,
      "name": "checked",
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@types/react:AllHTMLAttributes",
      "required": false
     },
     {
      "uid": 54,
      "name": "cite",
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "from": "@types/react:AllHTMLAttributes",
      "required": false
     },
     {
      "uid": 55,
      "name": "classID",
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "from": "@types/react:AllHTMLAttributes",
      "required": false
     },
     {
      "uid": 56,
      "name": "cols",
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "from": "@types/react:AllHTMLAttributes",
      "required": false
     },
     {
      "uid": 57,
      "name": "colSpan",
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "from": "@types/react:AllHTMLAttributes",
      "required": false
     },
     {
      "uid": 58,
      "name": "content",
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "from": "@types/react:AllHTMLAttributes",
      "required": false
     },
     {
      "uid": 59,
      "name": "controls",
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@types/react:AllHTMLAttributes",
      "required": false
     },
     {
      "uid": 60,
      "name": "coords",
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "from": "@types/react:AllHTMLAttributes",
      "required": false
     },
     {
      "uid": 61,
      "name": "crossOrigin",
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "from": "@types/react:AllHTMLAttributes",
      "required": false
     },
     {
      "uid": 62,
      "name": "data",
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "from": "@types/react:AllHTMLAttributes",
      "required": false
     },
     {
      "uid": 63,
      "name": "dateTime",
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "from": "@types/react:AllHTMLAttributes",
      "required": false
     },
     {
      "uid": 64,
      "name": "default",
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@types/react:AllHTMLAttributes",
      "required": false
     },
     {
      "uid": 65,
      "name": "defer",
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@types/react:AllHTMLAttributes",
      "required": false
     },
     {
      "uid": 66,
      "name": "disabled",
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@types/react:AllHTMLAttributes",
      "required": false
     },
     {
      "uid": 67,
      "name": "download",
      "typeValue": {
       "raw": "any"
      },
      "from": "@types/react:AllHTMLAttributes",
      "required": false
     },
     {
      "uid": 68,
      "name": "encType",
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "from": "@types/react:AllHTMLAttributes",
      "required": false
     },
     {
      "uid": 69,
      "name": "formAction",
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "from": "@types/react:AllHTMLAttributes",
      "required": false
     },
     {
      "uid": 70,
      "name": "formEncType",
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "from": "@types/react:AllHTMLAttributes",
      "required": false
     },
     {
      "uid": 71,
      "name": "formMethod",
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "from": "@types/react:AllHTMLAttributes",
      "required": false
     },
     {
      "uid": 72,
      "name": "formNoValidate",
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@types/react:AllHTMLAttributes",
      "required": false
     },
     {
      "uid": 73,
      "name": "formTarget",
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "from": "@types/react:AllHTMLAttributes",
      "required": false
     },
     {
      "uid": 74,
      "name": "frameBorder",
      "typeValue": {
       "raw": "string | number"
      },
      "from": "@types/react:AllHTMLAttributes",
      "required": false
     },
     {
      "uid": 75,
      "name": "headers",
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "from": "@types/react:AllHTMLAttributes",
      "required": false
     },
     {
      "uid": 76,
      "name": "height",
      "typeValue": {
       "raw": "string | number"
      },
      "from": "@types/react:AllHTMLAttributes",
      "required": false
     },
     {
      "uid": 77,
      "name": "high",
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "from": "@types/react:AllHTMLAttributes",
      "required": false
     },
     {
      "uid": 78,
      "name": "href",
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "from": "@types/react:AllHTMLAttributes",
      "required": false
     },
     {
      "uid": 79,
      "name": "hrefLang",
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "from": "@types/react:AllHTMLAttributes",
      "required": false
     },
     {
      "uid": 80,
      "name": "htmlFor",
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "from": "@types/react:AllHTMLAttributes",
      "required": false
     },
     {
      "uid": 81,
      "name": "httpEquiv",
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "from": "@types/react:AllHTMLAttributes",
      "required": false
     },
     {
      "uid": 82,
      "name": "integrity",
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "from": "@types/react:AllHTMLAttributes",
      "required": false
     },
     {
      "uid": 83,
      "name": "keyParams",
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "from": "@types/react:AllHTMLAttributes",
      "required": false
     },
     {
      "uid": 84,
      "name": "keyType",
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "from": "@types/react:AllHTMLAttributes",
      "required": false
     },
     {
      "uid": 85,
      "name": "kind",
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "from": "@types/react:AllHTMLAttributes",
      "required": false
     },
     {
      "uid": 86,
      "name": "label",
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "from": "@types/react:AllHTMLAttributes",
      "required": false
     },
     {
      "uid": 87,
      "name": "loop",
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@types/react:AllHTMLAttributes",
      "required": false
     },
     {
      "uid": 88,
      "name": "low",
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "from": "@types/react:AllHTMLAttributes",
      "required": false
     },
     {
      "uid": 89,
      "name": "manifest",
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "from": "@types/react:AllHTMLAttributes",
      "required": false
     },
     {
      "uid": 90,
      "name": "marginHeight",
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "from": "@types/react:AllHTMLAttributes",
      "required": false
     },
     {
      "uid": 91,
      "name": "marginWidth",
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "from": "@types/react:AllHTMLAttributes",
      "required": false
     },
     {
      "uid": 92,
      "name": "max",
      "typeValue": {
       "raw": "string | number"
      },
      "from": "@types/react:AllHTMLAttributes",
      "required": false
     },
     {
      "uid": 93,
      "name": "maxLength",
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "from": "@types/react:AllHTMLAttributes",
      "required": false
     },
     {
      "uid": 94,
      "name": "media",
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "from": "@types/react:AllHTMLAttributes",
      "required": false
     },
     {
      "uid": 95,
      "name": "mediaGroup",
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "from": "@types/react:AllHTMLAttributes",
      "required": false
     },
     {
      "uid": 96,
      "name": "method",
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "from": "@types/react:AllHTMLAttributes",
      "required": false
     },
     {
      "uid": 97,
      "name": "min",
      "typeValue": {
       "raw": "string | number"
      },
      "from": "@types/react:AllHTMLAttributes",
      "required": false
     },
     {
      "uid": 98,
      "name": "minLength",
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "from": "@types/react:AllHTMLAttributes",
      "required": false
     },
     {
      "uid": 99,
      "name": "multiple",
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@types/react:AllHTMLAttributes",
      "required": false
     },
     {
      "uid": 100,
      "name": "muted",
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@types/react:AllHTMLAttributes",
      "required": false
     },
     {
      "uid": 101,
      "name": "name",
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "from": "@types/react:AllHTMLAttributes",
      "required": false
     },
     {
      "uid": 102,
      "name": "noValidate",
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@types/react:AllHTMLAttributes",
      "required": false
     },
     {
      "uid": 103,
      "name": "open",
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@types/react:AllHTMLAttributes",
      "required": false
     },
     {
      "uid": 104,
      "name": "optimum",
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "from": "@types/react:AllHTMLAttributes",
      "required": false
     },
     {
      "uid": 105,
      "name": "pattern",
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "from": "@types/react:AllHTMLAttributes",
      "required": false
     },
     {
      "uid": 106,
      "name": "playsInline",
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@types/react:AllHTMLAttributes",
      "required": false
     },
     {
      "uid": 107,
      "name": "poster",
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "from": "@types/react:AllHTMLAttributes",
      "required": false
     },
     {
      "uid": 108,
      "name": "preload",
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "from": "@types/react:AllHTMLAttributes",
      "required": false
     },
     {
      "uid": 109,
      "name": "readOnly",
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@types/react:AllHTMLAttributes",
      "required": false
     },
     {
      "uid": 110,
      "name": "rel",
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "from": "@types/react:AllHTMLAttributes",
      "required": false
     },
     {
      "uid": 111,
      "name": "required",
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@types/react:AllHTMLAttributes",
      "required": false
     },
     {
      "uid": 112,
      "name": "reversed",
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@types/react:AllHTMLAttributes",
      "required": false
     },
     {
      "uid": 113,
      "name": "rows",
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "from": "@types/react:AllHTMLAttributes",
      "required": false
     },
     {
      "uid": 114,
      "name": "rowSpan",
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "from": "@types/react:AllHTMLAttributes",
      "required": false
     },
     {
      "uid": 115,
      "name": "sandbox",
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "from": "@types/react:AllHTMLAttributes",
      "required": false
     },
     {
      "uid": 116,
      "name": "scope",
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "from": "@types/react:AllHTMLAttributes",
      "required": false
     },
     {
      "uid": 117,
      "name": "scoped",
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@types/react:AllHTMLAttributes",
      "required": false
     },
     {
      "uid": 118,
      "name": "scrolling",
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "from": "@types/react:AllHTMLAttributes",
      "required": false
     },
     {
      "uid": 119,
      "name": "seamless",
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@types/react:AllHTMLAttributes",
      "required": false
     },
     {
      "uid": 120,
      "name": "selected",
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@types/react:AllHTMLAttributes",
      "required": false
     },
     {
      "uid": 121,
      "name": "shape",
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "from": "@types/react:AllHTMLAttributes",
      "required": false
     },
     {
      "uid": 122,
      "name": "size",
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "from": "@types/react:AllHTMLAttributes",
      "required": false
     },
     {
      "uid": 123,
      "name": "sizes",
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "from": "@types/react:AllHTMLAttributes",
      "required": false
     },
     {
      "uid": 124,
      "name": "span",
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "from": "@types/react:AllHTMLAttributes",
      "required": false
     },
     {
      "uid": 125,
      "name": "src",
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "from": "@types/react:AllHTMLAttributes",
      "required": false
     },
     {
      "uid": 126,
      "name": "srcDoc",
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "from": "@types/react:AllHTMLAttributes",
      "required": false
     },
     {
      "uid": 127,
      "name": "srcLang",
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "from": "@types/react:AllHTMLAttributes",
      "required": false
     },
     {
      "uid": 128,
      "name": "srcSet",
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "from": "@types/react:AllHTMLAttributes",
      "required": false
     },
     {
      "uid": 129,
      "name": "summary",
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "from": "@types/react:AllHTMLAttributes",
      "required": false
     },
     {
      "uid": 130,
      "name": "target",
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "from": "@types/react:AllHTMLAttributes",
      "required": false
     },
     {
      "uid": 131,
      "name": "type",
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "from": "@types/react:AllHTMLAttributes",
      "required": false
     },
     {
      "uid": 132,
      "name": "useMap",
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "from": "@types/react:AllHTMLAttributes",
      "required": false
     },
     {
      "uid": 133,
      "name": "width",
      "typeValue": {
       "raw": "string | number"
      },
      "from": "@types/react:AllHTMLAttributes",
      "required": false
     },
     {
      "uid": 134,
      "name": "wmode",
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "from": "@types/react:AllHTMLAttributes",
      "required": false
     },
     {
      "uid": 135,
      "name": "wrap",
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "from": "@types/react:AllHTMLAttributes",
      "required": false
     },
     {
      "uid": 136,
      "name": "defaultChecked",
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@types/react:HTMLAttributes",
      "required": false
     },
     {
      "uid": 137,
      "name": "defaultValue",
      "typeValue": {
       "raw": "string | number | readonly string[]"
      },
      "from": "@types/react:HTMLAttributes",
      "required": false
     },
     {
      "uid": 138,
      "name": "suppressContentEditableWarning",
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@types/react:HTMLAttributes",
      "required": false
     },
     {
      "uid": 139,
      "name": "suppressHydrationWarning",
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@types/react:HTMLAttributes",
      "required": false
     },
     {
      "uid": 140,
      "name": "accessKey",
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "from": "@types/react:HTMLAttributes",
      "required": false
     },
     {
      "uid": 141,
      "name": "className",
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "from": "@types/react:HTMLAttributes",
      "required": false
     },
     {
      "uid": 142,
      "name": "contentEditable",
      "typeValue": {
       "raw": "boolean | 'inherit' | 'true' | 'false'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        false,
        true,
        "inherit",
        "true",
        "false"
       ]
      },
      "from": "@types/react:HTMLAttributes",
      "required": false
     },
     {
      "uid": 143,
      "name": "contextMenu",
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "from": "@types/react:HTMLAttributes",
      "required": false
     },
     {
      "uid": 144,
      "name": "dir",
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "from": "@types/react:HTMLAttributes",
      "required": false
     },
     {
      "uid": 145,
      "name": "draggable",
      "typeValue": {
       "raw": "boolean | 'true' | 'false'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        false,
        true,
        "true",
        "false"
       ]
      },
      "from": "@types/react:HTMLAttributes",
      "required": false
     },
     {
      "uid": 146,
      "name": "lang",
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "from": "@types/react:HTMLAttributes",
      "required": false
     },
     {
      "uid": 147,
      "name": "nonce",
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "from": "@types/react:HTMLAttributes",
      "required": false
     },
     {
      "uid": 148,
      "name": "slot",
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "from": "@types/react:HTMLAttributes",
      "required": false
     },
     {
      "uid": 149,
      "name": "spellCheck",
      "typeValue": {
       "raw": "boolean | 'true' | 'false'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        false,
        true,
        "true",
        "false"
       ]
      },
      "from": "@types/react:HTMLAttributes",
      "required": false
     },
     {
      "uid": 150,
      "name": "title",
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "from": "@types/react:HTMLAttributes",
      "required": false
     },
     {
      "uid": 151,
      "name": "translate",
      "typeValue": {
       "raw": "'yes' | 'no'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "yes",
        "no"
       ]
      },
      "from": "@types/react:HTMLAttributes",
      "required": false
     },
     {
      "uid": 152,
      "name": "radioGroup",
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "from": "@types/react:HTMLAttributes",
      "required": false
     },
     {
      "uid": 153,
      "name": "role",
      "typeValue": {
       "raw": "string & {} | 'none' | 'search' | 'button' | 'checkbox' | 'radio' | 'alert' | 'alertdialog' | 'application' | 'article' | 'banner' | 'cell' | 'columnheader' | 'combobox' | 'complementary' | 'contentinfo' | 'definition' | 'dialog' | 'directory' | 'document' | 'feed' | 'figure' | 'form' | 'grid' | 'gridcell' | 'group' | 'heading' | 'img' | 'link' | 'list' | 'listbox' | 'listitem' | 'log' | 'main' | 'marquee' | 'math' | 'menu' | 'menubar' | 'menuitem' | 'menuitemcheckbox' | 'menuitemradio' | 'navigation' | 'note' | 'option' | 'presentation' | 'progressbar' | 'radiogroup' | 'region' | 'row' | 'rowgroup' | 'rowheader' | 'scrollbar' | 'searchbox' | 'separator' | 'slider' | 'spinbutton' | 'status' | 'switch' | 'tab' | 'table' | 'tablist' | 'tabpanel' | 'term' | 'textbox' | 'timer' | 'toolbar' | 'tooltip' | 'tree' | 'treegrid' | 'treeitem'"
      },
      "from": "@types/react:HTMLAttributes",
      "required": false
     },
     {
      "uid": 154,
      "name": "about",
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "from": "@types/react:HTMLAttributes",
      "required": false
     },
     {
      "uid": 155,
      "name": "datatype",
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "from": "@types/react:HTMLAttributes",
      "required": false
     },
     {
      "uid": 156,
      "name": "inlist",
      "typeValue": {
       "raw": "any"
      },
      "from": "@types/react:HTMLAttributes",
      "required": false
     },
     {
      "uid": 157,
      "name": "prefix",
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "from": "@types/react:HTMLAttributes",
      "required": false
     },
     {
      "uid": 158,
      "name": "property",
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "from": "@types/react:HTMLAttributes",
      "required": false
     },
     {
      "uid": 159,
      "name": "resource",
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "from": "@types/react:HTMLAttributes",
      "required": false
     },
     {
      "uid": 160,
      "name": "typeof",
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "from": "@types/react:HTMLAttributes",
      "required": false
     },
     {
      "uid": 161,
      "name": "vocab",
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "from": "@types/react:HTMLAttributes",
      "required": false
     },
     {
      "uid": 162,
      "name": "autoCapitalize",
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "from": "@types/react:HTMLAttributes",
      "required": false
     },
     {
      "uid": 163,
      "name": "autoCorrect",
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "from": "@types/react:HTMLAttributes",
      "required": false
     },
     {
      "uid": 164,
      "name": "autoSave",
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "from": "@types/react:HTMLAttributes",
      "required": false
     },
     {
      "uid": 165,
      "name": "itemProp",
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "from": "@types/react:HTMLAttributes",
      "required": false
     },
     {
      "uid": 166,
      "name": "itemScope",
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@types/react:HTMLAttributes",
      "required": false
     },
     {
      "uid": 167,
      "name": "itemType",
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "from": "@types/react:HTMLAttributes",
      "required": false
     },
     {
      "uid": 168,
      "name": "itemID",
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "from": "@types/react:HTMLAttributes",
      "required": false
     },
     {
      "uid": 169,
      "name": "itemRef",
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "from": "@types/react:HTMLAttributes",
      "required": false
     },
     {
      "uid": 170,
      "name": "results",
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "from": "@types/react:HTMLAttributes",
      "required": false
     },
     {
      "uid": 171,
      "name": "security",
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "from": "@types/react:HTMLAttributes",
      "required": false
     },
     {
      "uid": 172,
      "name": "unselectable",
      "typeValue": {
       "raw": "'on' | 'off'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "on",
        "off"
       ]
      },
      "from": "@types/react:HTMLAttributes",
      "required": false
     },
     {
      "uid": 173,
      "name": "inputMode",
      "comment": {
       "raw": [
        "Hints at the type of data that might be entered by the user while editing the element or its contents",
        " @see https://html.spec.whatwg.org/multipage/interaction.html#input-modalities:-the-inputmode-attribute"
       ]
      },
      "typeValue": {
       "raw": "'none' | 'search' | 'email' | 'tel' | 'text' | 'url' | 'numeric' | 'decimal'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "none",
        "search",
        "email",
        "tel",
        "text",
        "url",
        "numeric",
        "decimal"
       ]
      },
      "from": "@types/react:HTMLAttributes",
      "required": false
     },
     {
      "uid": 174,
      "name": "is",
      "comment": {
       "raw": [
        "Specify that a standard HTML element should behave like a defined custom built-in element",
        " @see https://html.spec.whatwg.org/multipage/custom-elements.html#attr-is"
       ]
      },
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "from": "@types/react:HTMLAttributes",
      "required": false
     },
     {
      "uid": 175,
      "name": "'aria-activedescendant'",
      "comment": {
       "raw": [
        "Identifies the currently active element when DOM focus is on a composite widget, textbox, group, or application."
       ]
      },
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "from": "@types/react:AriaAttributes",
      "required": false
     },
     {
      "uid": 176,
      "name": "'aria-atomic'",
      "comment": {
       "raw": [
        "Indicates whether assistive technologies will present all, or only parts of, the changed region based on the change notifications defined by the aria-relevant attribute."
       ]
      },
      "typeValue": {
       "raw": "boolean | 'true' | 'false'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        false,
        true,
        "true",
        "false"
       ]
      },
      "from": "@types/react:AriaAttributes",
      "required": false
     },
     {
      "uid": 177,
      "name": "'aria-autocomplete'",
      "comment": {
       "raw": [
        "Indicates whether inputting text could trigger display of one or more predictions of the user's intended value for an input and specifies how predictions would be",
        " presented if they are made."
       ]
      },
      "typeValue": {
       "raw": "'none' | 'list' | 'inline' | 'both'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "none",
        "list",
        "inline",
        "both"
       ]
      },
      "from": "@types/react:AriaAttributes",
      "required": false
     },
     {
      "uid": 178,
      "name": "'aria-busy'",
      "comment": {
       "raw": [
        "Indicates an element is being modified and that assistive technologies MAY want to wait until the modifications are complete before exposing them to the user."
       ]
      },
      "typeValue": {
       "raw": "boolean | 'true' | 'false'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        false,
        true,
        "true",
        "false"
       ]
      },
      "from": "@types/react:AriaAttributes",
      "required": false
     },
     {
      "uid": 179,
      "name": "'aria-checked'",
      "comment": {
       "raw": [
        "Indicates the current \"checked\" state of checkboxes, radio buttons, and other widgets.",
        " @see aria-pressed @see aria-selected."
       ]
      },
      "typeValue": {
       "raw": "boolean | 'true' | 'false' | 'mixed'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        false,
        true,
        "true",
        "false",
        "mixed"
       ]
      },
      "from": "@types/react:AriaAttributes",
      "required": false
     },
     {
      "uid": 180,
      "name": "'aria-colcount'",
      "comment": {
       "raw": [
        "Defines the total number of columns in a table, grid, or treegrid.",
        " @see aria-colindex."
       ]
      },
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "from": "@types/react:AriaAttributes",
      "required": false
     },
     {
      "uid": 181,
      "name": "'aria-colindex'",
      "comment": {
       "raw": [
        "Defines an element's column index or position with respect to the total number of columns within a table, grid, or treegrid.",
        " @see aria-colcount @see aria-colspan."
       ]
      },
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "from": "@types/react:AriaAttributes",
      "required": false
     },
     {
      "uid": 182,
      "name": "'aria-colspan'",
      "comment": {
       "raw": [
        "Defines the number of columns spanned by a cell or gridcell within a table, grid, or treegrid.",
        " @see aria-colindex @see aria-rowspan."
       ]
      },
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "from": "@types/react:AriaAttributes",
      "required": false
     },
     {
      "uid": 183,
      "name": "'aria-controls'",
      "comment": {
       "raw": [
        "Identifies the element (or elements) whose contents or presence are controlled by the current element.",
        " @see aria-owns."
       ]
      },
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "from": "@types/react:AriaAttributes",
      "required": false
     },
     {
      "uid": 184,
      "name": "'aria-current'",
      "comment": {
       "raw": [
        "Indicates the element that represents the current item within a container or set of related elements."
       ]
      },
      "typeValue": {
       "raw": "boolean | 'date' | 'time' | 'true' | 'false' | 'page' | 'step' | 'location'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        false,
        true,
        "date",
        "time",
        "true",
        "false",
        "page",
        "step",
        "location"
       ]
      },
      "from": "@types/react:AriaAttributes",
      "required": false
     },
     {
      "uid": 185,
      "name": "'aria-describedby'",
      "comment": {
       "raw": [
        "Identifies the element (or elements) that describes the object.",
        " @see aria-labelledby"
       ]
      },
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "from": "@types/react:AriaAttributes",
      "required": false
     },
     {
      "uid": 186,
      "name": "'aria-details'",
      "comment": {
       "raw": [
        "Identifies the element that provides a detailed, extended description for the object.",
        " @see aria-describedby."
       ]
      },
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "from": "@types/react:AriaAttributes",
      "required": false
     },
     {
      "uid": 187,
      "name": "'aria-disabled'",
      "comment": {
       "raw": [
        "Indicates that the element is perceivable but disabled, so it is not editable or otherwise operable.",
        " @see aria-hidden @see aria-readonly."
       ]
      },
      "typeValue": {
       "raw": "boolean | 'true' | 'false'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        false,
        true,
        "true",
        "false"
       ]
      },
      "from": "@types/react:AriaAttributes",
      "required": false
     },
     {
      "uid": 188,
      "name": "'aria-dropeffect'",
      "comment": {
       "raw": [
        "Indicates what functions can be performed when a dragged object is released on the drop target.",
        " @deprecated in ARIA 1.1"
       ]
      },
      "typeValue": {
       "raw": "'none' | 'link' | 'copy' | 'execute' | 'move' | 'popup'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "none",
        "link",
        "copy",
        "execute",
        "move",
        "popup"
       ]
      },
      "from": "@types/react:AriaAttributes",
      "required": false
     },
     {
      "uid": 189,
      "name": "'aria-errormessage'",
      "comment": {
       "raw": [
        "Identifies the element that provides an error message for the object.",
        " @see aria-invalid @see aria-describedby."
       ]
      },
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "from": "@types/react:AriaAttributes",
      "required": false
     },
     {
      "uid": 190,
      "name": "'aria-expanded'",
      "comment": {
       "raw": [
        "Indicates whether the element, or another grouping element it controls, is currently expanded or collapsed."
       ]
      },
      "typeValue": {
       "raw": "boolean | 'true' | 'false'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        false,
        true,
        "true",
        "false"
       ]
      },
      "from": "@types/react:AriaAttributes",
      "required": false
     },
     {
      "uid": 191,
      "name": "'aria-flowto'",
      "comment": {
       "raw": [
        "Identifies the next element (or elements) in an alternate reading order of content which, at the user's discretion,",
        " allows assistive technology to override the general default of reading in document source order."
       ]
      },
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "from": "@types/react:AriaAttributes",
      "required": false
     },
     {
      "uid": 192,
      "name": "'aria-grabbed'",
      "comment": {
       "raw": [
        "Indicates an element's \"grabbed\" state in a drag-and-drop operation.",
        " @deprecated in ARIA 1.1"
       ]
      },
      "typeValue": {
       "raw": "boolean | 'true' | 'false'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        false,
        true,
        "true",
        "false"
       ]
      },
      "from": "@types/react:AriaAttributes",
      "required": false
     },
     {
      "uid": 193,
      "name": "'aria-haspopup'",
      "comment": {
       "raw": [
        "Indicates the availability and type of interactive popup element, such as menu or dialog, that can be triggered by an element."
       ]
      },
      "typeValue": {
       "raw": "boolean | 'true' | 'false' | 'dialog' | 'grid' | 'listbox' | 'menu' | 'tree'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        false,
        true,
        "true",
        "false",
        "dialog",
        "grid",
        "listbox",
        "menu",
        "tree"
       ]
      },
      "from": "@types/react:AriaAttributes",
      "required": false
     },
     {
      "uid": 194,
      "name": "'aria-hidden'",
      "comment": {
       "raw": [
        "Indicates whether the element is exposed to an accessibility API.",
        " @see aria-disabled."
       ]
      },
      "typeValue": {
       "raw": "boolean | 'true' | 'false'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        false,
        true,
        "true",
        "false"
       ]
      },
      "from": "@types/react:AriaAttributes",
      "required": false
     },
     {
      "uid": 195,
      "name": "'aria-invalid'",
      "comment": {
       "raw": [
        "Indicates the entered value does not conform to the format expected by the application.",
        " @see aria-errormessage."
       ]
      },
      "typeValue": {
       "raw": "boolean | 'true' | 'false' | 'grammar' | 'spelling'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        false,
        true,
        "true",
        "false",
        "grammar",
        "spelling"
       ]
      },
      "from": "@types/react:AriaAttributes",
      "required": false
     },
     {
      "uid": 196,
      "name": "'aria-keyshortcuts'",
      "comment": {
       "raw": [
        "Indicates keyboard shortcuts that an author has implemented to activate or give focus to an element."
       ]
      },
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "from": "@types/react:AriaAttributes",
      "required": false
     },
     {
      "uid": 197,
      "name": "'aria-label'",
      "comment": {
       "raw": [
        "Defines a string value that labels the current element.",
        " @see aria-labelledby."
       ]
      },
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "from": "@types/react:AriaAttributes",
      "required": false
     },
     {
      "uid": 198,
      "name": "'aria-labelledby'",
      "comment": {
       "raw": [
        "Identifies the element (or elements) that labels the current element.",
        " @see aria-describedby."
       ]
      },
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "from": "@types/react:AriaAttributes",
      "required": false
     },
     {
      "uid": 199,
      "name": "'aria-level'",
      "comment": {
       "raw": [
        "Defines the hierarchical level of an element within a structure."
       ]
      },
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "from": "@types/react:AriaAttributes",
      "required": false
     },
     {
      "uid": 200,
      "name": "'aria-live'",
      "comment": {
       "raw": [
        "Indicates that an element will be updated, and describes the types of updates the user agents, assistive technologies, and user can expect from the live region."
       ]
      },
      "typeValue": {
       "raw": "'off' | 'assertive' | 'polite'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "off",
        "assertive",
        "polite"
       ]
      },
      "from": "@types/react:AriaAttributes",
      "required": false
     },
     {
      "uid": 201,
      "name": "'aria-modal'",
      "comment": {
       "raw": [
        "Indicates whether an element is modal when displayed."
       ]
      },
      "typeValue": {
       "raw": "boolean | 'true' | 'false'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        false,
        true,
        "true",
        "false"
       ]
      },
      "from": "@types/react:AriaAttributes",
      "required": false
     },
     {
      "uid": 202,
      "name": "'aria-multiline'",
      "comment": {
       "raw": [
        "Indicates whether a text box accepts multiple lines of input or only a single line."
       ]
      },
      "typeValue": {
       "raw": "boolean | 'true' | 'false'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        false,
        true,
        "true",
        "false"
       ]
      },
      "from": "@types/react:AriaAttributes",
      "required": false
     },
     {
      "uid": 203,
      "name": "'aria-multiselectable'",
      "comment": {
       "raw": [
        "Indicates that the user may select more than one item from the current selectable descendants."
       ]
      },
      "typeValue": {
       "raw": "boolean | 'true' | 'false'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        false,
        true,
        "true",
        "false"
       ]
      },
      "from": "@types/react:AriaAttributes",
      "required": false
     },
     {
      "uid": 204,
      "name": "'aria-orientation'",
      "comment": {
       "raw": [
        "Indicates whether the element's orientation is horizontal, vertical, or unknown/ambiguous."
       ]
      },
      "typeValue": {
       "raw": "'vertical' | 'horizontal'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "vertical",
        "horizontal"
       ]
      },
      "from": "@types/react:AriaAttributes",
      "required": false
     },
     {
      "uid": 205,
      "name": "'aria-owns'",
      "comment": {
       "raw": [
        "Identifies an element (or elements) in order to define a visual, functional, or contextual parent/child relationship",
        " between DOM elements where the DOM hierarchy cannot be used to represent the relationship.",
        " @see aria-controls."
       ]
      },
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "from": "@types/react:AriaAttributes",
      "required": false
     },
     {
      "uid": 206,
      "name": "'aria-placeholder'",
      "comment": {
       "raw": [
        "Defines a short hint (a word or short phrase) intended to aid the user with data entry when the control has no value.",
        " A hint could be a sample value or a brief description of the expected format."
       ]
      },
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "from": "@types/react:AriaAttributes",
      "required": false
     },
     {
      "uid": 207,
      "name": "'aria-posinset'",
      "comment": {
       "raw": [
        "Defines an element's number or position in the current set of listitems or treeitems. Not required if all elements in the set are present in the DOM.",
        " @see aria-setsize."
       ]
      },
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "from": "@types/react:AriaAttributes",
      "required": false
     },
     {
      "uid": 208,
      "name": "'aria-pressed'",
      "comment": {
       "raw": [
        "Indicates the current \"pressed\" state of toggle buttons.",
        " @see aria-checked @see aria-selected."
       ]
      },
      "typeValue": {
       "raw": "boolean | 'true' | 'false' | 'mixed'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        false,
        true,
        "true",
        "false",
        "mixed"
       ]
      },
      "from": "@types/react:AriaAttributes",
      "required": false
     },
     {
      "uid": 209,
      "name": "'aria-readonly'",
      "comment": {
       "raw": [
        "Indicates that the element is not editable, but is otherwise operable.",
        " @see aria-disabled."
       ]
      },
      "typeValue": {
       "raw": "boolean | 'true' | 'false'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        false,
        true,
        "true",
        "false"
       ]
      },
      "from": "@types/react:AriaAttributes",
      "required": false
     },
     {
      "uid": 210,
      "name": "'aria-relevant'",
      "comment": {
       "raw": [
        "Indicates what notifications the user agent will trigger when the accessibility tree within a live region is modified.",
        " @see aria-atomic."
       ]
      },
      "typeValue": {
       "raw": "'text' | 'additions' | 'additions removals' | 'additions text' | 'all' | 'removals' | 'removals additions' | 'removals text' | 'text additions' | 'text removals'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "text",
        "additions",
        "additions removals",
        "additions text",
        "all",
        "removals",
        "removals additions",
        "removals text",
        "text additions",
        "text removals"
       ]
      },
      "from": "@types/react:AriaAttributes",
      "required": false
     },
     {
      "uid": 211,
      "name": "'aria-required'",
      "comment": {
       "raw": [
        "Indicates that user input is required on the element before a form may be submitted."
       ]
      },
      "typeValue": {
       "raw": "boolean | 'true' | 'false'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        false,
        true,
        "true",
        "false"
       ]
      },
      "from": "@types/react:AriaAttributes",
      "required": false
     },
     {
      "uid": 212,
      "name": "'aria-roledescription'",
      "comment": {
       "raw": [
        "Defines a human-readable, author-localized description for the role of an element."
       ]
      },
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "from": "@types/react:AriaAttributes",
      "required": false
     },
     {
      "uid": 213,
      "name": "'aria-rowcount'",
      "comment": {
       "raw": [
        "Defines the total number of rows in a table, grid, or treegrid.",
        " @see aria-rowindex."
       ]
      },
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "from": "@types/react:AriaAttributes",
      "required": false
     },
     {
      "uid": 214,
      "name": "'aria-rowindex'",
      "comment": {
       "raw": [
        "Defines an element's row index or position with respect to the total number of rows within a table, grid, or treegrid.",
        " @see aria-rowcount @see aria-rowspan."
       ]
      },
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "from": "@types/react:AriaAttributes",
      "required": false
     },
     {
      "uid": 215,
      "name": "'aria-rowspan'",
      "comment": {
       "raw": [
        "Defines the number of rows spanned by a cell or gridcell within a table, grid, or treegrid.",
        " @see aria-rowindex @see aria-colspan."
       ]
      },
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "from": "@types/react:AriaAttributes",
      "required": false
     },
     {
      "uid": 216,
      "name": "'aria-selected'",
      "comment": {
       "raw": [
        "Indicates the current \"selected\" state of various widgets.",
        " @see aria-checked @see aria-pressed."
       ]
      },
      "typeValue": {
       "raw": "boolean | 'true' | 'false'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        false,
        true,
        "true",
        "false"
       ]
      },
      "from": "@types/react:AriaAttributes",
      "required": false
     },
     {
      "uid": 217,
      "name": "'aria-setsize'",
      "comment": {
       "raw": [
        "Defines the number of items in the current set of listitems or treeitems. Not required if all elements in the set are present in the DOM.",
        " @see aria-posinset."
       ]
      },
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "from": "@types/react:AriaAttributes",
      "required": false
     },
     {
      "uid": 218,
      "name": "'aria-sort'",
      "comment": {
       "raw": [
        "Indicates if items in a table or grid are sorted in ascending or descending order."
       ]
      },
      "typeValue": {
       "raw": "'none' | 'ascending' | 'descending' | 'other'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "none",
        "ascending",
        "descending",
        "other"
       ]
      },
      "from": "@types/react:AriaAttributes",
      "required": false
     },
     {
      "uid": 219,
      "name": "'aria-valuemax'",
      "comment": {
       "raw": [
        "Defines the maximum allowed value for a range widget."
       ]
      },
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "from": "@types/react:AriaAttributes",
      "required": false
     },
     {
      "uid": 220,
      "name": "'aria-valuemin'",
      "comment": {
       "raw": [
        "Defines the minimum allowed value for a range widget."
       ]
      },
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "from": "@types/react:AriaAttributes",
      "required": false
     },
     {
      "uid": 221,
      "name": "'aria-valuenow'",
      "comment": {
       "raw": [
        "Defines the current value for a range widget.",
        " @see aria-valuetext."
       ]
      },
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "from": "@types/react:AriaAttributes",
      "required": false
     },
     {
      "uid": 222,
      "name": "'aria-valuetext'",
      "comment": {
       "raw": [
        "Defines the human readable text alternative of aria-valuenow for a range widget."
       ]
      },
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "from": "@types/react:AriaAttributes",
      "required": false
     },
     {
      "uid": 223,
      "name": "children",
      "typeValue": {
       "raw": "null | string | number | boolean | React.ReactElement<any, string | React.JSXElementConstructor<any>> | React.ReactFragment | React.ReactPortal"
      },
      "from": "@types/react:DOMAttributes",
      "required": false
     },
     {
      "uid": 224,
      "name": "dangerouslySetInnerHTML",
      "typeValue": {
       "raw": "{ __html: string; }"
      },
      "from": "@types/react:DOMAttributes",
      "required": false
     },
     {
      "uid": 225,
      "name": "onCopy",
      "typeValue": {
       "raw": "React.ClipboardEventHandler<ReactCustomScrollbars.Scrollbars>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@types/react:DOMAttributes",
      "required": false
     },
     {
      "uid": 226,
      "name": "onCopyCapture",
      "typeValue": {
       "raw": "React.ClipboardEventHandler<ReactCustomScrollbars.Scrollbars>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@types/react:DOMAttributes",
      "required": false
     },
     {
      "uid": 227,
      "name": "onCut",
      "typeValue": {
       "raw": "React.ClipboardEventHandler<ReactCustomScrollbars.Scrollbars>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@types/react:DOMAttributes",
      "required": false
     },
     {
      "uid": 228,
      "name": "onCutCapture",
      "typeValue": {
       "raw": "React.ClipboardEventHandler<ReactCustomScrollbars.Scrollbars>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@types/react:DOMAttributes",
      "required": false
     },
     {
      "uid": 229,
      "name": "onPaste",
      "typeValue": {
       "raw": "React.ClipboardEventHandler<ReactCustomScrollbars.Scrollbars>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@types/react:DOMAttributes",
      "required": false
     },
     {
      "uid": 230,
      "name": "onPasteCapture",
      "typeValue": {
       "raw": "React.ClipboardEventHandler<ReactCustomScrollbars.Scrollbars>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@types/react:DOMAttributes",
      "required": false
     },
     {
      "uid": 231,
      "name": "onCompositionEnd",
      "typeValue": {
       "raw": "React.CompositionEventHandler<ReactCustomScrollbars.Scrollbars>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@types/react:DOMAttributes",
      "required": false
     },
     {
      "uid": 232,
      "name": "onCompositionEndCapture",
      "typeValue": {
       "raw": "React.CompositionEventHandler<ReactCustomScrollbars.Scrollbars>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@types/react:DOMAttributes",
      "required": false
     },
     {
      "uid": 233,
      "name": "onCompositionStart",
      "typeValue": {
       "raw": "React.CompositionEventHandler<ReactCustomScrollbars.Scrollbars>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@types/react:DOMAttributes",
      "required": false
     },
     {
      "uid": 234,
      "name": "onCompositionStartCapture",
      "typeValue": {
       "raw": "React.CompositionEventHandler<ReactCustomScrollbars.Scrollbars>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@types/react:DOMAttributes",
      "required": false
     },
     {
      "uid": 235,
      "name": "onCompositionUpdate",
      "typeValue": {
       "raw": "React.CompositionEventHandler<ReactCustomScrollbars.Scrollbars>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@types/react:DOMAttributes",
      "required": false
     },
     {
      "uid": 236,
      "name": "onCompositionUpdateCapture",
      "typeValue": {
       "raw": "React.CompositionEventHandler<ReactCustomScrollbars.Scrollbars>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@types/react:DOMAttributes",
      "required": false
     },
     {
      "uid": 237,
      "name": "onFocus",
      "typeValue": {
       "raw": "React.FocusEventHandler<ReactCustomScrollbars.Scrollbars>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@types/react:DOMAttributes",
      "required": false
     },
     {
      "uid": 238,
      "name": "onFocusCapture",
      "typeValue": {
       "raw": "React.FocusEventHandler<ReactCustomScrollbars.Scrollbars>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@types/react:DOMAttributes",
      "required": false
     },
     {
      "uid": 239,
      "name": "onBlur",
      "typeValue": {
       "raw": "React.FocusEventHandler<ReactCustomScrollbars.Scrollbars>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@types/react:DOMAttributes",
      "required": false
     },
     {
      "uid": 240,
      "name": "onBlurCapture",
      "typeValue": {
       "raw": "React.FocusEventHandler<ReactCustomScrollbars.Scrollbars>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@types/react:DOMAttributes",
      "required": false
     },
     {
      "uid": 241,
      "name": "onChange",
      "typeValue": {
       "raw": "React.FormEventHandler<ReactCustomScrollbars.Scrollbars>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@types/react:DOMAttributes",
      "required": false
     },
     {
      "uid": 242,
      "name": "onChangeCapture",
      "typeValue": {
       "raw": "React.FormEventHandler<ReactCustomScrollbars.Scrollbars>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@types/react:DOMAttributes",
      "required": false
     },
     {
      "uid": 243,
      "name": "onBeforeInput",
      "typeValue": {
       "raw": "React.FormEventHandler<ReactCustomScrollbars.Scrollbars>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@types/react:DOMAttributes",
      "required": false
     },
     {
      "uid": 244,
      "name": "onBeforeInputCapture",
      "typeValue": {
       "raw": "React.FormEventHandler<ReactCustomScrollbars.Scrollbars>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@types/react:DOMAttributes",
      "required": false
     },
     {
      "uid": 245,
      "name": "onInput",
      "typeValue": {
       "raw": "React.FormEventHandler<ReactCustomScrollbars.Scrollbars>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@types/react:DOMAttributes",
      "required": false
     },
     {
      "uid": 246,
      "name": "onInputCapture",
      "typeValue": {
       "raw": "React.FormEventHandler<ReactCustomScrollbars.Scrollbars>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@types/react:DOMAttributes",
      "required": false
     },
     {
      "uid": 247,
      "name": "onReset",
      "typeValue": {
       "raw": "React.FormEventHandler<ReactCustomScrollbars.Scrollbars>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@types/react:DOMAttributes",
      "required": false
     },
     {
      "uid": 248,
      "name": "onResetCapture",
      "typeValue": {
       "raw": "React.FormEventHandler<ReactCustomScrollbars.Scrollbars>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@types/react:DOMAttributes",
      "required": false
     },
     {
      "uid": 249,
      "name": "onSubmit",
      "typeValue": {
       "raw": "React.FormEventHandler<ReactCustomScrollbars.Scrollbars>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@types/react:DOMAttributes",
      "required": false
     },
     {
      "uid": 250,
      "name": "onSubmitCapture",
      "typeValue": {
       "raw": "React.FormEventHandler<ReactCustomScrollbars.Scrollbars>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@types/react:DOMAttributes",
      "required": false
     },
     {
      "uid": 251,
      "name": "onInvalid",
      "typeValue": {
       "raw": "React.FormEventHandler<ReactCustomScrollbars.Scrollbars>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@types/react:DOMAttributes",
      "required": false
     },
     {
      "uid": 252,
      "name": "onInvalidCapture",
      "typeValue": {
       "raw": "React.FormEventHandler<ReactCustomScrollbars.Scrollbars>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@types/react:DOMAttributes",
      "required": false
     },
     {
      "uid": 253,
      "name": "onLoad",
      "typeValue": {
       "raw": "React.ReactEventHandler<ReactCustomScrollbars.Scrollbars>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@types/react:DOMAttributes",
      "required": false
     },
     {
      "uid": 254,
      "name": "onLoadCapture",
      "typeValue": {
       "raw": "React.ReactEventHandler<ReactCustomScrollbars.Scrollbars>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@types/react:DOMAttributes",
      "required": false
     },
     {
      "uid": 255,
      "name": "onError",
      "typeValue": {
       "raw": "React.ReactEventHandler<ReactCustomScrollbars.Scrollbars>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@types/react:DOMAttributes",
      "required": false
     },
     {
      "uid": 256,
      "name": "onErrorCapture",
      "typeValue": {
       "raw": "React.ReactEventHandler<ReactCustomScrollbars.Scrollbars>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@types/react:DOMAttributes",
      "required": false
     },
     {
      "uid": 257,
      "name": "onKeyDown",
      "typeValue": {
       "raw": "React.KeyboardEventHandler<ReactCustomScrollbars.Scrollbars>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@types/react:DOMAttributes",
      "required": false
     },
     {
      "uid": 258,
      "name": "onKeyDownCapture",
      "typeValue": {
       "raw": "React.KeyboardEventHandler<ReactCustomScrollbars.Scrollbars>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@types/react:DOMAttributes",
      "required": false
     },
     {
      "uid": 259,
      "name": "onKeyPress",
      "comment": {
       "raw": [
        "@deprecated"
       ]
      },
      "typeValue": {
       "raw": "React.KeyboardEventHandler<ReactCustomScrollbars.Scrollbars>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@types/react:DOMAttributes",
      "required": false
     },
     {
      "uid": 260,
      "name": "onKeyPressCapture",
      "comment": {
       "raw": [
        "@deprecated"
       ]
      },
      "typeValue": {
       "raw": "React.KeyboardEventHandler<ReactCustomScrollbars.Scrollbars>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@types/react:DOMAttributes",
      "required": false
     },
     {
      "uid": 261,
      "name": "onKeyUp",
      "typeValue": {
       "raw": "React.KeyboardEventHandler<ReactCustomScrollbars.Scrollbars>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@types/react:DOMAttributes",
      "required": false
     },
     {
      "uid": 262,
      "name": "onKeyUpCapture",
      "typeValue": {
       "raw": "React.KeyboardEventHandler<ReactCustomScrollbars.Scrollbars>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@types/react:DOMAttributes",
      "required": false
     },
     {
      "uid": 263,
      "name": "onAbort",
      "typeValue": {
       "raw": "React.ReactEventHandler<ReactCustomScrollbars.Scrollbars>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@types/react:DOMAttributes",
      "required": false
     },
     {
      "uid": 264,
      "name": "onAbortCapture",
      "typeValue": {
       "raw": "React.ReactEventHandler<ReactCustomScrollbars.Scrollbars>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@types/react:DOMAttributes",
      "required": false
     },
     {
      "uid": 265,
      "name": "onCanPlay",
      "typeValue": {
       "raw": "React.ReactEventHandler<ReactCustomScrollbars.Scrollbars>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@types/react:DOMAttributes",
      "required": false
     },
     {
      "uid": 266,
      "name": "onCanPlayCapture",
      "typeValue": {
       "raw": "React.ReactEventHandler<ReactCustomScrollbars.Scrollbars>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@types/react:DOMAttributes",
      "required": false
     },
     {
      "uid": 267,
      "name": "onCanPlayThrough",
      "typeValue": {
       "raw": "React.ReactEventHandler<ReactCustomScrollbars.Scrollbars>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@types/react:DOMAttributes",
      "required": false
     },
     {
      "uid": 268,
      "name": "onCanPlayThroughCapture",
      "typeValue": {
       "raw": "React.ReactEventHandler<ReactCustomScrollbars.Scrollbars>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@types/react:DOMAttributes",
      "required": false
     },
     {
      "uid": 269,
      "name": "onDurationChange",
      "typeValue": {
       "raw": "React.ReactEventHandler<ReactCustomScrollbars.Scrollbars>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@types/react:DOMAttributes",
      "required": false
     },
     {
      "uid": 270,
      "name": "onDurationChangeCapture",
      "typeValue": {
       "raw": "React.ReactEventHandler<ReactCustomScrollbars.Scrollbars>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@types/react:DOMAttributes",
      "required": false
     },
     {
      "uid": 271,
      "name": "onEmptied",
      "typeValue": {
       "raw": "React.ReactEventHandler<ReactCustomScrollbars.Scrollbars>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@types/react:DOMAttributes",
      "required": false
     },
     {
      "uid": 272,
      "name": "onEmptiedCapture",
      "typeValue": {
       "raw": "React.ReactEventHandler<ReactCustomScrollbars.Scrollbars>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@types/react:DOMAttributes",
      "required": false
     },
     {
      "uid": 273,
      "name": "onEncrypted",
      "typeValue": {
       "raw": "React.ReactEventHandler<ReactCustomScrollbars.Scrollbars>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@types/react:DOMAttributes",
      "required": false
     },
     {
      "uid": 274,
      "name": "onEncryptedCapture",
      "typeValue": {
       "raw": "React.ReactEventHandler<ReactCustomScrollbars.Scrollbars>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@types/react:DOMAttributes",
      "required": false
     },
     {
      "uid": 275,
      "name": "onEnded",
      "typeValue": {
       "raw": "React.ReactEventHandler<ReactCustomScrollbars.Scrollbars>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@types/react:DOMAttributes",
      "required": false
     },
     {
      "uid": 276,
      "name": "onEndedCapture",
      "typeValue": {
       "raw": "React.ReactEventHandler<ReactCustomScrollbars.Scrollbars>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@types/react:DOMAttributes",
      "required": false
     },
     {
      "uid": 277,
      "name": "onLoadedData",
      "typeValue": {
       "raw": "React.ReactEventHandler<ReactCustomScrollbars.Scrollbars>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@types/react:DOMAttributes",
      "required": false
     },
     {
      "uid": 278,
      "name": "onLoadedDataCapture",
      "typeValue": {
       "raw": "React.ReactEventHandler<ReactCustomScrollbars.Scrollbars>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@types/react:DOMAttributes",
      "required": false
     },
     {
      "uid": 279,
      "name": "onLoadedMetadata",
      "typeValue": {
       "raw": "React.ReactEventHandler<ReactCustomScrollbars.Scrollbars>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@types/react:DOMAttributes",
      "required": false
     },
     {
      "uid": 280,
      "name": "onLoadedMetadataCapture",
      "typeValue": {
       "raw": "React.ReactEventHandler<ReactCustomScrollbars.Scrollbars>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@types/react:DOMAttributes",
      "required": false
     },
     {
      "uid": 281,
      "name": "onLoadStart",
      "typeValue": {
       "raw": "React.ReactEventHandler<ReactCustomScrollbars.Scrollbars>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@types/react:DOMAttributes",
      "required": false
     },
     {
      "uid": 282,
      "name": "onLoadStartCapture",
      "typeValue": {
       "raw": "React.ReactEventHandler<ReactCustomScrollbars.Scrollbars>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@types/react:DOMAttributes",
      "required": false
     },
     {
      "uid": 283,
      "name": "onPause",
      "typeValue": {
       "raw": "React.ReactEventHandler<ReactCustomScrollbars.Scrollbars>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@types/react:DOMAttributes",
      "required": false
     },
     {
      "uid": 284,
      "name": "onPauseCapture",
      "typeValue": {
       "raw": "React.ReactEventHandler<ReactCustomScrollbars.Scrollbars>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@types/react:DOMAttributes",
      "required": false
     },
     {
      "uid": 285,
      "name": "onPlay",
      "typeValue": {
       "raw": "React.ReactEventHandler<ReactCustomScrollbars.Scrollbars>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@types/react:DOMAttributes",
      "required": false
     },
     {
      "uid": 286,
      "name": "onPlayCapture",
      "typeValue": {
       "raw": "React.ReactEventHandler<ReactCustomScrollbars.Scrollbars>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@types/react:DOMAttributes",
      "required": false
     },
     {
      "uid": 287,
      "name": "onPlaying",
      "typeValue": {
       "raw": "React.ReactEventHandler<ReactCustomScrollbars.Scrollbars>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@types/react:DOMAttributes",
      "required": false
     },
     {
      "uid": 288,
      "name": "onPlayingCapture",
      "typeValue": {
       "raw": "React.ReactEventHandler<ReactCustomScrollbars.Scrollbars>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@types/react:DOMAttributes",
      "required": false
     },
     {
      "uid": 289,
      "name": "onProgress",
      "typeValue": {
       "raw": "React.ReactEventHandler<ReactCustomScrollbars.Scrollbars>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@types/react:DOMAttributes",
      "required": false
     },
     {
      "uid": 290,
      "name": "onProgressCapture",
      "typeValue": {
       "raw": "React.ReactEventHandler<ReactCustomScrollbars.Scrollbars>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@types/react:DOMAttributes",
      "required": false
     },
     {
      "uid": 291,
      "name": "onRateChange",
      "typeValue": {
       "raw": "React.ReactEventHandler<ReactCustomScrollbars.Scrollbars>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@types/react:DOMAttributes",
      "required": false
     },
     {
      "uid": 292,
      "name": "onRateChangeCapture",
      "typeValue": {
       "raw": "React.ReactEventHandler<ReactCustomScrollbars.Scrollbars>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@types/react:DOMAttributes",
      "required": false
     },
     {
      "uid": 293,
      "name": "onResize",
      "typeValue": {
       "raw": "React.ReactEventHandler<ReactCustomScrollbars.Scrollbars>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@types/react:DOMAttributes",
      "required": false
     },
     {
      "uid": 294,
      "name": "onResizeCapture",
      "typeValue": {
       "raw": "React.ReactEventHandler<ReactCustomScrollbars.Scrollbars>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@types/react:DOMAttributes",
      "required": false
     },
     {
      "uid": 295,
      "name": "onSeeked",
      "typeValue": {
       "raw": "React.ReactEventHandler<ReactCustomScrollbars.Scrollbars>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@types/react:DOMAttributes",
      "required": false
     },
     {
      "uid": 296,
      "name": "onSeekedCapture",
      "typeValue": {
       "raw": "React.ReactEventHandler<ReactCustomScrollbars.Scrollbars>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@types/react:DOMAttributes",
      "required": false
     },
     {
      "uid": 297,
      "name": "onSeeking",
      "typeValue": {
       "raw": "React.ReactEventHandler<ReactCustomScrollbars.Scrollbars>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@types/react:DOMAttributes",
      "required": false
     },
     {
      "uid": 298,
      "name": "onSeekingCapture",
      "typeValue": {
       "raw": "React.ReactEventHandler<ReactCustomScrollbars.Scrollbars>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@types/react:DOMAttributes",
      "required": false
     },
     {
      "uid": 299,
      "name": "onStalled",
      "typeValue": {
       "raw": "React.ReactEventHandler<ReactCustomScrollbars.Scrollbars>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@types/react:DOMAttributes",
      "required": false
     },
     {
      "uid": 300,
      "name": "onStalledCapture",
      "typeValue": {
       "raw": "React.ReactEventHandler<ReactCustomScrollbars.Scrollbars>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@types/react:DOMAttributes",
      "required": false
     },
     {
      "uid": 301,
      "name": "onSuspend",
      "typeValue": {
       "raw": "React.ReactEventHandler<ReactCustomScrollbars.Scrollbars>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@types/react:DOMAttributes",
      "required": false
     },
     {
      "uid": 302,
      "name": "onSuspendCapture",
      "typeValue": {
       "raw": "React.ReactEventHandler<ReactCustomScrollbars.Scrollbars>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@types/react:DOMAttributes",
      "required": false
     },
     {
      "uid": 303,
      "name": "onTimeUpdate",
      "typeValue": {
       "raw": "React.ReactEventHandler<ReactCustomScrollbars.Scrollbars>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@types/react:DOMAttributes",
      "required": false
     },
     {
      "uid": 304,
      "name": "onTimeUpdateCapture",
      "typeValue": {
       "raw": "React.ReactEventHandler<ReactCustomScrollbars.Scrollbars>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@types/react:DOMAttributes",
      "required": false
     },
     {
      "uid": 305,
      "name": "onVolumeChange",
      "typeValue": {
       "raw": "React.ReactEventHandler<ReactCustomScrollbars.Scrollbars>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@types/react:DOMAttributes",
      "required": false
     },
     {
      "uid": 306,
      "name": "onVolumeChangeCapture",
      "typeValue": {
       "raw": "React.ReactEventHandler<ReactCustomScrollbars.Scrollbars>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@types/react:DOMAttributes",
      "required": false
     },
     {
      "uid": 307,
      "name": "onWaiting",
      "typeValue": {
       "raw": "React.ReactEventHandler<ReactCustomScrollbars.Scrollbars>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@types/react:DOMAttributes",
      "required": false
     },
     {
      "uid": 308,
      "name": "onWaitingCapture",
      "typeValue": {
       "raw": "React.ReactEventHandler<ReactCustomScrollbars.Scrollbars>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@types/react:DOMAttributes",
      "required": false
     },
     {
      "uid": 309,
      "name": "onAuxClick",
      "typeValue": {
       "raw": "React.MouseEventHandler<ReactCustomScrollbars.Scrollbars>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@types/react:DOMAttributes",
      "required": false
     },
     {
      "uid": 310,
      "name": "onAuxClickCapture",
      "typeValue": {
       "raw": "React.MouseEventHandler<ReactCustomScrollbars.Scrollbars>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@types/react:DOMAttributes",
      "required": false
     },
     {
      "uid": 311,
      "name": "onClick",
      "typeValue": {
       "raw": "React.MouseEventHandler<ReactCustomScrollbars.Scrollbars>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@types/react:DOMAttributes",
      "required": false
     },
     {
      "uid": 312,
      "name": "onClickCapture",
      "typeValue": {
       "raw": "React.MouseEventHandler<ReactCustomScrollbars.Scrollbars>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@types/react:DOMAttributes",
      "required": false
     },
     {
      "uid": 313,
      "name": "onContextMenu",
      "typeValue": {
       "raw": "React.MouseEventHandler<ReactCustomScrollbars.Scrollbars>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@types/react:DOMAttributes",
      "required": false
     },
     {
      "uid": 314,
      "name": "onContextMenuCapture",
      "typeValue": {
       "raw": "React.MouseEventHandler<ReactCustomScrollbars.Scrollbars>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@types/react:DOMAttributes",
      "required": false
     },
     {
      "uid": 315,
      "name": "onDoubleClick",
      "typeValue": {
       "raw": "React.MouseEventHandler<ReactCustomScrollbars.Scrollbars>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@types/react:DOMAttributes",
      "required": false
     },
     {
      "uid": 316,
      "name": "onDoubleClickCapture",
      "typeValue": {
       "raw": "React.MouseEventHandler<ReactCustomScrollbars.Scrollbars>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@types/react:DOMAttributes",
      "required": false
     },
     {
      "uid": 317,
      "name": "onDrag",
      "typeValue": {
       "raw": "React.DragEventHandler<ReactCustomScrollbars.Scrollbars>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@types/react:DOMAttributes",
      "required": false
     },
     {
      "uid": 318,
      "name": "onDragCapture",
      "typeValue": {
       "raw": "React.DragEventHandler<ReactCustomScrollbars.Scrollbars>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@types/react:DOMAttributes",
      "required": false
     },
     {
      "uid": 319,
      "name": "onDragEnd",
      "typeValue": {
       "raw": "React.DragEventHandler<ReactCustomScrollbars.Scrollbars>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@types/react:DOMAttributes",
      "required": false
     },
     {
      "uid": 320,
      "name": "onDragEndCapture",
      "typeValue": {
       "raw": "React.DragEventHandler<ReactCustomScrollbars.Scrollbars>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@types/react:DOMAttributes",
      "required": false
     },
     {
      "uid": 321,
      "name": "onDragEnter",
      "typeValue": {
       "raw": "React.DragEventHandler<ReactCustomScrollbars.Scrollbars>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@types/react:DOMAttributes",
      "required": false
     },
     {
      "uid": 322,
      "name": "onDragEnterCapture",
      "typeValue": {
       "raw": "React.DragEventHandler<ReactCustomScrollbars.Scrollbars>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@types/react:DOMAttributes",
      "required": false
     },
     {
      "uid": 323,
      "name": "onDragExit",
      "typeValue": {
       "raw": "React.DragEventHandler<ReactCustomScrollbars.Scrollbars>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@types/react:DOMAttributes",
      "required": false
     },
     {
      "uid": 324,
      "name": "onDragExitCapture",
      "typeValue": {
       "raw": "React.DragEventHandler<ReactCustomScrollbars.Scrollbars>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@types/react:DOMAttributes",
      "required": false
     },
     {
      "uid": 325,
      "name": "onDragLeave",
      "typeValue": {
       "raw": "React.DragEventHandler<ReactCustomScrollbars.Scrollbars>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@types/react:DOMAttributes",
      "required": false
     },
     {
      "uid": 326,
      "name": "onDragLeaveCapture",
      "typeValue": {
       "raw": "React.DragEventHandler<ReactCustomScrollbars.Scrollbars>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@types/react:DOMAttributes",
      "required": false
     },
     {
      "uid": 327,
      "name": "onDragOver",
      "typeValue": {
       "raw": "React.DragEventHandler<ReactCustomScrollbars.Scrollbars>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@types/react:DOMAttributes",
      "required": false
     },
     {
      "uid": 328,
      "name": "onDragOverCapture",
      "typeValue": {
       "raw": "React.DragEventHandler<ReactCustomScrollbars.Scrollbars>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@types/react:DOMAttributes",
      "required": false
     },
     {
      "uid": 329,
      "name": "onDragStart",
      "typeValue": {
       "raw": "React.DragEventHandler<ReactCustomScrollbars.Scrollbars>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@types/react:DOMAttributes",
      "required": false
     },
     {
      "uid": 330,
      "name": "onDragStartCapture",
      "typeValue": {
       "raw": "React.DragEventHandler<ReactCustomScrollbars.Scrollbars>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@types/react:DOMAttributes",
      "required": false
     },
     {
      "uid": 331,
      "name": "onDrop",
      "typeValue": {
       "raw": "React.DragEventHandler<ReactCustomScrollbars.Scrollbars>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@types/react:DOMAttributes",
      "required": false
     },
     {
      "uid": 332,
      "name": "onDropCapture",
      "typeValue": {
       "raw": "React.DragEventHandler<ReactCustomScrollbars.Scrollbars>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@types/react:DOMAttributes",
      "required": false
     },
     {
      "uid": 333,
      "name": "onMouseDown",
      "typeValue": {
       "raw": "React.MouseEventHandler<ReactCustomScrollbars.Scrollbars>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@types/react:DOMAttributes",
      "required": false
     },
     {
      "uid": 334,
      "name": "onMouseDownCapture",
      "typeValue": {
       "raw": "React.MouseEventHandler<ReactCustomScrollbars.Scrollbars>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@types/react:DOMAttributes",
      "required": false
     },
     {
      "uid": 335,
      "name": "onMouseEnter",
      "typeValue": {
       "raw": "React.MouseEventHandler<ReactCustomScrollbars.Scrollbars>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@types/react:DOMAttributes",
      "required": false
     },
     {
      "uid": 336,
      "name": "onMouseLeave",
      "typeValue": {
       "raw": "React.MouseEventHandler<ReactCustomScrollbars.Scrollbars>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@types/react:DOMAttributes",
      "required": false
     },
     {
      "uid": 337,
      "name": "onMouseMove",
      "typeValue": {
       "raw": "React.MouseEventHandler<ReactCustomScrollbars.Scrollbars>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@types/react:DOMAttributes",
      "required": false
     },
     {
      "uid": 338,
      "name": "onMouseMoveCapture",
      "typeValue": {
       "raw": "React.MouseEventHandler<ReactCustomScrollbars.Scrollbars>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@types/react:DOMAttributes",
      "required": false
     },
     {
      "uid": 339,
      "name": "onMouseOut",
      "typeValue": {
       "raw": "React.MouseEventHandler<ReactCustomScrollbars.Scrollbars>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@types/react:DOMAttributes",
      "required": false
     },
     {
      "uid": 340,
      "name": "onMouseOutCapture",
      "typeValue": {
       "raw": "React.MouseEventHandler<ReactCustomScrollbars.Scrollbars>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@types/react:DOMAttributes",
      "required": false
     },
     {
      "uid": 341,
      "name": "onMouseOver",
      "typeValue": {
       "raw": "React.MouseEventHandler<ReactCustomScrollbars.Scrollbars>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@types/react:DOMAttributes",
      "required": false
     },
     {
      "uid": 342,
      "name": "onMouseOverCapture",
      "typeValue": {
       "raw": "React.MouseEventHandler<ReactCustomScrollbars.Scrollbars>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@types/react:DOMAttributes",
      "required": false
     },
     {
      "uid": 343,
      "name": "onMouseUp",
      "typeValue": {
       "raw": "React.MouseEventHandler<ReactCustomScrollbars.Scrollbars>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@types/react:DOMAttributes",
      "required": false
     },
     {
      "uid": 344,
      "name": "onMouseUpCapture",
      "typeValue": {
       "raw": "React.MouseEventHandler<ReactCustomScrollbars.Scrollbars>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@types/react:DOMAttributes",
      "required": false
     },
     {
      "uid": 345,
      "name": "onSelect",
      "typeValue": {
       "raw": "React.ReactEventHandler<ReactCustomScrollbars.Scrollbars>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@types/react:DOMAttributes",
      "required": false
     },
     {
      "uid": 346,
      "name": "onSelectCapture",
      "typeValue": {
       "raw": "React.ReactEventHandler<ReactCustomScrollbars.Scrollbars>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@types/react:DOMAttributes",
      "required": false
     },
     {
      "uid": 347,
      "name": "onTouchCancel",
      "typeValue": {
       "raw": "React.TouchEventHandler<ReactCustomScrollbars.Scrollbars>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@types/react:DOMAttributes",
      "required": false
     },
     {
      "uid": 348,
      "name": "onTouchCancelCapture",
      "typeValue": {
       "raw": "React.TouchEventHandler<ReactCustomScrollbars.Scrollbars>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@types/react:DOMAttributes",
      "required": false
     },
     {
      "uid": 349,
      "name": "onTouchEnd",
      "typeValue": {
       "raw": "React.TouchEventHandler<ReactCustomScrollbars.Scrollbars>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@types/react:DOMAttributes",
      "required": false
     },
     {
      "uid": 350,
      "name": "onTouchEndCapture",
      "typeValue": {
       "raw": "React.TouchEventHandler<ReactCustomScrollbars.Scrollbars>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@types/react:DOMAttributes",
      "required": false
     },
     {
      "uid": 351,
      "name": "onTouchMove",
      "typeValue": {
       "raw": "React.TouchEventHandler<ReactCustomScrollbars.Scrollbars>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@types/react:DOMAttributes",
      "required": false
     },
     {
      "uid": 352,
      "name": "onTouchMoveCapture",
      "typeValue": {
       "raw": "React.TouchEventHandler<ReactCustomScrollbars.Scrollbars>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@types/react:DOMAttributes",
      "required": false
     },
     {
      "uid": 353,
      "name": "onTouchStart",
      "typeValue": {
       "raw": "React.TouchEventHandler<ReactCustomScrollbars.Scrollbars>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@types/react:DOMAttributes",
      "required": false
     },
     {
      "uid": 354,
      "name": "onTouchStartCapture",
      "typeValue": {
       "raw": "React.TouchEventHandler<ReactCustomScrollbars.Scrollbars>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@types/react:DOMAttributes",
      "required": false
     },
     {
      "uid": 355,
      "name": "onPointerDown",
      "typeValue": {
       "raw": "React.PointerEventHandler<ReactCustomScrollbars.Scrollbars>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@types/react:DOMAttributes",
      "required": false
     },
     {
      "uid": 356,
      "name": "onPointerDownCapture",
      "typeValue": {
       "raw": "React.PointerEventHandler<ReactCustomScrollbars.Scrollbars>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@types/react:DOMAttributes",
      "required": false
     },
     {
      "uid": 357,
      "name": "onPointerMove",
      "typeValue": {
       "raw": "React.PointerEventHandler<ReactCustomScrollbars.Scrollbars>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@types/react:DOMAttributes",
      "required": false
     },
     {
      "uid": 358,
      "name": "onPointerMoveCapture",
      "typeValue": {
       "raw": "React.PointerEventHandler<ReactCustomScrollbars.Scrollbars>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@types/react:DOMAttributes",
      "required": false
     },
     {
      "uid": 359,
      "name": "onPointerUp",
      "typeValue": {
       "raw": "React.PointerEventHandler<ReactCustomScrollbars.Scrollbars>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@types/react:DOMAttributes",
      "required": false
     },
     {
      "uid": 360,
      "name": "onPointerUpCapture",
      "typeValue": {
       "raw": "React.PointerEventHandler<ReactCustomScrollbars.Scrollbars>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@types/react:DOMAttributes",
      "required": false
     },
     {
      "uid": 361,
      "name": "onPointerCancel",
      "typeValue": {
       "raw": "React.PointerEventHandler<ReactCustomScrollbars.Scrollbars>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@types/react:DOMAttributes",
      "required": false
     },
     {
      "uid": 362,
      "name": "onPointerCancelCapture",
      "typeValue": {
       "raw": "React.PointerEventHandler<ReactCustomScrollbars.Scrollbars>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@types/react:DOMAttributes",
      "required": false
     },
     {
      "uid": 363,
      "name": "onPointerEnter",
      "typeValue": {
       "raw": "React.PointerEventHandler<ReactCustomScrollbars.Scrollbars>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@types/react:DOMAttributes",
      "required": false
     },
     {
      "uid": 364,
      "name": "onPointerEnterCapture",
      "typeValue": {
       "raw": "React.PointerEventHandler<ReactCustomScrollbars.Scrollbars>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@types/react:DOMAttributes",
      "required": false
     },
     {
      "uid": 365,
      "name": "onPointerLeave",
      "typeValue": {
       "raw": "React.PointerEventHandler<ReactCustomScrollbars.Scrollbars>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@types/react:DOMAttributes",
      "required": false
     },
     {
      "uid": 366,
      "name": "onPointerLeaveCapture",
      "typeValue": {
       "raw": "React.PointerEventHandler<ReactCustomScrollbars.Scrollbars>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@types/react:DOMAttributes",
      "required": false
     },
     {
      "uid": 367,
      "name": "onPointerOver",
      "typeValue": {
       "raw": "React.PointerEventHandler<ReactCustomScrollbars.Scrollbars>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@types/react:DOMAttributes",
      "required": false
     },
     {
      "uid": 368,
      "name": "onPointerOverCapture",
      "typeValue": {
       "raw": "React.PointerEventHandler<ReactCustomScrollbars.Scrollbars>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@types/react:DOMAttributes",
      "required": false
     },
     {
      "uid": 369,
      "name": "onPointerOut",
      "typeValue": {
       "raw": "React.PointerEventHandler<ReactCustomScrollbars.Scrollbars>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@types/react:DOMAttributes",
      "required": false
     },
     {
      "uid": 370,
      "name": "onPointerOutCapture",
      "typeValue": {
       "raw": "React.PointerEventHandler<ReactCustomScrollbars.Scrollbars>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@types/react:DOMAttributes",
      "required": false
     },
     {
      "uid": 371,
      "name": "onGotPointerCapture",
      "typeValue": {
       "raw": "React.PointerEventHandler<ReactCustomScrollbars.Scrollbars>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@types/react:DOMAttributes",
      "required": false
     },
     {
      "uid": 372,
      "name": "onGotPointerCaptureCapture",
      "typeValue": {
       "raw": "React.PointerEventHandler<ReactCustomScrollbars.Scrollbars>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@types/react:DOMAttributes",
      "required": false
     },
     {
      "uid": 373,
      "name": "onLostPointerCapture",
      "typeValue": {
       "raw": "React.PointerEventHandler<ReactCustomScrollbars.Scrollbars>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@types/react:DOMAttributes",
      "required": false
     },
     {
      "uid": 374,
      "name": "onLostPointerCaptureCapture",
      "typeValue": {
       "raw": "React.PointerEventHandler<ReactCustomScrollbars.Scrollbars>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@types/react:DOMAttributes",
      "required": false
     },
     {
      "uid": 375,
      "name": "onScrollCapture",
      "typeValue": {
       "raw": "React.UIEventHandler<ReactCustomScrollbars.Scrollbars>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@types/react:DOMAttributes",
      "required": false
     },
     {
      "uid": 376,
      "name": "onWheel",
      "typeValue": {
       "raw": "React.WheelEventHandler<ReactCustomScrollbars.Scrollbars>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@types/react:DOMAttributes",
      "required": false
     },
     {
      "uid": 377,
      "name": "onWheelCapture",
      "typeValue": {
       "raw": "React.WheelEventHandler<ReactCustomScrollbars.Scrollbars>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@types/react:DOMAttributes",
      "required": false
     },
     {
      "uid": 378,
      "name": "onAnimationStart",
      "typeValue": {
       "raw": "React.AnimationEventHandler<ReactCustomScrollbars.Scrollbars>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@types/react:DOMAttributes",
      "required": false
     },
     {
      "uid": 379,
      "name": "onAnimationStartCapture",
      "typeValue": {
       "raw": "React.AnimationEventHandler<ReactCustomScrollbars.Scrollbars>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@types/react:DOMAttributes",
      "required": false
     },
     {
      "uid": 380,
      "name": "onAnimationEnd",
      "typeValue": {
       "raw": "React.AnimationEventHandler<ReactCustomScrollbars.Scrollbars>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@types/react:DOMAttributes",
      "required": false
     },
     {
      "uid": 381,
      "name": "onAnimationEndCapture",
      "typeValue": {
       "raw": "React.AnimationEventHandler<ReactCustomScrollbars.Scrollbars>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@types/react:DOMAttributes",
      "required": false
     },
     {
      "uid": 382,
      "name": "onAnimationIteration",
      "typeValue": {
       "raw": "React.AnimationEventHandler<ReactCustomScrollbars.Scrollbars>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@types/react:DOMAttributes",
      "required": false
     },
     {
      "uid": 383,
      "name": "onAnimationIterationCapture",
      "typeValue": {
       "raw": "React.AnimationEventHandler<ReactCustomScrollbars.Scrollbars>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@types/react:DOMAttributes",
      "required": false
     },
     {
      "uid": 384,
      "name": "onTransitionEnd",
      "typeValue": {
       "raw": "React.TransitionEventHandler<ReactCustomScrollbars.Scrollbars>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@types/react:DOMAttributes",
      "required": false
     },
     {
      "uid": 385,
      "name": "onTransitionEndCapture",
      "typeValue": {
       "raw": "React.TransitionEventHandler<ReactCustomScrollbars.Scrollbars>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@types/react:DOMAttributes",
      "required": false
     },
     {
      "uid": 386,
      "name": "rawProps",
      "comment": {
       "raw": [
        "Any HTML attributes (native or 'data-') to put on the underlying component"
       ]
      },
      "typeValue": {
       "raw": "ReactCustomScrollbars.Scrollbars & Record<`data-${string}`, string>"
      },
      "from": "@epam/uui-core:IHasRawProps",
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui-components:ScrollbarsApi": {
   "summary": {
    "module": "@epam/uui-components",
    "typeName": {
     "name": "ScrollbarsApi",
     "nameFull": "ScrollbarsApi"
    },
    "src": "uui-components/src/layout/ScrollBars.tsx",
    "exported": true
   },
   "details": {
    "kind": 263,
    "typeValue": {
     "raw": "ScrollbarsApi",
     "print": [
      "interface ScrollbarsApi extends Scrollbars {",
      "}"
     ]
    },
    "props": [
     {
      "uid": 1,
      "name": "scrollTop",
      "typeValue": {
       "raw": "(top: number) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "node_modules/react-custom-scrollbars-2/index.d.ts:Scrollbars",
      "required": true
     },
     {
      "uid": 2,
      "name": "scrollLeft",
      "typeValue": {
       "raw": "(left: number) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "node_modules/react-custom-scrollbars-2/index.d.ts:Scrollbars",
      "required": true
     },
     {
      "uid": 3,
      "name": "scrollToTop",
      "typeValue": {
       "raw": "() => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "node_modules/react-custom-scrollbars-2/index.d.ts:Scrollbars",
      "required": true
     },
     {
      "uid": 4,
      "name": "scrollToBottom",
      "typeValue": {
       "raw": "() => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "node_modules/react-custom-scrollbars-2/index.d.ts:Scrollbars",
      "required": true
     },
     {
      "uid": 5,
      "name": "scrollToLeft",
      "typeValue": {
       "raw": "() => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "node_modules/react-custom-scrollbars-2/index.d.ts:Scrollbars",
      "required": true
     },
     {
      "uid": 6,
      "name": "scrollToRight",
      "typeValue": {
       "raw": "() => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "node_modules/react-custom-scrollbars-2/index.d.ts:Scrollbars",
      "required": true
     },
     {
      "uid": 7,
      "name": "getScrollLeft",
      "typeValue": {
       "raw": "() => number"
      },
      "editor": {
       "type": "func"
      },
      "from": "node_modules/react-custom-scrollbars-2/index.d.ts:Scrollbars",
      "required": true
     },
     {
      "uid": 8,
      "name": "getScrollTop",
      "typeValue": {
       "raw": "() => number"
      },
      "editor": {
       "type": "func"
      },
      "from": "node_modules/react-custom-scrollbars-2/index.d.ts:Scrollbars",
      "required": true
     },
     {
      "uid": 9,
      "name": "getScrollWidth",
      "typeValue": {
       "raw": "() => number"
      },
      "editor": {
       "type": "func"
      },
      "from": "node_modules/react-custom-scrollbars-2/index.d.ts:Scrollbars",
      "required": true
     },
     {
      "uid": 10,
      "name": "getScrollHeight",
      "typeValue": {
       "raw": "() => number"
      },
      "editor": {
       "type": "func"
      },
      "from": "node_modules/react-custom-scrollbars-2/index.d.ts:Scrollbars",
      "required": true
     },
     {
      "uid": 11,
      "name": "getClientWidth",
      "typeValue": {
       "raw": "() => number"
      },
      "editor": {
       "type": "func"
      },
      "from": "node_modules/react-custom-scrollbars-2/index.d.ts:Scrollbars",
      "required": true
     },
     {
      "uid": 12,
      "name": "getClientHeight",
      "typeValue": {
       "raw": "() => number"
      },
      "editor": {
       "type": "func"
      },
      "from": "node_modules/react-custom-scrollbars-2/index.d.ts:Scrollbars",
      "required": true
     },
     {
      "uid": 13,
      "name": "getValues",
      "typeValue": {
       "raw": "() => ReactCustomScrollbars.positionValues"
      },
      "editor": {
       "type": "func"
      },
      "from": "node_modules/react-custom-scrollbars-2/index.d.ts:Scrollbars",
      "required": true
     },
     {
      "uid": 14,
      "name": "container",
      "typeValue": {
       "raw": "HTMLDivElement"
      },
      "from": "node_modules/react-custom-scrollbars-2/index.d.ts:Scrollbars",
      "required": true
     },
     {
      "uid": 15,
      "name": "context",
      "comment": {
       "raw": [
        "If using the new style context, re-declare this in your class to be the",
        " `React.ContextType` of your `static contextType`.",
        " Should be used with type annotation or static contextType.",
        "",
        " ```ts",
        " static contextType = MyContext",
        " // For TS pre-3.7:",
        " context!: React.ContextType<typeof MyContext>",
        " // For TS 3.7 and above:",
        " declare context: React.ContextType<typeof MyContext>",
        " ```",
        "",
        " @see https://reactjs.org/docs/context.html"
       ]
      },
      "typeValue": {
       "raw": "unknown"
      },
      "from": "@types/react:Component",
      "required": true
     },
     {
      "uid": 16,
      "name": "setState",
      "typeValue": {
       "raw": "<K>(state: {} | ((prevState: Readonly<{}>, props: Readonly<ReactCustomScrollbars.ScrollbarProps>) => {} | Pick<{}, K> | null) | Pick<{}, K> | null, callback?: (() => void) | undefined) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@types/react:Component",
      "required": true
     },
     {
      "uid": 17,
      "name": "forceUpdate",
      "typeValue": {
       "raw": "(callback?: (() => void) | undefined) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@types/react:Component",
      "required": true
     },
     {
      "uid": 18,
      "name": "render",
      "typeValue": {
       "raw": "() => React.ReactNode"
      },
      "editor": {
       "type": "component"
      },
      "from": "@types/react:Component",
      "required": true
     },
     {
      "uid": 19,
      "name": "props",
      "typeValue": {
       "raw": "Readonly<ReactCustomScrollbars.ScrollbarProps>"
      },
      "typeValueRef": "node_modules/typescript/lib/lib.es5.d.ts:Readonly",
      "from": "@types/react:Component",
      "required": true
     },
     {
      "uid": 20,
      "name": "state",
      "typeValue": {
       "raw": "Readonly<{}>"
      },
      "typeValueRef": "node_modules/typescript/lib/lib.es5.d.ts:Readonly",
      "from": "@types/react:Component",
      "required": true
     },
     {
      "uid": 21,
      "name": "refs",
      "comment": {
       "raw": [
        "@deprecated",
        " https://reactjs.org/docs/refs-and-the-dom.html#legacy-api-string-refs"
       ]
      },
      "typeValue": {
       "raw": "{ [key: string]: React.ReactInstance; }"
      },
      "from": "@types/react:Component",
      "required": true
     },
     {
      "uid": 22,
      "name": "componentDidMount",
      "comment": {
       "raw": [
        "Called immediately after a component is mounted. Setting state here will trigger re-rendering."
       ]
      },
      "typeValue": {
       "raw": "() => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@types/react:ComponentLifecycle",
      "required": false
     },
     {
      "uid": 23,
      "name": "shouldComponentUpdate",
      "comment": {
       "raw": [
        "Called to determine whether the change in props and state should trigger a re-render.",
        "",
        " `Component` always returns true.",
        " `PureComponent` implements a shallow comparison on props and state and returns true if any",
        " props or states have changed.",
        "",
        " If false is returned, `Component#render`, `componentWillUpdate`",
        " and `componentDidUpdate` will not be called."
       ]
      },
      "typeValue": {
       "raw": "(nextProps: Readonly<ReactCustomScrollbars.ScrollbarProps>, nextState: Readonly<{}>, nextContext: any) => boolean"
      },
      "editor": {
       "type": "func"
      },
      "from": "@types/react:ComponentLifecycle",
      "required": false
     },
     {
      "uid": 24,
      "name": "componentWillUnmount",
      "comment": {
       "raw": [
        "Called immediately before a component is destroyed. Perform any necessary cleanup in this method, such as",
        " cancelled network requests, or cleaning up any DOM elements created in `componentDidMount`."
       ]
      },
      "typeValue": {
       "raw": "() => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@types/react:ComponentLifecycle",
      "required": false
     },
     {
      "uid": 25,
      "name": "componentDidCatch",
      "comment": {
       "raw": [
        "Catches exceptions generated in descendant components. Unhandled exceptions will cause",
        " the entire component tree to unmount."
       ]
      },
      "typeValue": {
       "raw": "(error: Error, errorInfo: React.ErrorInfo) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@types/react:ComponentLifecycle",
      "required": false
     },
     {
      "uid": 26,
      "name": "getSnapshotBeforeUpdate",
      "comment": {
       "raw": [
        "Runs before React applies the result of `render` to the document, and",
        " returns an object to be given to componentDidUpdate. Useful for saving",
        " things such as scroll position before `render` causes changes to it.",
        "",
        " Note: the presence of getSnapshotBeforeUpdate prevents any of the deprecated",
        " lifecycle events from running."
       ]
      },
      "typeValue": {
       "raw": "(prevProps: Readonly<ReactCustomScrollbars.ScrollbarProps>, prevState: Readonly<{}>) => any"
      },
      "editor": {
       "type": "func"
      },
      "from": "@types/react:NewLifecycle",
      "required": false
     },
     {
      "uid": 27,
      "name": "componentDidUpdate",
      "comment": {
       "raw": [
        "Called immediately after updating occurs. Not called for the initial render.",
        "",
        " The snapshot is only present if getSnapshotBeforeUpdate is present and returns non-null."
       ]
      },
      "typeValue": {
       "raw": "(prevProps: Readonly<ReactCustomScrollbars.ScrollbarProps>, prevState: Readonly<{}>, snapshot?: any) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@types/react:NewLifecycle",
      "required": false
     },
     {
      "uid": 28,
      "name": "componentWillMount",
      "comment": {
       "raw": [
        "Called immediately before mounting occurs, and before `Component#render`.",
        " Avoid introducing any side-effects or subscriptions in this method.",
        "",
        " Note: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps",
        " prevents this from being invoked.",
        "",
        " @deprecated 16.3, use componentDidMount or the constructor instead; will stop working in React 17",
        " @see https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#initializing-state",
        " @see https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#gradual-migration-path"
       ]
      },
      "typeValue": {
       "raw": "() => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@types/react:DeprecatedLifecycle",
      "required": false
     },
     {
      "uid": 29,
      "name": "UNSAFE_componentWillMount",
      "comment": {
       "raw": [
        "Called immediately before mounting occurs, and before `Component#render`.",
        " Avoid introducing any side-effects or subscriptions in this method.",
        "",
        " This method will not stop working in React 17.",
        "",
        " Note: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps",
        " prevents this from being invoked.",
        "",
        " @deprecated 16.3, use componentDidMount or the constructor instead",
        " @see https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#initializing-state",
        " @see https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#gradual-migration-path"
       ]
      },
      "typeValue": {
       "raw": "() => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@types/react:DeprecatedLifecycle",
      "required": false
     },
     {
      "uid": 30,
      "name": "componentWillReceiveProps",
      "comment": {
       "raw": [
        "Called when the component may be receiving new props.",
        " React may call this even if props have not changed, so be sure to compare new and existing",
        " props if you only want to handle changes.",
        "",
        " Calling `Component#setState` generally does not trigger this method.",
        "",
        " Note: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps",
        " prevents this from being invoked.",
        "",
        " @deprecated 16.3, use static getDerivedStateFromProps instead; will stop working in React 17",
        " @see https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#updating-state-based-on-props",
        " @see https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#gradual-migration-path"
       ]
      },
      "typeValue": {
       "raw": "(nextProps: Readonly<ReactCustomScrollbars.ScrollbarProps>, nextContext: any) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@types/react:DeprecatedLifecycle",
      "required": false
     },
     {
      "uid": 31,
      "name": "UNSAFE_componentWillReceiveProps",
      "comment": {
       "raw": [
        "Called when the component may be receiving new props.",
        " React may call this even if props have not changed, so be sure to compare new and existing",
        " props if you only want to handle changes.",
        "",
        " Calling `Component#setState` generally does not trigger this method.",
        "",
        " This method will not stop working in React 17.",
        "",
        " Note: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps",
        " prevents this from being invoked.",
        "",
        " @deprecated 16.3, use static getDerivedStateFromProps instead",
        " @see https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#updating-state-based-on-props",
        " @see https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#gradual-migration-path"
       ]
      },
      "typeValue": {
       "raw": "(nextProps: Readonly<ReactCustomScrollbars.ScrollbarProps>, nextContext: any) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@types/react:DeprecatedLifecycle",
      "required": false
     },
     {
      "uid": 32,
      "name": "componentWillUpdate",
      "comment": {
       "raw": [
        "Called immediately before rendering when new props or state is received. Not called for the initial render.",
        "",
        " Note: You cannot call `Component#setState` here.",
        "",
        " Note: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps",
        " prevents this from being invoked.",
        "",
        " @deprecated 16.3, use getSnapshotBeforeUpdate instead; will stop working in React 17",
        " @see https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#reading-dom-properties-before-an-update",
        " @see https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#gradual-migration-path"
       ]
      },
      "typeValue": {
       "raw": "(nextProps: Readonly<ReactCustomScrollbars.ScrollbarProps>, nextState: Readonly<{}>, nextContext: any) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@types/react:DeprecatedLifecycle",
      "required": false
     },
     {
      "uid": 33,
      "name": "UNSAFE_componentWillUpdate",
      "comment": {
       "raw": [
        "Called immediately before rendering when new props or state is received. Not called for the initial render.",
        "",
        " Note: You cannot call `Component#setState` here.",
        "",
        " This method will not stop working in React 17.",
        "",
        " Note: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps",
        " prevents this from being invoked.",
        "",
        " @deprecated 16.3, use getSnapshotBeforeUpdate instead",
        " @see https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#reading-dom-properties-before-an-update",
        " @see https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#gradual-migration-path"
       ]
      },
      "typeValue": {
       "raw": "(nextProps: Readonly<ReactCustomScrollbars.ScrollbarProps>, nextState: Readonly<{}>, nextContext: any) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@types/react:DeprecatedLifecycle",
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui-components:SelectionContextState": {
   "summary": {
    "module": "@epam/uui-components",
    "typeName": {
     "name": "SelectionContextState",
     "nameFull": "SelectionContextState<TItem, TId, TFilter>"
    },
    "src": "uui-components/src/table/tableCellsSelection/DataTableSelectionContext.ts",
    "exported": true
   },
   "details": {
    "kind": 263,
    "typeValue": {
     "raw": "SelectionContextState<TItem, TId, TFilter>",
     "print": [
      "interface SelectionContextState<TItem = any, TId = any, TFilter = any> extends Pick<SelectionManager<TItem, TId, TFilter>, 'selectionRange' | 'setSelectionRange' | 'getCellSelectionInfo'> {",
      "}"
     ]
    },
    "props": [
     {
      "uid": 1,
      "name": "selectionRange",
      "typeValue": {
       "raw": "DataTableSelectionRange"
      },
      "from": "@epam/uui-components:SelectionManager",
      "required": true
     },
     {
      "uid": 2,
      "name": "setSelectionRange",
      "typeValue": {
       "raw": "React.Dispatch<React.SetStateAction<DataTableSelectionRange>>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-components:SelectionManager",
      "required": true
     },
     {
      "uid": 3,
      "name": "getCellSelectionInfo",
      "typeValue": {
       "raw": "(row: number, column: number) => { isSelected: boolean; showTopBorder: boolean; showRightBorder: boolean; showBottomBorder: boolean; showLeftBorder: boolean; canCopyFrom: boolean; canAcceptCopy: boolean; isStartCell: boolean; }"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-components:SelectionManager",
      "required": true
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui-components:SinglePickerProps": {
   "summary": {
    "module": "@epam/uui-components",
    "typeName": {
     "name": "SinglePickerProps",
     "nameFull": "SinglePickerProps<TId, TItem>"
    },
    "src": "uui-components/src/pickers/bindingHelpers.ts",
    "exported": true
   },
   "details": {
    "kind": 264,
    "typeValue": {
     "raw": "{ selectionMode: 'single'; valueType: 'id'; } & IEditable<TId> | { selectionMode: 'single'; valueType?: 'entity' | undefined; } & IEditable<TItem>",
     "print": [
      "type SinglePickerProps<TId, TItem> = ({",
      "    selectionMode: 'single';",
      "    valueType: 'id';",
      "} & IEditable<TId>) | ({",
      "    selectionMode: 'single';",
      "    valueType?: 'entity';",
      "} & IEditable<TItem>);"
     ]
    },
    "props": [
     {
      "uid": 11,
      "name": "selectionMode",
      "typeValue": {
       "raw": "'single'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "single"
       ]
      },
      "required": true
     },
     {
      "uid": 2,
      "name": "valueType",
      "typeValue": {
       "raw": "'id'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "id"
       ]
      },
      "required": true
     },
     {
      "uid": 3,
      "name": "value",
      "comment": {
       "raw": [
        "The current value of component"
       ]
      },
      "typeValue": {
       "raw": "TId"
      },
      "from": "@epam/uui-core:IEditable",
      "required": true
     },
     {
      "uid": 4,
      "name": "onValueChange",
      "comment": {
       "raw": [
        "Called when value needs to be changed (usually due to user interaction)"
       ]
      },
      "typeValue": {
       "raw": "(newValue: TId) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IEditable",
      "required": true
     },
     {
      "uid": 15,
      "name": "isInvalid",
      "comment": {
       "raw": [
        "True if component contains invalid input"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:ICanBeInvalid",
      "required": false
     },
     {
      "uid": 16,
      "name": "validationMessage",
      "comment": {
       "raw": [
        "Message describing why the value is invalid"
       ]
      },
      "typeValue": {
       "raw": "null | string | number | boolean | React.ReactElement<any, string | React.JSXElementConstructor<any>> | React.ReactFragment | React.ReactPortal"
      },
      "typeValueRef": "@types/react:ReactNode",
      "from": "@epam/uui-core:ICanBeInvalid",
      "required": false
     },
     {
      "uid": 17,
      "name": "validationProps",
      "comment": {
       "raw": [
        "If T is a complex value (object or array), this property contains validation states of inner items"
       ]
      },
      "typeValue": {
       "raw": "{ [key: string]: ICanBeInvalid; }"
      },
      "from": "@epam/uui-core:ICanBeInvalid",
      "required": false
     },
     {
      "uid": 18,
      "name": "isDisabled",
      "comment": {
       "raw": [
        "Disable editing, and visually de-emphasize value of the component"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:IDisableable",
      "required": false
     },
     {
      "uid": 19,
      "name": "isReadonly",
      "comment": {
       "raw": [
        "Disable editing. Unlike isDisabled, keep component's value readable."
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:ICanBeReadonly",
      "required": false
     },
     {
      "uid": 20,
      "name": "isRequired",
      "comment": {
       "raw": [
        "Marks that component's value is required and shouldn't be empty"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:ICanBeRequired",
      "required": false
     },
     {
      "uid": 12,
      "name": "valueType",
      "typeValue": {
       "raw": "'entity'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "entity"
       ]
      },
      "required": false
     },
     {
      "uid": 13,
      "name": "value",
      "comment": {
       "raw": [
        "The current value of component"
       ]
      },
      "typeValue": {
       "raw": "TItem"
      },
      "from": "@epam/uui-core:IEditable",
      "required": true
     },
     {
      "uid": 14,
      "name": "onValueChange",
      "comment": {
       "raw": [
        "Called when value needs to be changed (usually due to user interaction)"
       ]
      },
      "typeValue": {
       "raw": "(newValue: TItem) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IEditable",
      "required": true
     }
    ],
    "propsFromUnion": true
   }
  },
  "@epam/uui-components:SliderBaseProps": {
   "summary": {
    "module": "@epam/uui-components",
    "typeName": {
     "name": "SliderBaseProps",
     "nameFull": "SliderBaseProps<TSelection>"
    },
    "src": "uui-components/src/inputs/Slider/SliderBase.tsx",
    "exported": true
   },
   "details": {
    "kind": 263,
    "typeValue": {
     "raw": "SliderBaseProps<TSelection>",
     "print": [
      "interface SliderBaseProps<TSelection> extends IHasCX, IEditable<TSelection>, IDisableable, IHasRawProps<React.HTMLAttributes<HTMLDivElement>>, IHasForwardedRef<HTMLDivElement> {",
      "    /** Min value (when slider is at leftmost position) */",
      "    min: number;",
      "    /** Max value (when slider is at rightmost position) */",
      "    max: number;",
      "    /** Value change step */",
      "    step: number;",
      "    /** Slider renders a label at each splitAt position */",
      "    splitAt?: number;",
      "    /** Overrides rendering of values labels */",
      "    renderLabel?: (value: number) => string;",
      "    /** Toggles rendering of tooltip with current value */",
      "    showTooltip?: boolean;",
      "}"
     ]
    },
    "props": [
     {
      "uid": 1,
      "name": "min",
      "comment": {
       "raw": [
        "Min value (when slider is at leftmost position)"
       ]
      },
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "required": true
     },
     {
      "uid": 2,
      "name": "max",
      "comment": {
       "raw": [
        "Max value (when slider is at rightmost position)"
       ]
      },
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "required": true
     },
     {
      "uid": 3,
      "name": "step",
      "comment": {
       "raw": [
        "Value change step"
       ]
      },
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "required": true
     },
     {
      "uid": 4,
      "name": "splitAt",
      "comment": {
       "raw": [
        "Slider renders a label at each splitAt position"
       ]
      },
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "required": false
     },
     {
      "uid": 5,
      "name": "renderLabel",
      "comment": {
       "raw": [
        "Overrides rendering of values labels"
       ]
      },
      "typeValue": {
       "raw": "(value: number) => string"
      },
      "editor": {
       "type": "func"
      },
      "required": false
     },
     {
      "uid": 6,
      "name": "showTooltip",
      "comment": {
       "raw": [
        "Toggles rendering of tooltip with current value"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "required": false
     },
     {
      "uid": 7,
      "name": "cx",
      "comment": {
       "raw": [
        "CSS class(es) to put on component's root. See {@link https://github.com/JedWatson/classnames#usage} for details"
       ]
      },
      "typeValue": {
       "raw": "null | string | number | boolean | ClassDictionary | ClassArray"
      },
      "typeValueRef": "@epam/uui-core:ClassValue",
      "from": "@epam/uui-core:IHasCX",
      "required": false
     },
     {
      "uid": 8,
      "name": "value",
      "comment": {
       "raw": [
        "The current value of component"
       ]
      },
      "typeValue": {
       "raw": "TSelection"
      },
      "from": "@epam/uui-core:IEditable",
      "required": true
     },
     {
      "uid": 9,
      "name": "onValueChange",
      "comment": {
       "raw": [
        "Called when value needs to be changed (usually due to user interaction)"
       ]
      },
      "typeValue": {
       "raw": "(newValue: TSelection) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IEditable",
      "required": true
     },
     {
      "uid": 10,
      "name": "isInvalid",
      "comment": {
       "raw": [
        "True if component contains invalid input"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:ICanBeInvalid",
      "required": false
     },
     {
      "uid": 11,
      "name": "validationMessage",
      "comment": {
       "raw": [
        "Message describing why the value is invalid"
       ]
      },
      "typeValue": {
       "raw": "null | string | number | boolean | React.ReactElement<any, string | React.JSXElementConstructor<any>> | React.ReactFragment | React.ReactPortal"
      },
      "typeValueRef": "@types/react:ReactNode",
      "from": "@epam/uui-core:ICanBeInvalid",
      "required": false
     },
     {
      "uid": 12,
      "name": "validationProps",
      "comment": {
       "raw": [
        "If T is a complex value (object or array), this property contains validation states of inner items"
       ]
      },
      "typeValue": {
       "raw": "{ [key: string]: ICanBeInvalid; }"
      },
      "from": "@epam/uui-core:ICanBeInvalid",
      "required": false
     },
     {
      "uid": 13,
      "name": "isDisabled",
      "comment": {
       "raw": [
        "Disable editing, and visually de-emphasize value of the component"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:IDisableable",
      "required": false
     },
     {
      "uid": 14,
      "name": "isReadonly",
      "comment": {
       "raw": [
        "Disable editing. Unlike isDisabled, keep component's value readable."
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:ICanBeReadonly",
      "required": false
     },
     {
      "uid": 15,
      "name": "isRequired",
      "comment": {
       "raw": [
        "Marks that component's value is required and shouldn't be empty"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:ICanBeRequired",
      "required": false
     },
     {
      "uid": 16,
      "name": "rawProps",
      "comment": {
       "raw": [
        "Any HTML attributes (native or 'data-') to put on the underlying component"
       ]
      },
      "typeValue": {
       "raw": "React.HTMLAttributes<HTMLDivElement> & Record<`data-${string}`, string>"
      },
      "from": "@epam/uui-core:IHasRawProps",
      "required": false
     },
     {
      "uid": 17,
      "name": "forwardedRef",
      "comment": {
       "raw": [
        "this ref is passed to the underlying component"
       ]
      },
      "typeValue": {
       "raw": "null | (instance: HTMLDivElement | null) => void | React.MutableRefObject<HTMLDivElement | null>"
      },
      "from": "@epam/uui-core:IHasForwardedRef",
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui-components:SliderBaseState": {
   "summary": {
    "module": "@epam/uui-components",
    "typeName": {
     "name": "SliderBaseState",
     "nameFull": "SliderBaseState"
    },
    "src": "uui-components/src/inputs/Slider/SliderBase.tsx",
    "exported": true
   },
   "details": {
    "kind": 263,
    "typeValue": {
     "raw": "SliderBaseState",
     "print": [
      "interface SliderBaseState {",
      "    isActive: boolean;",
      "    valueWidth: number;",
      "}"
     ]
    },
    "props": [
     {
      "uid": 1,
      "name": "isActive",
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "required": true
     },
     {
      "uid": 2,
      "name": "valueWidth",
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "required": true
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui-components:SnackbarProps": {
   "summary": {
    "module": "@epam/uui-components",
    "typeName": {
     "name": "SnackbarProps",
     "nameFull": "SnackbarProps"
    },
    "src": "uui-components/src/overlays/Snackbar.tsx",
    "exported": true
   },
   "details": {
    "kind": 263,
    "typeValue": {
     "raw": "SnackbarProps",
     "print": [
      "interface SnackbarProps extends IHasCX, IHasRawProps<React.HTMLAttributes<HTMLDivElement>>, IHasForwardedRef<HTMLDivElement> {",
      "    closeIcon?: Icon;",
      "    notifications?: NotificationOperation[];",
      "}"
     ]
    },
    "props": [
     {
      "uid": 1,
      "name": "closeIcon",
      "typeValue": {
       "raw": "Icon"
      },
      "editor": {
       "type": "component"
      },
      "required": false
     },
     {
      "uid": 2,
      "name": "notifications",
      "typeValue": {
       "raw": "NotificationOperation[]"
      },
      "required": false
     },
     {
      "uid": 3,
      "name": "cx",
      "comment": {
       "raw": [
        "CSS class(es) to put on component's root. See {@link https://github.com/JedWatson/classnames#usage} for details"
       ]
      },
      "typeValue": {
       "raw": "null | string | number | boolean | ClassDictionary | ClassArray"
      },
      "typeValueRef": "@epam/uui-core:ClassValue",
      "from": "@epam/uui-core:IHasCX",
      "required": false
     },
     {
      "uid": 4,
      "name": "rawProps",
      "comment": {
       "raw": [
        "Any HTML attributes (native or 'data-') to put on the underlying component"
       ]
      },
      "typeValue": {
       "raw": "React.HTMLAttributes<HTMLDivElement> & Record<`data-${string}`, string>"
      },
      "from": "@epam/uui-core:IHasRawProps",
      "required": false
     },
     {
      "uid": 5,
      "name": "forwardedRef",
      "comment": {
       "raw": [
        "this ref is passed to the underlying component"
       ]
      },
      "typeValue": {
       "raw": "null | (instance: HTMLDivElement | null) => void | React.MutableRefObject<HTMLDivElement | null>"
      },
      "from": "@epam/uui-core:IHasForwardedRef",
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui-components:SpinnerProps": {
   "summary": {
    "module": "@epam/uui-components",
    "typeName": {
     "name": "SpinnerProps",
     "nameFull": "SpinnerProps"
    },
    "src": "uui-components/src/widgets/Spinner.tsx",
    "exported": true
   },
   "details": {
    "kind": 263,
    "typeValue": {
     "raw": "SpinnerProps",
     "print": [
      "interface SpinnerProps extends SpinnerCoreProps {",
      "}"
     ]
    },
    "props": [
     {
      "uid": 1,
      "name": "cx",
      "comment": {
       "raw": [
        "CSS class(es) to put on component's root. See {@link https://github.com/JedWatson/classnames#usage} for details"
       ]
      },
      "typeValue": {
       "raw": "null | string | number | boolean | ClassDictionary | ClassArray"
      },
      "typeValueRef": "@epam/uui-core:ClassValue",
      "from": "@epam/uui-core:IHasCX",
      "required": false
     },
     {
      "uid": 2,
      "name": "rawProps",
      "comment": {
       "raw": [
        "Any HTML attributes (native or 'data-') to put on the underlying component"
       ]
      },
      "typeValue": {
       "raw": "React.HTMLAttributes<HTMLDivElement> & Record<`data-${string}`, string>"
      },
      "from": "@epam/uui-core:IHasRawProps",
      "required": false
     },
     {
      "uid": 3,
      "name": "forwardedRef",
      "comment": {
       "raw": [
        "this ref is passed to the underlying component"
       ]
      },
      "typeValue": {
       "raw": "null | (instance: HTMLDivElement | null) => void | React.MutableRefObject<HTMLDivElement | null>"
      },
      "from": "@epam/uui-core:IHasForwardedRef",
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui-components:SwitchProps": {
   "summary": {
    "module": "@epam/uui-components",
    "typeName": {
     "name": "SwitchProps",
     "nameFull": "SwitchProps"
    },
    "src": "uui-components/src/inputs/Switch.tsx",
    "exported": true
   },
   "details": {
    "kind": 263,
    "typeValue": {
     "raw": "SwitchProps",
     "print": [
      "interface SwitchProps extends IHasCX, IDisableable, IEditable<boolean>, IHasLabel, IAnalyticableOnChange<boolean>, IHasRawProps<React.LabelHTMLAttributes<HTMLLabelElement>>, IHasForwardedRef<HTMLLabelElement>, IHasTabIndex {",
      "    id?: string;",
      "}"
     ]
    },
    "props": [
     {
      "uid": 1,
      "name": "id",
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "required": false
     },
     {
      "uid": 2,
      "name": "cx",
      "comment": {
       "raw": [
        "CSS class(es) to put on component's root. See {@link https://github.com/JedWatson/classnames#usage} for details"
       ]
      },
      "typeValue": {
       "raw": "null | string | number | boolean | ClassDictionary | ClassArray"
      },
      "typeValueRef": "@epam/uui-core:ClassValue",
      "from": "@epam/uui-core:IHasCX",
      "required": false
     },
     {
      "uid": 3,
      "name": "isDisabled",
      "comment": {
       "raw": [
        "Disable editing, and visually de-emphasize value of the component"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:IDisableable",
      "required": false
     },
     {
      "uid": 4,
      "name": "value",
      "comment": {
       "raw": [
        "The current value of component"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:IEditable",
      "required": true
     },
     {
      "uid": 5,
      "name": "onValueChange",
      "comment": {
       "raw": [
        "Called when value needs to be changed (usually due to user interaction)"
       ]
      },
      "typeValue": {
       "raw": "(newValue: boolean) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IEditable",
      "required": true
     },
     {
      "uid": 6,
      "name": "isInvalid",
      "comment": {
       "raw": [
        "True if component contains invalid input"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:ICanBeInvalid",
      "required": false
     },
     {
      "uid": 7,
      "name": "validationMessage",
      "comment": {
       "raw": [
        "Message describing why the value is invalid"
       ]
      },
      "typeValue": {
       "raw": "null | string | number | boolean | React.ReactElement<any, string | React.JSXElementConstructor<any>> | React.ReactFragment | React.ReactPortal"
      },
      "typeValueRef": "@types/react:ReactNode",
      "from": "@epam/uui-core:ICanBeInvalid",
      "required": false
     },
     {
      "uid": 8,
      "name": "validationProps",
      "comment": {
       "raw": [
        "If T is a complex value (object or array), this property contains validation states of inner items"
       ]
      },
      "typeValue": {
       "raw": "{ [key: string]: ICanBeInvalid; }"
      },
      "from": "@epam/uui-core:ICanBeInvalid",
      "required": false
     },
     {
      "uid": 9,
      "name": "isReadonly",
      "comment": {
       "raw": [
        "Disable editing. Unlike isDisabled, keep component's value readable."
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:ICanBeReadonly",
      "required": false
     },
     {
      "uid": 10,
      "name": "isRequired",
      "comment": {
       "raw": [
        "Marks that component's value is required and shouldn't be empty"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:ICanBeRequired",
      "required": false
     },
     {
      "uid": 11,
      "name": "label",
      "comment": {
       "raw": [
        "Label. Can be a string, or React.Elements. Certain components supports minimal markup (<b>,<i>,<a>) in captions."
       ]
      },
      "typeValue": {
       "raw": "any"
      },
      "from": "@epam/uui-core:IHasLabel",
      "required": false
     },
     {
      "uid": 12,
      "name": "getValueChangeAnalyticsEvent",
      "comment": {
       "raw": [
        "Given a value, returns an analytics event to send when component is edited.",
        " See [AnalyticsContext](@link https://uui.epam.com/documents?id=analyticsContext&mode=doc&skin=UUI4_promo&category=contexts)."
       ]
      },
      "typeValue": {
       "raw": "(newValue: boolean | null, oldValue: boolean | null) => AnalyticsEvent"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IAnalyticableOnChange",
      "required": false
     },
     {
      "uid": 13,
      "name": "rawProps",
      "comment": {
       "raw": [
        "Any HTML attributes (native or 'data-') to put on the underlying component"
       ]
      },
      "typeValue": {
       "raw": "React.LabelHTMLAttributes<HTMLLabelElement> & Record<`data-${string}`, string>"
      },
      "from": "@epam/uui-core:IHasRawProps",
      "required": false
     },
     {
      "uid": 14,
      "name": "forwardedRef",
      "comment": {
       "raw": [
        "this ref is passed to the underlying component"
       ]
      },
      "typeValue": {
       "raw": "null | (instance: HTMLLabelElement | null) => void | React.MutableRefObject<HTMLLabelElement | null>"
      },
      "from": "@epam/uui-core:IHasForwardedRef",
      "required": false
     },
     {
      "uid": 15,
      "name": "tabIndex",
      "comment": {
       "raw": [
        "Controls the order of keyboard navigation between components"
       ]
      },
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "from": "@epam/uui-core:IHasTabIndex",
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui-components:TextAreaProps": {
   "summary": {
    "module": "@epam/uui-components",
    "typeName": {
     "name": "TextAreaProps",
     "nameFull": "TextAreaProps"
    },
    "src": "uui-components/src/inputs/TextArea.tsx",
    "exported": true
   },
   "details": {
    "kind": 263,
    "typeValue": {
     "raw": "TextAreaProps",
     "print": [
      "interface TextAreaProps extends IHasCX, IEditable<string>, IHasPlaceholder, IDisableable, ICanBeReadonly, IHasRawProps<React.TextareaHTMLAttributes<HTMLDivElement>>, IHasForwardedRef<HTMLDivElement>, ICanFocus<HTMLTextAreaElement> {",
      "    /** Adjust height to fit specified number or text rows. HTML TextArea attribute. */",
      "    rows?: number;",
      "    /**",
      "     * Enables auto-resizing height to fit text. Rows prop is ignored in this mode",
      "     */",
      "    autoSize?: boolean;",
      "    /** onKeyDown event handler to put on HTML Input  */",
      "    onKeyDown?(e?: any): void;",
      "    /** Automatically sets input focus to component, when its mounted */",
      "    autoFocus?: boolean;",
      "    /** CSS class names to put to the HTML Input element */",
      "    inputCx?: CX;",
      "    /** Maximum text length, in characters */",
      "    maxLength?: number;",
      "    /** HTML id attribute to put on the HTML Input element */",
      "    id?: string;",
      "}"
     ]
    },
    "props": [
     {
      "uid": 1,
      "name": "rows",
      "comment": {
       "raw": [
        "Adjust height to fit specified number or text rows. HTML TextArea attribute."
       ]
      },
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "required": false
     },
     {
      "uid": 2,
      "name": "autoSize",
      "comment": {
       "raw": [
        "Enables auto-resizing height to fit text. Rows prop is ignored in this mode"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "required": false
     },
     {
      "uid": 3,
      "name": "onKeyDown",
      "comment": {
       "raw": [
        "onKeyDown event handler to put on HTML Input"
       ]
      },
      "typeValue": {
       "raw": "(e?: any) => void"
      },
      "editor": {
       "type": "func"
      },
      "required": false
     },
     {
      "uid": 4,
      "name": "autoFocus",
      "comment": {
       "raw": [
        "Automatically sets input focus to component, when its mounted"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "required": false
     },
     {
      "uid": 5,
      "name": "inputCx",
      "comment": {
       "raw": [
        "CSS class names to put to the HTML Input element"
       ]
      },
      "typeValue": {
       "raw": "null | string | number | boolean | ClassDictionary | ClassArray"
      },
      "typeValueRef": "@epam/uui-core:ClassValue",
      "required": false
     },
     {
      "uid": 6,
      "name": "maxLength",
      "comment": {
       "raw": [
        "Maximum text length, in characters"
       ]
      },
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "required": false
     },
     {
      "uid": 7,
      "name": "id",
      "comment": {
       "raw": [
        "HTML id attribute to put on the HTML Input element"
       ]
      },
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "required": false
     },
     {
      "uid": 8,
      "name": "cx",
      "comment": {
       "raw": [
        "CSS class(es) to put on component's root. See {@link https://github.com/JedWatson/classnames#usage} for details"
       ]
      },
      "typeValue": {
       "raw": "null | string | number | boolean | ClassDictionary | ClassArray"
      },
      "typeValueRef": "@epam/uui-core:ClassValue",
      "from": "@epam/uui-core:IHasCX",
      "required": false
     },
     {
      "uid": 9,
      "name": "value",
      "comment": {
       "raw": [
        "The current value of component"
       ]
      },
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "from": "@epam/uui-core:IEditable",
      "required": true
     },
     {
      "uid": 10,
      "name": "onValueChange",
      "comment": {
       "raw": [
        "Called when value needs to be changed (usually due to user interaction)"
       ]
      },
      "typeValue": {
       "raw": "(newValue: string) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IEditable",
      "required": true
     },
     {
      "uid": 11,
      "name": "isInvalid",
      "comment": {
       "raw": [
        "True if component contains invalid input"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:ICanBeInvalid",
      "required": false
     },
     {
      "uid": 12,
      "name": "validationMessage",
      "comment": {
       "raw": [
        "Message describing why the value is invalid"
       ]
      },
      "typeValue": {
       "raw": "null | string | number | boolean | React.ReactElement<any, string | React.JSXElementConstructor<any>> | React.ReactFragment | React.ReactPortal"
      },
      "typeValueRef": "@types/react:ReactNode",
      "from": "@epam/uui-core:ICanBeInvalid",
      "required": false
     },
     {
      "uid": 13,
      "name": "validationProps",
      "comment": {
       "raw": [
        "If T is a complex value (object or array), this property contains validation states of inner items"
       ]
      },
      "typeValue": {
       "raw": "{ [key: string]: ICanBeInvalid; }"
      },
      "from": "@epam/uui-core:ICanBeInvalid",
      "required": false
     },
     {
      "uid": 14,
      "name": "isDisabled",
      "comment": {
       "raw": [
        "Disable editing, and visually de-emphasize value of the component"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:IDisableable",
      "required": false
     },
     {
      "uid": 15,
      "name": "isReadonly",
      "comment": {
       "raw": [
        "Disable editing. Unlike isDisabled, keep component's value readable."
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:ICanBeReadonly",
      "required": false
     },
     {
      "uid": 16,
      "name": "isRequired",
      "comment": {
       "raw": [
        "Marks that component's value is required and shouldn't be empty"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:ICanBeRequired",
      "required": false
     },
     {
      "uid": 17,
      "name": "placeholder",
      "comment": {
       "raw": [
        "Placeholder to display when empty"
       ]
      },
      "typeValue": {
       "raw": "any"
      },
      "from": "@epam/uui-core:IHasPlaceholder",
      "required": false
     },
     {
      "uid": 18,
      "name": "rawProps",
      "comment": {
       "raw": [
        "Any HTML attributes (native or 'data-') to put on the underlying component"
       ]
      },
      "typeValue": {
       "raw": "React.TextareaHTMLAttributes<HTMLDivElement> & Record<`data-${string}`, string>"
      },
      "from": "@epam/uui-core:IHasRawProps",
      "required": false
     },
     {
      "uid": 19,
      "name": "forwardedRef",
      "comment": {
       "raw": [
        "this ref is passed to the underlying component"
       ]
      },
      "typeValue": {
       "raw": "null | (instance: HTMLDivElement | null) => void | React.MutableRefObject<HTMLDivElement | null>"
      },
      "from": "@epam/uui-core:IHasForwardedRef",
      "required": false
     },
     {
      "uid": 20,
      "name": "onFocus",
      "comment": {
       "raw": [
        "Called when component gets input focus"
       ]
      },
      "typeValue": {
       "raw": "(e: React.FocusEvent<HTMLTextAreaElement, Element>) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:ICanFocus",
      "required": false
     },
     {
      "uid": 21,
      "name": "onBlur",
      "comment": {
       "raw": [
        "Called when component looses input focus"
       ]
      },
      "typeValue": {
       "raw": "(e: React.FocusEvent<HTMLTextAreaElement, Element>) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:ICanFocus",
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui-components:TextInputProps": {
   "summary": {
    "module": "@epam/uui-components",
    "typeName": {
     "name": "TextInputProps",
     "nameFull": "TextInputProps"
    },
    "src": "uui-components/src/inputs/TextInput.tsx",
    "exported": true
   },
   "details": {
    "kind": 263,
    "typeValue": {
     "raw": "TextInputProps",
     "print": [
      "interface TextInputProps extends TextInputCoreProps {",
      "    /** Overrides accept (check) icon */",
      "    acceptIcon?: Icon;",
      "    /** Overrides cancel (cross) icon */",
      "    cancelIcon?: Icon;",
      "    /** Overrides dropdown (chevron) icon */",
      "    dropdownIcon?: Icon;",
      "    /** CSS class(es) to put to the HTML Input element */",
      "    inputCx?: CX;",
      "    /** overrides rendering of HTML Input element  */",
      "    renderInput?: (props: IRenderInputProps) => JSX.Element;",
      "}"
     ]
    },
    "props": [
     {
      "uid": 1,
      "name": "acceptIcon",
      "comment": {
       "raw": [
        "Overrides accept (check) icon"
       ]
      },
      "typeValue": {
       "raw": "Icon"
      },
      "editor": {
       "type": "component"
      },
      "required": false
     },
     {
      "uid": 2,
      "name": "cancelIcon",
      "comment": {
       "raw": [
        "Overrides cancel (cross) icon"
       ]
      },
      "typeValue": {
       "raw": "Icon"
      },
      "editor": {
       "type": "component"
      },
      "required": false
     },
     {
      "uid": 3,
      "name": "dropdownIcon",
      "comment": {
       "raw": [
        "Overrides dropdown (chevron) icon"
       ]
      },
      "typeValue": {
       "raw": "Icon"
      },
      "editor": {
       "type": "component"
      },
      "required": false
     },
     {
      "uid": 4,
      "name": "inputCx",
      "comment": {
       "raw": [
        "CSS class(es) to put to the HTML Input element"
       ]
      },
      "typeValue": {
       "raw": "null | string | number | boolean | ClassDictionary | ClassArray"
      },
      "typeValueRef": "@epam/uui-core:ClassValue",
      "required": false
     },
     {
      "uid": 5,
      "name": "renderInput",
      "comment": {
       "raw": [
        "overrides rendering of HTML Input element"
       ]
      },
      "typeValue": {
       "raw": "(props: IRenderInputProps) => JSX.Element"
      },
      "editor": {
       "type": "func"
      },
      "required": false
     },
     {
      "uid": 6,
      "name": "onCancel",
      "comment": {
       "raw": [
        "Enables cancel (cross) icon, and fires when the icon is clicked"
       ]
      },
      "typeValue": {
       "raw": "() => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:TextInputCoreProps",
      "required": false
     },
     {
      "uid": 7,
      "name": "onAccept",
      "comment": {
       "raw": [
        "Enables accept (check) icon, and fires when the icon is clicked"
       ]
      },
      "typeValue": {
       "raw": "() => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:TextInputCoreProps",
      "required": false
     },
     {
      "uid": 8,
      "name": "onKeyDown",
      "comment": {
       "raw": [
        "keydown event handler to put on the HTML input element"
       ]
      },
      "typeValue": {
       "raw": "(e?: any) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:TextInputCoreProps",
      "required": false
     },
     {
      "uid": 9,
      "name": "autoFocus",
      "comment": {
       "raw": [
        "Put focus on the element, when component is mounted"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:TextInputCoreProps",
      "required": false
     },
     {
      "uid": 10,
      "name": "type",
      "comment": {
       "raw": [
        "Standard 'type' attribute to put on the HTML input element (e.g. 'password')"
       ]
      },
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "from": "@epam/uui-core:TextInputCoreProps",
      "required": false
     },
     {
      "uid": 11,
      "name": "autoComplete",
      "comment": {
       "raw": [
        "Standard [autocomplete attribute]{@link https://www.w3schools.com/tags/att_input_autocomplete.asp}"
       ]
      },
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "from": "@epam/uui-core:TextInputCoreProps",
      "required": false
     },
     {
      "uid": 12,
      "name": "name",
      "comment": {
       "raw": [
        "Standard [name attribute]{@link https://www.w3schools.com/tags/att_input_name.asp}"
       ]
      },
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "from": "@epam/uui-core:TextInputCoreProps",
      "required": false
     },
     {
      "uid": 13,
      "name": "maxLength",
      "comment": {
       "raw": [
        "Maximum input length in characters"
       ]
      },
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "from": "@epam/uui-core:TextInputCoreProps",
      "required": false
     },
     {
      "uid": 14,
      "name": "inputMode",
      "comment": {
       "raw": [
        "Standard [inputMode attribute]{@link https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/inputmode}"
       ]
      },
      "typeValue": {
       "raw": "'none' | 'search' | 'email' | 'tel' | 'text' | 'url' | 'numeric' | 'decimal'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "none",
        "search",
        "email",
        "tel",
        "text",
        "url",
        "numeric",
        "decimal"
       ]
      },
      "from": "@epam/uui-core:TextInputCoreProps",
      "required": false
     },
     {
      "uid": 15,
      "name": "id",
      "comment": {
       "raw": [
        "HTML ID attribute for input"
       ]
      },
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "from": "@epam/uui-core:TextInputCoreProps",
      "required": false
     },
     {
      "uid": 16,
      "name": "cx",
      "comment": {
       "raw": [
        "CSS class(es) to put on component's root. See {@link https://github.com/JedWatson/classnames#usage} for details"
       ]
      },
      "typeValue": {
       "raw": "null | string | number | boolean | ClassDictionary | ClassArray"
      },
      "typeValueRef": "@epam/uui-core:ClassValue",
      "from": "@epam/uui-core:IHasCX",
      "required": false
     },
     {
      "uid": 17,
      "name": "onClick",
      "comment": {
       "raw": [
        "Called when component is clicked"
       ]
      },
      "typeValue": {
       "raw": "(e?: any) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IClickable",
      "required": false
     },
     {
      "uid": 18,
      "name": "isDisabled",
      "comment": {
       "raw": [
        "Disable editing, and visually de-emphasize value of the component"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:IDisableable",
      "required": false
     },
     {
      "uid": 19,
      "name": "value",
      "comment": {
       "raw": [
        "The current value of component"
       ]
      },
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "from": "@epam/uui-core:IEditable",
      "required": true
     },
     {
      "uid": 20,
      "name": "onValueChange",
      "comment": {
       "raw": [
        "Called when value needs to be changed (usually due to user interaction)"
       ]
      },
      "typeValue": {
       "raw": "(newValue: string | undefined) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IEditable",
      "required": true
     },
     {
      "uid": 21,
      "name": "isInvalid",
      "comment": {
       "raw": [
        "True if component contains invalid input"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:ICanBeInvalid",
      "required": false
     },
     {
      "uid": 22,
      "name": "validationMessage",
      "comment": {
       "raw": [
        "Message describing why the value is invalid"
       ]
      },
      "typeValue": {
       "raw": "null | string | number | boolean | React.ReactElement<any, string | React.JSXElementConstructor<any>> | React.ReactFragment | React.ReactPortal"
      },
      "typeValueRef": "@types/react:ReactNode",
      "from": "@epam/uui-core:ICanBeInvalid",
      "required": false
     },
     {
      "uid": 23,
      "name": "validationProps",
      "comment": {
       "raw": [
        "If T is a complex value (object or array), this property contains validation states of inner items"
       ]
      },
      "typeValue": {
       "raw": "{ [key: string]: ICanBeInvalid; }"
      },
      "from": "@epam/uui-core:ICanBeInvalid",
      "required": false
     },
     {
      "uid": 24,
      "name": "isReadonly",
      "comment": {
       "raw": [
        "Disable editing. Unlike isDisabled, keep component's value readable."
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:ICanBeReadonly",
      "required": false
     },
     {
      "uid": 25,
      "name": "isRequired",
      "comment": {
       "raw": [
        "Marks that component's value is required and shouldn't be empty"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:ICanBeRequired",
      "required": false
     },
     {
      "uid": 26,
      "name": "placeholder",
      "comment": {
       "raw": [
        "Placeholder to display when empty"
       ]
      },
      "typeValue": {
       "raw": "any"
      },
      "from": "@epam/uui-core:IHasPlaceholder",
      "required": false
     },
     {
      "uid": 27,
      "name": "icon",
      "comment": {
       "raw": [
        "Icon can be a React element (usually an SVG element)"
       ]
      },
      "typeValue": {
       "raw": "Icon"
      },
      "editor": {
       "type": "component"
      },
      "from": "@epam/uui-core:IHasIcon",
      "required": false
     },
     {
      "uid": 28,
      "name": "iconPosition",
      "comment": {
       "raw": [
        "Position of the icon (left of right)"
       ]
      },
      "typeValue": {
       "raw": "'right' | 'left'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "right",
        "left"
       ]
      },
      "from": "@epam/uui-core:IHasIcon",
      "required": false
     },
     {
      "uid": 29,
      "name": "onIconClick",
      "comment": {
       "raw": [
        "Click handler for the icon"
       ]
      },
      "typeValue": {
       "raw": "() => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IHasIcon",
      "required": false
     },
     {
      "uid": 30,
      "name": "isOpen",
      "comment": {
       "raw": [
        "When isDropdown=true, indicate that dropdown is open with chevron icon"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:IDropdownToggler",
      "required": false
     },
     {
      "uid": 31,
      "name": "isDropdown",
      "comment": {
       "raw": [
        "Shows chevron icon, enabling component to act as dropdown toggler"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:IDropdownToggler",
      "required": false
     },
     {
      "uid": 32,
      "name": "toggleDropdownOpening",
      "comment": {
       "raw": [
        "Called when associated dropdown should open or close"
       ]
      },
      "typeValue": {
       "raw": "(value: boolean) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IDropdownToggler",
      "required": false
     },
     {
      "uid": 33,
      "name": "isInteractedOutside",
      "comment": {
       "raw": [
        "Called when component is interacted outside, to close the dropdown"
       ]
      },
      "typeValue": {
       "raw": "(event: Event) => boolean"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IDropdownToggler",
      "required": false
     },
     {
      "uid": 34,
      "name": "ref",
      "comment": {
       "raw": [
        "Component's ref"
       ]
      },
      "typeValue": {
       "raw": "null | (instance: any) => void | React.RefObject<any>"
      },
      "from": "@epam/uui-core:IDropdownToggler",
      "required": false
     },
     {
      "uid": 35,
      "name": "caption",
      "comment": {
       "raw": [
        "Caption. Can be a string, or React.Elements. Certain components supports minimal markup (<b>,<i>,<a>) in captions."
       ]
      },
      "typeValue": {
       "raw": "any"
      },
      "from": "@epam/uui-core:IHasCaption",
      "required": false
     },
     {
      "uid": 36,
      "name": "getValueChangeAnalyticsEvent",
      "comment": {
       "raw": [
        "Given a value, returns an analytics event to send when component is edited.",
        " See [AnalyticsContext](@link https://uui.epam.com/documents?id=analyticsContext&mode=doc&skin=UUI4_promo&category=contexts)."
       ]
      },
      "typeValue": {
       "raw": "(newValue: string | null, oldValue: string | null) => AnalyticsEvent"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IAnalyticableOnChange",
      "required": false
     },
     {
      "uid": 37,
      "name": "rawProps",
      "comment": {
       "raw": [
        "Any HTML attributes (native or 'data-') to put on the underlying component"
       ]
      },
      "typeValue": {
       "raw": "React.HTMLAttributes<HTMLInputElement> & Record<`data-${string}`, string>"
      },
      "from": "@epam/uui-core:IHasRawProps",
      "required": false
     },
     {
      "uid": 38,
      "name": "onFocus",
      "comment": {
       "raw": [
        "Called when component gets input focus"
       ]
      },
      "typeValue": {
       "raw": "(e: React.FocusEvent<HTMLInputElement, Element>) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:ICanFocus",
      "required": false
     },
     {
      "uid": 39,
      "name": "onBlur",
      "comment": {
       "raw": [
        "Called when component looses input focus"
       ]
      },
      "typeValue": {
       "raw": "(e: React.FocusEvent<HTMLInputElement, Element>) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:ICanFocus",
      "required": false
     },
     {
      "uid": 40,
      "name": "tabIndex",
      "comment": {
       "raw": [
        "Controls the order of keyboard navigation between components"
       ]
      },
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "from": "@epam/uui-core:IHasTabIndex",
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui-components:TextProps": {
   "summary": {
    "module": "@epam/uui-components",
    "typeName": {
     "name": "TextProps",
     "nameFull": "TextProps"
    },
    "src": "uui-components/src/Text.tsx",
    "exported": true
   },
   "details": {
    "kind": 264,
    "typeValue": {
     "raw": "TextProps",
     "print": [
      "type TextProps = IHasCX & IHasChildren & IClickable & IAnalyticableClick & IHasRawProps<React.HTMLAttributes<HTMLDivElement>> & IHasForwardedRef<HTMLDivElement>;"
     ]
    },
    "props": [
     {
      "uid": 1,
      "name": "cx",
      "comment": {
       "raw": [
        "CSS class(es) to put on component's root. See {@link https://github.com/JedWatson/classnames#usage} for details"
       ]
      },
      "typeValue": {
       "raw": "null | string | number | boolean | ClassDictionary | ClassArray"
      },
      "typeValueRef": "@epam/uui-core:ClassValue",
      "from": "@epam/uui-core:IHasCX",
      "required": false
     },
     {
      "uid": 2,
      "name": "children",
      "typeValue": {
       "raw": "null | string | number | boolean | React.ReactElement<any, string | React.JSXElementConstructor<any>> | React.ReactFragment | React.ReactPortal"
      },
      "typeValueRef": "@types/react:ReactNode",
      "from": "@epam/uui-core:IHasChildren",
      "required": false
     },
     {
      "uid": 3,
      "name": "onClick",
      "comment": {
       "raw": [
        "Called when component is clicked"
       ]
      },
      "typeValue": {
       "raw": "(e?: any) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IClickable",
      "required": false
     },
     {
      "uid": 4,
      "name": "clickAnalyticsEvent",
      "comment": {
       "raw": [
        "An analytics event to send (via AnalyticsContext) when component is clicked.",
        " See [AnalyticsContext](@link https://uui.epam.com/documents?id=analyticsContext&mode=doc&skin=UUI4_promo&category=contexts)."
       ]
      },
      "typeValue": {
       "raw": "null | { [key: string]: any; name: string; }"
      },
      "from": "@epam/uui-core:IAnalyticableClick",
      "required": false
     },
     {
      "uid": 5,
      "name": "rawProps",
      "comment": {
       "raw": [
        "Any HTML attributes (native or 'data-') to put on the underlying component"
       ]
      },
      "typeValue": {
       "raw": "React.HTMLAttributes<HTMLDivElement> & Record<`data-${string}`, string>"
      },
      "from": "@epam/uui-core:IHasRawProps",
      "required": false
     },
     {
      "uid": 6,
      "name": "forwardedRef",
      "comment": {
       "raw": [
        "this ref is passed to the underlying component"
       ]
      },
      "typeValue": {
       "raw": "null | (instance: HTMLDivElement | null) => void | React.MutableRefObject<HTMLDivElement | null>"
      },
      "from": "@epam/uui-core:IHasForwardedRef",
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui-components:TimePickerBodyProps": {
   "summary": {
    "module": "@epam/uui-components",
    "typeName": {
     "name": "TimePickerBodyProps",
     "nameFull": "TimePickerBodyProps"
    },
    "src": "uui-components/src/inputs/TimePickerBody.tsx",
    "exported": true
   },
   "details": {
    "kind": 263,
    "typeValue": {
     "raw": "TimePickerBodyProps",
     "print": [
      "interface TimePickerBodyProps extends IHasCX, IEditable<TimePickerValue>, IHasRawProps<React.HTMLAttributes<HTMLDivElement>>, IHasForwardedRef<HTMLDivElement> {",
      "    minutesStep?: number;",
      "    addIcon?: Icon;",
      "    subtractIcon?: Icon;",
      "    format?: 12 | 24;",
      "}"
     ]
    },
    "props": [
     {
      "uid": 1,
      "name": "minutesStep",
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "required": false
     },
     {
      "uid": 2,
      "name": "addIcon",
      "typeValue": {
       "raw": "Icon"
      },
      "editor": {
       "type": "component"
      },
      "required": false
     },
     {
      "uid": 3,
      "name": "subtractIcon",
      "typeValue": {
       "raw": "Icon"
      },
      "editor": {
       "type": "component"
      },
      "required": false
     },
     {
      "uid": 4,
      "name": "format",
      "typeValue": {
       "raw": "12 | 24"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        12,
        24
       ]
      },
      "required": false
     },
     {
      "uid": 5,
      "name": "cx",
      "comment": {
       "raw": [
        "CSS class(es) to put on component's root. See {@link https://github.com/JedWatson/classnames#usage} for details"
       ]
      },
      "typeValue": {
       "raw": "null | string | number | boolean | ClassDictionary | ClassArray"
      },
      "typeValueRef": "@epam/uui-core:ClassValue",
      "from": "@epam/uui-core:IHasCX",
      "required": false
     },
     {
      "uid": 6,
      "name": "value",
      "comment": {
       "raw": [
        "The current value of component"
       ]
      },
      "typeValue": {
       "raw": "TimePickerValue"
      },
      "from": "@epam/uui-core:IEditable",
      "required": true
     },
     {
      "uid": 7,
      "name": "onValueChange",
      "comment": {
       "raw": [
        "Called when value needs to be changed (usually due to user interaction)"
       ]
      },
      "typeValue": {
       "raw": "(newValue: TimePickerValue) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IEditable",
      "required": true
     },
     {
      "uid": 8,
      "name": "isInvalid",
      "comment": {
       "raw": [
        "True if component contains invalid input"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:ICanBeInvalid",
      "required": false
     },
     {
      "uid": 9,
      "name": "validationMessage",
      "comment": {
       "raw": [
        "Message describing why the value is invalid"
       ]
      },
      "typeValue": {
       "raw": "null | string | number | boolean | React.ReactElement<any, string | React.JSXElementConstructor<any>> | React.ReactFragment | React.ReactPortal"
      },
      "typeValueRef": "@types/react:ReactNode",
      "from": "@epam/uui-core:ICanBeInvalid",
      "required": false
     },
     {
      "uid": 10,
      "name": "validationProps",
      "comment": {
       "raw": [
        "If T is a complex value (object or array), this property contains validation states of inner items"
       ]
      },
      "typeValue": {
       "raw": "{ [key: string]: ICanBeInvalid; }"
      },
      "from": "@epam/uui-core:ICanBeInvalid",
      "required": false
     },
     {
      "uid": 11,
      "name": "isDisabled",
      "comment": {
       "raw": [
        "Disable editing, and visually de-emphasize value of the component"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:IDisableable",
      "required": false
     },
     {
      "uid": 12,
      "name": "isReadonly",
      "comment": {
       "raw": [
        "Disable editing. Unlike isDisabled, keep component's value readable."
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:ICanBeReadonly",
      "required": false
     },
     {
      "uid": 13,
      "name": "isRequired",
      "comment": {
       "raw": [
        "Marks that component's value is required and shouldn't be empty"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:ICanBeRequired",
      "required": false
     },
     {
      "uid": 14,
      "name": "rawProps",
      "comment": {
       "raw": [
        "Any HTML attributes (native or 'data-') to put on the underlying component"
       ]
      },
      "typeValue": {
       "raw": "React.HTMLAttributes<HTMLDivElement> & Record<`data-${string}`, string>"
      },
      "from": "@epam/uui-core:IHasRawProps",
      "required": false
     },
     {
      "uid": 15,
      "name": "forwardedRef",
      "comment": {
       "raw": [
        "this ref is passed to the underlying component"
       ]
      },
      "typeValue": {
       "raw": "null | (instance: HTMLDivElement | null) => void | React.MutableRefObject<HTMLDivElement | null>"
      },
      "from": "@epam/uui-core:IHasForwardedRef",
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui-components:TimePickerValue": {
   "summary": {
    "module": "@epam/uui-components",
    "typeName": {
     "name": "TimePickerValue",
     "nameFull": "TimePickerValue"
    },
    "src": "uui-components/src/inputs/BaseTimePicker.tsx",
    "exported": true
   },
   "details": {
    "kind": 263,
    "typeValue": {
     "raw": "TimePickerValue",
     "print": [
      "interface TimePickerValue {",
      "    hours: number;",
      "    minutes: number;",
      "}"
     ]
    },
    "props": [
     {
      "uid": 1,
      "name": "hours",
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "required": true
     },
     {
      "uid": 2,
      "name": "minutes",
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "required": true
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui-components:TooltipProps": {
   "summary": {
    "module": "@epam/uui-components",
    "typeName": {
     "name": "TooltipProps",
     "nameFull": "TooltipProps"
    },
    "src": "uui-components/src/overlays/Tooltip.tsx",
    "exported": true
   },
   "details": {
    "kind": 263,
    "typeValue": {
     "raw": "TooltipProps",
     "print": [
      "interface TooltipProps extends TooltipCoreProps {",
      "}"
     ]
    },
    "props": [
     {
      "uid": 1,
      "name": "content",
      "comment": {
       "raw": [
        "Content to show in the tooltip (ReactNode)"
       ]
      },
      "typeValue": {
       "raw": "any"
      },
      "from": "@epam/uui-core:TooltipCoreProps",
      "required": false
     },
     {
      "uid": 2,
      "name": "renderContent",
      "comment": {
       "raw": [
        "Alternative to 'content' prop, you can pass a render function.",
        " The function will only be called when content is shown, this can save performance."
       ]
      },
      "typeValue": {
       "raw": "() => any"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:TooltipCoreProps",
      "required": false
     },
     {
      "uid": 3,
      "name": "offset",
      "comment": {
       "raw": [
        "See [Popper docs]{@link https://popper.js.org/docs/v2/modifiers/offset/}"
       ]
      },
      "typeValue": {
       "raw": "OffsetsFunction | [number | null | undefined, number | null | undefined]"
      },
      "from": "@epam/uui-core:TooltipCoreProps",
      "required": false
     },
     {
      "uid": 4,
      "name": "children",
      "comment": {
       "raw": [
        "React Node(s) to show tooltip for"
       ]
      },
      "typeValue": {
       "raw": "null | string | number | boolean | React.ReactElement<any, string | React.JSXElementConstructor<any>> | React.ReactFragment | React.ReactPortal"
      },
      "typeValueRef": "@types/react:ReactNode",
      "from": "@epam/uui-core:TooltipCoreProps",
      "required": false
     },
     {
      "uid": 5,
      "name": "maxWidth",
      "comment": {
       "raw": [
        "Max width of tooltip"
       ]
      },
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "from": "@epam/uui-core:TooltipCoreProps",
      "required": false
     },
     {
      "uid": 6,
      "name": "cx",
      "comment": {
       "raw": [
        "CSS class(es) to put on component's root. See {@link https://github.com/JedWatson/classnames#usage} for details"
       ]
      },
      "typeValue": {
       "raw": "null | string | number | boolean | ClassDictionary | ClassArray"
      },
      "typeValueRef": "@epam/uui-core:ClassValue",
      "from": "@epam/uui-core:IHasCX",
      "required": false
     },
     {
      "uid": 7,
      "name": "rawProps",
      "comment": {
       "raw": [
        "Any HTML attributes (native or 'data-') to put on the underlying component"
       ]
      },
      "typeValue": {
       "raw": "React.HTMLAttributes<HTMLDivElement> & Record<`data-${string}`, string>"
      },
      "from": "@epam/uui-core:IHasRawProps",
      "required": false
     },
     {
      "uid": 8,
      "name": "value",
      "comment": {
       "raw": [
        "The current value of component"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:IEditable",
      "required": true
     },
     {
      "uid": 9,
      "name": "onValueChange",
      "comment": {
       "raw": [
        "Called when value needs to be changed (usually due to user interaction)"
       ]
      },
      "typeValue": {
       "raw": "(newValue: boolean) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IEditable",
      "required": true
     },
     {
      "uid": 10,
      "name": "isInvalid",
      "comment": {
       "raw": [
        "True if component contains invalid input"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:ICanBeInvalid",
      "required": false
     },
     {
      "uid": 11,
      "name": "validationMessage",
      "comment": {
       "raw": [
        "Message describing why the value is invalid"
       ]
      },
      "typeValue": {
       "raw": "null | string | number | boolean | React.ReactElement<any, string | React.JSXElementConstructor<any>> | React.ReactFragment | React.ReactPortal"
      },
      "from": "@epam/uui-core:ICanBeInvalid",
      "required": false
     },
     {
      "uid": 12,
      "name": "validationProps",
      "comment": {
       "raw": [
        "If T is a complex value (object or array), this property contains validation states of inner items"
       ]
      },
      "typeValue": {
       "raw": "{ [key: string]: ICanBeInvalid; }"
      },
      "from": "@epam/uui-core:ICanBeInvalid",
      "required": false
     },
     {
      "uid": 13,
      "name": "isDisabled",
      "comment": {
       "raw": [
        "Disable editing, and visually de-emphasize value of the component"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:IDisableable",
      "required": false
     },
     {
      "uid": 14,
      "name": "isReadonly",
      "comment": {
       "raw": [
        "Disable editing. Unlike isDisabled, keep component's value readable."
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:ICanBeReadonly",
      "required": false
     },
     {
      "uid": 15,
      "name": "isRequired",
      "comment": {
       "raw": [
        "Marks that component's value is required and shouldn't be empty"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:ICanBeRequired",
      "required": false
     },
     {
      "uid": 16,
      "name": "onClose",
      "typeValue": {
       "raw": "() => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:DropdownProps",
      "required": false
     },
     {
      "uid": 17,
      "name": "placement",
      "typeValue": {
       "raw": "'right' | 'left' | 'top' | 'bottom' | 'auto' | 'auto-start' | 'auto-end' | 'top-start' | 'top-end' | 'bottom-start' | 'bottom-end' | 'right-start' | 'right-end' | 'left-start' | 'left-end'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "right",
        "left",
        "top",
        "bottom",
        "auto",
        "auto-start",
        "auto-end",
        "top-start",
        "top-end",
        "bottom-start",
        "bottom-end",
        "right-start",
        "right-end",
        "left-start",
        "left-end"
       ]
      },
      "from": "@epam/uui-core:DropdownProps",
      "required": false
     },
     {
      "uid": 18,
      "name": "modifiers",
      "typeValue": {
       "raw": "(StrictModifier<any> | Partial<Modifier<any, object>>)[]"
      },
      "from": "@epam/uui-core:DropdownProps",
      "required": false
     },
     {
      "uid": 19,
      "name": "openDelay",
      "comment": {
       "raw": [
        "@default 0"
       ],
       "tags": {
        "@default": 0
       }
      },
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "from": "@epam/uui-core:DropdownProps",
      "required": false
     },
     {
      "uid": 20,
      "name": "closeDelay",
      "comment": {
       "raw": [
        "@default 0"
       ],
       "tags": {
        "@default": 0
       }
      },
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "from": "@epam/uui-core:DropdownProps",
      "required": false
     },
     {
      "uid": 21,
      "name": "closeOnMouseLeave",
      "comment": {
       "raw": [
        "@default false"
       ],
       "tags": {
        "@default": false
       }
      },
      "typeValue": {
       "raw": "false | 'toggler' | 'boundary'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        false,
        "toggler",
        "boundary"
       ]
      },
      "from": "@epam/uui-core:DropdownProps",
      "required": false
     },
     {
      "uid": 22,
      "name": "portalTarget",
      "typeValue": {
       "raw": "HTMLElement"
      },
      "from": "@epam/uui-core:DropdownProps",
      "required": false
     },
     {
      "uid": 23,
      "name": "boundaryElement",
      "typeValue": {
       "raw": "HTMLElement | HTMLElement[] | 'clippingParents'"
      },
      "from": "@epam/uui-core:DropdownProps",
      "required": false
     },
     {
      "uid": 24,
      "name": "closeBodyOnTogglerHidden",
      "comment": {
       "raw": [
        "@default true"
       ],
       "tags": {
        "@default": true
       }
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:DropdownProps",
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui-components:TreeListItem": {
   "summary": {
    "module": "@epam/uui-components",
    "typeName": {
     "name": "TreeListItem",
     "nameFull": "TreeListItem"
    },
    "src": "uui-components/src/layout/Tree.tsx",
    "exported": true
   },
   "details": {
    "kind": 263,
    "typeValue": {
     "raw": "TreeListItem",
     "print": [
      "interface TreeListItem {",
      "    id: string;",
      "    data?: TreeListItem;",
      "    parentId?: string;",
      "    name?: string;",
      "}"
     ]
    },
    "props": [
     {
      "uid": 1,
      "name": "id",
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "required": true
     },
     {
      "uid": 2,
      "name": "data",
      "typeValue": {
       "raw": "TreeListItem"
      },
      "required": false
     },
     {
      "uid": 3,
      "name": "parentId",
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "required": false
     },
     {
      "uid": 4,
      "name": "name",
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui-components:TreeProps": {
   "summary": {
    "module": "@epam/uui-components",
    "typeName": {
     "name": "TreeProps",
     "nameFull": "TreeProps<TItem>"
    },
    "src": "uui-components/src/layout/Tree.tsx",
    "exported": true
   },
   "details": {
    "kind": 263,
    "typeValue": {
     "raw": "TreeProps<TItem>",
     "print": [
      "interface TreeProps<TItem extends TreeListItem> extends IHasCX, IHasChildren, IEditable<DataSourceState> {",
      "    items: TreeListItem[];",
      "    renderRow(row: DataRowProps<TItem, string>): void;",
      "    getSearchFields?(item: TItem): string[];",
      "    search?: string;",
      "}"
     ]
    },
    "props": [
     {
      "uid": 1,
      "name": "items",
      "typeValue": {
       "raw": "TreeListItem[]"
      },
      "required": true
     },
     {
      "uid": 2,
      "name": "renderRow",
      "typeValue": {
       "raw": "(row: DataRowProps<TItem, string>) => void"
      },
      "editor": {
       "type": "func"
      },
      "required": true
     },
     {
      "uid": 3,
      "name": "getSearchFields",
      "typeValue": {
       "raw": "(item: TItem) => string[]"
      },
      "editor": {
       "type": "func"
      },
      "required": false
     },
     {
      "uid": 4,
      "name": "search",
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "required": false
     },
     {
      "uid": 5,
      "name": "cx",
      "comment": {
       "raw": [
        "CSS class(es) to put on component's root. See {@link https://github.com/JedWatson/classnames#usage} for details"
       ]
      },
      "typeValue": {
       "raw": "null | string | number | boolean | ClassDictionary | ClassArray"
      },
      "typeValueRef": "@epam/uui-core:ClassValue",
      "from": "@epam/uui-core:IHasCX",
      "required": false
     },
     {
      "uid": 6,
      "name": "children",
      "typeValue": {
       "raw": "null | string | number | boolean | React.ReactElement<any, string | React.JSXElementConstructor<any>> | React.ReactFragment | React.ReactPortal"
      },
      "typeValueRef": "@types/react:ReactNode",
      "from": "@epam/uui-core:IHasChildren",
      "required": false
     },
     {
      "uid": 7,
      "name": "value",
      "comment": {
       "raw": [
        "The current value of component"
       ]
      },
      "typeValue": {
       "raw": "DataSourceState<Record<string, any>, any>"
      },
      "from": "@epam/uui-core:IEditable",
      "required": true
     },
     {
      "uid": 8,
      "name": "onValueChange",
      "comment": {
       "raw": [
        "Called when value needs to be changed (usually due to user interaction)"
       ]
      },
      "typeValue": {
       "raw": "(newValue: DataSourceState<Record<string, any>, any>) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IEditable",
      "required": true
     },
     {
      "uid": 9,
      "name": "isInvalid",
      "comment": {
       "raw": [
        "True if component contains invalid input"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:ICanBeInvalid",
      "required": false
     },
     {
      "uid": 10,
      "name": "validationMessage",
      "comment": {
       "raw": [
        "Message describing why the value is invalid"
       ]
      },
      "typeValue": {
       "raw": "null | string | number | boolean | React.ReactElement<any, string | React.JSXElementConstructor<any>> | React.ReactFragment | React.ReactPortal"
      },
      "typeValueRef": "@types/react:ReactNode",
      "from": "@epam/uui-core:ICanBeInvalid",
      "required": false
     },
     {
      "uid": 11,
      "name": "validationProps",
      "comment": {
       "raw": [
        "If T is a complex value (object or array), this property contains validation states of inner items"
       ]
      },
      "typeValue": {
       "raw": "{ [key: string]: ICanBeInvalid; }"
      },
      "from": "@epam/uui-core:ICanBeInvalid",
      "required": false
     },
     {
      "uid": 12,
      "name": "isDisabled",
      "comment": {
       "raw": [
        "Disable editing, and visually de-emphasize value of the component"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:IDisableable",
      "required": false
     },
     {
      "uid": 13,
      "name": "isReadonly",
      "comment": {
       "raw": [
        "Disable editing. Unlike isDisabled, keep component's value readable."
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:ICanBeReadonly",
      "required": false
     },
     {
      "uid": 14,
      "name": "isRequired",
      "comment": {
       "raw": [
        "Marks that component's value is required and shouldn't be empty"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:ICanBeRequired",
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui-components:UsePickerInputProps": {
   "summary": {
    "module": "@epam/uui-components",
    "typeName": {
     "name": "UsePickerInputProps",
     "nameFull": "UsePickerInputProps<TItem, TId, TProps>"
    },
    "src": "uui-components/src/pickers/hooks/types.ts",
    "exported": true
   },
   "details": {
    "kind": 264,
    "typeValue": {
     "raw": "PickerBaseOptions<TItem, TId> & { selectionMode: 'single'; valueType?: 'id' | undefined; } & IEditable<TId> & IAnalyticableOnChange<any> & ICanFocus<HTMLElement> & IHasPlaceholder & IDisableable & ICanBeReadonly & IHasIcon & { editMode?: PickerInputEditMode | undefined; maxItems?: number | undefined; minBodyWidth?: number | undefined; isSingleLine?: boolean | undefined; dropdownPlacement?: Placement | undefined; renderToggler?: ((props: PickerTogglerProps<TItem, TId>) => React.ReactNode) | undefined; searchPosition?: PickerInputSearchPosition | undefined; disableClear?: boolean | undefined; minCharsToSearch?: number | undefined; dropdownHeight?: number | undefined; autoFocus?: boolean | undefined; rawProps?: { input?: (React.HTMLAttributes<HTMLDivElement> & Record<`data-${string}`, string>) | undefined; body?: (React.HTMLAttributes<HTMLDivElement> & Record<`data-${string}`, string>) | undefined; } | undefined; renderFooter?: ((props: PickerInputFooterProps<TItem, TId>) => React.ReactNode) | undefined; fixedBodyPosition?: boolean | undefined; portalTarget?: HTMLElement | undefined; inputCx?: ClassValue; bodyCx?: ClassValue; highlightSearchMatches?: boolean | undefined; searchDebounceDelay?: number | undefined; } & TProps & { toggleModalOpening?(opened: boolean): void; shouldShowBody?(): boolean; } | PickerBaseOptions<TItem, TId> & { selectionMode: 'single'; valueType: 'entity'; } & IEditable<TItem> & IAnalyticableOnChange<any> & ICanFocus<HTMLElement> & IHasPlaceholder & IDisableable & ICanBeReadonly & IHasIcon & { editMode?: PickerInputEditMode | undefined; maxItems?: number | undefined; minBodyWidth?: number | undefined; isSingleLine?: boolean | undefined; dropdownPlacement?: Placement | undefined; renderToggler?: ((props: PickerTogglerProps<TItem, TId>) => React.ReactNode) | undefined; searchPosition?: PickerInputSearchPosition | undefined; disableClear?: boolean | undefined; minCharsToSearch?: number | undefined; dropdownHeight?: number | undefined; autoFocus?: boolean | undefined; rawProps?: { input?: (React.HTMLAttributes<HTMLDivElement> & Record<`data-${string}`, string>) | undefined; body?: (React.HTMLAttributes<HTMLDivElement> & Record<`data-${string}`, string>) | undefined; } | undefined; renderFooter?: ((props: PickerInputFooterProps<TItem, TId>) => React.ReactNode) | undefined; fixedBodyPosition?: boolean | undefined; portalTarget?: HTMLElement | undefined; inputCx?: ClassValue; bodyCx?: ClassValue; highlightSearchMatches?: boolean | undefined; searchDebounceDelay?: number | undefined; } & TProps & { toggleModalOpening?(opened: boolean): void; shouldShowBody?(): boolean; } | PickerBaseOptions<TItem, TId> & { selectionMode: 'multi'; valueType?: 'id' | undefined; emptyValue?: [] | null | undefined; } & IEditable<TId[]> & IAnalyticableOnChange<any> & ICanFocus<HTMLElement> & IHasPlaceholder & IDisableable & ICanBeReadonly & IHasIcon & { editMode?: PickerInputEditMode | undefined; maxItems?: number | undefined; minBodyWidth?: number | undefined; isSingleLine?: boolean | undefined; dropdownPlacement?: Placement | undefined; renderToggler?: ((props: PickerTogglerProps<TItem, TId>) => React.ReactNode) | undefined; searchPosition?: PickerInputSearchPosition | undefined; disableClear?: boolean | undefined; minCharsToSearch?: number | undefined; dropdownHeight?: number | undefined; autoFocus?: boolean | undefined; rawProps?: { input?: (React.HTMLAttributes<HTMLDivElement> & Record<`data-${string}`, string>) | undefined; body?: (React.HTMLAttributes<HTMLDivElement> & Record<`data-${string}`, string>) | undefined; } | undefined; renderFooter?: ((props: PickerInputFooterProps<TItem, TId>) => React.ReactNode) | undefined; fixedBodyPosition?: boolean | undefined; portalTarget?: HTMLElement | undefined; inputCx?: ClassValue; bodyCx?: ClassValue; highlightSearchMatches?: boolean | undefined; searchDebounceDelay?: number | undefined; } & TProps & { toggleModalOpening?(opened: boolean): void; shouldShowBody?(): boolean; } | PickerBaseOptions<TItem, TId> & { selectionMode: 'multi'; valueType: 'entity'; emptyValue?: [] | null | undefined; } & IEditable<TItem[]> & IAnalyticableOnChange<any> & ICanFocus<HTMLElement> & IHasPlaceholder & IDisableable & ICanBeReadonly & IHasIcon & { editMode?: PickerInputEditMode | undefined; maxItems?: number | undefined; minBodyWidth?: number | undefined; isSingleLine?: boolean | undefined; dropdownPlacement?: Placement | undefined; renderToggler?: ((props: PickerTogglerProps<TItem, TId>) => React.ReactNode) | undefined; searchPosition?: PickerInputSearchPosition | undefined; disableClear?: boolean | undefined; minCharsToSearch?: number | undefined; dropdownHeight?: number | undefined; autoFocus?: boolean | undefined; rawProps?: { input?: (React.HTMLAttributes<HTMLDivElement> & Record<`data-${string}`, string>) | undefined; body?: (React.HTMLAttributes<HTMLDivElement> & Record<`data-${string}`, string>) | undefined; } | undefined; renderFooter?: ((props: PickerInputFooterProps<TItem, TId>) => React.ReactNode) | undefined; fixedBodyPosition?: boolean | undefined; portalTarget?: HTMLElement | undefined; inputCx?: ClassValue; bodyCx?: ClassValue; highlightSearchMatches?: boolean | undefined; searchDebounceDelay?: number | undefined; } & TProps & { toggleModalOpening?(opened: boolean): void; shouldShowBody?(): boolean; }",
     "print": [
      "type UsePickerInputProps<TItem, TId, TProps> = PickerInputBaseProps<TItem, TId> & TProps & {",
      "    toggleModalOpening?(opened: boolean): void;",
      "    shouldShowBody?(): boolean;",
      "};"
     ]
    },
    "props": [
     {
      "uid": 157,
      "name": "entityName",
      "comment": {
       "raw": [
        "Name of the entity being selected. Affects wording like \"Please select [entity]\""
       ]
      },
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "from": "@epam/uui-core:PickerBaseOptions",
      "required": false
     },
     {
      "uid": 158,
      "name": "entityPluralName",
      "comment": {
       "raw": [
        "Plural name of the entity being selected. Affects wording like \"X [entities] selected\""
       ]
      },
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "from": "@epam/uui-core:PickerBaseOptions",
      "required": false
     },
     {
      "uid": 159,
      "name": "dataSource",
      "comment": {
       "raw": [
        "Datasource to get data for the picker"
       ]
      },
      "typeValue": {
       "raw": "IDataSource<TItem, TId, any>"
      },
      "from": "@epam/uui-core:PickerBaseOptions",
      "required": true
     },
     {
      "uid": 160,
      "name": "getName",
      "comment": {
       "raw": [
        "A pure function that gets entity name from entity object.",
        "     Default: (item) => item.name."
       ]
      },
      "typeValue": {
       "raw": "(item: TItem) => string"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:PickerBaseOptions",
      "required": false
     },
     {
      "uid": 161,
      "name": "renderRow",
      "comment": {
       "raw": [
        "Allow to customize how each selectable row is rendered. Can be used to add subtitles, avatars, etc."
       ]
      },
      "typeValue": {
       "raw": "(props: DataRowProps<TItem, TId>, dataSourceState: DataSourceState<Record<string, any>, any>) => React.ReactNode"
      },
      "editor": {
       "type": "component"
      },
      "from": "@epam/uui-core:PickerBaseOptions",
      "required": false
     },
     {
      "uid": 162,
      "name": "getRowOptions",
      "comment": {
       "raw": [
        "Gets options for each row. Allow to make rows non-selectable, as well as many other tweaks."
       ]
      },
      "typeValue": {
       "raw": "(item: TItem, index: number) => DataRowOptions<TItem, TId>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:PickerBaseOptions",
      "required": false
     },
     {
      "uid": 163,
      "name": "renderNotFound",
      "comment": {
       "raw": [
        "Overrides the default 'no records found' banner.",
        " The 'search' callback parameter allows to distinguish cases when there's no records at all, and when current search doesn't find anything."
       ]
      },
      "typeValue": {
       "raw": "(props: { search: string; onClose: () => void; }) => React.ReactNode"
      },
      "editor": {
       "type": "component"
      },
      "from": "@epam/uui-core:PickerBaseOptions",
      "required": false
     },
     {
      "uid": 164,
      "name": "emptyValue",
      "comment": {
       "raw": [
        "Defines which value is to set on clear. E.g. you can put an empty array instead of null for empty multi-select Pickers"
       ]
      },
      "typeValue": {
       "raw": "null | []"
      },
      "from": "@epam/uui-core:PickerBaseOptions",
      "required": false
     },
     {
      "uid": 165,
      "name": "sortBy",
      "comment": {
       "raw": [
        "Defines how items should be sorted. By default, items are shown in order they are provided to the DataSource"
       ]
      },
      "typeValue": {
       "raw": "(item: TItem, sorting: SortingOption<any>) => any"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:PickerBaseOptions",
      "required": false
     },
     {
      "uid": 166,
      "name": "filter",
      "comment": {
       "raw": [
        "Additional filter to apply to the DataSource. Can be used to limit selection somehow, w/o re-building the DataSource. E.g. in the linked pickers scenario."
       ]
      },
      "typeValue": {
       "raw": "any"
      },
      "from": "@epam/uui-core:PickerBaseOptions",
      "required": false
     },
     {
      "uid": 167,
      "name": "sorting",
      "comment": {
       "raw": [
        "Defines sorting to pass to the DataSource"
       ]
      },
      "typeValue": {
       "raw": "SortingOption<any>"
      },
      "from": "@epam/uui-core:PickerBaseOptions",
      "required": false
     },
     {
      "uid": 168,
      "name": "cascadeSelection",
      "comment": {
       "raw": [
        "Controls how the selection (checking items) of a parent node affects the selection of its all children, and vice versa.",
        " - false: All nodes are selected independently (default).",
        " - true or 'explicit': Selecting a parent node explicitly selects all its children. Unchecking the last parent's child unchecks its parent.",
        " - 'implicit': Selecting a parent node means that all children are considered checked.",
        "   The user sees all these nodes as checked on the UI, but only the selected parent is visible in the PickerInput tags, and only the checked",
        "   parent is present in the Picker's value or DataSourceState.checked array. When the user unchecks the first child of such a parent,",
        "   its parents become unchecked and all children but the unchecked one become checked, making children's selection explicit. If the last",
        "   unchecked child gets checked, all children from the checked are removed, returning to the implicit state when only the parent is checked."
       ]
      },
      "typeValue": {
       "raw": "boolean | 'implicit' | 'explicit'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        false,
        true,
        "implicit",
        "explicit"
       ]
      },
      "from": "@epam/uui-core:PickerBaseOptions",
      "required": false
     },
     {
      "uid": 169,
      "name": "isFoldedByDefault",
      "comment": {
       "raw": [
        "You can return true for all, or some items to fold them."
       ]
      },
      "typeValue": {
       "raw": "(item: TItem) => boolean"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:PickerBaseOptions",
      "required": false
     },
     {
      "uid": 170,
      "name": "getSearchFields",
      "comment": {
       "raw": [
        "Given an item, should return an array of string fields to search on. By default, the search is performed on item.name field."
       ]
      },
      "typeValue": {
       "raw": "(item: TItem) => string[]"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:PickerBaseOptions",
      "required": false
     },
     {
      "uid": 67,
      "name": "selectionMode",
      "comment": {
       "raw": [
        "If 'single' provided - only one item is selected. In case of 'multi' - multiple items are selected"
       ]
      },
      "typeValue": {
       "raw": "'single'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "single"
       ]
      },
      "from": "@epam/uui-core:SinglePickerProps",
      "required": true
     },
     {
      "uid": 16,
      "name": "valueType",
      "comment": {
       "raw": [
        "Defines what to use in value/onValueChange: 'id' - item id (TId). 'entity' - the item itself (TItem)"
       ]
      },
      "typeValue": {
       "raw": "'id'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "id"
       ]
      },
      "from": "@epam/uui-core:SinglePickerProps",
      "required": false
     },
     {
      "uid": 17,
      "name": "value",
      "comment": {
       "raw": [
        "The current value of component"
       ]
      },
      "typeValue": {
       "raw": "TId"
      },
      "from": "@epam/uui-core:IEditable",
      "required": true
     },
     {
      "uid": 18,
      "name": "onValueChange",
      "comment": {
       "raw": [
        "Called when value needs to be changed (usually due to user interaction)"
       ]
      },
      "typeValue": {
       "raw": "(newValue: TId) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IEditable",
      "required": true
     },
     {
      "uid": 175,
      "name": "isInvalid",
      "comment": {
       "raw": [
        "True if component contains invalid input"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:ICanBeInvalid",
      "required": false
     },
     {
      "uid": 176,
      "name": "validationMessage",
      "comment": {
       "raw": [
        "Message describing why the value is invalid"
       ]
      },
      "typeValue": {
       "raw": "null | string | number | boolean | React.ReactElement<any, string | React.JSXElementConstructor<any>> | React.ReactFragment | React.ReactPortal"
      },
      "typeValueRef": "@types/react:ReactNode",
      "from": "@epam/uui-core:ICanBeInvalid",
      "required": false
     },
     {
      "uid": 177,
      "name": "validationProps",
      "comment": {
       "raw": [
        "If T is a complex value (object or array), this property contains validation states of inner items"
       ]
      },
      "typeValue": {
       "raw": "{ [key: string]: ICanBeInvalid; }"
      },
      "from": "@epam/uui-core:ICanBeInvalid",
      "required": false
     },
     {
      "uid": 178,
      "name": "isDisabled",
      "comment": {
       "raw": [
        "Disable editing, and visually de-emphasize value of the component"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:IDisableable",
      "required": false
     },
     {
      "uid": 179,
      "name": "isReadonly",
      "comment": {
       "raw": [
        "Disable editing. Unlike isDisabled, keep component's value readable."
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:ICanBeReadonly",
      "required": false
     },
     {
      "uid": 180,
      "name": "isRequired",
      "comment": {
       "raw": [
        "Marks that component's value is required and shouldn't be empty"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:ICanBeRequired",
      "required": false
     },
     {
      "uid": 181,
      "name": "getValueChangeAnalyticsEvent",
      "comment": {
       "raw": [
        "Given a value, returns an analytics event to send when component is edited.",
        " See [AnalyticsContext](@link https://uui.epam.com/documents?id=analyticsContext&mode=doc&skin=UUI4_promo&category=contexts)."
       ]
      },
      "typeValue": {
       "raw": "(newValue: any, oldValue: any) => AnalyticsEvent"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IAnalyticableOnChange",
      "required": false
     },
     {
      "uid": 182,
      "name": "onFocus",
      "comment": {
       "raw": [
        "Called when component gets input focus"
       ]
      },
      "typeValue": {
       "raw": "(e: React.FocusEvent<HTMLElement, Element>) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:ICanFocus",
      "required": false
     },
     {
      "uid": 183,
      "name": "onBlur",
      "comment": {
       "raw": [
        "Called when component looses input focus"
       ]
      },
      "typeValue": {
       "raw": "(e: React.FocusEvent<HTMLElement, Element>) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:ICanFocus",
      "required": false
     },
     {
      "uid": 184,
      "name": "placeholder",
      "comment": {
       "raw": [
        "Placeholder to display when empty"
       ]
      },
      "typeValue": {
       "raw": "any"
      },
      "from": "@epam/uui-core:IHasPlaceholder",
      "required": false
     },
     {
      "uid": 185,
      "name": "icon",
      "comment": {
       "raw": [
        "Icon can be a React element (usually an SVG element)"
       ]
      },
      "typeValue": {
       "raw": "Icon"
      },
      "editor": {
       "type": "component"
      },
      "from": "@epam/uui-core:IHasIcon",
      "required": false
     },
     {
      "uid": 186,
      "name": "iconPosition",
      "comment": {
       "raw": [
        "Position of the icon (left of right)"
       ]
      },
      "typeValue": {
       "raw": "'right' | 'left'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "right",
        "left"
       ]
      },
      "from": "@epam/uui-core:IHasIcon",
      "required": false
     },
     {
      "uid": 187,
      "name": "onIconClick",
      "comment": {
       "raw": [
        "Click handler for the icon"
       ]
      },
      "typeValue": {
       "raw": "() => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IHasIcon",
      "required": false
     },
     {
      "uid": 188,
      "name": "editMode",
      "comment": {
       "raw": [
        "dropdown (default) - show selection in dropdown; modal - opens modal window to select items"
       ]
      },
      "typeValue": {
       "raw": "'dropdown' | 'modal'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "dropdown",
        "modal"
       ]
      },
      "from": "@epam/uui-components:PickerInputBaseProps",
      "required": false
     },
     {
      "uid": 189,
      "name": "maxItems",
      "comment": {
       "raw": [
        "Maximum number of tags to display in input, before collapsing to \"N items selected\" mode"
       ]
      },
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "from": "@epam/uui-components:PickerInputBaseProps",
      "required": false
     },
     {
      "uid": 190,
      "name": "minBodyWidth",
      "comment": {
       "raw": [
        "Minimum width of dropdown body"
       ]
      },
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "from": "@epam/uui-components:PickerInputBaseProps",
      "required": false
     },
     {
      "uid": 191,
      "name": "isSingleLine",
      "comment": {
       "raw": [
        "Prevents selected items tags to occupy multiple lines"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-components:PickerInputBaseProps",
      "required": false
     },
     {
      "uid": 192,
      "name": "dropdownPlacement",
      "comment": {
       "raw": [
        "Dropdown position relative to the input. See [Popper Docs](@link https://popper.js.org/)"
       ]
      },
      "typeValue": {
       "raw": "'right' | 'left' | 'top' | 'bottom' | 'auto' | 'auto-start' | 'auto-end' | 'top-start' | 'top-end' | 'bottom-start' | 'bottom-end' | 'right-start' | 'right-end' | 'left-start' | 'left-end'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "right",
        "left",
        "top",
        "bottom",
        "auto",
        "auto-start",
        "auto-end",
        "top-start",
        "top-end",
        "bottom-start",
        "bottom-end",
        "right-start",
        "right-end",
        "left-start",
        "left-end"
       ]
      },
      "from": "@epam/uui-components:PickerInputBaseProps",
      "required": false
     },
     {
      "uid": 193,
      "name": "renderToggler",
      "comment": {
       "raw": [
        "Replaces default 'toggler' - an input to which Picker attaches dropdown"
       ]
      },
      "typeValue": {
       "raw": "(props: PickerTogglerProps<TItem, TId>) => React.ReactNode"
      },
      "editor": {
       "type": "component"
      },
      "from": "@epam/uui-components:PickerInputBaseProps",
      "required": false
     },
     {
      "uid": 194,
      "name": "searchPosition",
      "comment": {
       "raw": [
        "Defines where search field is:",
        " 'input' - try to place search inside the toggler (default for single-select),",
        " 'body' - put search inside the dropdown (default for multi-select)",
        " 'none' - disables search completely",
        "",
        " Note: 'searchPosition' cannot be 'input' if 'editMode' is 'modal'"
       ]
      },
      "typeValue": {
       "raw": "'input' | 'body' | 'none'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "input",
        "body",
        "none"
       ]
      },
      "from": "@epam/uui-components:PickerInputBaseProps",
      "required": false
     },
     {
      "uid": 195,
      "name": "disableClear",
      "comment": {
       "raw": [
        "Disallow to clear Picker value (cross icon)"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-components:PickerInputBaseProps",
      "required": false
     },
     {
      "uid": 196,
      "name": "minCharsToSearch",
      "comment": {
       "raw": [
        "Minimum characters to type, before search will trigger. If input characters number is less then 'minCharsToSearch', it will disable opening dropdown body.",
        " By default search triggers after input value is changed.",
        "",
        " Note: defined minCharsToSearch isn't compatible with searchPosition=body."
       ]
      },
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "from": "@epam/uui-components:PickerInputBaseProps",
      "required": false
     },
     {
      "uid": 197,
      "name": "dropdownHeight",
      "comment": {
       "raw": [
        "Overrides default height of the dropdown body"
       ]
      },
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "from": "@epam/uui-components:PickerInputBaseProps",
      "required": false
     },
     {
      "uid": 198,
      "name": "autoFocus",
      "comment": {
       "raw": [
        "Sets focus to component when it's mounted"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-components:PickerInputBaseProps",
      "required": false
     },
     {
      "uid": 199,
      "name": "rawProps",
      "comment": {
       "raw": [
        "HTML attributes to put directly to the input and body elements"
       ]
      },
      "typeValue": {
       "raw": "{ input?: (React.HTMLAttributes<HTMLDivElement> & Record<`data-${string}`, string>) | undefined; body?: (React.HTMLAttributes<HTMLDivElement> & Record<`data-${string}`, string>) | undefined; }"
      },
      "from": "@epam/uui-components:PickerInputBaseProps",
      "required": false
     },
     {
      "uid": 200,
      "name": "renderFooter",
      "comment": {
       "raw": [
        "Adds custom footer to the dropdown body"
       ]
      },
      "typeValue": {
       "raw": "(props: PickerInputFooterProps<TItem, TId>) => React.ReactNode"
      },
      "editor": {
       "type": "component"
      },
      "from": "@epam/uui-components:PickerInputBaseProps",
      "required": false
     },
     {
      "uid": 201,
      "name": "fixedBodyPosition",
      "comment": {
       "raw": [
        "Disables moving the dropdown body, when togglers is moved. Used in filters panel, to prevent filter selection to 'jump' after adding a filter."
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-components:PickerInputBaseProps",
      "required": false
     },
     {
      "uid": 202,
      "name": "portalTarget",
      "typeValue": {
       "raw": "HTMLElement"
      },
      "from": "@epam/uui-components:PickerInputBaseProps",
      "required": false
     },
     {
      "uid": 203,
      "name": "inputCx",
      "comment": {
       "raw": [
        "CSS class(es) to put on input-part component. See https://github.com/JedWatson/classnames#usage for details"
       ]
      },
      "typeValue": {
       "raw": "null | string | number | boolean | ClassDictionary | ClassArray"
      },
      "typeValueRef": "@epam/uui-core:ClassValue",
      "from": "@epam/uui-components:PickerInputBaseProps",
      "required": false
     },
     {
      "uid": 204,
      "name": "bodyCx",
      "comment": {
       "raw": [
        "CSS class(es) to put on body-part component. See https://github.com/JedWatson/classnames#usage for details"
       ]
      },
      "typeValue": {
       "raw": "null | string | number | boolean | ClassDictionary | ClassArray"
      },
      "typeValueRef": "@epam/uui-core:ClassValue",
      "from": "@epam/uui-components:PickerInputBaseProps",
      "required": false
     },
     {
      "uid": 205,
      "name": "highlightSearchMatches",
      "comment": {
       "raw": [
        "Enables highlighting of the items' text with search-matching results."
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-components:PickerInputBaseProps",
      "required": false
     },
     {
      "uid": 206,
      "name": "searchDebounceDelay",
      "comment": {
       "raw": [
        "Search input debounce delay in ms. Default value is 500ms"
       ]
      },
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "from": "@epam/uui-components:PickerInputBaseProps",
      "required": false
     },
     {
      "uid": 207,
      "name": "toggleModalOpening",
      "typeValue": {
       "raw": "(opened: boolean) => void"
      },
      "editor": {
       "type": "func"
      },
      "required": false
     },
     {
      "uid": 208,
      "name": "shouldShowBody",
      "typeValue": {
       "raw": "() => boolean"
      },
      "editor": {
       "type": "func"
      },
      "required": false
     },
     {
      "uid": 68,
      "name": "valueType",
      "comment": {
       "raw": [
        "Defines what to use in value/onValueChange: 'id' - item id (TId). 'entity' - the item itself (TItem)"
       ]
      },
      "typeValue": {
       "raw": "'entity'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "entity"
       ]
      },
      "from": "@epam/uui-core:SinglePickerProps",
      "required": true
     },
     {
      "uid": 69,
      "name": "value",
      "comment": {
       "raw": [
        "The current value of component"
       ]
      },
      "typeValue": {
       "raw": "TItem"
      },
      "from": "@epam/uui-core:IEditable",
      "required": true
     },
     {
      "uid": 70,
      "name": "onValueChange",
      "comment": {
       "raw": [
        "Called when value needs to be changed (usually due to user interaction)"
       ]
      },
      "typeValue": {
       "raw": "(newValue: TItem) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IEditable",
      "required": true
     },
     {
      "uid": 171,
      "name": "selectionMode",
      "comment": {
       "raw": [
        "If 'single' provided - only one item is selected. In case of 'multi' - multiple items are selected"
       ]
      },
      "typeValue": {
       "raw": "'multi'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "multi"
       ]
      },
      "from": "@epam/uui-core:ArrayPickerProps",
      "required": true
     },
     {
      "uid": 120,
      "name": "valueType",
      "comment": {
       "raw": [
        "Defines what to use in value/onValueChange: 'id' - item id (TId). 'entity' - the item itself (TItem)"
       ]
      },
      "typeValue": {
       "raw": "'id'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "id"
       ]
      },
      "from": "@epam/uui-core:ArrayPickerProps",
      "required": false
     },
     {
      "uid": 121,
      "name": "value",
      "comment": {
       "raw": [
        "The current value of component"
       ]
      },
      "typeValue": {
       "raw": "TId[]"
      },
      "from": "@epam/uui-core:IEditable",
      "required": true
     },
     {
      "uid": 122,
      "name": "onValueChange",
      "comment": {
       "raw": [
        "Called when value needs to be changed (usually due to user interaction)"
       ]
      },
      "typeValue": {
       "raw": "(newValue: TId[]) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IEditable",
      "required": true
     },
     {
      "uid": 172,
      "name": "valueType",
      "comment": {
       "raw": [
        "Defines what to use in value/onValueChange: 'id' - item id (TId). 'entity' - the item itself (TItem)"
       ]
      },
      "typeValue": {
       "raw": "'entity'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "entity"
       ]
      },
      "from": "@epam/uui-core:ArrayPickerProps",
      "required": true
     },
     {
      "uid": 173,
      "name": "value",
      "comment": {
       "raw": [
        "The current value of component"
       ]
      },
      "typeValue": {
       "raw": "TItem[]"
      },
      "from": "@epam/uui-core:IEditable",
      "required": true
     },
     {
      "uid": 174,
      "name": "onValueChange",
      "comment": {
       "raw": [
        "Called when value needs to be changed (usually due to user interaction)"
       ]
      },
      "typeValue": {
       "raw": "(newValue: TItem[]) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IEditable",
      "required": true
     }
    ],
    "propsFromUnion": true
   }
  },
  "@epam/uui-components:UsePickerListProps": {
   "summary": {
    "module": "@epam/uui-components",
    "typeName": {
     "name": "UsePickerListProps",
     "nameFull": "UsePickerListProps<TItem, TId, TProps>"
    },
    "src": "uui-components/src/pickers/hooks/types.ts",
    "exported": true
   },
   "details": {
    "kind": 264,
    "typeValue": {
     "raw": "PickerBaseOptions<TItem, TId> & { selectionMode: 'single'; valueType?: 'id' | undefined; } & IEditable<TId> & IAnalyticableOnChange<any> & { maxDefaultItems?: number | undefined; maxTotalItems?: number | undefined; defaultIds?: TId[] | undefined; settingsKey?: string | undefined; sortBy?(item: TItem, sorting: SortingOption<any>): string; } & TProps | PickerBaseOptions<TItem, TId> & { selectionMode: 'single'; valueType: 'entity'; } & IEditable<TItem> & IAnalyticableOnChange<any> & { maxDefaultItems?: number | undefined; maxTotalItems?: number | undefined; defaultIds?: TId[] | undefined; settingsKey?: string | undefined; sortBy?(item: TItem, sorting: SortingOption<any>): string; } & TProps | PickerBaseOptions<TItem, TId> & { selectionMode: 'multi'; valueType?: 'id' | undefined; emptyValue?: [] | null | undefined; } & IEditable<TId[]> & IAnalyticableOnChange<any> & { maxDefaultItems?: number | undefined; maxTotalItems?: number | undefined; defaultIds?: TId[] | undefined; settingsKey?: string | undefined; sortBy?(item: TItem, sorting: SortingOption<any>): string; } & TProps | PickerBaseOptions<TItem, TId> & { selectionMode: 'multi'; valueType: 'entity'; emptyValue?: [] | null | undefined; } & IEditable<TItem[]> & IAnalyticableOnChange<any> & { maxDefaultItems?: number | undefined; maxTotalItems?: number | undefined; defaultIds?: TId[] | undefined; settingsKey?: string | undefined; sortBy?(item: TItem, sorting: SortingOption<any>): string; } & TProps",
     "print": [
      "type UsePickerListProps<TItem, TId, TProps> = PickerListBaseProps<TItem, TId> & TProps & {};"
     ]
    },
    "props": [
     {
      "uid": 88,
      "name": "entityName",
      "comment": {
       "raw": [
        "Name of the entity being selected. Affects wording like \"Please select [entity]\""
       ]
      },
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "from": "@epam/uui-core:PickerBaseOptions",
      "required": false
     },
     {
      "uid": 89,
      "name": "entityPluralName",
      "comment": {
       "raw": [
        "Plural name of the entity being selected. Affects wording like \"X [entities] selected\""
       ]
      },
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "from": "@epam/uui-core:PickerBaseOptions",
      "required": false
     },
     {
      "uid": 90,
      "name": "dataSource",
      "comment": {
       "raw": [
        "Datasource to get data for the picker"
       ]
      },
      "typeValue": {
       "raw": "IDataSource<TItem, TId, any>"
      },
      "from": "@epam/uui-core:PickerBaseOptions",
      "required": true
     },
     {
      "uid": 91,
      "name": "getName",
      "comment": {
       "raw": [
        "A pure function that gets entity name from entity object.",
        "     Default: (item) => item.name."
       ]
      },
      "typeValue": {
       "raw": "(item: TItem) => string"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:PickerBaseOptions",
      "required": false
     },
     {
      "uid": 92,
      "name": "renderRow",
      "comment": {
       "raw": [
        "Allow to customize how each selectable row is rendered. Can be used to add subtitles, avatars, etc."
       ]
      },
      "typeValue": {
       "raw": "(props: DataRowProps<TItem, TId>, dataSourceState: DataSourceState<Record<string, any>, any>) => React.ReactNode"
      },
      "editor": {
       "type": "component"
      },
      "from": "@epam/uui-core:PickerBaseOptions",
      "required": false
     },
     {
      "uid": 93,
      "name": "getRowOptions",
      "comment": {
       "raw": [
        "Gets options for each row. Allow to make rows non-selectable, as well as many other tweaks."
       ]
      },
      "typeValue": {
       "raw": "(item: TItem, index: number) => DataRowOptions<TItem, TId>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:PickerBaseOptions",
      "required": false
     },
     {
      "uid": 94,
      "name": "renderNotFound",
      "comment": {
       "raw": [
        "Overrides the default 'no records found' banner.",
        " The 'search' callback parameter allows to distinguish cases when there's no records at all, and when current search doesn't find anything."
       ]
      },
      "typeValue": {
       "raw": "(props: { search: string; onClose: () => void; }) => React.ReactNode"
      },
      "editor": {
       "type": "component"
      },
      "from": "@epam/uui-core:PickerBaseOptions",
      "required": false
     },
     {
      "uid": 95,
      "name": "emptyValue",
      "comment": {
       "raw": [
        "Defines which value is to set on clear. E.g. you can put an empty array instead of null for empty multi-select Pickers"
       ]
      },
      "typeValue": {
       "raw": "null | []"
      },
      "from": "@epam/uui-core:PickerBaseOptions",
      "required": false
     },
     {
      "uid": 96,
      "name": "sortBy",
      "comment": {
       "raw": [
        "Defines how items should be sorted. By default, items are shown in order they are provided to the DataSource"
       ]
      },
      "typeValue": {
       "raw": "((item: TItem, sorting: SortingOption<any>) => any) & ((item: TItem, sorting: SortingOption<any>) => string)"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:PickerBaseOptions",
      "required": false
     },
     {
      "uid": 97,
      "name": "filter",
      "comment": {
       "raw": [
        "Additional filter to apply to the DataSource. Can be used to limit selection somehow, w/o re-building the DataSource. E.g. in the linked pickers scenario."
       ]
      },
      "typeValue": {
       "raw": "any"
      },
      "from": "@epam/uui-core:PickerBaseOptions",
      "required": false
     },
     {
      "uid": 98,
      "name": "sorting",
      "comment": {
       "raw": [
        "Defines sorting to pass to the DataSource"
       ]
      },
      "typeValue": {
       "raw": "SortingOption<any>"
      },
      "from": "@epam/uui-core:PickerBaseOptions",
      "required": false
     },
     {
      "uid": 99,
      "name": "cascadeSelection",
      "comment": {
       "raw": [
        "Controls how the selection (checking items) of a parent node affects the selection of its all children, and vice versa.",
        " - false: All nodes are selected independently (default).",
        " - true or 'explicit': Selecting a parent node explicitly selects all its children. Unchecking the last parent's child unchecks its parent.",
        " - 'implicit': Selecting a parent node means that all children are considered checked.",
        "   The user sees all these nodes as checked on the UI, but only the selected parent is visible in the PickerInput tags, and only the checked",
        "   parent is present in the Picker's value or DataSourceState.checked array. When the user unchecks the first child of such a parent,",
        "   its parents become unchecked and all children but the unchecked one become checked, making children's selection explicit. If the last",
        "   unchecked child gets checked, all children from the checked are removed, returning to the implicit state when only the parent is checked."
       ]
      },
      "typeValue": {
       "raw": "boolean | 'implicit' | 'explicit'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        false,
        true,
        "implicit",
        "explicit"
       ]
      },
      "from": "@epam/uui-core:PickerBaseOptions",
      "required": false
     },
     {
      "uid": 100,
      "name": "isFoldedByDefault",
      "comment": {
       "raw": [
        "You can return true for all, or some items to fold them."
       ]
      },
      "typeValue": {
       "raw": "(item: TItem) => boolean"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:PickerBaseOptions",
      "required": false
     },
     {
      "uid": 101,
      "name": "getSearchFields",
      "comment": {
       "raw": [
        "Given an item, should return an array of string fields to search on. By default, the search is performed on item.name field."
       ]
      },
      "typeValue": {
       "raw": "(item: TItem) => string[]"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:PickerBaseOptions",
      "required": false
     },
     {
      "uid": 44,
      "name": "selectionMode",
      "comment": {
       "raw": [
        "If 'single' provided - only one item is selected. In case of 'multi' - multiple items are selected"
       ]
      },
      "typeValue": {
       "raw": "'single'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "single"
       ]
      },
      "from": "@epam/uui-core:SinglePickerProps",
      "required": true
     },
     {
      "uid": 16,
      "name": "valueType",
      "comment": {
       "raw": [
        "Defines what to use in value/onValueChange: 'id' - item id (TId). 'entity' - the item itself (TItem)"
       ]
      },
      "typeValue": {
       "raw": "'id'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "id"
       ]
      },
      "from": "@epam/uui-core:SinglePickerProps",
      "required": false
     },
     {
      "uid": 17,
      "name": "value",
      "comment": {
       "raw": [
        "The current value of component"
       ]
      },
      "typeValue": {
       "raw": "TId"
      },
      "from": "@epam/uui-core:IEditable",
      "required": true
     },
     {
      "uid": 18,
      "name": "onValueChange",
      "comment": {
       "raw": [
        "Called when value needs to be changed (usually due to user interaction)"
       ]
      },
      "typeValue": {
       "raw": "(newValue: TId) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IEditable",
      "required": true
     },
     {
      "uid": 106,
      "name": "isInvalid",
      "comment": {
       "raw": [
        "True if component contains invalid input"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:ICanBeInvalid",
      "required": false
     },
     {
      "uid": 107,
      "name": "validationMessage",
      "comment": {
       "raw": [
        "Message describing why the value is invalid"
       ]
      },
      "typeValue": {
       "raw": "null | string | number | boolean | React.ReactElement<any, string | React.JSXElementConstructor<any>> | React.ReactFragment | React.ReactPortal"
      },
      "typeValueRef": "@types/react:ReactNode",
      "from": "@epam/uui-core:ICanBeInvalid",
      "required": false
     },
     {
      "uid": 108,
      "name": "validationProps",
      "comment": {
       "raw": [
        "If T is a complex value (object or array), this property contains validation states of inner items"
       ]
      },
      "typeValue": {
       "raw": "{ [key: string]: ICanBeInvalid; }"
      },
      "from": "@epam/uui-core:ICanBeInvalid",
      "required": false
     },
     {
      "uid": 109,
      "name": "isDisabled",
      "comment": {
       "raw": [
        "Disable editing, and visually de-emphasize value of the component"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:IDisableable",
      "required": false
     },
     {
      "uid": 110,
      "name": "isReadonly",
      "comment": {
       "raw": [
        "Disable editing. Unlike isDisabled, keep component's value readable."
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:ICanBeReadonly",
      "required": false
     },
     {
      "uid": 111,
      "name": "isRequired",
      "comment": {
       "raw": [
        "Marks that component's value is required and shouldn't be empty"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:ICanBeRequired",
      "required": false
     },
     {
      "uid": 112,
      "name": "getValueChangeAnalyticsEvent",
      "comment": {
       "raw": [
        "Given a value, returns an analytics event to send when component is edited.",
        " See [AnalyticsContext](@link https://uui.epam.com/documents?id=analyticsContext&mode=doc&skin=UUI4_promo&category=contexts)."
       ]
      },
      "typeValue": {
       "raw": "(newValue: any, oldValue: any) => AnalyticsEvent"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IAnalyticableOnChange",
      "required": false
     },
     {
      "uid": 113,
      "name": "maxDefaultItems",
      "comment": {
       "raw": [
        "Number of default items to show initially, when nothing is selected.",
        " @default 10"
       ],
       "tags": {
        "@default": 10
       }
      },
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "from": "@epam/uui-components:PickerListBaseProps",
      "required": false
     },
     {
      "uid": 114,
      "name": "maxTotalItems",
      "comment": {
       "raw": [
        "Maximum total number of items to show, including selected",
        " @default 50"
       ],
       "tags": {
        "@default": 50
       }
      },
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "from": "@epam/uui-components:PickerListBaseProps",
      "required": false
     },
     {
      "uid": 115,
      "name": "defaultIds",
      "comment": {
       "raw": [
        "Ids of items to show first.",
        " If not specified, top props.maxDefaultItems will be shown according to the DataSource sorting settings (default is 10)"
       ]
      },
      "typeValue": {
       "raw": "TId[]"
      },
      "from": "@epam/uui-components:PickerListBaseProps",
      "required": false
     },
     {
      "uid": 116,
      "name": "settingsKey",
      "comment": {
       "raw": [
        "If provided, top picks will be automatically adjusted based on last user selection, and stored as user setting under provided key"
       ]
      },
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "from": "@epam/uui-components:PickerListBaseProps",
      "required": false
     },
     {
      "uid": 45,
      "name": "valueType",
      "comment": {
       "raw": [
        "Defines what to use in value/onValueChange: 'id' - item id (TId). 'entity' - the item itself (TItem)"
       ]
      },
      "typeValue": {
       "raw": "'entity'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "entity"
       ]
      },
      "from": "@epam/uui-core:SinglePickerProps",
      "required": true
     },
     {
      "uid": 46,
      "name": "value",
      "comment": {
       "raw": [
        "The current value of component"
       ]
      },
      "typeValue": {
       "raw": "TItem"
      },
      "from": "@epam/uui-core:IEditable",
      "required": true
     },
     {
      "uid": 47,
      "name": "onValueChange",
      "comment": {
       "raw": [
        "Called when value needs to be changed (usually due to user interaction)"
       ]
      },
      "typeValue": {
       "raw": "(newValue: TItem) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IEditable",
      "required": true
     },
     {
      "uid": 102,
      "name": "selectionMode",
      "comment": {
       "raw": [
        "If 'single' provided - only one item is selected. In case of 'multi' - multiple items are selected"
       ]
      },
      "typeValue": {
       "raw": "'multi'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "multi"
       ]
      },
      "from": "@epam/uui-core:ArrayPickerProps",
      "required": true
     },
     {
      "uid": 74,
      "name": "valueType",
      "comment": {
       "raw": [
        "Defines what to use in value/onValueChange: 'id' - item id (TId). 'entity' - the item itself (TItem)"
       ]
      },
      "typeValue": {
       "raw": "'id'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "id"
       ]
      },
      "from": "@epam/uui-core:ArrayPickerProps",
      "required": false
     },
     {
      "uid": 75,
      "name": "value",
      "comment": {
       "raw": [
        "The current value of component"
       ]
      },
      "typeValue": {
       "raw": "TId[]"
      },
      "from": "@epam/uui-core:IEditable",
      "required": true
     },
     {
      "uid": 76,
      "name": "onValueChange",
      "comment": {
       "raw": [
        "Called when value needs to be changed (usually due to user interaction)"
       ]
      },
      "typeValue": {
       "raw": "(newValue: TId[]) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IEditable",
      "required": true
     },
     {
      "uid": 103,
      "name": "valueType",
      "comment": {
       "raw": [
        "Defines what to use in value/onValueChange: 'id' - item id (TId). 'entity' - the item itself (TItem)"
       ]
      },
      "typeValue": {
       "raw": "'entity'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "entity"
       ]
      },
      "from": "@epam/uui-core:ArrayPickerProps",
      "required": true
     },
     {
      "uid": 104,
      "name": "value",
      "comment": {
       "raw": [
        "The current value of component"
       ]
      },
      "typeValue": {
       "raw": "TItem[]"
      },
      "from": "@epam/uui-core:IEditable",
      "required": true
     },
     {
      "uid": 105,
      "name": "onValueChange",
      "comment": {
       "raw": [
        "Called when value needs to be changed (usually due to user interaction)"
       ]
      },
      "typeValue": {
       "raw": "(newValue: TItem[]) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IEditable",
      "required": true
     }
    ],
    "propsFromUnion": true
   }
  },
  "@epam/uui-components:UsePickerModalProps": {
   "summary": {
    "module": "@epam/uui-components",
    "typeName": {
     "name": "UsePickerModalProps",
     "nameFull": "UsePickerModalProps<TItem, TId>"
    },
    "src": "uui-components/src/pickers/hooks/types.ts",
    "exported": true
   },
   "details": {
    "kind": 264,
    "typeValue": {
     "raw": "PickerBaseOptions<TItem, TId> & IHasCaption & { selectionMode: 'single'; valueType: 'id'; initialValue: TId; } & IModal<TId, any> & PickerModalOptions<TItem, TId> | PickerBaseOptions<TItem, TId> & IHasCaption & { selectionMode: 'single'; valueType: 'entity'; initialValue: TItem; } & IModal<TItem, any> & PickerModalOptions<TItem, TId> | PickerBaseOptions<TItem, TId> & IHasCaption & { selectionMode: 'multi'; valueType: 'id'; initialValue: TId[]; } & IModal<TId[], any> & PickerModalOptions<TItem, TId> | PickerBaseOptions<TItem, TId> & IHasCaption & { selectionMode: 'multi'; valueType: 'entity'; initialValue: TItem[]; } & IModal<TItem[], any> & PickerModalOptions<TItem, TId>",
     "print": [
      "type UsePickerModalProps<TItem, TId> = PickerBaseOptions<TItem, TId> & IHasCaption & (PickerModalScalarProps<TId, TItem> | PickerModalArrayProps<TId, TItem>) & PickerModalOptions<TItem, TId>;"
     ]
    },
    "props": [
     {
      "uid": 88,
      "name": "entityName",
      "comment": {
       "raw": [
        "Name of the entity being selected. Affects wording like \"Please select [entity]\""
       ]
      },
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "from": "@epam/uui-core:PickerBaseOptions",
      "required": false
     },
     {
      "uid": 89,
      "name": "entityPluralName",
      "comment": {
       "raw": [
        "Plural name of the entity being selected. Affects wording like \"X [entities] selected\""
       ]
      },
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "from": "@epam/uui-core:PickerBaseOptions",
      "required": false
     },
     {
      "uid": 90,
      "name": "dataSource",
      "comment": {
       "raw": [
        "Datasource to get data for the picker"
       ]
      },
      "typeValue": {
       "raw": "IDataSource<TItem, TId, any>"
      },
      "from": "@epam/uui-core:PickerBaseOptions",
      "required": true
     },
     {
      "uid": 91,
      "name": "getName",
      "comment": {
       "raw": [
        "A pure function that gets entity name from entity object.",
        "     Default: (item) => item.name."
       ]
      },
      "typeValue": {
       "raw": "(item: TItem) => string"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:PickerBaseOptions",
      "required": false
     },
     {
      "uid": 92,
      "name": "renderRow",
      "comment": {
       "raw": [
        "Allow to customize how each selectable row is rendered. Can be used to add subtitles, avatars, etc."
       ]
      },
      "typeValue": {
       "raw": "(props: DataRowProps<TItem, TId>, dataSourceState: DataSourceState<Record<string, any>, any>) => React.ReactNode"
      },
      "editor": {
       "type": "component"
      },
      "from": "@epam/uui-core:PickerBaseOptions",
      "required": false
     },
     {
      "uid": 93,
      "name": "getRowOptions",
      "comment": {
       "raw": [
        "Gets options for each row. Allow to make rows non-selectable, as well as many other tweaks."
       ]
      },
      "typeValue": {
       "raw": "(item: TItem, index: number) => DataRowOptions<TItem, TId>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:PickerBaseOptions",
      "required": false
     },
     {
      "uid": 94,
      "name": "renderNotFound",
      "comment": {
       "raw": [
        "Overrides the default 'no records found' banner.",
        " The 'search' callback parameter allows to distinguish cases when there's no records at all, and when current search doesn't find anything."
       ]
      },
      "typeValue": {
       "raw": "(props: { search: string; onClose: () => void; }) => React.ReactNode"
      },
      "editor": {
       "type": "component"
      },
      "from": "@epam/uui-core:PickerBaseOptions",
      "required": false
     },
     {
      "uid": 95,
      "name": "emptyValue",
      "comment": {
       "raw": [
        "Defines which value is to set on clear. E.g. you can put an empty array instead of null for empty multi-select Pickers"
       ]
      },
      "typeValue": {
       "raw": "null | []"
      },
      "from": "@epam/uui-core:PickerBaseOptions",
      "required": false
     },
     {
      "uid": 96,
      "name": "sortBy",
      "comment": {
       "raw": [
        "Defines how items should be sorted. By default, items are shown in order they are provided to the DataSource"
       ]
      },
      "typeValue": {
       "raw": "(item: TItem, sorting: SortingOption<any>) => any"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:PickerBaseOptions",
      "required": false
     },
     {
      "uid": 97,
      "name": "filter",
      "comment": {
       "raw": [
        "Additional filter to apply to the DataSource. Can be used to limit selection somehow, w/o re-building the DataSource. E.g. in the linked pickers scenario."
       ]
      },
      "typeValue": {
       "raw": "any"
      },
      "from": "@epam/uui-core:PickerBaseOptions",
      "required": false
     },
     {
      "uid": 98,
      "name": "sorting",
      "comment": {
       "raw": [
        "Defines sorting to pass to the DataSource"
       ]
      },
      "typeValue": {
       "raw": "SortingOption<any>"
      },
      "from": "@epam/uui-core:PickerBaseOptions",
      "required": false
     },
     {
      "uid": 99,
      "name": "cascadeSelection",
      "comment": {
       "raw": [
        "Controls how the selection (checking items) of a parent node affects the selection of its all children, and vice versa.",
        " - false: All nodes are selected independently (default).",
        " - true or 'explicit': Selecting a parent node explicitly selects all its children. Unchecking the last parent's child unchecks its parent.",
        " - 'implicit': Selecting a parent node means that all children are considered checked.",
        "   The user sees all these nodes as checked on the UI, but only the selected parent is visible in the PickerInput tags, and only the checked",
        "   parent is present in the Picker's value or DataSourceState.checked array. When the user unchecks the first child of such a parent,",
        "   its parents become unchecked and all children but the unchecked one become checked, making children's selection explicit. If the last",
        "   unchecked child gets checked, all children from the checked are removed, returning to the implicit state when only the parent is checked."
       ]
      },
      "typeValue": {
       "raw": "boolean | 'implicit' | 'explicit'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        false,
        true,
        "implicit",
        "explicit"
       ]
      },
      "from": "@epam/uui-core:PickerBaseOptions",
      "required": false
     },
     {
      "uid": 100,
      "name": "isFoldedByDefault",
      "comment": {
       "raw": [
        "You can return true for all, or some items to fold them."
       ]
      },
      "typeValue": {
       "raw": "(item: TItem) => boolean"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:PickerBaseOptions",
      "required": false
     },
     {
      "uid": 101,
      "name": "getSearchFields",
      "comment": {
       "raw": [
        "Given an item, should return an array of string fields to search on. By default, the search is performed on item.name field."
       ]
      },
      "typeValue": {
       "raw": "(item: TItem) => string[]"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:PickerBaseOptions",
      "required": false
     },
     {
      "uid": 102,
      "name": "caption",
      "comment": {
       "raw": [
        "Caption. Can be a string, or React.Elements. Certain components supports minimal markup (<b>,<i>,<a>) in captions."
       ]
      },
      "typeValue": {
       "raw": "any"
      },
      "from": "@epam/uui-core:IHasCaption",
      "required": false
     },
     {
      "uid": 45,
      "name": "selectionMode",
      "typeValue": {
       "raw": "'single'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "single"
       ]
      },
      "from": "@epam/uui-components:PickerModalScalarProps",
      "required": true
     },
     {
      "uid": 17,
      "name": "valueType",
      "typeValue": {
       "raw": "'id'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "id"
       ]
      },
      "from": "@epam/uui-components:PickerModalScalarProps",
      "required": true
     },
     {
      "uid": 18,
      "name": "initialValue",
      "typeValue": {
       "raw": "TId"
      },
      "from": "@epam/uui-components:PickerModalScalarProps",
      "required": true
     },
     {
      "uid": 106,
      "name": "isActive",
      "comment": {
       "raw": [
        "Indicates whether the modal is currently displayed"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:IModal",
      "required": false
     },
     {
      "uid": 107,
      "name": "key",
      "comment": {
       "raw": [
        "Unique key of the modal"
       ]
      },
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "from": "@epam/uui-core:IModal",
      "required": true
     },
     {
      "uid": 108,
      "name": "zIndex",
      "comment": {
       "raw": [
        "Modal zIndex value. Calculated via LayoutContext."
       ]
      },
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "from": "@epam/uui-core:IModal",
      "required": true
     },
     {
      "uid": 22,
      "name": "success",
      "comment": {
       "raw": [
        "Call to successfully close the modal. It's resolves `modalContext.show()` promise with provided value."
       ]
      },
      "typeValue": {
       "raw": "(result: TId) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IModal",
      "required": true
     },
     {
      "uid": 110,
      "name": "abort",
      "comment": {
       "raw": [
        "Call to close the modal with abort action. It's rejects `modalContext.show()` promise with provided value."
       ]
      },
      "typeValue": {
       "raw": "(result?: any) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IModal",
      "required": true
     },
     {
      "uid": 111,
      "name": "parameters",
      "comment": {
       "raw": [
        "Parameters that provided via second param of `modalContext.show` method"
       ]
      },
      "typeValue": {
       "raw": "any"
      },
      "from": "@epam/uui-core:IModal",
      "required": false
     },
     {
      "uid": 112,
      "name": "depth",
      "comment": {
       "raw": [
        "Depth of current modal layer"
       ]
      },
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "from": "@epam/uui-core:IModal",
      "required": false
     },
     {
      "uid": 113,
      "name": "renderFilter",
      "typeValue": {
       "raw": "(editableFilter: IEditable<any>) => React.ReactNode"
      },
      "editor": {
       "type": "component"
      },
      "from": "@epam/uui-components:PickerModalOptions",
      "required": false
     },
     {
      "uid": 114,
      "name": "renderFooter",
      "typeValue": {
       "raw": "(props: PickerFooterProps<TItem, TId> & Partial<IModal<any, any>>) => React.ReactNode"
      },
      "editor": {
       "type": "component"
      },
      "from": "@epam/uui-components:PickerModalOptions",
      "required": false
     },
     {
      "uid": 115,
      "name": "disallowClickOutside",
      "comment": {
       "raw": [
        "@default false"
       ],
       "tags": {
        "@default": false
       }
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-components:PickerModalOptions",
      "required": false
     },
     {
      "uid": 116,
      "name": "rawProps",
      "comment": {
       "raw": [
        "Any HTML attributes (native or 'data-') to put on the underlying component"
       ]
      },
      "typeValue": {
       "raw": "React.HTMLAttributes<HTMLDivElement> & Record<`data-${string}`, string>"
      },
      "from": "@epam/uui-core:IHasRawProps",
      "required": false
     },
     {
      "uid": 46,
      "name": "valueType",
      "typeValue": {
       "raw": "'entity'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "entity"
       ]
      },
      "from": "@epam/uui-components:PickerModalScalarProps",
      "required": true
     },
     {
      "uid": 47,
      "name": "initialValue",
      "typeValue": {
       "raw": "TItem"
      },
      "from": "@epam/uui-components:PickerModalScalarProps",
      "required": true
     },
     {
      "uid": 51,
      "name": "success",
      "comment": {
       "raw": [
        "Call to successfully close the modal. It's resolves `modalContext.show()` promise with provided value."
       ]
      },
      "typeValue": {
       "raw": "(result: TItem) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IModal",
      "required": true
     },
     {
      "uid": 103,
      "name": "selectionMode",
      "typeValue": {
       "raw": "'multi'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "multi"
       ]
      },
      "from": "@epam/uui-components:PickerModalArrayProps",
      "required": true
     },
     {
      "uid": 75,
      "name": "valueType",
      "typeValue": {
       "raw": "'id'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "id"
       ]
      },
      "from": "@epam/uui-components:PickerModalArrayProps",
      "required": true
     },
     {
      "uid": 76,
      "name": "initialValue",
      "typeValue": {
       "raw": "TId[]"
      },
      "from": "@epam/uui-components:PickerModalArrayProps",
      "required": true
     },
     {
      "uid": 80,
      "name": "success",
      "comment": {
       "raw": [
        "Call to successfully close the modal. It's resolves `modalContext.show()` promise with provided value."
       ]
      },
      "typeValue": {
       "raw": "(result: TId[]) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IModal",
      "required": true
     },
     {
      "uid": 104,
      "name": "valueType",
      "typeValue": {
       "raw": "'entity'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "entity"
       ]
      },
      "from": "@epam/uui-components:PickerModalArrayProps",
      "required": true
     },
     {
      "uid": 105,
      "name": "initialValue",
      "typeValue": {
       "raw": "TItem[]"
      },
      "from": "@epam/uui-components:PickerModalArrayProps",
      "required": true
     },
     {
      "uid": 109,
      "name": "success",
      "comment": {
       "raw": [
        "Call to successfully close the modal. It's resolves `modalContext.show()` promise with provided value."
       ]
      },
      "typeValue": {
       "raw": "(result: TItem[]) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IModal",
      "required": true
     }
    ],
    "propsFromUnion": true
   }
  },
  "@epam/uui-components:ViewType": {
   "summary": {
    "module": "@epam/uui-components",
    "typeName": {
     "name": "ViewType",
     "nameFull": "ViewType"
    },
    "src": "uui-components/src/inputs/DatePicker/DatePickerBodyBase.tsx",
    "exported": true
   },
   "details": {
    "kind": 264,
    "typeValue": {
     "raw": "'DAY_SELECTION' | 'MONTH_SELECTION' | 'YEAR_SELECTION'",
     "print": [
      "type ViewType = 'DAY_SELECTION' | 'MONTH_SELECTION' | 'YEAR_SELECTION';"
     ]
    }
   }
  },
  "@epam/uui-components:YearSelectionProps": {
   "summary": {
    "module": "@epam/uui-components",
    "typeName": {
     "name": "YearSelectionProps",
     "nameFull": "YearSelectionProps"
    },
    "src": "uui-components/src/inputs/DatePicker/YearSelection.tsx",
    "exported": true
   },
   "details": {
    "kind": 263,
    "typeValue": {
     "raw": "YearSelectionProps",
     "print": [
      "interface YearSelectionProps extends IEditable<Dayjs>, IHasCX, IHasRawProps<React.HTMLAttributes<HTMLDivElement>>, IHasForwardedRef<HTMLDivElement> {",
      "    selectedDate: Dayjs;",
      "}"
     ]
    },
    "props": [
     {
      "uid": 1,
      "name": "selectedDate",
      "typeValue": {
       "raw": "Dayjs"
      },
      "required": true
     },
     {
      "uid": 2,
      "name": "value",
      "comment": {
       "raw": [
        "The current value of component"
       ]
      },
      "typeValue": {
       "raw": "Dayjs"
      },
      "from": "@epam/uui-core:IEditable",
      "required": true
     },
     {
      "uid": 3,
      "name": "onValueChange",
      "comment": {
       "raw": [
        "Called when value needs to be changed (usually due to user interaction)"
       ]
      },
      "typeValue": {
       "raw": "(newValue: Dayjs) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IEditable",
      "required": true
     },
     {
      "uid": 4,
      "name": "isInvalid",
      "comment": {
       "raw": [
        "True if component contains invalid input"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:ICanBeInvalid",
      "required": false
     },
     {
      "uid": 5,
      "name": "validationMessage",
      "comment": {
       "raw": [
        "Message describing why the value is invalid"
       ]
      },
      "typeValue": {
       "raw": "null | string | number | boolean | React.ReactElement<any, string | React.JSXElementConstructor<any>> | React.ReactFragment | React.ReactPortal"
      },
      "typeValueRef": "@types/react:ReactNode",
      "from": "@epam/uui-core:ICanBeInvalid",
      "required": false
     },
     {
      "uid": 6,
      "name": "validationProps",
      "comment": {
       "raw": [
        "If T is a complex value (object or array), this property contains validation states of inner items"
       ]
      },
      "typeValue": {
       "raw": "{ [key: string]: ICanBeInvalid; }"
      },
      "from": "@epam/uui-core:ICanBeInvalid",
      "required": false
     },
     {
      "uid": 7,
      "name": "isDisabled",
      "comment": {
       "raw": [
        "Disable editing, and visually de-emphasize value of the component"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:IDisableable",
      "required": false
     },
     {
      "uid": 8,
      "name": "isReadonly",
      "comment": {
       "raw": [
        "Disable editing. Unlike isDisabled, keep component's value readable."
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:ICanBeReadonly",
      "required": false
     },
     {
      "uid": 9,
      "name": "isRequired",
      "comment": {
       "raw": [
        "Marks that component's value is required and shouldn't be empty"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:ICanBeRequired",
      "required": false
     },
     {
      "uid": 10,
      "name": "cx",
      "comment": {
       "raw": [
        "CSS class(es) to put on component's root. See {@link https://github.com/JedWatson/classnames#usage} for details"
       ]
      },
      "typeValue": {
       "raw": "null | string | number | boolean | ClassDictionary | ClassArray"
      },
      "typeValueRef": "@epam/uui-core:ClassValue",
      "from": "@epam/uui-core:IHasCX",
      "required": false
     },
     {
      "uid": 11,
      "name": "rawProps",
      "comment": {
       "raw": [
        "Any HTML attributes (native or 'data-') to put on the underlying component"
       ]
      },
      "typeValue": {
       "raw": "React.HTMLAttributes<HTMLDivElement> & Record<`data-${string}`, string>"
      },
      "from": "@epam/uui-core:IHasRawProps",
      "required": false
     },
     {
      "uid": 12,
      "name": "forwardedRef",
      "comment": {
       "raw": [
        "this ref is passed to the underlying component"
       ]
      },
      "typeValue": {
       "raw": "null | (instance: HTMLDivElement | null) => void | React.MutableRefObject<HTMLDivElement | null>"
      },
      "from": "@epam/uui-core:IHasForwardedRef",
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui-components:DropSpotState": {
   "summary": {
    "module": "@epam/uui-components",
    "typeName": {
     "name": "DropSpotState",
     "nameFull": "DropSpotState"
    },
    "src": "uui-components/src/widgets/DropSpot.tsx",
    "exported": false
   }
  },
  "@epam/uui-components:GeneralAccordionProps": {
   "summary": {
    "module": "@epam/uui-components",
    "typeName": {
     "name": "GeneralAccordionProps",
     "nameFull": "GeneralAccordionProps"
    },
    "src": "uui-components/src/layout/Accordion.tsx",
    "exported": false
   }
  },
  "@epam/uui-components:GroupedDataColumnProps": {
   "summary": {
    "module": "@epam/uui-components",
    "typeName": {
     "name": "GroupedDataColumnProps",
     "nameFull": "GroupedDataColumnProps"
    },
    "src": "uui-components/src/table/columnsConfigurationModal/types.ts",
    "exported": false
   }
  },
  "@epam/uui-components:PickerInputSearchPosition": {
   "summary": {
    "module": "@epam/uui-components",
    "typeName": {
     "name": "PickerInputSearchPosition",
     "nameFull": "PickerInputSearchPosition"
    },
    "src": "uui-components/src/pickers/hooks/types.ts",
    "exported": false
   }
  },
  "@epam/uui-components:SelectionManager": {
   "summary": {
    "module": "@epam/uui-components",
    "typeName": {
     "name": "SelectionManager",
     "nameFull": "SelectionManager<TItem, TId, TFilter>"
    },
    "src": "uui-components/src/table/tableCellsSelection/types.ts",
    "exported": false
   }
  },
  "@epam/uui:AccordionMods": {
   "summary": {
    "module": "@epam/uui",
    "typeName": {
     "name": "AccordionMods",
     "nameFull": "AccordionMods"
    },
    "src": "uui/components/layout/Accordion.tsx",
    "exported": true
   },
   "details": {
    "kind": 263,
    "typeValue": {
     "raw": "AccordionMods",
     "print": [
      "interface AccordionMods {",
      "    /** @default 'block' */",
      "    mode?: 'block' | 'inline';",
      "    padding?: '0' | '6' | '12' | '18';",
      "}"
     ]
    },
    "props": [
     {
      "uid": 1,
      "name": "mode",
      "comment": {
       "raw": [
        "@default 'block'"
       ],
       "tags": {
        "@default": "block"
       }
      },
      "typeValue": {
       "raw": "'block' | 'inline'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "block",
        "inline"
       ]
      },
      "required": false
     },
     {
      "uid": 2,
      "name": "padding",
      "typeValue": {
       "raw": "'0' | '6' | '12' | '18'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "0",
        "6",
        "12",
        "18"
       ]
      },
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui:AccordionProps": {
   "summary": {
    "module": "@epam/uui",
    "typeName": {
     "name": "AccordionProps",
     "nameFull": "AccordionProps"
    },
    "src": "uui/components/layout/Accordion.tsx",
    "exported": true
   },
   "details": {
    "kind": 264,
    "typeValue": {
     "raw": "AccordionMods & GeneralAccordionProps | AccordionMods & GeneralAccordionProps & IEditable<boolean>",
     "print": [
      "type AccordionProps = AccordionMods & uuiComponents.AccordionProps;"
     ]
    },
    "props": [
     {
      "uid": 12,
      "name": "mode",
      "comment": {
       "raw": [
        "@default 'block'"
       ],
       "tags": {
        "@default": "block"
       }
      },
      "typeValue": {
       "raw": "'block' | 'inline'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "block",
        "inline"
       ]
      },
      "from": "@epam/uui:AccordionMods",
      "required": false
     },
     {
      "uid": 13,
      "name": "padding",
      "typeValue": {
       "raw": "'0' | '6' | '12' | '18'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "0",
        "6",
        "12",
        "18"
       ]
      },
      "from": "@epam/uui:AccordionMods",
      "required": false
     },
     {
      "uid": 14,
      "name": "title",
      "comment": {
       "raw": [
        "Accordion title"
       ]
      },
      "typeValue": {
       "raw": "string | React.ReactElement<any, string | React.JSXElementConstructor<any>>"
      },
      "from": "@epam/uui-components:GeneralAccordionProps",
      "required": false
     },
     {
      "uid": 15,
      "name": "renderTitle",
      "comment": {
       "raw": [
        "Overrides default title rendering."
       ]
      },
      "typeValue": {
       "raw": "(isOpen: boolean) => React.ReactElement<any, string | React.JSXElementConstructor<any>>"
      },
      "editor": {
       "type": "component"
      },
      "from": "@epam/uui-components:GeneralAccordionProps",
      "required": false
     },
     {
      "uid": 16,
      "name": "dropdownIcon",
      "comment": {
       "raw": [
        "Overrides the default dropdown (folding) icon.Pass null to disable the folding icon completely"
       ]
      },
      "typeValue": {
       "raw": "null | Icon"
      },
      "editor": {
       "type": "component"
      },
      "from": "@epam/uui-components:GeneralAccordionProps",
      "required": false
     },
     {
      "uid": 17,
      "name": "renderAdditionalItems",
      "comment": {
       "raw": [
        "Renders additional items to component's header (after the title, and before the folding icon)"
       ]
      },
      "typeValue": {
       "raw": "(isOpen: boolean) => React.ReactNode"
      },
      "editor": {
       "type": "component"
      },
      "from": "@epam/uui-components:GeneralAccordionProps",
      "required": false
     },
     {
      "uid": 18,
      "name": "cx",
      "comment": {
       "raw": [
        "CSS class(es) to put on component's root. See {@link https://github.com/JedWatson/classnames#usage} for details"
       ]
      },
      "typeValue": {
       "raw": "null | string | number | boolean | ClassDictionary | ClassArray"
      },
      "typeValueRef": "@epam/uui-core:ClassValue",
      "from": "@epam/uui-core:IHasCX",
      "required": false
     },
     {
      "uid": 19,
      "name": "isDisabled",
      "comment": {
       "raw": [
        "Disable editing, and visually de-emphasize value of the component"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:IDisableable",
      "required": false
     },
     {
      "uid": 20,
      "name": "children",
      "typeValue": {
       "raw": "null | string | number | boolean | React.ReactElement<any, string | React.JSXElementConstructor<any>> | React.ReactFragment | React.ReactPortal"
      },
      "typeValueRef": "@types/react:ReactNode",
      "from": "@epam/uui-core:IHasChildren",
      "required": false
     },
     {
      "uid": 21,
      "name": "rawProps",
      "comment": {
       "raw": [
        "Any HTML attributes (native or 'data-') to put on the underlying component"
       ]
      },
      "typeValue": {
       "raw": "React.HTMLAttributes<HTMLDivElement> & Record<`data-${string}`, string>"
      },
      "from": "@epam/uui-core:IHasRawProps",
      "required": false
     },
     {
      "uid": 22,
      "name": "forwardedRef",
      "comment": {
       "raw": [
        "this ref is passed to the underlying component"
       ]
      },
      "typeValue": {
       "raw": "null | (instance: HTMLDivElement | null) => void | React.MutableRefObject<HTMLDivElement | null>"
      },
      "from": "@epam/uui-core:IHasForwardedRef",
      "required": false
     },
     {
      "uid": 23,
      "name": "value",
      "comment": {
       "raw": [
        "The current value of component"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:IEditable",
      "required": true
     },
     {
      "uid": 24,
      "name": "onValueChange",
      "comment": {
       "raw": [
        "Called when value needs to be changed (usually due to user interaction)"
       ]
      },
      "typeValue": {
       "raw": "(newValue: boolean) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IEditable",
      "required": true
     },
     {
      "uid": 25,
      "name": "isInvalid",
      "comment": {
       "raw": [
        "True if component contains invalid input"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:ICanBeInvalid",
      "required": false
     },
     {
      "uid": 26,
      "name": "validationMessage",
      "comment": {
       "raw": [
        "Message describing why the value is invalid"
       ]
      },
      "typeValue": {
       "raw": "null | string | number | boolean | React.ReactElement<any, string | React.JSXElementConstructor<any>> | React.ReactFragment | React.ReactPortal"
      },
      "typeValueRef": "@types/react:ReactNode",
      "from": "@epam/uui-core:ICanBeInvalid",
      "required": false
     },
     {
      "uid": 27,
      "name": "validationProps",
      "comment": {
       "raw": [
        "If T is a complex value (object or array), this property contains validation states of inner items"
       ]
      },
      "typeValue": {
       "raw": "{ [key: string]: ICanBeInvalid; }"
      },
      "from": "@epam/uui-core:ICanBeInvalid",
      "required": false
     },
     {
      "uid": 28,
      "name": "isReadonly",
      "comment": {
       "raw": [
        "Disable editing. Unlike isDisabled, keep component's value readable."
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:ICanBeReadonly",
      "required": false
     },
     {
      "uid": 29,
      "name": "isRequired",
      "comment": {
       "raw": [
        "Marks that component's value is required and shouldn't be empty"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:ICanBeRequired",
      "required": false
     }
    ],
    "propsFromUnion": true
   }
  },
  "@epam/uui:AlertProps": {
   "summary": {
    "module": "@epam/uui",
    "typeName": {
     "name": "AlertProps",
     "nameFull": "AlertProps"
    },
    "src": "uui/components/overlays/Alert.tsx",
    "exported": true
   },
   "details": {
    "kind": 263,
    "typeValue": {
     "raw": "AlertProps",
     "print": [
      "interface AlertProps extends IHasChildren, IHasCX, IHasRawProps<React.HTMLAttributes<HTMLDivElement>> {",
      "    /** List of actions to display in the alert. Each action has name and 'action' callback */",
      "    actions?: notificationAction[];",
      "    /** Alert color */",
      "    color: SemanticColor;",
      "    /** When specified, a close icon is rendered. onClose callback will be called on clicking the close icon */",
      "    onClose?(): void;",
      "    /** An optional icon to show on the left of the alert */",
      "    icon?: Icon;",
      "    /**",
      "     * Component size. If omitted, 48 size will be used.",
      "     * @default '48'",
      "     */",
      "    size?: '36' | '48';",
      "}"
     ]
    },
    "props": [
     {
      "uid": 1,
      "name": "actions",
      "comment": {
       "raw": [
        "List of actions to display in the alert. Each action has name and 'action' callback"
       ]
      },
      "typeValue": {
       "raw": "notificationAction[]"
      },
      "required": false
     },
     {
      "uid": 2,
      "name": "color",
      "comment": {
       "raw": [
        "Alert color"
       ]
      },
      "typeValue": {
       "raw": "'info' | 'success' | 'warning' | 'error'"
      },
      "typeValueRef": "@epam/uui:SemanticColor",
      "editor": {
       "type": "oneOf",
       "options": [
        "info",
        "success",
        "warning",
        "error"
       ]
      },
      "required": true
     },
     {
      "uid": 3,
      "name": "onClose",
      "comment": {
       "raw": [
        "When specified, a close icon is rendered. onClose callback will be called on clicking the close icon"
       ]
      },
      "typeValue": {
       "raw": "() => void"
      },
      "editor": {
       "type": "func"
      },
      "required": false
     },
     {
      "uid": 4,
      "name": "icon",
      "comment": {
       "raw": [
        "An optional icon to show on the left of the alert"
       ]
      },
      "typeValue": {
       "raw": "Icon"
      },
      "editor": {
       "type": "component"
      },
      "required": false
     },
     {
      "uid": 5,
      "name": "size",
      "comment": {
       "raw": [
        "Component size. If omitted, 48 size will be used.",
        " @default '48'"
       ],
       "tags": {
        "@default": "48"
       }
      },
      "typeValue": {
       "raw": "'36' | '48'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "36",
        "48"
       ]
      },
      "required": false
     },
     {
      "uid": 6,
      "name": "children",
      "typeValue": {
       "raw": "null | string | number | boolean | React.ReactElement<any, string | React.JSXElementConstructor<any>> | React.ReactFragment | React.ReactPortal"
      },
      "typeValueRef": "@types/react:ReactNode",
      "from": "@epam/uui-core:IHasChildren",
      "required": false
     },
     {
      "uid": 7,
      "name": "cx",
      "comment": {
       "raw": [
        "CSS class(es) to put on component's root. See {@link https://github.com/JedWatson/classnames#usage} for details"
       ]
      },
      "typeValue": {
       "raw": "null | string | number | boolean | ClassDictionary | ClassArray"
      },
      "typeValueRef": "@epam/uui-core:ClassValue",
      "from": "@epam/uui-core:IHasCX",
      "required": false
     },
     {
      "uid": 8,
      "name": "rawProps",
      "comment": {
       "raw": [
        "Any HTML attributes (native or 'data-') to put on the underlying component"
       ]
      },
      "typeValue": {
       "raw": "React.HTMLAttributes<HTMLDivElement> & Record<`data-${string}`, string>"
      },
      "from": "@epam/uui-core:IHasRawProps",
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui:BadgeColor": {
   "summary": {
    "module": "@epam/uui",
    "typeName": {
     "name": "BadgeColor",
     "nameFull": "BadgeColor"
    },
    "src": "uui/components/widgets/Badge.tsx",
    "exported": true
   },
   "details": {
    "kind": 264,
    "typeValue": {
     "raw": "'info' | 'success' | 'warning' | 'critical' | 'neutral'",
     "print": [
      "type BadgeColor = EpamBadgeSemanticColor;"
     ]
    }
   }
  },
  "@epam/uui:BadgeFill": {
   "summary": {
    "module": "@epam/uui",
    "typeName": {
     "name": "BadgeFill",
     "nameFull": "BadgeFill"
    },
    "src": "uui/components/widgets/Badge.tsx",
    "exported": true
   },
   "details": {
    "kind": 264,
    "typeValue": {
     "raw": "'solid' | 'outline'",
     "print": [
      "type BadgeFill = 'solid' | 'outline';"
     ]
    }
   }
  },
  "@epam/uui:BadgeMods": {
   "summary": {
    "module": "@epam/uui",
    "typeName": {
     "name": "BadgeMods",
     "nameFull": "BadgeMods"
    },
    "src": "uui/components/widgets/Badge.tsx",
    "exported": true
   },
   "details": {
    "kind": 263,
    "typeValue": {
     "raw": "BadgeMods",
     "print": [
      "interface BadgeMods {",
      "    color?: BadgeColor;",
      "    /** @default 'solid' */",
      "    fill?: BadgeFill;",
      "    /** @default '36' */",
      "    size?: BadgeSize;",
      "    indicator?: boolean;",
      "}"
     ]
    },
    "props": [
     {
      "uid": 1,
      "name": "color",
      "typeValue": {
       "raw": "'info' | 'success' | 'warning' | 'critical' | 'neutral'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "info",
        "success",
        "warning",
        "critical",
        "neutral"
       ]
      },
      "required": false
     },
     {
      "uid": 2,
      "name": "fill",
      "comment": {
       "raw": [
        "@default 'solid'"
       ],
       "tags": {
        "@default": "solid"
       }
      },
      "typeValue": {
       "raw": "'solid' | 'outline'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "solid",
        "outline"
       ]
      },
      "required": false
     },
     {
      "uid": 3,
      "name": "size",
      "comment": {
       "raw": [
        "@default '36'"
       ],
       "tags": {
        "@default": "36"
       }
      },
      "typeValue": {
       "raw": "'18' | '36' | '48' | '24' | '30' | '42'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "18",
        "24",
        "30",
        "36",
        "42",
        "48"
       ]
      },
      "required": false
     },
     {
      "uid": 4,
      "name": "indicator",
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui:BadgeProps": {
   "summary": {
    "module": "@epam/uui",
    "typeName": {
     "name": "BadgeProps",
     "nameFull": "BadgeProps"
    },
    "src": "uui/components/widgets/Badge.tsx",
    "exported": true
   },
   "details": {
    "kind": 264,
    "typeValue": {
     "raw": "BadgeProps",
     "print": [
      "type BadgeProps = ButtonProps & BadgeMods;"
     ]
    },
    "props": [
     {
      "uid": 1,
      "name": "clearIcon",
      "comment": {
       "raw": [
        "Icon for clear value button (usually cross)"
       ]
      },
      "typeValue": {
       "raw": "Icon"
      },
      "editor": {
       "type": "component"
      },
      "from": "@epam/uui-components:ButtonProps",
      "required": false
     },
     {
      "uid": 2,
      "name": "captionCX",
      "comment": {
       "raw": [
        "CSS classes to put on the caption"
       ]
      },
      "typeValue": {
       "raw": "null | string | number | boolean | ClassDictionary | ClassArray"
      },
      "typeValueRef": "@epam/uui-core:ClassValue",
      "from": "@epam/uui-components:ButtonProps",
      "required": false
     },
     {
      "uid": 3,
      "name": "countIndicator",
      "comment": {
       "raw": [
        "CountIndicator component"
       ]
      },
      "typeValue": {
       "raw": "React.ComponentClass<IHasCaption, any> | React.FunctionComponent<IHasCaption>"
      },
      "from": "@epam/uui-components:ButtonProps",
      "required": false
     },
     {
      "uid": 4,
      "name": "dropdownIcon",
      "comment": {
       "raw": [
        "Icon for drop-down toggler"
       ]
      },
      "typeValue": {
       "raw": "Icon"
      },
      "editor": {
       "type": "component"
      },
      "from": "@epam/uui-core:ButtonCoreProps",
      "required": false
     },
     {
      "uid": 5,
      "name": "dropdownIconPosition",
      "comment": {
       "raw": [
        "Position of the dropdown icon ('left' of 'right')"
       ]
      },
      "typeValue": {
       "raw": "'left' | 'right'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "left",
        "right"
       ]
      },
      "from": "@epam/uui-core:ButtonCoreProps",
      "required": false
     },
     {
      "uid": 6,
      "name": "count",
      "typeValue": {
       "raw": "null | string | number | boolean | React.ReactElement<any, string | React.JSXElementConstructor<any>> | React.ReactFragment | React.ReactPortal"
      },
      "typeValueRef": "@types/react:ReactNode",
      "from": "@epam/uui-core:ButtonCoreProps",
      "required": false
     },
     {
      "uid": 7,
      "name": "cx",
      "comment": {
       "raw": [
        "CSS class(es) to put on component's root. See {@link https://github.com/JedWatson/classnames#usage} for details"
       ]
      },
      "typeValue": {
       "raw": "null | string | number | boolean | ClassDictionary | ClassArray"
      },
      "typeValueRef": "@epam/uui-core:ClassValue",
      "from": "@epam/uui-core:IHasCX",
      "required": false
     },
     {
      "uid": 8,
      "name": "onClick",
      "comment": {
       "raw": [
        "Called when component is clicked"
       ]
      },
      "typeValue": {
       "raw": "(e?: any) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IClickable",
      "required": false
     },
     {
      "uid": 9,
      "name": "link",
      "comment": {
       "raw": [
        "Link object to redirect to for SPA-redirects"
       ]
      },
      "typeValue": {
       "raw": "Link"
      },
      "from": "@epam/uui-core:ICanRedirect",
      "required": false
     },
     {
      "uid": 10,
      "name": "href",
      "comment": {
       "raw": [
        "Href (URL) to redirect to, for non-SPA redirects"
       ]
      },
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "from": "@epam/uui-core:ICanRedirect",
      "required": false
     },
     {
      "uid": 11,
      "name": "isLinkActive",
      "comment": {
       "raw": [
        "Highlights component to show that link is active (browser is displaying the page to which link is pointing)"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:ICanRedirect",
      "required": false
     },
     {
      "uid": 12,
      "name": "target",
      "comment": {
       "raw": [
        "Controls where the link should be opened"
       ]
      },
      "typeValue": {
       "raw": "'_blank'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "_blank"
       ]
      },
      "from": "@epam/uui-core:ICanRedirect",
      "required": false
     },
     {
      "uid": 13,
      "name": "isDisabled",
      "comment": {
       "raw": [
        "Disable editing, and visually de-emphasize value of the component"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:IDisableable",
      "required": false
     },
     {
      "uid": 14,
      "name": "icon",
      "comment": {
       "raw": [
        "Icon can be a React element (usually an SVG element)"
       ]
      },
      "typeValue": {
       "raw": "Icon"
      },
      "editor": {
       "type": "component"
      },
      "from": "@epam/uui-core:IHasIcon",
      "required": false
     },
     {
      "uid": 15,
      "name": "iconPosition",
      "comment": {
       "raw": [
        "Position of the icon (left of right)"
       ]
      },
      "typeValue": {
       "raw": "'left' | 'right'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "left",
        "right"
       ]
      },
      "from": "@epam/uui-core:IHasIcon",
      "required": false
     },
     {
      "uid": 16,
      "name": "onIconClick",
      "comment": {
       "raw": [
        "Click handler for the icon"
       ]
      },
      "typeValue": {
       "raw": "() => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IHasIcon",
      "required": false
     },
     {
      "uid": 17,
      "name": "clickAnalyticsEvent",
      "comment": {
       "raw": [
        "An analytics event to send (via AnalyticsContext) when component is clicked.",
        " See [AnalyticsContext](@link https://uui.epam.com/documents?id=analyticsContext&mode=doc&skin=UUI4_promo&category=contexts)."
       ]
      },
      "typeValue": {
       "raw": "null | { [key: string]: any; name: string; }"
      },
      "from": "@epam/uui-core:IAnalyticableClick",
      "required": false
     },
     {
      "uid": 18,
      "name": "tabIndex",
      "comment": {
       "raw": [
        "Controls the order of keyboard navigation between components"
       ]
      },
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "from": "@epam/uui-core:IHasTabIndex",
      "required": false
     },
     {
      "uid": 19,
      "name": "rawProps",
      "comment": {
       "raw": [
        "Any HTML attributes (native or 'data-') to put on the underlying component"
       ]
      },
      "typeValue": {
       "raw": "React.ButtonHTMLAttributes<HTMLButtonElement> & Record<`data-${string}`, string>"
      },
      "from": "@epam/uui-core:IHasRawProps",
      "required": false
     },
     {
      "uid": 20,
      "name": "caption",
      "comment": {
       "raw": [
        "Caption. Can be a string, or React.Elements. Certain components supports minimal markup (<b>,<i>,<a>) in captions."
       ]
      },
      "typeValue": {
       "raw": "any"
      },
      "from": "@epam/uui-core:IHasCaption",
      "required": false
     },
     {
      "uid": 21,
      "name": "onClear",
      "comment": {
       "raw": [
        "Call to clear toggler value"
       ]
      },
      "typeValue": {
       "raw": "(e?: any) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IBasicPickerToggler",
      "required": false
     },
     {
      "uid": 22,
      "name": "isOpen",
      "comment": {
       "raw": [
        "When isDropdown=true, indicate that dropdown is open with chevron icon"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:IDropdownToggler",
      "required": false
     },
     {
      "uid": 23,
      "name": "isDropdown",
      "comment": {
       "raw": [
        "Shows chevron icon, enabling component to act as dropdown toggler"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:IDropdownToggler",
      "required": false
     },
     {
      "uid": 24,
      "name": "toggleDropdownOpening",
      "comment": {
       "raw": [
        "Called when associated dropdown should open or close"
       ]
      },
      "typeValue": {
       "raw": "(value: boolean) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IDropdownToggler",
      "required": false
     },
     {
      "uid": 25,
      "name": "isInteractedOutside",
      "comment": {
       "raw": [
        "Called when component is interacted outside, to close the dropdown"
       ]
      },
      "typeValue": {
       "raw": "(event: Event) => boolean"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IDropdownToggler",
      "required": false
     },
     {
      "uid": 26,
      "name": "ref",
      "comment": {
       "raw": [
        "Component's ref"
       ]
      },
      "typeValue": {
       "raw": "null | (instance: any) => void | React.RefObject<any>"
      },
      "from": "@epam/uui-core:IDropdownToggler",
      "required": false
     },
     {
      "uid": 27,
      "name": "forwardedRef",
      "comment": {
       "raw": [
        "this ref is passed to the underlying component"
       ]
      },
      "typeValue": {
       "raw": "null | (instance: HTMLButtonElement | HTMLAnchorElement | null) => void | React.MutableRefObject<HTMLButtonElement | HTMLAnchorElement | null>"
      },
      "from": "@epam/uui-core:IHasForwardedRef",
      "required": false
     },
     {
      "uid": 28,
      "name": "color",
      "typeValue": {
       "raw": "'info' | 'success' | 'warning' | 'critical' | 'neutral'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "info",
        "success",
        "warning",
        "critical",
        "neutral"
       ]
      },
      "from": "@epam/uui:BadgeMods",
      "required": false
     },
     {
      "uid": 29,
      "name": "fill",
      "comment": {
       "raw": [
        "@default 'solid'"
       ],
       "tags": {
        "@default": "solid"
       }
      },
      "typeValue": {
       "raw": "'solid' | 'outline'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "solid",
        "outline"
       ]
      },
      "from": "@epam/uui:BadgeMods",
      "required": false
     },
     {
      "uid": 30,
      "name": "size",
      "comment": {
       "raw": [
        "@default '36'"
       ],
       "tags": {
        "@default": "36"
       }
      },
      "typeValue": {
       "raw": "'18' | '36' | '48' | '24' | '30' | '42'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "18",
        "24",
        "30",
        "36",
        "42",
        "48"
       ]
      },
      "from": "@epam/uui:BadgeMods",
      "required": false
     },
     {
      "uid": 31,
      "name": "indicator",
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui:BadgeMods",
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui:BadgeSize": {
   "summary": {
    "module": "@epam/uui",
    "typeName": {
     "name": "BadgeSize",
     "nameFull": "BadgeSize"
    },
    "src": "uui/components/widgets/Badge.tsx",
    "exported": true
   },
   "details": {
    "kind": 264,
    "typeValue": {
     "raw": "'18' | '36' | '48' | '24' | '30' | '42'",
     "print": [
      "type BadgeSize = '18' | '24' | '30' | '36' | '42' | '48';"
     ]
    }
   }
  },
  "@epam/uui:BurgerButtonMods": {
   "summary": {
    "module": "@epam/uui",
    "typeName": {
     "name": "BurgerButtonMods",
     "nameFull": "BurgerButtonMods"
    },
    "src": "uui/components/navigation/MainMenu/Burger/BurgerButton.tsx",
    "exported": true
   },
   "details": {
    "kind": 263,
    "typeValue": {
     "raw": "BurgerButtonMods",
     "print": [
      "interface BurgerButtonMods extends IHasIcon, IDropdownToggler {",
      "    type?: 'primary' | 'secondary';",
      "    indentLevel?: number;",
      "}"
     ]
    },
    "props": [
     {
      "uid": 1,
      "name": "type",
      "typeValue": {
       "raw": "'primary' | 'secondary'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "primary",
        "secondary"
       ]
      },
      "required": false
     },
     {
      "uid": 2,
      "name": "indentLevel",
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "required": false
     },
     {
      "uid": 3,
      "name": "icon",
      "comment": {
       "raw": [
        "Icon can be a React element (usually an SVG element)"
       ]
      },
      "typeValue": {
       "raw": "Icon"
      },
      "editor": {
       "type": "component"
      },
      "from": "@epam/uui-core:IHasIcon",
      "required": false
     },
     {
      "uid": 4,
      "name": "iconPosition",
      "comment": {
       "raw": [
        "Position of the icon (left of right)"
       ]
      },
      "typeValue": {
       "raw": "'left' | 'right'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "left",
        "right"
       ]
      },
      "from": "@epam/uui-core:IHasIcon",
      "required": false
     },
     {
      "uid": 5,
      "name": "onIconClick",
      "comment": {
       "raw": [
        "Click handler for the icon"
       ]
      },
      "typeValue": {
       "raw": "() => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IHasIcon",
      "required": false
     },
     {
      "uid": 6,
      "name": "isOpen",
      "comment": {
       "raw": [
        "When isDropdown=true, indicate that dropdown is open with chevron icon"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:IDropdownToggler",
      "required": false
     },
     {
      "uid": 7,
      "name": "isDropdown",
      "comment": {
       "raw": [
        "Shows chevron icon, enabling component to act as dropdown toggler"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:IDropdownToggler",
      "required": false
     },
     {
      "uid": 8,
      "name": "toggleDropdownOpening",
      "comment": {
       "raw": [
        "Called when associated dropdown should open or close"
       ]
      },
      "typeValue": {
       "raw": "(value: boolean) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IDropdownToggler",
      "required": false
     },
     {
      "uid": 9,
      "name": "isInteractedOutside",
      "comment": {
       "raw": [
        "Called when component is interacted outside, to close the dropdown"
       ]
      },
      "typeValue": {
       "raw": "(event: Event) => boolean"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IDropdownToggler",
      "required": false
     },
     {
      "uid": 10,
      "name": "ref",
      "comment": {
       "raw": [
        "Component's ref"
       ]
      },
      "typeValue": {
       "raw": "null | (instance: any) => void | React.RefObject<any>"
      },
      "from": "@epam/uui-core:IDropdownToggler",
      "required": false
     },
     {
      "uid": 11,
      "name": "isDisabled",
      "comment": {
       "raw": [
        "Disables component"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:IDropdownToggler",
      "required": false
     },
     {
      "uid": 12,
      "name": "caption",
      "comment": {
       "raw": [
        "Caption. Can be a string, or React.Elements. Certain components supports minimal markup (<b>,<i>,<a>) in captions."
       ]
      },
      "typeValue": {
       "raw": "any"
      },
      "from": "@epam/uui-core:IHasCaption",
      "required": false
     },
     {
      "uid": 13,
      "name": "onClick",
      "comment": {
       "raw": [
        "Called when component is clicked"
       ]
      },
      "typeValue": {
       "raw": "(e?: any) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IClickable",
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui:BurgerGroupHeaderProps": {
   "summary": {
    "module": "@epam/uui",
    "typeName": {
     "name": "BurgerGroupHeaderProps",
     "nameFull": "BurgerGroupHeaderProps"
    },
    "src": "uui/components/navigation/MainMenu/Burger/BurgerGroupHeader.tsx",
    "exported": true
   },
   "details": {
    "kind": 263,
    "typeValue": {
     "raw": "BurgerGroupHeaderProps",
     "print": [
      "interface BurgerGroupHeaderProps {",
      "    caption: string;",
      "}"
     ]
    },
    "props": [
     {
      "uid": 1,
      "name": "caption",
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "required": true
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui:BurgerMods": {
   "summary": {
    "module": "@epam/uui",
    "typeName": {
     "name": "BurgerMods",
     "nameFull": "BurgerMods"
    },
    "src": "uui/components/navigation/MainMenu/Burger/Burger.tsx",
    "exported": true
   },
   "details": {
    "kind": 263,
    "typeValue": {
     "raw": "BurgerMods",
     "print": [
      "interface BurgerMods {",
      "}"
     ]
    }
   }
  },
  "@epam/uui:BurgerSearchProps": {
   "summary": {
    "module": "@epam/uui",
    "typeName": {
     "name": "BurgerSearchProps",
     "nameFull": "BurgerSearchProps"
    },
    "src": "uui/components/navigation/MainMenu/Burger/BurgerSearch.tsx",
    "exported": true
   },
   "details": {
    "kind": 263,
    "typeValue": {
     "raw": "BurgerSearchProps",
     "print": [
      "interface BurgerSearchProps extends TextInputProps {",
      "}"
     ]
    },
    "props": [
     {
      "uid": 1,
      "name": "acceptIcon",
      "comment": {
       "raw": [
        "Overrides accept (check) icon"
       ]
      },
      "typeValue": {
       "raw": "Icon"
      },
      "editor": {
       "type": "component"
      },
      "from": "@epam/uui-components:TextInputProps",
      "required": false
     },
     {
      "uid": 2,
      "name": "cancelIcon",
      "comment": {
       "raw": [
        "Overrides cancel (cross) icon"
       ]
      },
      "typeValue": {
       "raw": "Icon"
      },
      "editor": {
       "type": "component"
      },
      "from": "@epam/uui-components:TextInputProps",
      "required": false
     },
     {
      "uid": 3,
      "name": "dropdownIcon",
      "comment": {
       "raw": [
        "Overrides dropdown (chevron) icon"
       ]
      },
      "typeValue": {
       "raw": "Icon"
      },
      "editor": {
       "type": "component"
      },
      "from": "@epam/uui-components:TextInputProps",
      "required": false
     },
     {
      "uid": 4,
      "name": "inputCx",
      "comment": {
       "raw": [
        "CSS class(es) to put to the HTML Input element"
       ]
      },
      "typeValue": {
       "raw": "null | string | number | boolean | ClassDictionary | ClassArray"
      },
      "typeValueRef": "@epam/uui-core:ClassValue",
      "from": "@epam/uui-components:TextInputProps",
      "required": false
     },
     {
      "uid": 5,
      "name": "renderInput",
      "comment": {
       "raw": [
        "overrides rendering of HTML Input element"
       ]
      },
      "typeValue": {
       "raw": "(props: IRenderInputProps) => JSX.Element"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-components:TextInputProps",
      "required": false
     },
     {
      "uid": 6,
      "name": "onCancel",
      "comment": {
       "raw": [
        "Enables cancel (cross) icon, and fires when the icon is clicked"
       ]
      },
      "typeValue": {
       "raw": "() => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:TextInputCoreProps",
      "required": false
     },
     {
      "uid": 7,
      "name": "onAccept",
      "comment": {
       "raw": [
        "Enables accept (check) icon, and fires when the icon is clicked"
       ]
      },
      "typeValue": {
       "raw": "() => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:TextInputCoreProps",
      "required": false
     },
     {
      "uid": 8,
      "name": "onKeyDown",
      "comment": {
       "raw": [
        "keydown event handler to put on the HTML input element"
       ]
      },
      "typeValue": {
       "raw": "(e?: any) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:TextInputCoreProps",
      "required": false
     },
     {
      "uid": 9,
      "name": "autoFocus",
      "comment": {
       "raw": [
        "Put focus on the element, when component is mounted"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:TextInputCoreProps",
      "required": false
     },
     {
      "uid": 10,
      "name": "type",
      "comment": {
       "raw": [
        "Standard 'type' attribute to put on the HTML input element (e.g. 'password')"
       ]
      },
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "from": "@epam/uui-core:TextInputCoreProps",
      "required": false
     },
     {
      "uid": 11,
      "name": "autoComplete",
      "comment": {
       "raw": [
        "Standard [autocomplete attribute]{@link https://www.w3schools.com/tags/att_input_autocomplete.asp}"
       ]
      },
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "from": "@epam/uui-core:TextInputCoreProps",
      "required": false
     },
     {
      "uid": 12,
      "name": "name",
      "comment": {
       "raw": [
        "Standard [name attribute]{@link https://www.w3schools.com/tags/att_input_name.asp}"
       ]
      },
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "from": "@epam/uui-core:TextInputCoreProps",
      "required": false
     },
     {
      "uid": 13,
      "name": "maxLength",
      "comment": {
       "raw": [
        "Maximum input length in characters"
       ]
      },
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "from": "@epam/uui-core:TextInputCoreProps",
      "required": false
     },
     {
      "uid": 14,
      "name": "inputMode",
      "comment": {
       "raw": [
        "Standard [inputMode attribute]{@link https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/inputmode}"
       ]
      },
      "typeValue": {
       "raw": "'none' | 'text' | 'tel' | 'url' | 'email' | 'numeric' | 'decimal' | 'search'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "none",
        "text",
        "tel",
        "url",
        "email",
        "numeric",
        "decimal",
        "search"
       ]
      },
      "from": "@epam/uui-core:TextInputCoreProps",
      "required": false
     },
     {
      "uid": 15,
      "name": "id",
      "comment": {
       "raw": [
        "HTML ID attribute for input"
       ]
      },
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "from": "@epam/uui-core:TextInputCoreProps",
      "required": false
     },
     {
      "uid": 16,
      "name": "cx",
      "comment": {
       "raw": [
        "CSS class(es) to put on component's root. See {@link https://github.com/JedWatson/classnames#usage} for details"
       ]
      },
      "typeValue": {
       "raw": "null | string | number | boolean | ClassDictionary | ClassArray"
      },
      "typeValueRef": "@epam/uui-core:ClassValue",
      "from": "@epam/uui-core:IHasCX",
      "required": false
     },
     {
      "uid": 17,
      "name": "onClick",
      "comment": {
       "raw": [
        "Called when component is clicked"
       ]
      },
      "typeValue": {
       "raw": "(e?: any) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IClickable",
      "required": false
     },
     {
      "uid": 18,
      "name": "isDisabled",
      "comment": {
       "raw": [
        "Disable editing, and visually de-emphasize value of the component"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:IDisableable",
      "required": false
     },
     {
      "uid": 19,
      "name": "value",
      "comment": {
       "raw": [
        "The current value of component"
       ]
      },
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "from": "@epam/uui-core:IEditable",
      "required": true
     },
     {
      "uid": 20,
      "name": "onValueChange",
      "comment": {
       "raw": [
        "Called when value needs to be changed (usually due to user interaction)"
       ]
      },
      "typeValue": {
       "raw": "(newValue: string | undefined) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IEditable",
      "required": true
     },
     {
      "uid": 21,
      "name": "isInvalid",
      "comment": {
       "raw": [
        "True if component contains invalid input"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:ICanBeInvalid",
      "required": false
     },
     {
      "uid": 22,
      "name": "validationMessage",
      "comment": {
       "raw": [
        "Message describing why the value is invalid"
       ]
      },
      "typeValue": {
       "raw": "null | string | number | boolean | React.ReactElement<any, string | React.JSXElementConstructor<any>> | React.ReactFragment | React.ReactPortal"
      },
      "typeValueRef": "@types/react:ReactNode",
      "from": "@epam/uui-core:ICanBeInvalid",
      "required": false
     },
     {
      "uid": 23,
      "name": "validationProps",
      "comment": {
       "raw": [
        "If T is a complex value (object or array), this property contains validation states of inner items"
       ]
      },
      "typeValue": {
       "raw": "{ [key: string]: ICanBeInvalid; }"
      },
      "from": "@epam/uui-core:ICanBeInvalid",
      "required": false
     },
     {
      "uid": 24,
      "name": "isReadonly",
      "comment": {
       "raw": [
        "Disable editing. Unlike isDisabled, keep component's value readable."
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:ICanBeReadonly",
      "required": false
     },
     {
      "uid": 25,
      "name": "isRequired",
      "comment": {
       "raw": [
        "Marks that component's value is required and shouldn't be empty"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:ICanBeRequired",
      "required": false
     },
     {
      "uid": 26,
      "name": "placeholder",
      "comment": {
       "raw": [
        "Placeholder to display when empty"
       ]
      },
      "typeValue": {
       "raw": "any"
      },
      "from": "@epam/uui-core:IHasPlaceholder",
      "required": false
     },
     {
      "uid": 27,
      "name": "icon",
      "comment": {
       "raw": [
        "Icon can be a React element (usually an SVG element)"
       ]
      },
      "typeValue": {
       "raw": "Icon"
      },
      "editor": {
       "type": "component"
      },
      "from": "@epam/uui-core:IHasIcon",
      "required": false
     },
     {
      "uid": 28,
      "name": "iconPosition",
      "comment": {
       "raw": [
        "Position of the icon (left of right)"
       ]
      },
      "typeValue": {
       "raw": "'left' | 'right'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "left",
        "right"
       ]
      },
      "from": "@epam/uui-core:IHasIcon",
      "required": false
     },
     {
      "uid": 29,
      "name": "onIconClick",
      "comment": {
       "raw": [
        "Click handler for the icon"
       ]
      },
      "typeValue": {
       "raw": "() => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IHasIcon",
      "required": false
     },
     {
      "uid": 30,
      "name": "isOpen",
      "comment": {
       "raw": [
        "When isDropdown=true, indicate that dropdown is open with chevron icon"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:IDropdownToggler",
      "required": false
     },
     {
      "uid": 31,
      "name": "isDropdown",
      "comment": {
       "raw": [
        "Shows chevron icon, enabling component to act as dropdown toggler"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:IDropdownToggler",
      "required": false
     },
     {
      "uid": 32,
      "name": "toggleDropdownOpening",
      "comment": {
       "raw": [
        "Called when associated dropdown should open or close"
       ]
      },
      "typeValue": {
       "raw": "(value: boolean) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IDropdownToggler",
      "required": false
     },
     {
      "uid": 33,
      "name": "isInteractedOutside",
      "comment": {
       "raw": [
        "Called when component is interacted outside, to close the dropdown"
       ]
      },
      "typeValue": {
       "raw": "(event: Event) => boolean"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IDropdownToggler",
      "required": false
     },
     {
      "uid": 34,
      "name": "ref",
      "comment": {
       "raw": [
        "Component's ref"
       ]
      },
      "typeValue": {
       "raw": "null | (instance: any) => void | React.RefObject<any>"
      },
      "from": "@epam/uui-core:IDropdownToggler",
      "required": false
     },
     {
      "uid": 35,
      "name": "caption",
      "comment": {
       "raw": [
        "Caption. Can be a string, or React.Elements. Certain components supports minimal markup (<b>,<i>,<a>) in captions."
       ]
      },
      "typeValue": {
       "raw": "any"
      },
      "from": "@epam/uui-core:IHasCaption",
      "required": false
     },
     {
      "uid": 36,
      "name": "getValueChangeAnalyticsEvent",
      "comment": {
       "raw": [
        "Given a value, returns an analytics event to send when component is edited.",
        " See [AnalyticsContext](@link https://uui.epam.com/documents?id=analyticsContext&mode=doc&skin=UUI4_promo&category=contexts)."
       ]
      },
      "typeValue": {
       "raw": "(newValue: string | null, oldValue: string | null) => AnalyticsEvent"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IAnalyticableOnChange",
      "required": false
     },
     {
      "uid": 37,
      "name": "rawProps",
      "comment": {
       "raw": [
        "Any HTML attributes (native or 'data-') to put on the underlying component"
       ]
      },
      "typeValue": {
       "raw": "React.HTMLAttributes<HTMLInputElement> & Record<`data-${string}`, string>"
      },
      "from": "@epam/uui-core:IHasRawProps",
      "required": false
     },
     {
      "uid": 38,
      "name": "onFocus",
      "comment": {
       "raw": [
        "Called when component gets input focus"
       ]
      },
      "typeValue": {
       "raw": "(e: React.FocusEvent<HTMLInputElement, Element>) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:ICanFocus",
      "required": false
     },
     {
      "uid": 39,
      "name": "onBlur",
      "comment": {
       "raw": [
        "Called when component looses input focus"
       ]
      },
      "typeValue": {
       "raw": "(e: React.FocusEvent<HTMLInputElement, Element>) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:ICanFocus",
      "required": false
     },
     {
      "uid": 40,
      "name": "tabIndex",
      "comment": {
       "raw": [
        "Controls the order of keyboard navigation between components"
       ]
      },
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "from": "@epam/uui-core:IHasTabIndex",
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui:ButtonColor": {
   "summary": {
    "module": "@epam/uui",
    "typeName": {
     "name": "ButtonColor",
     "nameFull": "ButtonColor"
    },
    "src": "uui/components/buttons/Button.tsx",
    "exported": true
   },
   "details": {
    "kind": 264,
    "typeValue": {
     "raw": "'critical' | 'neutral' | 'primary' | 'secondary' | 'accent'",
     "print": [
      "type ButtonColor = 'accent' | 'primary' | 'critical' | 'secondary' | 'neutral';"
     ]
    }
   }
  },
  "@epam/uui:ButtonFill": {
   "summary": {
    "module": "@epam/uui",
    "typeName": {
     "name": "ButtonFill",
     "nameFull": "ButtonFill"
    },
    "src": "uui/components/types.ts",
    "exported": true
   },
   "details": {
    "kind": 264,
    "typeValue": {
     "raw": "'solid' | 'outline' | 'none' | 'ghost'",
     "print": [
      "type ButtonFill = 'solid' | 'outline' | 'ghost' | 'none';"
     ]
    }
   }
  },
  "@epam/uui:ButtonMods": {
   "summary": {
    "module": "@epam/uui",
    "typeName": {
     "name": "ButtonMods",
     "nameFull": "ButtonMods"
    },
    "src": "uui/components/buttons/Button.tsx",
    "exported": true
   },
   "details": {
    "kind": 263,
    "typeValue": {
     "raw": "ButtonMods",
     "print": [
      "interface ButtonMods {",
      "    size?: ControlSize | '18';",
      "    fill?: ButtonFill;",
      "    color?: ButtonColor;",
      "}"
     ]
    },
    "props": [
     {
      "uid": 1,
      "name": "size",
      "typeValue": {
       "raw": "'18' | '36' | '48' | '24' | '30' | '42' | 'none'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "18",
        "24",
        "30",
        "36",
        "42",
        "48",
        "none"
       ]
      },
      "required": false
     },
     {
      "uid": 2,
      "name": "fill",
      "typeValue": {
       "raw": "'solid' | 'outline' | 'none' | 'ghost'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "solid",
        "outline",
        "none",
        "ghost"
       ]
      },
      "required": false
     },
     {
      "uid": 3,
      "name": "color",
      "typeValue": {
       "raw": "'critical' | 'neutral' | 'primary' | 'secondary' | 'accent'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "critical",
        "neutral",
        "primary",
        "secondary",
        "accent"
       ]
      },
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui:ButtonProps": {
   "summary": {
    "module": "@epam/uui",
    "typeName": {
     "name": "ButtonProps",
     "nameFull": "ButtonProps"
    },
    "src": "uui/components/buttons/Button.tsx",
    "exported": true
   },
   "details": {
    "kind": 264,
    "typeValue": {
     "raw": "ButtonProps",
     "print": [
      "type ButtonProps = ButtonMods & Omit<uuiButtonProps, 'count' | 'indicator'>;"
     ]
    },
    "props": [
     {
      "uid": 1,
      "name": "size",
      "typeValue": {
       "raw": "'18' | '36' | '48' | '24' | '30' | '42' | 'none'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "18",
        "24",
        "30",
        "36",
        "42",
        "48",
        "none"
       ]
      },
      "from": "@epam/uui:ButtonMods",
      "required": false
     },
     {
      "uid": 2,
      "name": "fill",
      "typeValue": {
       "raw": "'solid' | 'outline' | 'none' | 'ghost'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "solid",
        "outline",
        "none",
        "ghost"
       ]
      },
      "from": "@epam/uui:ButtonMods",
      "required": false
     },
     {
      "uid": 3,
      "name": "color",
      "typeValue": {
       "raw": "'critical' | 'neutral' | 'primary' | 'secondary' | 'accent'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "critical",
        "neutral",
        "primary",
        "secondary",
        "accent"
       ]
      },
      "from": "@epam/uui:ButtonMods",
      "required": false
     },
     {
      "uid": 4,
      "name": "tabIndex",
      "comment": {
       "raw": [
        "Controls the order of keyboard navigation between components"
       ]
      },
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "from": "@epam/uui-core:IHasTabIndex",
      "required": false
     },
     {
      "uid": 5,
      "name": "clearIcon",
      "comment": {
       "raw": [
        "Icon for clear value button (usually cross)"
       ]
      },
      "typeValue": {
       "raw": "Icon"
      },
      "editor": {
       "type": "component"
      },
      "from": "@epam/uui-components:ButtonProps",
      "required": false
     },
     {
      "uid": 6,
      "name": "captionCX",
      "comment": {
       "raw": [
        "CSS classes to put on the caption"
       ]
      },
      "typeValue": {
       "raw": "null | string | number | boolean | ClassDictionary | ClassArray"
      },
      "from": "@epam/uui-components:ButtonProps",
      "required": false
     },
     {
      "uid": 7,
      "name": "countIndicator",
      "comment": {
       "raw": [
        "CountIndicator component"
       ]
      },
      "typeValue": {
       "raw": "React.ComponentClass<IHasCaption, any> | React.FunctionComponent<IHasCaption>"
      },
      "from": "@epam/uui-components:ButtonProps",
      "required": false
     },
     {
      "uid": 8,
      "name": "dropdownIcon",
      "comment": {
       "raw": [
        "Icon for drop-down toggler"
       ]
      },
      "typeValue": {
       "raw": "Icon"
      },
      "editor": {
       "type": "component"
      },
      "from": "@epam/uui-core:ButtonCoreProps",
      "required": false
     },
     {
      "uid": 9,
      "name": "dropdownIconPosition",
      "comment": {
       "raw": [
        "Position of the dropdown icon ('left' of 'right')"
       ]
      },
      "typeValue": {
       "raw": "'left' | 'right'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "left",
        "right"
       ]
      },
      "from": "@epam/uui-core:ButtonCoreProps",
      "required": false
     },
     {
      "uid": 10,
      "name": "cx",
      "comment": {
       "raw": [
        "CSS class(es) to put on component's root. See {@link https://github.com/JedWatson/classnames#usage} for details"
       ]
      },
      "typeValue": {
       "raw": "null | string | number | boolean | ClassDictionary | ClassArray"
      },
      "from": "@epam/uui-core:IHasCX",
      "required": false
     },
     {
      "uid": 11,
      "name": "onClick",
      "comment": {
       "raw": [
        "Called when component is clicked"
       ]
      },
      "typeValue": {
       "raw": "(e?: any) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IClickable",
      "required": false
     },
     {
      "uid": 12,
      "name": "link",
      "comment": {
       "raw": [
        "Link object to redirect to for SPA-redirects"
       ]
      },
      "typeValue": {
       "raw": "Link"
      },
      "from": "@epam/uui-core:ICanRedirect",
      "required": false
     },
     {
      "uid": 13,
      "name": "href",
      "comment": {
       "raw": [
        "Href (URL) to redirect to, for non-SPA redirects"
       ]
      },
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "from": "@epam/uui-core:ICanRedirect",
      "required": false
     },
     {
      "uid": 14,
      "name": "isLinkActive",
      "comment": {
       "raw": [
        "Highlights component to show that link is active (browser is displaying the page to which link is pointing)"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:ICanRedirect",
      "required": false
     },
     {
      "uid": 15,
      "name": "target",
      "comment": {
       "raw": [
        "Controls where the link should be opened"
       ]
      },
      "typeValue": {
       "raw": "'_blank'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "_blank"
       ]
      },
      "from": "@epam/uui-core:ICanRedirect",
      "required": false
     },
     {
      "uid": 16,
      "name": "isDisabled",
      "comment": {
       "raw": [
        "Disable editing, and visually de-emphasize value of the component"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:IDisableable",
      "required": false
     },
     {
      "uid": 17,
      "name": "icon",
      "comment": {
       "raw": [
        "Icon can be a React element (usually an SVG element)"
       ]
      },
      "typeValue": {
       "raw": "Icon"
      },
      "editor": {
       "type": "component"
      },
      "from": "@epam/uui-core:IHasIcon",
      "required": false
     },
     {
      "uid": 18,
      "name": "iconPosition",
      "comment": {
       "raw": [
        "Position of the icon (left of right)"
       ]
      },
      "typeValue": {
       "raw": "'left' | 'right'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "left",
        "right"
       ]
      },
      "from": "@epam/uui-core:IHasIcon",
      "required": false
     },
     {
      "uid": 19,
      "name": "onIconClick",
      "comment": {
       "raw": [
        "Click handler for the icon"
       ]
      },
      "typeValue": {
       "raw": "() => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IHasIcon",
      "required": false
     },
     {
      "uid": 20,
      "name": "clickAnalyticsEvent",
      "comment": {
       "raw": [
        "An analytics event to send (via AnalyticsContext) when component is clicked.",
        " See [AnalyticsContext](@link https://uui.epam.com/documents?id=analyticsContext&mode=doc&skin=UUI4_promo&category=contexts)."
       ]
      },
      "typeValue": {
       "raw": "null | { [key: string]: any; name: string; }"
      },
      "from": "@epam/uui-core:IAnalyticableClick",
      "required": false
     },
     {
      "uid": 21,
      "name": "rawProps",
      "comment": {
       "raw": [
        "Any HTML attributes (native or 'data-') to put on the underlying component"
       ]
      },
      "typeValue": {
       "raw": "React.ButtonHTMLAttributes<HTMLButtonElement> & Record<`data-${string}`, string>"
      },
      "from": "@epam/uui-core:IHasRawProps",
      "required": false
     },
     {
      "uid": 22,
      "name": "caption",
      "comment": {
       "raw": [
        "Caption. Can be a string, or React.Elements. Certain components supports minimal markup (<b>,<i>,<a>) in captions."
       ]
      },
      "typeValue": {
       "raw": "any"
      },
      "from": "@epam/uui-core:IHasCaption",
      "required": false
     },
     {
      "uid": 23,
      "name": "onClear",
      "comment": {
       "raw": [
        "Call to clear toggler value"
       ]
      },
      "typeValue": {
       "raw": "(e?: any) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IBasicPickerToggler",
      "required": false
     },
     {
      "uid": 24,
      "name": "isOpen",
      "comment": {
       "raw": [
        "When isDropdown=true, indicate that dropdown is open with chevron icon"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:IDropdownToggler",
      "required": false
     },
     {
      "uid": 25,
      "name": "isDropdown",
      "comment": {
       "raw": [
        "Shows chevron icon, enabling component to act as dropdown toggler"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:IDropdownToggler",
      "required": false
     },
     {
      "uid": 26,
      "name": "toggleDropdownOpening",
      "comment": {
       "raw": [
        "Called when associated dropdown should open or close"
       ]
      },
      "typeValue": {
       "raw": "(value: boolean) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IDropdownToggler",
      "required": false
     },
     {
      "uid": 27,
      "name": "isInteractedOutside",
      "comment": {
       "raw": [
        "Called when component is interacted outside, to close the dropdown"
       ]
      },
      "typeValue": {
       "raw": "(event: Event) => boolean"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IDropdownToggler",
      "required": false
     },
     {
      "uid": 28,
      "name": "ref",
      "comment": {
       "raw": [
        "Component's ref"
       ]
      },
      "typeValue": {
       "raw": "null | (instance: any) => void | React.RefObject<any>"
      },
      "from": "@epam/uui-core:IDropdownToggler",
      "required": false
     },
     {
      "uid": 29,
      "name": "forwardedRef",
      "comment": {
       "raw": [
        "this ref is passed to the underlying component"
       ]
      },
      "typeValue": {
       "raw": "null | (instance: HTMLButtonElement | HTMLAnchorElement | null) => void | React.MutableRefObject<HTMLButtonElement | HTMLAnchorElement | null>"
      },
      "from": "@epam/uui-core:IHasForwardedRef",
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui:CheckboxMods": {
   "summary": {
    "module": "@epam/uui",
    "typeName": {
     "name": "CheckboxMods",
     "nameFull": "CheckboxMods"
    },
    "src": "uui/components/inputs/Checkbox.tsx",
    "exported": true
   },
   "details": {
    "kind": 263,
    "typeValue": {
     "raw": "CheckboxMods",
     "print": [
      "interface CheckboxMods {",
      "    size?: '12' | '18';",
      "    mode?: 'form' | 'cell';",
      "}"
     ]
    },
    "props": [
     {
      "uid": 1,
      "name": "size",
      "typeValue": {
       "raw": "'12' | '18'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "12",
        "18"
       ]
      },
      "required": false
     },
     {
      "uid": 2,
      "name": "mode",
      "typeValue": {
       "raw": "'form' | 'cell'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "form",
        "cell"
       ]
      },
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui:CheckboxProps": {
   "summary": {
    "module": "@epam/uui",
    "typeName": {
     "name": "CheckboxProps",
     "nameFull": "CheckboxProps"
    },
    "src": "uui/components/inputs/Checkbox.tsx",
    "exported": true
   },
   "details": {
    "kind": 264,
    "typeValue": {
     "raw": "CheckboxProps",
     "print": [
      "type CheckboxProps = CheckboxMods & uuiComponents.CheckboxProps;"
     ]
    },
    "props": [
     {
      "uid": 1,
      "name": "size",
      "typeValue": {
       "raw": "'12' | '18'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "12",
        "18"
       ]
      },
      "from": "@epam/uui:CheckboxMods",
      "required": false
     },
     {
      "uid": 2,
      "name": "mode",
      "typeValue": {
       "raw": "'form' | 'cell'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "form",
        "cell"
       ]
      },
      "from": "@epam/uui:CheckboxMods",
      "required": false
     },
     {
      "uid": 3,
      "name": "icon",
      "comment": {
       "raw": [
        "Check icon"
       ]
      },
      "typeValue": {
       "raw": "Icon"
      },
      "editor": {
       "type": "component"
      },
      "from": "@epam/uui-components:CheckboxProps",
      "required": false
     },
     {
      "uid": 4,
      "name": "indeterminateIcon",
      "comment": {
       "raw": [
        "Indeterminate state icon"
       ]
      },
      "typeValue": {
       "raw": "Icon"
      },
      "editor": {
       "type": "component"
      },
      "from": "@epam/uui-components:CheckboxProps",
      "required": false
     },
     {
      "uid": 5,
      "name": "renderLabel",
      "typeValue": {
       "raw": "() => React.ReactNode"
      },
      "editor": {
       "type": "component"
      },
      "from": "@epam/uui-components:CheckboxProps",
      "required": false
     },
     {
      "uid": 6,
      "name": "id",
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "from": "@epam/uui-components:CheckboxProps",
      "required": false
     },
     {
      "uid": 7,
      "name": "value",
      "comment": {
       "raw": [
        "The current value of component"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:IEditable",
      "required": true
     },
     {
      "uid": 8,
      "name": "onValueChange",
      "comment": {
       "raw": [
        "Called when value needs to be changed (usually due to user interaction)"
       ]
      },
      "typeValue": {
       "raw": "(newValue: boolean) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IEditable",
      "required": true
     },
     {
      "uid": 9,
      "name": "isInvalid",
      "comment": {
       "raw": [
        "True if component contains invalid input"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:ICanBeInvalid",
      "required": false
     },
     {
      "uid": 10,
      "name": "validationMessage",
      "comment": {
       "raw": [
        "Message describing why the value is invalid"
       ]
      },
      "typeValue": {
       "raw": "null | string | number | boolean | React.ReactElement<any, string | React.JSXElementConstructor<any>> | React.ReactFragment | React.ReactPortal"
      },
      "typeValueRef": "@types/react:ReactNode",
      "from": "@epam/uui-core:ICanBeInvalid",
      "required": false
     },
     {
      "uid": 11,
      "name": "validationProps",
      "comment": {
       "raw": [
        "If T is a complex value (object or array), this property contains validation states of inner items"
       ]
      },
      "typeValue": {
       "raw": "{ [key: string]: ICanBeInvalid; }"
      },
      "from": "@epam/uui-core:ICanBeInvalid",
      "required": false
     },
     {
      "uid": 12,
      "name": "isDisabled",
      "comment": {
       "raw": [
        "Disable editing, and visually de-emphasize value of the component"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:IDisableable",
      "required": false
     },
     {
      "uid": 13,
      "name": "isReadonly",
      "comment": {
       "raw": [
        "Disable editing. Unlike isDisabled, keep component's value readable."
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:ICanBeReadonly",
      "required": false
     },
     {
      "uid": 14,
      "name": "isRequired",
      "comment": {
       "raw": [
        "Marks that component's value is required and shouldn't be empty"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:ICanBeRequired",
      "required": false
     },
     {
      "uid": 15,
      "name": "indeterminate",
      "comment": {
       "raw": [
        "Sets checkbox in indeterminate state (neither checked or unchecked), which usually means that children elements has both values"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:ICheckable",
      "required": false
     },
     {
      "uid": 16,
      "name": "onFocus",
      "comment": {
       "raw": [
        "Called when component gets input focus"
       ]
      },
      "typeValue": {
       "raw": "(e: React.FocusEvent<HTMLInputElement, Element>) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:ICanFocus",
      "required": false
     },
     {
      "uid": 17,
      "name": "onBlur",
      "comment": {
       "raw": [
        "Called when component looses input focus"
       ]
      },
      "typeValue": {
       "raw": "(e: React.FocusEvent<HTMLInputElement, Element>) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:ICanFocus",
      "required": false
     },
     {
      "uid": 18,
      "name": "cx",
      "comment": {
       "raw": [
        "CSS class(es) to put on component's root. See {@link https://github.com/JedWatson/classnames#usage} for details"
       ]
      },
      "typeValue": {
       "raw": "null | string | number | boolean | ClassDictionary | ClassArray"
      },
      "typeValueRef": "@epam/uui-core:ClassValue",
      "from": "@epam/uui-core:IHasCX",
      "required": false
     },
     {
      "uid": 19,
      "name": "label",
      "comment": {
       "raw": [
        "Label. Can be a string, or React.Elements. Certain components supports minimal markup (<b>,<i>,<a>) in captions."
       ]
      },
      "typeValue": {
       "raw": "any"
      },
      "from": "@epam/uui-core:IHasLabel",
      "required": false
     },
     {
      "uid": 20,
      "name": "getValueChangeAnalyticsEvent",
      "comment": {
       "raw": [
        "Given a value, returns an analytics event to send when component is edited.",
        " See [AnalyticsContext](@link https://uui.epam.com/documents?id=analyticsContext&mode=doc&skin=UUI4_promo&category=contexts)."
       ]
      },
      "typeValue": {
       "raw": "(newValue: boolean | null, oldValue: boolean | null) => AnalyticsEvent"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IAnalyticableOnChange",
      "required": false
     },
     {
      "uid": 21,
      "name": "rawProps",
      "comment": {
       "raw": [
        "Any HTML attributes (native or 'data-') to put on the underlying component"
       ]
      },
      "typeValue": {
       "raw": "React.LabelHTMLAttributes<HTMLLabelElement> & Record<`data-${string}`, string>"
      },
      "from": "@epam/uui-core:IHasRawProps",
      "required": false
     },
     {
      "uid": 22,
      "name": "forwardedRef",
      "comment": {
       "raw": [
        "this ref is passed to the underlying component"
       ]
      },
      "typeValue": {
       "raw": "null | (instance: HTMLLabelElement | null) => void | React.MutableRefObject<HTMLLabelElement | null>"
      },
      "from": "@epam/uui-core:IHasForwardedRef",
      "required": false
     },
     {
      "uid": 23,
      "name": "tabIndex",
      "comment": {
       "raw": [
        "Controls the order of keyboard navigation between components"
       ]
      },
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "from": "@epam/uui-core:IHasTabIndex",
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui:ColorMod": {
   "summary": {
    "module": "@epam/uui",
    "typeName": {
     "name": "ColorMod",
     "nameFull": "ColorMod"
    },
    "src": "uui/components/types.ts",
    "exported": true
   },
   "details": {
    "kind": 263,
    "typeValue": {
     "raw": "ColorMod",
     "print": [
      "interface ColorMod {",
      "    // TODO remove",
      "    /** Component color */",
      "    color?: SemanticColor;",
      "}"
     ]
    },
    "props": [
     {
      "uid": 1,
      "name": "color",
      "comment": {
       "raw": [
        "Component color"
       ]
      },
      "typeValue": {
       "raw": "'info' | 'success' | 'warning' | 'error'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "info",
        "success",
        "warning",
        "error"
       ]
      },
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui:ColumnsConfigurationModalProps": {
   "summary": {
    "module": "@epam/uui",
    "typeName": {
     "name": "ColumnsConfigurationModalProps",
     "nameFull": "ColumnsConfigurationModalProps<TItem, TId, TFilter>"
    },
    "src": "uui/components/tables/columnsConfigurationModal/ColumnsConfigurationModal.tsx",
    "exported": true
   },
   "details": {
    "kind": 263,
    "typeValue": {
     "raw": "ColumnsConfigurationModalProps<TItem, TId, TFilter>",
     "print": [
      "interface ColumnsConfigurationModalProps<TItem, TId, TFilter> extends IModal<ColumnsConfig> {",
      "    columnsConfig?: ColumnsConfig;",
      "    defaultConfig: ColumnsConfig;",
      "    columns: DataColumnProps<TItem, TId, TFilter>[];",
      "    renderItem?: (column: DataColumnProps<TItem, TId, TFilter>) => React.ReactNode;",
      "    getSearchFields?: (column: DataColumnProps<TItem, TId, TFilter>) => string[];",
      "}"
     ]
    },
    "props": [
     {
      "uid": 1,
      "name": "columnsConfig",
      "typeValue": {
       "raw": "ColumnsConfig"
      },
      "required": false
     },
     {
      "uid": 2,
      "name": "defaultConfig",
      "typeValue": {
       "raw": "ColumnsConfig"
      },
      "typeValueRef": "@epam/uui-core:ColumnsConfig",
      "required": true
     },
     {
      "uid": 3,
      "name": "columns",
      "typeValue": {
       "raw": "DataColumnProps<TItem, TId, TFilter>[]"
      },
      "required": true
     },
     {
      "uid": 4,
      "name": "renderItem",
      "typeValue": {
       "raw": "(column: DataColumnProps<TItem, TId, TFilter>) => React.ReactNode"
      },
      "editor": {
       "type": "component"
      },
      "required": false
     },
     {
      "uid": 5,
      "name": "getSearchFields",
      "typeValue": {
       "raw": "(column: DataColumnProps<TItem, TId, TFilter>) => string[]"
      },
      "editor": {
       "type": "func"
      },
      "required": false
     },
     {
      "uid": 6,
      "name": "isActive",
      "comment": {
       "raw": [
        "Indicates whether the modal is currently displayed"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:IModal",
      "required": false
     },
     {
      "uid": 7,
      "name": "key",
      "comment": {
       "raw": [
        "Unique key of the modal"
       ]
      },
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "from": "@epam/uui-core:IModal",
      "required": true
     },
     {
      "uid": 8,
      "name": "zIndex",
      "comment": {
       "raw": [
        "Modal zIndex value. Calculated via LayoutContext."
       ]
      },
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "from": "@epam/uui-core:IModal",
      "required": true
     },
     {
      "uid": 9,
      "name": "success",
      "comment": {
       "raw": [
        "Call to successfully close the modal. It's resolves `modalContext.show()` promise with provided value."
       ]
      },
      "typeValue": {
       "raw": "(result: ColumnsConfig) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IModal",
      "required": true
     },
     {
      "uid": 10,
      "name": "abort",
      "comment": {
       "raw": [
        "Call to close the modal with abort action. It's rejects `modalContext.show()` promise with provided value."
       ]
      },
      "typeValue": {
       "raw": "(result?: any) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IModal",
      "required": true
     },
     {
      "uid": 11,
      "name": "parameters",
      "comment": {
       "raw": [
        "Parameters that provided via second param of `modalContext.show` method"
       ]
      },
      "typeValue": {
       "raw": "any"
      },
      "from": "@epam/uui-core:IModal",
      "required": false
     },
     {
      "uid": 12,
      "name": "depth",
      "comment": {
       "raw": [
        "Depth of current modal layer"
       ]
      },
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "from": "@epam/uui-core:IModal",
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui:CompletePickerInputProps": {
   "summary": {
    "module": "@epam/uui",
    "typeName": {
     "name": "CompletePickerInputProps",
     "nameFull": "CompletePickerInputProps<TItem, TId>"
    },
    "src": "uui/components/pickers/PickerInput.tsx",
    "exported": true
   },
   "details": {
    "kind": 264,
    "typeValue": {
     "raw": "SizeMod & IHasEditMode & PickerBaseOptions<TItem, TId> & { selectionMode: 'single'; valueType?: 'id' | undefined; } & IEditable<TId> & IAnalyticableOnChange<any> & ICanFocus<HTMLElement> & IHasPlaceholder & IDisableable & ICanBeReadonly & IHasIcon & { editMode?: PickerInputEditMode | undefined; maxItems?: number | undefined; minBodyWidth?: number | undefined; isSingleLine?: boolean | undefined; dropdownPlacement?: Placement | undefined; renderToggler?: ((props: PickerTogglerProps<TItem, TId>) => React.ReactNode) | undefined; searchPosition?: PickerInputSearchPosition | undefined; disableClear?: boolean | undefined; minCharsToSearch?: number | undefined; dropdownHeight?: number | undefined; autoFocus?: boolean | undefined; rawProps?: { input?: (React.HTMLAttributes<HTMLDivElement> & Record<`data-${string}`, string>) | undefined; body?: (React.HTMLAttributes<HTMLDivElement> & Record<`data-${string}`, string>) | undefined; } | undefined; renderFooter?: ((props: PickerInputFooterProps<TItem, TId>) => React.ReactNode) | undefined; fixedBodyPosition?: boolean | undefined; portalTarget?: HTMLElement | undefined; inputCx?: ClassValue; bodyCx?: ClassValue; highlightSearchMatches?: boolean | undefined; searchDebounceDelay?: number | undefined; } | SizeMod & IHasEditMode & PickerBaseOptions<TItem, TId> & { selectionMode: 'single'; valueType: 'entity'; } & IEditable<TItem> & IAnalyticableOnChange<any> & ICanFocus<HTMLElement> & IHasPlaceholder & IDisableable & ICanBeReadonly & IHasIcon & { editMode?: PickerInputEditMode | undefined; maxItems?: number | undefined; minBodyWidth?: number | undefined; isSingleLine?: boolean | undefined; dropdownPlacement?: Placement | undefined; renderToggler?: ((props: PickerTogglerProps<TItem, TId>) => React.ReactNode) | undefined; searchPosition?: PickerInputSearchPosition | undefined; disableClear?: boolean | undefined; minCharsToSearch?: number | undefined; dropdownHeight?: number | undefined; autoFocus?: boolean | undefined; rawProps?: { input?: (React.HTMLAttributes<HTMLDivElement> & Record<`data-${string}`, string>) | undefined; body?: (React.HTMLAttributes<HTMLDivElement> & Record<`data-${string}`, string>) | undefined; } | undefined; renderFooter?: ((props: PickerInputFooterProps<TItem, TId>) => React.ReactNode) | undefined; fixedBodyPosition?: boolean | undefined; portalTarget?: HTMLElement | undefined; inputCx?: ClassValue; bodyCx?: ClassValue; highlightSearchMatches?: boolean | undefined; searchDebounceDelay?: number | undefined; } | SizeMod & IHasEditMode & PickerBaseOptions<TItem, TId> & { selectionMode: 'multi'; valueType?: 'id' | undefined; emptyValue?: [] | null | undefined; } & IEditable<TId[]> & IAnalyticableOnChange<any> & ICanFocus<HTMLElement> & IHasPlaceholder & IDisableable & ICanBeReadonly & IHasIcon & { editMode?: PickerInputEditMode | undefined; maxItems?: number | undefined; minBodyWidth?: number | undefined; isSingleLine?: boolean | undefined; dropdownPlacement?: Placement | undefined; renderToggler?: ((props: PickerTogglerProps<TItem, TId>) => React.ReactNode) | undefined; searchPosition?: PickerInputSearchPosition | undefined; disableClear?: boolean | undefined; minCharsToSearch?: number | undefined; dropdownHeight?: number | undefined; autoFocus?: boolean | undefined; rawProps?: { input?: (React.HTMLAttributes<HTMLDivElement> & Record<`data-${string}`, string>) | undefined; body?: (React.HTMLAttributes<HTMLDivElement> & Record<`data-${string}`, string>) | undefined; } | undefined; renderFooter?: ((props: PickerInputFooterProps<TItem, TId>) => React.ReactNode) | undefined; fixedBodyPosition?: boolean | undefined; portalTarget?: HTMLElement | undefined; inputCx?: ClassValue; bodyCx?: ClassValue; highlightSearchMatches?: boolean | undefined; searchDebounceDelay?: number | undefined; } | SizeMod & IHasEditMode & PickerBaseOptions<TItem, TId> & { selectionMode: 'multi'; valueType: 'entity'; emptyValue?: [] | null | undefined; } & IEditable<TItem[]> & IAnalyticableOnChange<any> & ICanFocus<HTMLElement> & IHasPlaceholder & IDisableable & ICanBeReadonly & IHasIcon & { editMode?: PickerInputEditMode | undefined; maxItems?: number | undefined; minBodyWidth?: number | undefined; isSingleLine?: boolean | undefined; dropdownPlacement?: Placement | undefined; renderToggler?: ((props: PickerTogglerProps<TItem, TId>) => React.ReactNode) | undefined; searchPosition?: PickerInputSearchPosition | undefined; disableClear?: boolean | undefined; minCharsToSearch?: number | undefined; dropdownHeight?: number | undefined; autoFocus?: boolean | undefined; rawProps?: { input?: (React.HTMLAttributes<HTMLDivElement> & Record<`data-${string}`, string>) | undefined; body?: (React.HTMLAttributes<HTMLDivElement> & Record<`data-${string}`, string>) | undefined; } | undefined; renderFooter?: ((props: PickerInputFooterProps<TItem, TId>) => React.ReactNode) | undefined; fixedBodyPosition?: boolean | undefined; portalTarget?: HTMLElement | undefined; inputCx?: ClassValue; bodyCx?: ClassValue; highlightSearchMatches?: boolean | undefined; searchDebounceDelay?: number | undefined; }",
     "print": [
      "type CompletePickerInputProps<TItem, TId> = PickerInputProps & PickerInputBaseProps<TItem, TId>;"
     ]
    },
    "props": [
     {
      "uid": 157,
      "name": "size",
      "typeValue": {
       "raw": "'36' | '48' | '24' | '30' | '42' | 'none'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "24",
        "30",
        "36",
        "42",
        "48",
        "none"
       ]
      },
      "from": "@epam/uui:SizeMod",
      "required": false
     },
     {
      "uid": 158,
      "name": "mode",
      "comment": {
       "raw": [
        "Visual mode for component:",
        " - form: default visuals, to use in forms.",
        " - cell: adjust to embed as table cell editor: no borders, no focus (it is applied by DataCell)",
        " - inline: adjust for WYSIWYG UX. Backgrounds removed. Borders appear only on hover."
       ]
      },
      "typeValue": {
       "raw": "'inline' | 'form' | 'cell'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "inline",
        "form",
        "cell"
       ]
      },
      "from": "@epam/uui:IHasEditMode",
      "required": false
     },
     {
      "uid": 159,
      "name": "entityName",
      "comment": {
       "raw": [
        "Name of the entity being selected. Affects wording like \"Please select [entity]\""
       ]
      },
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "from": "@epam/uui-core:PickerBaseOptions",
      "required": false
     },
     {
      "uid": 160,
      "name": "entityPluralName",
      "comment": {
       "raw": [
        "Plural name of the entity being selected. Affects wording like \"X [entities] selected\""
       ]
      },
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "from": "@epam/uui-core:PickerBaseOptions",
      "required": false
     },
     {
      "uid": 161,
      "name": "dataSource",
      "comment": {
       "raw": [
        "Datasource to get data for the picker"
       ]
      },
      "typeValue": {
       "raw": "IDataSource<TItem, TId, any>"
      },
      "from": "@epam/uui-core:PickerBaseOptions",
      "required": true
     },
     {
      "uid": 162,
      "name": "getName",
      "comment": {
       "raw": [
        "A pure function that gets entity name from entity object.",
        "     Default: (item) => item.name."
       ]
      },
      "typeValue": {
       "raw": "(item: TItem) => string"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:PickerBaseOptions",
      "required": false
     },
     {
      "uid": 163,
      "name": "renderRow",
      "comment": {
       "raw": [
        "Allow to customize how each selectable row is rendered. Can be used to add subtitles, avatars, etc."
       ]
      },
      "typeValue": {
       "raw": "(props: DataRowProps<TItem, TId>, dataSourceState: DataSourceState<Record<string, any>, any>) => React.ReactNode"
      },
      "editor": {
       "type": "component"
      },
      "from": "@epam/uui-core:PickerBaseOptions",
      "required": false
     },
     {
      "uid": 164,
      "name": "getRowOptions",
      "comment": {
       "raw": [
        "Gets options for each row. Allow to make rows non-selectable, as well as many other tweaks."
       ]
      },
      "typeValue": {
       "raw": "(item: TItem, index: number) => DataRowOptions<TItem, TId>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:PickerBaseOptions",
      "required": false
     },
     {
      "uid": 165,
      "name": "renderNotFound",
      "comment": {
       "raw": [
        "Overrides the default 'no records found' banner.",
        " The 'search' callback parameter allows to distinguish cases when there's no records at all, and when current search doesn't find anything."
       ]
      },
      "typeValue": {
       "raw": "(props: { search: string; onClose: () => void; }) => React.ReactNode"
      },
      "editor": {
       "type": "component"
      },
      "from": "@epam/uui-core:PickerBaseOptions",
      "required": false
     },
     {
      "uid": 166,
      "name": "emptyValue",
      "comment": {
       "raw": [
        "Defines which value is to set on clear. E.g. you can put an empty array instead of null for empty multi-select Pickers"
       ]
      },
      "typeValue": {
       "raw": "null | []"
      },
      "from": "@epam/uui-core:PickerBaseOptions",
      "required": false
     },
     {
      "uid": 167,
      "name": "sortBy",
      "comment": {
       "raw": [
        "Defines how items should be sorted. By default, items are shown in order they are provided to the DataSource"
       ]
      },
      "typeValue": {
       "raw": "(item: TItem, sorting: SortingOption<any>) => any"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:PickerBaseOptions",
      "required": false
     },
     {
      "uid": 168,
      "name": "filter",
      "comment": {
       "raw": [
        "Additional filter to apply to the DataSource. Can be used to limit selection somehow, w/o re-building the DataSource. E.g. in the linked pickers scenario."
       ]
      },
      "typeValue": {
       "raw": "any"
      },
      "from": "@epam/uui-core:PickerBaseOptions",
      "required": false
     },
     {
      "uid": 169,
      "name": "sorting",
      "comment": {
       "raw": [
        "Defines sorting to pass to the DataSource"
       ]
      },
      "typeValue": {
       "raw": "SortingOption<any>"
      },
      "from": "@epam/uui-core:PickerBaseOptions",
      "required": false
     },
     {
      "uid": 170,
      "name": "cascadeSelection",
      "comment": {
       "raw": [
        "Controls how the selection (checking items) of a parent node affects the selection of its all children, and vice versa.",
        " - false: All nodes are selected independently (default).",
        " - true or 'explicit': Selecting a parent node explicitly selects all its children. Unchecking the last parent's child unchecks its parent.",
        " - 'implicit': Selecting a parent node means that all children are considered checked.",
        "   The user sees all these nodes as checked on the UI, but only the selected parent is visible in the PickerInput tags, and only the checked",
        "   parent is present in the Picker's value or DataSourceState.checked array. When the user unchecks the first child of such a parent,",
        "   its parents become unchecked and all children but the unchecked one become checked, making children's selection explicit. If the last",
        "   unchecked child gets checked, all children from the checked are removed, returning to the implicit state when only the parent is checked."
       ]
      },
      "typeValue": {
       "raw": "boolean | 'implicit' | 'explicit'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        false,
        true,
        "implicit",
        "explicit"
       ]
      },
      "from": "@epam/uui-core:PickerBaseOptions",
      "required": false
     },
     {
      "uid": 171,
      "name": "isFoldedByDefault",
      "comment": {
       "raw": [
        "You can return true for all, or some items to fold them."
       ]
      },
      "typeValue": {
       "raw": "(item: TItem) => boolean"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:PickerBaseOptions",
      "required": false
     },
     {
      "uid": 172,
      "name": "getSearchFields",
      "comment": {
       "raw": [
        "Given an item, should return an array of string fields to search on. By default, the search is performed on item.name field."
       ]
      },
      "typeValue": {
       "raw": "(item: TItem) => string[]"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:PickerBaseOptions",
      "required": false
     },
     {
      "uid": 69,
      "name": "selectionMode",
      "comment": {
       "raw": [
        "If 'single' provided - only one item is selected. In case of 'multi' - multiple items are selected"
       ]
      },
      "typeValue": {
       "raw": "'single'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "single"
       ]
      },
      "from": "@epam/uui-core:SinglePickerProps",
      "required": true
     },
     {
      "uid": 18,
      "name": "valueType",
      "comment": {
       "raw": [
        "Defines what to use in value/onValueChange: 'id' - item id (TId). 'entity' - the item itself (TItem)"
       ]
      },
      "typeValue": {
       "raw": "'id'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "id"
       ]
      },
      "from": "@epam/uui-core:SinglePickerProps",
      "required": false
     },
     {
      "uid": 19,
      "name": "value",
      "comment": {
       "raw": [
        "The current value of component"
       ]
      },
      "typeValue": {
       "raw": "TId"
      },
      "from": "@epam/uui-core:IEditable",
      "required": true
     },
     {
      "uid": 20,
      "name": "onValueChange",
      "comment": {
       "raw": [
        "Called when value needs to be changed (usually due to user interaction)"
       ]
      },
      "typeValue": {
       "raw": "(newValue: TId) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IEditable",
      "required": true
     },
     {
      "uid": 177,
      "name": "isInvalid",
      "comment": {
       "raw": [
        "True if component contains invalid input"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:ICanBeInvalid",
      "required": false
     },
     {
      "uid": 178,
      "name": "validationMessage",
      "comment": {
       "raw": [
        "Message describing why the value is invalid"
       ]
      },
      "typeValue": {
       "raw": "null | string | number | boolean | React.ReactElement<any, string | React.JSXElementConstructor<any>> | React.ReactFragment | React.ReactPortal"
      },
      "typeValueRef": "@types/react:ReactNode",
      "from": "@epam/uui-core:ICanBeInvalid",
      "required": false
     },
     {
      "uid": 179,
      "name": "validationProps",
      "comment": {
       "raw": [
        "If T is a complex value (object or array), this property contains validation states of inner items"
       ]
      },
      "typeValue": {
       "raw": "{ [key: string]: ICanBeInvalid; }"
      },
      "from": "@epam/uui-core:ICanBeInvalid",
      "required": false
     },
     {
      "uid": 180,
      "name": "isDisabled",
      "comment": {
       "raw": [
        "Disable editing, and visually de-emphasize value of the component"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:IDisableable",
      "required": false
     },
     {
      "uid": 181,
      "name": "isReadonly",
      "comment": {
       "raw": [
        "Disable editing. Unlike isDisabled, keep component's value readable."
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:ICanBeReadonly",
      "required": false
     },
     {
      "uid": 182,
      "name": "isRequired",
      "comment": {
       "raw": [
        "Marks that component's value is required and shouldn't be empty"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:ICanBeRequired",
      "required": false
     },
     {
      "uid": 183,
      "name": "getValueChangeAnalyticsEvent",
      "comment": {
       "raw": [
        "Given a value, returns an analytics event to send when component is edited.",
        " See [AnalyticsContext](@link https://uui.epam.com/documents?id=analyticsContext&mode=doc&skin=UUI4_promo&category=contexts)."
       ]
      },
      "typeValue": {
       "raw": "(newValue: any, oldValue: any) => AnalyticsEvent"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IAnalyticableOnChange",
      "required": false
     },
     {
      "uid": 184,
      "name": "onFocus",
      "comment": {
       "raw": [
        "Called when component gets input focus"
       ]
      },
      "typeValue": {
       "raw": "(e: React.FocusEvent<HTMLElement, Element>) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:ICanFocus",
      "required": false
     },
     {
      "uid": 185,
      "name": "onBlur",
      "comment": {
       "raw": [
        "Called when component looses input focus"
       ]
      },
      "typeValue": {
       "raw": "(e: React.FocusEvent<HTMLElement, Element>) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:ICanFocus",
      "required": false
     },
     {
      "uid": 186,
      "name": "placeholder",
      "comment": {
       "raw": [
        "Placeholder to display when empty"
       ]
      },
      "typeValue": {
       "raw": "any"
      },
      "from": "@epam/uui-core:IHasPlaceholder",
      "required": false
     },
     {
      "uid": 187,
      "name": "icon",
      "comment": {
       "raw": [
        "Icon can be a React element (usually an SVG element)"
       ]
      },
      "typeValue": {
       "raw": "Icon"
      },
      "editor": {
       "type": "component"
      },
      "from": "@epam/uui-core:IHasIcon",
      "required": false
     },
     {
      "uid": 188,
      "name": "iconPosition",
      "comment": {
       "raw": [
        "Position of the icon (left of right)"
       ]
      },
      "typeValue": {
       "raw": "'left' | 'right'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "left",
        "right"
       ]
      },
      "from": "@epam/uui-core:IHasIcon",
      "required": false
     },
     {
      "uid": 189,
      "name": "onIconClick",
      "comment": {
       "raw": [
        "Click handler for the icon"
       ]
      },
      "typeValue": {
       "raw": "() => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IHasIcon",
      "required": false
     },
     {
      "uid": 190,
      "name": "editMode",
      "comment": {
       "raw": [
        "dropdown (default) - show selection in dropdown; modal - opens modal window to select items"
       ]
      },
      "typeValue": {
       "raw": "'dropdown' | 'modal'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "dropdown",
        "modal"
       ]
      },
      "from": "@epam/uui-components:PickerInputBaseProps",
      "required": false
     },
     {
      "uid": 191,
      "name": "maxItems",
      "comment": {
       "raw": [
        "Maximum number of tags to display in input, before collapsing to \"N items selected\" mode"
       ]
      },
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "from": "@epam/uui-components:PickerInputBaseProps",
      "required": false
     },
     {
      "uid": 192,
      "name": "minBodyWidth",
      "comment": {
       "raw": [
        "Minimum width of dropdown body"
       ]
      },
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "from": "@epam/uui-components:PickerInputBaseProps",
      "required": false
     },
     {
      "uid": 193,
      "name": "isSingleLine",
      "comment": {
       "raw": [
        "Prevents selected items tags to occupy multiple lines"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-components:PickerInputBaseProps",
      "required": false
     },
     {
      "uid": 194,
      "name": "dropdownPlacement",
      "comment": {
       "raw": [
        "Dropdown position relative to the input. See [Popper Docs](@link https://popper.js.org/)"
       ]
      },
      "typeValue": {
       "raw": "'left' | 'right' | 'auto' | 'auto-start' | 'auto-end' | 'top' | 'bottom' | 'top-start' | 'top-end' | 'bottom-start' | 'bottom-end' | 'right-start' | 'right-end' | 'left-start' | 'left-end'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "left",
        "right",
        "auto",
        "auto-start",
        "auto-end",
        "top",
        "bottom",
        "top-start",
        "top-end",
        "bottom-start",
        "bottom-end",
        "right-start",
        "right-end",
        "left-start",
        "left-end"
       ]
      },
      "from": "@epam/uui-components:PickerInputBaseProps",
      "required": false
     },
     {
      "uid": 195,
      "name": "renderToggler",
      "comment": {
       "raw": [
        "Replaces default 'toggler' - an input to which Picker attaches dropdown"
       ]
      },
      "typeValue": {
       "raw": "(props: PickerTogglerProps<TItem, TId>) => React.ReactNode"
      },
      "editor": {
       "type": "component"
      },
      "from": "@epam/uui-components:PickerInputBaseProps",
      "required": false
     },
     {
      "uid": 196,
      "name": "searchPosition",
      "comment": {
       "raw": [
        "Defines where search field is:",
        " 'input' - try to place search inside the toggler (default for single-select),",
        " 'body' - put search inside the dropdown (default for multi-select)",
        " 'none' - disables search completely",
        "",
        " Note: 'searchPosition' cannot be 'input' if 'editMode' is 'modal'"
       ]
      },
      "typeValue": {
       "raw": "'none' | 'input' | 'body'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "none",
        "input",
        "body"
       ]
      },
      "from": "@epam/uui-components:PickerInputBaseProps",
      "required": false
     },
     {
      "uid": 197,
      "name": "disableClear",
      "comment": {
       "raw": [
        "Disallow to clear Picker value (cross icon)"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-components:PickerInputBaseProps",
      "required": false
     },
     {
      "uid": 198,
      "name": "minCharsToSearch",
      "comment": {
       "raw": [
        "Minimum characters to type, before search will trigger. If input characters number is less then 'minCharsToSearch', it will disable opening dropdown body.",
        " By default search triggers after input value is changed.",
        "",
        " Note: defined minCharsToSearch isn't compatible with searchPosition=body."
       ]
      },
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "from": "@epam/uui-components:PickerInputBaseProps",
      "required": false
     },
     {
      "uid": 199,
      "name": "dropdownHeight",
      "comment": {
       "raw": [
        "Overrides default height of the dropdown body"
       ]
      },
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "from": "@epam/uui-components:PickerInputBaseProps",
      "required": false
     },
     {
      "uid": 200,
      "name": "autoFocus",
      "comment": {
       "raw": [
        "Sets focus to component when it's mounted"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-components:PickerInputBaseProps",
      "required": false
     },
     {
      "uid": 201,
      "name": "rawProps",
      "comment": {
       "raw": [
        "HTML attributes to put directly to the input and body elements"
       ]
      },
      "typeValue": {
       "raw": "{ input?: (React.HTMLAttributes<HTMLDivElement> & Record<`data-${string}`, string>) | undefined; body?: (React.HTMLAttributes<HTMLDivElement> & Record<`data-${string}`, string>) | undefined; }"
      },
      "from": "@epam/uui-components:PickerInputBaseProps",
      "required": false
     },
     {
      "uid": 202,
      "name": "renderFooter",
      "comment": {
       "raw": [
        "Adds custom footer to the dropdown body"
       ]
      },
      "typeValue": {
       "raw": "(props: PickerInputFooterProps<TItem, TId>) => React.ReactNode"
      },
      "editor": {
       "type": "component"
      },
      "from": "@epam/uui-components:PickerInputBaseProps",
      "required": false
     },
     {
      "uid": 203,
      "name": "fixedBodyPosition",
      "comment": {
       "raw": [
        "Disables moving the dropdown body, when togglers is moved. Used in filters panel, to prevent filter selection to 'jump' after adding a filter."
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-components:PickerInputBaseProps",
      "required": false
     },
     {
      "uid": 204,
      "name": "portalTarget",
      "typeValue": {
       "raw": "HTMLElement"
      },
      "from": "@epam/uui-components:PickerInputBaseProps",
      "required": false
     },
     {
      "uid": 205,
      "name": "inputCx",
      "comment": {
       "raw": [
        "CSS class(es) to put on input-part component. See https://github.com/JedWatson/classnames#usage for details"
       ]
      },
      "typeValue": {
       "raw": "null | string | number | boolean | ClassDictionary | ClassArray"
      },
      "typeValueRef": "@epam/uui-core:ClassValue",
      "from": "@epam/uui-components:PickerInputBaseProps",
      "required": false
     },
     {
      "uid": 206,
      "name": "bodyCx",
      "comment": {
       "raw": [
        "CSS class(es) to put on body-part component. See https://github.com/JedWatson/classnames#usage for details"
       ]
      },
      "typeValue": {
       "raw": "null | string | number | boolean | ClassDictionary | ClassArray"
      },
      "typeValueRef": "@epam/uui-core:ClassValue",
      "from": "@epam/uui-components:PickerInputBaseProps",
      "required": false
     },
     {
      "uid": 207,
      "name": "highlightSearchMatches",
      "comment": {
       "raw": [
        "Enables highlighting of the items' text with search-matching results."
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-components:PickerInputBaseProps",
      "required": false
     },
     {
      "uid": 208,
      "name": "searchDebounceDelay",
      "comment": {
       "raw": [
        "Search input debounce delay in ms. Default value is 500ms"
       ]
      },
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "from": "@epam/uui-components:PickerInputBaseProps",
      "required": false
     },
     {
      "uid": 70,
      "name": "valueType",
      "comment": {
       "raw": [
        "Defines what to use in value/onValueChange: 'id' - item id (TId). 'entity' - the item itself (TItem)"
       ]
      },
      "typeValue": {
       "raw": "'entity'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "entity"
       ]
      },
      "from": "@epam/uui-core:SinglePickerProps",
      "required": true
     },
     {
      "uid": 71,
      "name": "value",
      "comment": {
       "raw": [
        "The current value of component"
       ]
      },
      "typeValue": {
       "raw": "TItem"
      },
      "from": "@epam/uui-core:IEditable",
      "required": true
     },
     {
      "uid": 72,
      "name": "onValueChange",
      "comment": {
       "raw": [
        "Called when value needs to be changed (usually due to user interaction)"
       ]
      },
      "typeValue": {
       "raw": "(newValue: TItem) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IEditable",
      "required": true
     },
     {
      "uid": 173,
      "name": "selectionMode",
      "comment": {
       "raw": [
        "If 'single' provided - only one item is selected. In case of 'multi' - multiple items are selected"
       ]
      },
      "typeValue": {
       "raw": "'multi'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "multi"
       ]
      },
      "from": "@epam/uui-core:ArrayPickerProps",
      "required": true
     },
     {
      "uid": 122,
      "name": "valueType",
      "comment": {
       "raw": [
        "Defines what to use in value/onValueChange: 'id' - item id (TId). 'entity' - the item itself (TItem)"
       ]
      },
      "typeValue": {
       "raw": "'id'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "id"
       ]
      },
      "from": "@epam/uui-core:ArrayPickerProps",
      "required": false
     },
     {
      "uid": 123,
      "name": "value",
      "comment": {
       "raw": [
        "The current value of component"
       ]
      },
      "typeValue": {
       "raw": "TId[]"
      },
      "from": "@epam/uui-core:IEditable",
      "required": true
     },
     {
      "uid": 124,
      "name": "onValueChange",
      "comment": {
       "raw": [
        "Called when value needs to be changed (usually due to user interaction)"
       ]
      },
      "typeValue": {
       "raw": "(newValue: TId[]) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IEditable",
      "required": true
     },
     {
      "uid": 174,
      "name": "valueType",
      "comment": {
       "raw": [
        "Defines what to use in value/onValueChange: 'id' - item id (TId). 'entity' - the item itself (TItem)"
       ]
      },
      "typeValue": {
       "raw": "'entity'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "entity"
       ]
      },
      "from": "@epam/uui-core:ArrayPickerProps",
      "required": true
     },
     {
      "uid": 175,
      "name": "value",
      "comment": {
       "raw": [
        "The current value of component"
       ]
      },
      "typeValue": {
       "raw": "TItem[]"
      },
      "from": "@epam/uui-core:IEditable",
      "required": true
     },
     {
      "uid": 176,
      "name": "onValueChange",
      "comment": {
       "raw": [
        "Called when value needs to be changed (usually due to user interaction)"
       ]
      },
      "typeValue": {
       "raw": "(newValue: TItem[]) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IEditable",
      "required": true
     }
    ],
    "propsFromUnion": true
   }
  },
  "@epam/uui:ConfirmationModalWindowProps": {
   "summary": {
    "module": "@epam/uui",
    "typeName": {
     "name": "ConfirmationModalWindowProps",
     "nameFull": "ConfirmationModalWindowProps"
    },
    "src": "uui/components/overlays/ConfirmationModal.tsx",
    "exported": true
   },
   "details": {
    "kind": 263,
    "typeValue": {
     "raw": "ConfirmationModalWindowProps",
     "print": [
      "interface ConfirmationModalWindowProps extends IModal<any> {",
      "    caption: any;",
      "    bodyContent?: any;",
      "    hideCancelButton?: boolean;",
      "}"
     ]
    },
    "props": [
     {
      "uid": 1,
      "name": "caption",
      "typeValue": {
       "raw": "any"
      },
      "required": true
     },
     {
      "uid": 2,
      "name": "bodyContent",
      "typeValue": {
       "raw": "any"
      },
      "required": false
     },
     {
      "uid": 3,
      "name": "hideCancelButton",
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "required": false
     },
     {
      "uid": 4,
      "name": "isActive",
      "comment": {
       "raw": [
        "Indicates whether the modal is currently displayed"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:IModal",
      "required": false
     },
     {
      "uid": 5,
      "name": "key",
      "comment": {
       "raw": [
        "Unique key of the modal"
       ]
      },
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "from": "@epam/uui-core:IModal",
      "required": true
     },
     {
      "uid": 6,
      "name": "zIndex",
      "comment": {
       "raw": [
        "Modal zIndex value. Calculated via LayoutContext."
       ]
      },
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "from": "@epam/uui-core:IModal",
      "required": true
     },
     {
      "uid": 7,
      "name": "success",
      "comment": {
       "raw": [
        "Call to successfully close the modal. It's resolves `modalContext.show()` promise with provided value."
       ]
      },
      "typeValue": {
       "raw": "(result: any) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IModal",
      "required": true
     },
     {
      "uid": 8,
      "name": "abort",
      "comment": {
       "raw": [
        "Call to close the modal with abort action. It's rejects `modalContext.show()` promise with provided value."
       ]
      },
      "typeValue": {
       "raw": "(result?: any) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IModal",
      "required": true
     },
     {
      "uid": 9,
      "name": "parameters",
      "comment": {
       "raw": [
        "Parameters that provided via second param of `modalContext.show` method"
       ]
      },
      "typeValue": {
       "raw": "any"
      },
      "from": "@epam/uui-core:IModal",
      "required": false
     },
     {
      "uid": 10,
      "name": "depth",
      "comment": {
       "raw": [
        "Depth of current modal layer"
       ]
      },
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "from": "@epam/uui-core:IModal",
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui:ControlSize": {
   "summary": {
    "module": "@epam/uui",
    "typeName": {
     "name": "ControlSize",
     "nameFull": "ControlSize"
    },
    "src": "uui/components/types.ts",
    "exported": true
   },
   "details": {
    "kind": 264,
    "typeValue": {
     "raw": "'36' | '48' | '24' | '30' | '42' | 'none'",
     "print": [
      "type ControlSize = 'none' | '24' | '30' | '36' | '42' | '48';"
     ]
    }
   }
  },
  "@epam/uui:CountIndicatorProps": {
   "summary": {
    "module": "@epam/uui",
    "typeName": {
     "name": "CountIndicatorProps",
     "nameFull": "CountIndicatorProps"
    },
    "src": "uui/components/widgets/CountIndicator.tsx",
    "exported": true
   },
   "details": {
    "kind": 263,
    "typeValue": {
     "raw": "CountIndicatorProps",
     "print": [
      "interface CountIndicatorProps extends IHasCaption, IHasCX {",
      "    /**",
      "     * @default '24'",
      "     */",
      "    size?: '24' | '18' | '12';",
      "    color: 'neutral' | 'white' | 'info' | 'success' | 'warning' | 'critical' | null;",
      "}"
     ]
    },
    "props": [
     {
      "uid": 1,
      "name": "size",
      "comment": {
       "raw": [
        "@default '24'"
       ],
       "tags": {
        "@default": "24"
       }
      },
      "typeValue": {
       "raw": "'12' | '18' | '24'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "12",
        "18",
        "24"
       ]
      },
      "required": false
     },
     {
      "uid": 2,
      "name": "color",
      "typeValue": {
       "raw": "null | 'info' | 'success' | 'warning' | 'critical' | 'neutral' | 'white'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "info",
        "success",
        "warning",
        "critical",
        "neutral",
        "white",
        null
       ]
      },
      "required": false
     },
     {
      "uid": 3,
      "name": "caption",
      "comment": {
       "raw": [
        "Caption. Can be a string, or React.Elements. Certain components supports minimal markup (<b>,<i>,<a>) in captions."
       ]
      },
      "typeValue": {
       "raw": "any"
      },
      "from": "@epam/uui-core:IHasCaption",
      "required": false
     },
     {
      "uid": 4,
      "name": "cx",
      "comment": {
       "raw": [
        "CSS class(es) to put on component's root. See {@link https://github.com/JedWatson/classnames#usage} for details"
       ]
      },
      "typeValue": {
       "raw": "null | string | number | boolean | ClassDictionary | ClassArray"
      },
      "typeValueRef": "@epam/uui-core:ClassValue",
      "from": "@epam/uui-core:IHasCX",
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui:DataPickerBodyProps": {
   "summary": {
    "module": "@epam/uui",
    "typeName": {
     "name": "DataPickerBodyProps",
     "nameFull": "DataPickerBodyProps"
    },
    "src": "uui/components/pickers/DataPickerBody.tsx",
    "exported": true
   },
   "details": {
    "kind": 263,
    "typeValue": {
     "raw": "DataPickerBodyProps",
     "print": [
      "interface DataPickerBodyProps extends PickerBodyBaseProps {",
      "    maxHeight?: number;",
      "    editMode?: 'dropdown' | 'modal';",
      "    searchSize?: ControlSize;",
      "    selectionMode?: 'single' | 'multi';",
      "}"
     ]
    },
    "props": [
     {
      "uid": 1,
      "name": "maxHeight",
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "required": false
     },
     {
      "uid": 2,
      "name": "editMode",
      "typeValue": {
       "raw": "'dropdown' | 'modal'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "dropdown",
        "modal"
       ]
      },
      "required": false
     },
     {
      "uid": 3,
      "name": "searchSize",
      "typeValue": {
       "raw": "'36' | '48' | '24' | '30' | '42' | 'none'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "24",
        "30",
        "36",
        "42",
        "48",
        "none"
       ]
      },
      "required": false
     },
     {
      "uid": 4,
      "name": "selectionMode",
      "typeValue": {
       "raw": "'single' | 'multi'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "single",
        "multi"
       ]
      },
      "required": false
     },
     {
      "uid": 5,
      "name": "onKeyDown",
      "typeValue": {
       "raw": "(e: React.KeyboardEvent<HTMLElement>) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-components:PickerBodyBaseProps",
      "required": false
     },
     {
      "uid": 6,
      "name": "renderNotFound",
      "typeValue": {
       "raw": "() => React.ReactNode"
      },
      "editor": {
       "type": "component"
      },
      "from": "@epam/uui-components:PickerBodyBaseProps",
      "required": false
     },
     {
      "uid": 7,
      "name": "rows",
      "typeValue": {
       "raw": "React.ReactNode[]"
      },
      "from": "@epam/uui-components:PickerBodyBaseProps",
      "required": true
     },
     {
      "uid": 8,
      "name": "scheduleUpdate",
      "typeValue": {
       "raw": "() => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-components:PickerBodyBaseProps",
      "required": false
     },
     {
      "uid": 9,
      "name": "search",
      "typeValue": {
       "raw": "IEditable<string>"
      },
      "from": "@epam/uui-components:PickerBodyBaseProps",
      "required": true
     },
     {
      "uid": 10,
      "name": "showSearch",
      "typeValue": {
       "raw": "boolean | 'auto'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        false,
        true,
        "auto"
       ]
      },
      "from": "@epam/uui-components:PickerBodyBaseProps",
      "required": false
     },
     {
      "uid": 11,
      "name": "fixedBodyPosition",
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-components:PickerBodyBaseProps",
      "required": false
     },
     {
      "uid": 12,
      "name": "searchDebounceDelay",
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "from": "@epam/uui-components:PickerBodyBaseProps",
      "required": false
     },
     {
      "uid": 13,
      "name": "selectAll",
      "comment": {
       "raw": [
        "ICheckable object for Select All behavior.",
        " If omitted, Select All action will be absent."
       ]
      },
      "typeValue": {
       "raw": "ICheckable"
      },
      "from": "@epam/uui-core:DataSourceListProps",
      "required": false
     },
     {
      "uid": 14,
      "name": "isReloading",
      "comment": {
       "raw": [
        "Signals that data is reloading on search/sort/filter/reload."
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:DataSourceListProps",
      "required": false
     },
     {
      "uid": 15,
      "name": "rowsCount",
      "comment": {
       "raw": [
        "Count of rows, after applying filter, and folding on tree nodes.",
        " Obsolete! Please switch to exactRowsCount / knownRowsCount"
       ]
      },
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "from": "@epam/uui-core:DataSourceListCounts",
      "required": false
     },
     {
      "uid": 16,
      "name": "exactRowsCount",
      "comment": {
       "raw": [
        "Count of rows, if all rows loaded. Can be null while initial loading, or if API doesn't return count"
       ]
      },
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "from": "@epam/uui-core:DataSourceListCounts",
      "required": false
     },
     {
      "uid": 17,
      "name": "knownRowsCount",
      "comment": {
       "raw": [
        "There's at least knownRowsCount rows. There can be more if list is lazy loaded.",
        " Equals to exactRowsCount if all rows are loaded, or if API returns rows count",
        " Otherwise, exactRowsCount will be null, and knownRowsCount will specify number of loaded rows."
       ]
      },
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "from": "@epam/uui-core:DataSourceListCounts",
      "required": false
     },
     {
      "uid": 18,
      "name": "totalCount",
      "comment": {
       "raw": [
        "Total count of items, before applying the filter. If there's a tree, it counts all nodes, including folded children"
       ]
      },
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "from": "@epam/uui-core:DataSourceListCounts",
      "required": false
     },
     {
      "uid": 19,
      "name": "value",
      "comment": {
       "raw": [
        "The current value of component"
       ]
      },
      "typeValue": {
       "raw": "DataSourceState<Record<string, any>, any>"
      },
      "from": "@epam/uui-core:IEditable",
      "required": true
     },
     {
      "uid": 20,
      "name": "onValueChange",
      "comment": {
       "raw": [
        "Called when value needs to be changed (usually due to user interaction)"
       ]
      },
      "typeValue": {
       "raw": "(newValue: DataSourceState<Record<string, any>, any>) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IEditable",
      "required": true
     },
     {
      "uid": 21,
      "name": "isInvalid",
      "comment": {
       "raw": [
        "True if component contains invalid input"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:ICanBeInvalid",
      "required": false
     },
     {
      "uid": 22,
      "name": "validationMessage",
      "comment": {
       "raw": [
        "Message describing why the value is invalid"
       ]
      },
      "typeValue": {
       "raw": "null | string | number | boolean | React.ReactElement<any, string | React.JSXElementConstructor<any>> | React.ReactFragment | React.ReactPortal"
      },
      "typeValueRef": "@types/react:ReactNode",
      "from": "@epam/uui-core:ICanBeInvalid",
      "required": false
     },
     {
      "uid": 23,
      "name": "validationProps",
      "comment": {
       "raw": [
        "If T is a complex value (object or array), this property contains validation states of inner items"
       ]
      },
      "typeValue": {
       "raw": "{ [key: string]: ICanBeInvalid; }"
      },
      "from": "@epam/uui-core:ICanBeInvalid",
      "required": false
     },
     {
      "uid": 24,
      "name": "isDisabled",
      "comment": {
       "raw": [
        "Disable editing, and visually de-emphasize value of the component"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:IDisableable",
      "required": false
     },
     {
      "uid": 25,
      "name": "isReadonly",
      "comment": {
       "raw": [
        "Disable editing. Unlike isDisabled, keep component's value readable."
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:ICanBeReadonly",
      "required": false
     },
     {
      "uid": 26,
      "name": "isRequired",
      "comment": {
       "raw": [
        "Marks that component's value is required and shouldn't be empty"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:ICanBeRequired",
      "required": false
     },
     {
      "uid": 27,
      "name": "rawProps",
      "comment": {
       "raw": [
        "Any HTML attributes (native or 'data-') to put on the underlying component"
       ]
      },
      "typeValue": {
       "raw": "React.HTMLAttributes<HTMLDivElement> & Record<`data-${string}`, string>"
      },
      "from": "@epam/uui-core:IHasRawProps",
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui:DataPickerRowProps": {
   "summary": {
    "module": "@epam/uui",
    "typeName": {
     "name": "DataPickerRowProps",
     "nameFull": "DataPickerRowProps<TItem, TId>"
    },
    "src": "uui/components/pickers/DataPickerRow.tsx",
    "exported": true
   },
   "details": {
    "kind": 263,
    "typeValue": {
     "raw": "DataPickerRowProps<TItem, TId>",
     "print": [
      "interface DataPickerRowProps<TItem, TId> extends DataRowProps<TItem, TId> {",
      "    renderItem(item: TItem, rowProps: DataRowProps<TItem, TId>): React.ReactNode;",
      "    padding?: '12' | '24';",
      "    size?: 'none' | '24' | '30' | '36' | '42' | '48' | '60';",
      "    borderBottom?: 'none' | 'gray20';",
      "    alignActions?: 'top' | 'center';",
      "}"
     ]
    },
    "props": [
     {
      "uid": 1,
      "name": "renderItem",
      "typeValue": {
       "raw": "(item: TItem, rowProps: DataRowProps<TItem, TId>) => React.ReactNode"
      },
      "editor": {
       "type": "component"
      },
      "required": true
     },
     {
      "uid": 2,
      "name": "padding",
      "typeValue": {
       "raw": "'12' | '24'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "12",
        "24"
       ]
      },
      "required": false
     },
     {
      "uid": 3,
      "name": "size",
      "typeValue": {
       "raw": "'36' | '48' | '24' | '30' | '42' | 'none' | '60'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "24",
        "30",
        "36",
        "42",
        "48",
        "60",
        "none"
       ]
      },
      "required": false
     },
     {
      "uid": 4,
      "name": "borderBottom",
      "typeValue": {
       "raw": "'none' | 'gray20'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "none",
        "gray20"
       ]
      },
      "required": false
     },
     {
      "uid": 5,
      "name": "alignActions",
      "typeValue": {
       "raw": "'top' | 'center'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "top",
        "center"
       ]
      },
      "required": false
     },
     {
      "uid": 6,
      "name": "cx",
      "comment": {
       "raw": [
        "CSS class(es) to put on component's root. See {@link https://github.com/JedWatson/classnames#usage} for details"
       ]
      },
      "typeValue": {
       "raw": "null | string | number | boolean | ClassDictionary | ClassArray"
      },
      "typeValueRef": "@epam/uui-core:ClassValue",
      "from": "@epam/uui-core:IHasCX",
      "required": false
     },
     {
      "uid": 7,
      "name": "onClick",
      "comment": {
       "raw": [
        "Called when component is clicked"
       ]
      },
      "typeValue": {
       "raw": "((e?: any) => void) & ((rowProps: DataRowProps<TItem, TId>) => void) & ((rowProps: DataRowProps<TItem, TId>) => void)"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IClickable",
      "required": false
     },
     {
      "uid": 8,
      "name": "key",
      "typeValue": {
       "raw": "null | string | number"
      },
      "from": "@types/react:Attributes",
      "required": false
     },
     {
      "uid": 9,
      "name": "children",
      "typeValue": {
       "raw": "null | string | number | boolean | React.ReactElement<any, string | React.JSXElementConstructor<any>> | React.ReactFragment | React.ReactPortal"
      },
      "typeValueRef": "@types/react:ReactNode",
      "from": "@epam/uui-core:IHasChildren",
      "required": false
     },
     {
      "uid": 10,
      "name": "rawProps",
      "comment": {
       "raw": [
        "Any HTML attributes (native or 'data-') to put on the underlying component"
       ]
      },
      "typeValue": {
       "raw": "React.HTMLAttributes<HTMLDivElement> & Record<`data-${string}`, string>"
      },
      "from": "@epam/uui-core:IHasRawProps",
      "required": false
     },
     {
      "uid": 11,
      "name": "alignItems",
      "comment": {
       "raw": [
        "Flexbox align-items property [Flexbox Guide](https://css-tricks.com/snippets/css/a-guide-to-flexbox/)"
       ]
      },
      "typeValue": {
       "raw": "'top' | 'bottom' | 'center' | 'stretch'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "top",
        "bottom",
        "center",
        "stretch"
       ]
      },
      "from": "@epam/uui-core:FlexRowProps",
      "required": false
     },
     {
      "uid": 12,
      "name": "columnGap",
      "comment": {
       "raw": [
        "Flexbox column gap property [Flexbox Guide](https://css-tricks.com/snippets/css/a-guide-to-flexbox/#aa-gap-row-gap-column-gap)"
       ]
      },
      "typeValue": {
       "raw": "number | '6' | '12' | '18' | '36' | '24'"
      },
      "from": "@epam/uui-core:FlexRowProps",
      "required": false
     },
     {
      "uid": 13,
      "name": "rowGap",
      "comment": {
       "raw": [
        "Flexbox row gap property [Flexbox Guide](https://css-tricks.com/snippets/css/a-guide-to-flexbox/#aa-gap-row-gap-column-gap)"
       ]
      },
      "typeValue": {
       "raw": "number | '6' | '12' | '18' | '36' | '24'"
      },
      "from": "@epam/uui-core:FlexRowProps",
      "required": false
     },
     {
      "uid": 14,
      "name": "checkbox",
      "comment": {
       "raw": [
        "If row needs a checkbox, this field should be specified and it props can be configured here"
       ]
      },
      "typeValue": {
       "raw": "{ isVisible: boolean; } & IDisableable & ICanBeInvalid"
      },
      "from": "@epam/uui-core:DataRowOptions",
      "required": false
     },
     {
      "uid": 15,
      "name": "isSelectable",
      "comment": {
       "raw": [
        "True if row is selectable (for whole-row single-selection, multi-selection via checkbox are configured with the checkbox prop)"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:DataRowOptions",
      "required": false
     },
     {
      "uid": 16,
      "name": "dnd",
      "comment": {
       "raw": [
        "Configures row drag-n-drop options - if it can be dragged, can rows can be dropped into it, etc."
       ]
      },
      "typeValue": {
       "raw": "IDndActor<any, any>"
      },
      "from": "@epam/uui-core:DataRowOptions",
      "required": false
     },
     {
      "uid": 17,
      "name": "link",
      "comment": {
       "raw": [
        "Can be specified to make row act as a link (plain or SPA)"
       ]
      },
      "typeValue": {
       "raw": "Link"
      },
      "from": "@epam/uui-core:DataRowOptions",
      "required": false
     },
     {
      "uid": 18,
      "name": "pin",
      "comment": {
       "raw": [
        "A pure function that gets pinned state for each row.",
        " If row pinned, it means that it will be sticky inside their parent section."
       ]
      },
      "typeValue": {
       "raw": "(rowProps: DataRowProps<TItem, TId>) => boolean"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:DataRowOptions",
      "required": false
     },
     {
      "uid": 19,
      "name": "isDisabled",
      "comment": {
       "raw": [
        "Disable editing, and visually de-emphasize value of the component"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:IDisableable",
      "required": false
     },
     {
      "uid": 20,
      "name": "value",
      "comment": {
       "raw": [
        "The current value of component"
       ]
      },
      "typeValue": {
       "raw": "TItem"
      },
      "from": "@epam/uui-core:IEditable",
      "required": true
     },
     {
      "uid": 21,
      "name": "onValueChange",
      "comment": {
       "raw": [
        "Called when value needs to be changed (usually due to user interaction)"
       ]
      },
      "typeValue": {
       "raw": "(newValue: TItem) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IEditable",
      "required": true
     },
     {
      "uid": 22,
      "name": "isInvalid",
      "comment": {
       "raw": [
        "True if component contains invalid input"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:ICanBeInvalid",
      "required": false
     },
     {
      "uid": 23,
      "name": "validationMessage",
      "comment": {
       "raw": [
        "Message describing why the value is invalid"
       ]
      },
      "typeValue": {
       "raw": "null | string | number | boolean | React.ReactElement<any, string | React.JSXElementConstructor<any>> | React.ReactFragment | React.ReactPortal"
      },
      "from": "@epam/uui-core:ICanBeInvalid",
      "required": false
     },
     {
      "uid": 24,
      "name": "validationProps",
      "comment": {
       "raw": [
        "If T is a complex value (object or array), this property contains validation states of inner items"
       ]
      },
      "typeValue": {
       "raw": "{ [key: string]: ICanBeInvalid; }"
      },
      "from": "@epam/uui-core:ICanBeInvalid",
      "required": false
     },
     {
      "uid": 25,
      "name": "isReadonly",
      "comment": {
       "raw": [
        "Disable editing. Unlike isDisabled, keep component's value readable."
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:ICanBeReadonly",
      "required": false
     },
     {
      "uid": 26,
      "name": "isRequired",
      "comment": {
       "raw": [
        "Marks that component's value is required and shouldn't be empty"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:ICanBeRequired",
      "required": false
     },
     {
      "uid": 27,
      "name": "id",
      "comment": {
       "raw": [
        "ID of the TItem rows displays"
       ]
      },
      "typeValue": {
       "raw": "TId"
      },
      "from": "@epam/uui-core:DataRowProps",
      "required": true
     },
     {
      "uid": 28,
      "name": "rowKey",
      "comment": {
       "raw": [
        "Key to be used as component's key when rendering. Usually, it's stringified ID"
       ]
      },
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "from": "@epam/uui-core:DataRowProps",
      "required": true
     },
     {
      "uid": 29,
      "name": "index",
      "comment": {
       "raw": [
        "Index of the row, from the top of the list. This doesn't account any hierarchy."
       ]
      },
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "from": "@epam/uui-core:DataRowProps",
      "required": true
     },
     {
      "uid": 30,
      "name": "parentId",
      "comment": {
       "raw": [
        "ID of the parent TItem"
       ]
      },
      "typeValue": {
       "raw": "TId"
      },
      "from": "@epam/uui-core:DataRowProps",
      "required": false
     },
     {
      "uid": 31,
      "name": "path",
      "comment": {
       "raw": [
        "Hierarchical path from the root node to the item (excluding the item itself)"
       ]
      },
      "typeValue": {
       "raw": "DataRowPathItem<TId, TItem>[]"
      },
      "from": "@epam/uui-core:DataRowProps",
      "required": false
     },
     {
      "uid": 32,
      "name": "depth",
      "comment": {
       "raw": [
        "Depth of the row in tree, 0 for the top-level"
       ]
      },
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "from": "@epam/uui-core:DataRowProps",
      "required": false
     },
     {
      "uid": 33,
      "name": "indent",
      "comment": {
       "raw": [
        "Indent of the item, to show hierarchy.",
        "  Unlike depth, it contains additional logic, to not add unnecessary indents:",
        "  if all children of node has no children, all nodes would get the same indent as parent."
       ]
      },
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "from": "@epam/uui-core:DataRowProps",
      "required": false
     },
     {
      "uid": 34,
      "name": "isLoading",
      "comment": {
       "raw": [
        "True if row is in loading state. 'value' is empty in this case"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:DataRowProps",
      "required": false
     },
     {
      "uid": 35,
      "name": "isUnknown",
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:DataRowProps",
      "required": false
     },
     {
      "uid": 36,
      "name": "isFoldable",
      "comment": {
       "raw": [
        "True if row be folded or unfolded (usually because it contains children)"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:DataRowProps",
      "required": false
     },
     {
      "uid": 37,
      "name": "isFolded",
      "comment": {
       "raw": [
        "True if row is currently folded"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:DataRowProps",
      "required": false
     },
     {
      "uid": 38,
      "name": "isChecked",
      "comment": {
       "raw": [
        "True if row is checked with checkbox"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:DataRowProps",
      "required": false
     },
     {
      "uid": 39,
      "name": "isCheckable",
      "comment": {
       "raw": [
        "True if row has checkbox and can be checkable"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:DataRowProps",
      "required": false
     },
     {
      "uid": 40,
      "name": "isChildrenChecked",
      "comment": {
       "raw": [
        "True if some of row's children are checked.",
        " Used to show 'indefinite' checkbox state, to show user that something inside is checked"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:DataRowProps",
      "required": false
     },
     {
      "uid": 41,
      "name": "isSelected",
      "comment": {
       "raw": [
        "True if row is selected (in single-select mode, or in case when interface use both single row selection and checkboxes)"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:DataRowProps",
      "required": false
     },
     {
      "uid": 42,
      "name": "isChildrenSelected",
      "comment": {
       "raw": [
        "True if any of row's children is selected."
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:DataRowProps",
      "required": false
     },
     {
      "uid": 43,
      "name": "isFocused",
      "comment": {
       "raw": [
        "True if row is focused. Focus can be changed via keyboard arrow keys, or by hovering mouse on top of the row"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:DataRowProps",
      "required": false
     },
     {
      "uid": 44,
      "name": "isLastChild",
      "comment": {
       "raw": [
        "True if row is the last child of his parent"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:DataRowProps",
      "required": false
     },
     {
      "uid": 45,
      "name": "onFold",
      "comment": {
       "raw": [
        "Handles row folding change.",
        " We demand to pass the row as well, to avoid creating closures for each row."
       ]
      },
      "typeValue": {
       "raw": "(rowProps: DataRowProps<TItem, TId>) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:DataRowProps",
      "required": false
     },
     {
      "uid": 46,
      "name": "onCheck",
      "comment": {
       "raw": [
        "Handles row checkbox change.",
        " We demand to pass the row as well, to avoid creating closures for each row."
       ]
      },
      "typeValue": {
       "raw": "(rowProps: DataRowProps<TItem, TId>) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:DataRowProps",
      "required": false
     },
     {
      "uid": 47,
      "name": "onSelect",
      "comment": {
       "raw": [
        "Handles row selection.",
        " We demand to pass the row as well, to avoid creating closures for each row."
       ]
      },
      "typeValue": {
       "raw": "(rowProps: DataRowProps<TItem, TId>) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:DataRowProps",
      "required": false
     },
     {
      "uid": 48,
      "name": "onFocus",
      "comment": {
       "raw": [
        "Handles row focusing."
       ]
      },
      "typeValue": {
       "raw": "(focusedIndex: number) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:DataRowProps",
      "required": false
     },
     {
      "uid": 49,
      "name": "isPinned",
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:DataRowProps",
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui:DataRowsContainerProps": {
   "summary": {
    "module": "@epam/uui",
    "typeName": {
     "name": "DataRowsContainerProps",
     "nameFull": "DataRowsContainerProps<TItem, TId, List>"
    },
    "src": "uui/components/tables/DataRowsContainer/DataRowsContainer.tsx",
    "exported": true
   },
   "details": {
    "kind": 263,
    "typeValue": {
     "raw": "DataRowsContainerProps<TItem, TId, List>",
     "print": [
      "interface DataRowsContainerProps<TItem, TId, List extends HTMLDivElement = any> extends VirtualListRenderRowsParams<List> {",
      "    rows: DataRowProps<TItem, TId>[];",
      "    renderRow: (row: DataRowProps<TItem, TId>) => React.ReactNode;",
      "    headerRef?: React.MutableRefObject<HTMLDivElement>;",
      "}"
     ]
    },
    "props": [
     {
      "uid": 1,
      "name": "rows",
      "typeValue": {
       "raw": "DataRowProps<TItem, TId>[]"
      },
      "required": true
     },
     {
      "uid": 2,
      "name": "renderRow",
      "typeValue": {
       "raw": "(row: DataRowProps<TItem, TId>) => React.ReactNode"
      },
      "editor": {
       "type": "component"
      },
      "required": true
     },
     {
      "uid": 3,
      "name": "headerRef",
      "typeValue": {
       "raw": "React.MutableRefObject<HTMLDivElement>"
      },
      "required": false
     },
     {
      "uid": 4,
      "name": "listContainerRef",
      "typeValue": {
       "raw": "React.MutableRefObject<List>"
      },
      "from": "@epam/uui:VirtualListRenderRowsParams",
      "required": true
     },
     {
      "uid": 5,
      "name": "estimatedHeight",
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "from": "@epam/uui:VirtualListRenderRowsParams",
      "required": true
     },
     {
      "uid": 6,
      "name": "offsetY",
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "from": "@epam/uui:VirtualListRenderRowsParams",
      "required": true
     },
     {
      "uid": 7,
      "name": "scrollShadows",
      "typeValue": {
       "raw": "{ verticalTop: boolean; verticalBottom: boolean; horizontalLeft: boolean; horizontalRight: boolean; }"
      },
      "from": "@epam/uui:VirtualListRenderRowsParams",
      "required": true
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui:DataTableCellMods": {
   "summary": {
    "module": "@epam/uui",
    "typeName": {
     "name": "DataTableCellMods",
     "nameFull": "DataTableCellMods"
    },
    "src": "uui/components/tables/types.ts",
    "exported": true
   },
   "details": {
    "kind": 263,
    "typeValue": {
     "raw": "DataTableCellMods",
     "print": [
      "interface DataTableCellMods extends TableSizesAndPositionMods {",
      "    border?: boolean;",
      "}"
     ]
    },
    "props": [
     {
      "uid": 1,
      "name": "border",
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "required": false
     },
     {
      "uid": 2,
      "name": "size",
      "typeValue": {
       "raw": "'36' | '48' | '24' | '30' | '42' | 'none' | '60'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "24",
        "30",
        "36",
        "42",
        "48",
        "60",
        "none"
       ]
      },
      "from": "@epam/uui:TableSizesAndPositionMods",
      "required": false
     },
     {
      "uid": 3,
      "name": "padding",
      "typeValue": {
       "raw": "'0' | '12' | '24'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "0",
        "12",
        "24"
       ]
      },
      "from": "@epam/uui:TableSizesAndPositionMods",
      "required": false
     },
     {
      "uid": 4,
      "name": "alignActions",
      "typeValue": {
       "raw": "'top' | 'center'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "top",
        "center"
       ]
      },
      "from": "@epam/uui:TableSizesAndPositionMods",
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui:DataTableHeaderCellMods": {
   "summary": {
    "module": "@epam/uui",
    "typeName": {
     "name": "DataTableHeaderCellMods",
     "nameFull": "DataTableHeaderCellMods"
    },
    "src": "uui/components/tables/types.ts",
    "exported": true
   },
   "details": {
    "kind": 263,
    "typeValue": {
     "raw": "DataTableHeaderCellMods",
     "print": [
      "interface DataTableHeaderCellMods extends BaseRowMods {",
      "    textCase?: 'upper' | 'normal';",
      "}"
     ]
    },
    "props": [
     {
      "uid": 1,
      "name": "textCase",
      "typeValue": {
       "raw": "'upper' | 'normal'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "upper",
        "normal"
       ]
      },
      "required": false
     },
     {
      "uid": 2,
      "name": "size",
      "typeValue": {
       "raw": "'36' | '48' | '24' | '30' | '42' | 'none' | '60'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "24",
        "30",
        "36",
        "42",
        "48",
        "60",
        "none"
       ]
      },
      "from": "@epam/uui:BaseRowMods",
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui:DataTableHeaderRowMods": {
   "summary": {
    "module": "@epam/uui",
    "typeName": {
     "name": "DataTableHeaderRowMods",
     "nameFull": "DataTableHeaderRowMods"
    },
    "src": "uui/components/tables/types.ts",
    "exported": true
   },
   "details": {
    "kind": 263,
    "typeValue": {
     "raw": "DataTableHeaderRowMods",
     "print": [
      "interface DataTableHeaderRowMods extends BaseRowMods {",
      "    textCase?: 'upper' | 'normal';",
      "}"
     ]
    },
    "props": [
     {
      "uid": 1,
      "name": "textCase",
      "typeValue": {
       "raw": "'upper' | 'normal'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "upper",
        "normal"
       ]
      },
      "required": false
     },
     {
      "uid": 2,
      "name": "size",
      "typeValue": {
       "raw": "'36' | '48' | '24' | '30' | '42' | 'none' | '60'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "24",
        "30",
        "36",
        "42",
        "48",
        "60",
        "none"
       ]
      },
      "from": "@epam/uui:BaseRowMods",
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui:DataTableMods": {
   "summary": {
    "module": "@epam/uui",
    "typeName": {
     "name": "DataTableMods",
     "nameFull": "DataTableMods"
    },
    "src": "uui/components/tables/types.ts",
    "exported": true
   },
   "details": {
    "kind": 263,
    "typeValue": {
     "raw": "DataTableMods",
     "print": [
      "interface DataTableMods {",
      "    size?: ControlSize;",
      "    border?: boolean;",
      "    headerTextCase?: 'upper' | 'normal';",
      "}"
     ]
    },
    "props": [
     {
      "uid": 1,
      "name": "size",
      "typeValue": {
       "raw": "'36' | '48' | '24' | '30' | '42' | 'none'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "24",
        "30",
        "36",
        "42",
        "48",
        "none"
       ]
      },
      "required": false
     },
     {
      "uid": 2,
      "name": "border",
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "required": false
     },
     {
      "uid": 3,
      "name": "headerTextCase",
      "typeValue": {
       "raw": "'upper' | 'normal'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "upper",
        "normal"
       ]
      },
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui:DataTableProps": {
   "summary": {
    "module": "@epam/uui",
    "typeName": {
     "name": "DataTableProps",
     "nameFull": "DataTableProps<TItem, TId, TFilter>"
    },
    "src": "uui/components/tables/DataTable.tsx",
    "exported": true
   },
   "details": {
    "kind": 263,
    "typeValue": {
     "raw": "DataTableProps<TItem, TId, TFilter>",
     "print": [
      "interface DataTableProps<TItem, TId, TFilter = any> extends IEditable<DataTableState>, DataSourceListProps, DataTableColumnsConfigOptions {",
      "    getRows(): DataRowProps<TItem, TId>[];",
      "    columns: DataColumnProps<TItem, TId>[];",
      "    renderRow?(props: DataTableRowProps<TItem, TId>): React.ReactNode;",
      "    renderNoResultsBlock?(): React.ReactNode;",
      "    onScroll?(value: PositionValues): void;",
      "    showColumnsConfig?: boolean;",
      "    filters?: TableFiltersConfig<any>[];",
      "    onCopy?: (copyFrom: DataTableSelectedCellData<TItem, TId, TFilter>, selectedCells: DataTableSelectedCellData<TItem, TId, TFilter>[]) => void;",
      "    renderColumnsConfigurationModal?: (props: ColumnsConfigurationModalProps<TItem, TId, TFilter>) => React.ReactNode;",
      "}"
     ]
    },
    "props": [
     {
      "uid": 1,
      "name": "getRows",
      "typeValue": {
       "raw": "() => DataRowProps<TItem, TId>[]"
      },
      "editor": {
       "type": "func"
      },
      "required": true
     },
     {
      "uid": 2,
      "name": "columns",
      "typeValue": {
       "raw": "DataColumnProps<TItem, TId, any>[]"
      },
      "required": true
     },
     {
      "uid": 3,
      "name": "renderRow",
      "typeValue": {
       "raw": "(props: DataTableRowProps<TItem, TId>) => React.ReactNode"
      },
      "editor": {
       "type": "component"
      },
      "required": false
     },
     {
      "uid": 4,
      "name": "renderNoResultsBlock",
      "typeValue": {
       "raw": "() => React.ReactNode"
      },
      "editor": {
       "type": "component"
      },
      "required": false
     },
     {
      "uid": 5,
      "name": "onScroll",
      "typeValue": {
       "raw": "(value: PositionValues) => void"
      },
      "editor": {
       "type": "func"
      },
      "required": false
     },
     {
      "uid": 6,
      "name": "showColumnsConfig",
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "required": false
     },
     {
      "uid": 7,
      "name": "filters",
      "typeValue": {
       "raw": "TableFiltersConfig<any>[]"
      },
      "required": false
     },
     {
      "uid": 8,
      "name": "onCopy",
      "typeValue": {
       "raw": "(copyFrom: DataTableSelectedCellData<TItem, TId, TFilter>, selectedCells: DataTableSelectedCellData<TItem, TId, TFilter>[]) => void"
      },
      "editor": {
       "type": "func"
      },
      "required": false
     },
     {
      "uid": 9,
      "name": "renderColumnsConfigurationModal",
      "typeValue": {
       "raw": "(props: ColumnsConfigurationModalProps<TItem, TId, TFilter>) => React.ReactNode"
      },
      "editor": {
       "type": "component"
      },
      "required": false
     },
     {
      "uid": 10,
      "name": "value",
      "comment": {
       "raw": [
        "The current value of component"
       ]
      },
      "typeValue": {
       "raw": "DataTableState<any, any>"
      },
      "from": "@epam/uui-core:IEditable",
      "required": true
     },
     {
      "uid": 11,
      "name": "onValueChange",
      "comment": {
       "raw": [
        "Called when value needs to be changed (usually due to user interaction)"
       ]
      },
      "typeValue": {
       "raw": "(newValue: DataTableState<any, any>) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IEditable",
      "required": true
     },
     {
      "uid": 12,
      "name": "isInvalid",
      "comment": {
       "raw": [
        "True if component contains invalid input"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:ICanBeInvalid",
      "required": false
     },
     {
      "uid": 13,
      "name": "validationMessage",
      "comment": {
       "raw": [
        "Message describing why the value is invalid"
       ]
      },
      "typeValue": {
       "raw": "null | string | number | boolean | React.ReactElement<any, string | React.JSXElementConstructor<any>> | React.ReactFragment | React.ReactPortal"
      },
      "typeValueRef": "@types/react:ReactNode",
      "from": "@epam/uui-core:ICanBeInvalid",
      "required": false
     },
     {
      "uid": 14,
      "name": "validationProps",
      "comment": {
       "raw": [
        "If T is a complex value (object or array), this property contains validation states of inner items"
       ]
      },
      "typeValue": {
       "raw": "{ [key: string]: ICanBeInvalid; }"
      },
      "from": "@epam/uui-core:ICanBeInvalid",
      "required": false
     },
     {
      "uid": 15,
      "name": "isDisabled",
      "comment": {
       "raw": [
        "Disable editing, and visually de-emphasize value of the component"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:IDisableable",
      "required": false
     },
     {
      "uid": 16,
      "name": "isReadonly",
      "comment": {
       "raw": [
        "Disable editing. Unlike isDisabled, keep component's value readable."
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:ICanBeReadonly",
      "required": false
     },
     {
      "uid": 17,
      "name": "isRequired",
      "comment": {
       "raw": [
        "Marks that component's value is required and shouldn't be empty"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:ICanBeRequired",
      "required": false
     },
     {
      "uid": 18,
      "name": "selectAll",
      "comment": {
       "raw": [
        "ICheckable object for Select All behavior.",
        " If omitted, Select All action will be absent."
       ]
      },
      "typeValue": {
       "raw": "ICheckable"
      },
      "from": "@epam/uui-core:DataSourceListProps",
      "required": false
     },
     {
      "uid": 19,
      "name": "isReloading",
      "comment": {
       "raw": [
        "Signals that data is reloading on search/sort/filter/reload."
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:DataSourceListProps",
      "required": false
     },
     {
      "uid": 20,
      "name": "rowsCount",
      "comment": {
       "raw": [
        "Count of rows, after applying filter, and folding on tree nodes.",
        " Obsolete! Please switch to exactRowsCount / knownRowsCount"
       ]
      },
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "from": "@epam/uui-core:DataSourceListCounts",
      "required": false
     },
     {
      "uid": 21,
      "name": "exactRowsCount",
      "comment": {
       "raw": [
        "Count of rows, if all rows loaded. Can be null while initial loading, or if API doesn't return count"
       ]
      },
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "from": "@epam/uui-core:DataSourceListCounts",
      "required": false
     },
     {
      "uid": 22,
      "name": "knownRowsCount",
      "comment": {
       "raw": [
        "There's at least knownRowsCount rows. There can be more if list is lazy loaded.",
        " Equals to exactRowsCount if all rows are loaded, or if API returns rows count",
        " Otherwise, exactRowsCount will be null, and knownRowsCount will specify number of loaded rows."
       ]
      },
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "from": "@epam/uui-core:DataSourceListCounts",
      "required": false
     },
     {
      "uid": 23,
      "name": "totalCount",
      "comment": {
       "raw": [
        "Total count of items, before applying the filter. If there's a tree, it counts all nodes, including folded children"
       ]
      },
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "from": "@epam/uui-core:DataSourceListCounts",
      "required": false
     },
     {
      "uid": 24,
      "name": "allowColumnsReordering",
      "comment": {
       "raw": [
        "If true, allows user to change columns order",
        " @default false"
       ],
       "tags": {
        "@default": false
       }
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:DataTableColumnsConfigOptions",
      "required": false
     },
     {
      "uid": 25,
      "name": "allowColumnsResizing",
      "comment": {
       "raw": [
        "If true, allows user to change columns width",
        " @default false"
       ],
       "tags": {
        "@default": false
       }
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:DataTableColumnsConfigOptions",
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui:DataTableRowMods": {
   "summary": {
    "module": "@epam/uui",
    "typeName": {
     "name": "DataTableRowMods",
     "nameFull": "DataTableRowMods"
    },
    "src": "uui/components/tables/types.ts",
    "exported": true
   },
   "details": {
    "kind": 263,
    "typeValue": {
     "raw": "DataTableRowMods",
     "print": [
      "interface DataTableRowMods extends TableSizesAndPositionMods {",
      "    borderBottom?: any;",
      "}"
     ]
    },
    "props": [
     {
      "uid": 1,
      "name": "borderBottom",
      "typeValue": {
       "raw": "any"
      },
      "required": false
     },
     {
      "uid": 2,
      "name": "size",
      "typeValue": {
       "raw": "'36' | '48' | '24' | '30' | '42' | 'none' | '60'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "24",
        "30",
        "36",
        "42",
        "48",
        "60",
        "none"
       ]
      },
      "from": "@epam/uui:TableSizesAndPositionMods",
      "required": false
     },
     {
      "uid": 3,
      "name": "padding",
      "typeValue": {
       "raw": "'0' | '12' | '24'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "0",
        "12",
        "24"
       ]
      },
      "from": "@epam/uui:TableSizesAndPositionMods",
      "required": false
     },
     {
      "uid": 4,
      "name": "alignActions",
      "typeValue": {
       "raw": "'top' | 'center'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "top",
        "center"
       ]
      },
      "from": "@epam/uui:TableSizesAndPositionMods",
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui:DatePickerBodyProps": {
   "summary": {
    "module": "@epam/uui",
    "typeName": {
     "name": "DatePickerBodyProps",
     "nameFull": "DatePickerBodyProps"
    },
    "src": "uui/components/datePickers/DatePickerBody.tsx",
    "exported": true
   },
   "details": {
    "kind": 263,
    "typeValue": {
     "raw": "DatePickerBodyProps",
     "print": [
      "interface DatePickerBodyProps extends DatePickerBodyBaseProps<string> {",
      "    getDayCX?(day: Dayjs): string[];",
      "    isHoliday?: (day: Dayjs) => boolean;",
      "}"
     ]
    },
    "props": [
     {
      "uid": 1,
      "name": "getDayCX",
      "typeValue": {
       "raw": "(day: Dayjs) => string[]"
      },
      "editor": {
       "type": "func"
      },
      "required": false
     },
     {
      "uid": 2,
      "name": "isHoliday",
      "typeValue": {
       "raw": "(day: Dayjs) => boolean"
      },
      "editor": {
       "type": "func"
      },
      "required": false
     },
     {
      "uid": 3,
      "name": "value",
      "typeValue": {
       "raw": "PickerBodyValue<string>"
      },
      "from": "@epam/uui-components:DatePickerBodyBaseProps",
      "required": true
     },
     {
      "uid": 4,
      "name": "setSelectedDate",
      "typeValue": {
       "raw": "(newDate: string) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-components:DatePickerBodyBaseProps",
      "required": true
     },
     {
      "uid": 5,
      "name": "setDisplayedDateAndView",
      "typeValue": {
       "raw": "(displayedDate: Dayjs, view: ViewType) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-components:DatePickerBodyBaseProps",
      "required": true
     },
     {
      "uid": 6,
      "name": "filter",
      "typeValue": {
       "raw": "(day: Dayjs) => boolean"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-components:DatePickerBodyBaseOptions",
      "required": false
     },
     {
      "uid": 7,
      "name": "changeIsOpen",
      "typeValue": {
       "raw": "(newValue: boolean) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-components:DatePickerBodyBaseOptions",
      "required": false
     },
     {
      "uid": 8,
      "name": "presets",
      "typeValue": {
       "raw": "RangeDatePickerPresets"
      },
      "from": "@epam/uui-components:DatePickerBodyBaseOptions",
      "required": false
     },
     {
      "uid": 9,
      "name": "renderDay",
      "typeValue": {
       "raw": "(day: Dayjs, onDayClick: (day: Dayjs) => void) => React.ReactElement<Element, string | React.JSXElementConstructor<any>>"
      },
      "editor": {
       "type": "component"
      },
      "from": "@epam/uui-components:DatePickerBodyBaseOptions",
      "required": false
     },
     {
      "uid": 10,
      "name": "cx",
      "comment": {
       "raw": [
        "CSS class(es) to put on component's root. See {@link https://github.com/JedWatson/classnames#usage} for details"
       ]
      },
      "typeValue": {
       "raw": "null | string | number | boolean | ClassDictionary | ClassArray"
      },
      "typeValueRef": "@epam/uui-core:ClassValue",
      "from": "@epam/uui-core:IHasCX",
      "required": false
     },
     {
      "uid": 11,
      "name": "rawProps",
      "comment": {
       "raw": [
        "Any HTML attributes (native or 'data-') to put on the underlying component"
       ]
      },
      "typeValue": {
       "raw": "React.HTMLAttributes<HTMLDivElement> & Record<`data-${string}`, string>"
      },
      "from": "@epam/uui-core:IHasRawProps",
      "required": false
     },
     {
      "uid": 12,
      "name": "forwardedRef",
      "comment": {
       "raw": [
        "this ref is passed to the underlying component"
       ]
      },
      "typeValue": {
       "raw": "null | (instance: HTMLDivElement | null) => void | React.MutableRefObject<HTMLDivElement | null>"
      },
      "from": "@epam/uui-core:IHasForwardedRef",
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui:DatePickerProps": {
   "summary": {
    "module": "@epam/uui",
    "typeName": {
     "name": "DatePickerProps",
     "nameFull": "DatePickerProps"
    },
    "src": "uui/components/datePickers/DatePicker.tsx",
    "exported": true
   },
   "details": {
    "kind": 263,
    "typeValue": {
     "raw": "DatePickerProps",
     "print": [
      "interface DatePickerProps extends DatePickerCoreProps, SizeMod, IHasEditMode {",
      "}"
     ]
    },
    "props": [
     {
      "uid": 1,
      "name": "renderFooter",
      "comment": {
       "raw": [
        "render prop to add a custom footer inside the DatePicker dropdown body"
       ]
      },
      "typeValue": {
       "raw": "() => React.ReactNode"
      },
      "editor": {
       "type": "component"
      },
      "from": "@epam/uui-core:DatePickerCoreProps",
      "required": false
     },
     {
      "uid": 2,
      "name": "format",
      "comment": {
       "raw": [
        "Date format string, see [dayjs docs](@link https://day.js.org/docs/en/display/format)"
       ]
      },
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "from": "@epam/uui-core:BaseDatePickerProps",
      "required": false
     },
     {
      "uid": 3,
      "name": "filter",
      "comment": {
       "raw": [
        "Filter selectable days. Days, for which this callback returns false - will be disabled"
       ]
      },
      "typeValue": {
       "raw": "(day: Dayjs) => boolean"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:BaseDatePickerProps",
      "required": false
     },
     {
      "uid": 4,
      "name": "renderTarget",
      "comment": {
       "raw": [
        "Overrides rendering of picker Target - component which triggers dropdown. Can be used to attach DatePicker to other components, e.g. Buttons"
       ]
      },
      "typeValue": {
       "raw": "(props: IDropdownToggler) => React.ReactNode"
      },
      "editor": {
       "type": "component"
      },
      "from": "@epam/uui-core:BaseDatePickerProps",
      "required": false
     },
     {
      "uid": 5,
      "name": "iconPosition",
      "comment": {
       "raw": [
        "Defines where to place calendar icon"
       ]
      },
      "typeValue": {
       "raw": "'left' | 'right'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "left",
        "right"
       ]
      },
      "from": "@epam/uui-core:BaseDatePickerProps",
      "required": false
     },
     {
      "uid": 6,
      "name": "disableClear",
      "comment": {
       "raw": [
        "Disable clearing date value (e.g. via cross icon)"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:BaseDatePickerProps",
      "required": false
     },
     {
      "uid": 7,
      "name": "renderDay",
      "comment": {
       "raw": [
        "Overrides rendering of the single day. For example, to highlight certain days"
       ]
      },
      "typeValue": {
       "raw": "(day: Dayjs, onDayClick: (day: Dayjs) => void) => React.ReactElement<Element, string | React.JSXElementConstructor<any>>"
      },
      "editor": {
       "type": "component"
      },
      "from": "@epam/uui-core:BaseDatePickerProps",
      "required": false
     },
     {
      "uid": 8,
      "name": "isHoliday",
      "comment": {
       "raw": [
        "If this function returns true, the day will be highlighted as holiday"
       ]
      },
      "typeValue": {
       "raw": "(day: Dayjs) => boolean"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:BaseDatePickerProps",
      "required": false
     },
     {
      "uid": 9,
      "name": "onBlur",
      "comment": {
       "raw": [
        "Called when component lose focus"
       ]
      },
      "typeValue": {
       "raw": "(e?: React.FocusEvent<HTMLInputElement, Element> | undefined) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:BaseDatePickerProps",
      "required": false
     },
     {
      "uid": 10,
      "name": "placement",
      "comment": {
       "raw": [
        "Dropdown position relative to the input. See [Popper Docs](@link https://popper.js.org/)"
       ]
      },
      "typeValue": {
       "raw": "'left' | 'right' | 'auto' | 'auto-start' | 'auto-end' | 'top' | 'bottom' | 'top-start' | 'top-end' | 'bottom-start' | 'bottom-end' | 'right-start' | 'right-end' | 'left-start' | 'left-end'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "left",
        "right",
        "auto",
        "auto-start",
        "auto-end",
        "top",
        "bottom",
        "top-start",
        "top-end",
        "bottom-start",
        "bottom-end",
        "right-start",
        "right-end",
        "left-start",
        "left-end"
       ]
      },
      "from": "@epam/uui-core:BaseDatePickerProps",
      "required": false
     },
     {
      "uid": 11,
      "name": "rawProps",
      "comment": {
       "raw": [
        "Any HTML attributes (native or 'data-') to put on date picker parts"
       ]
      },
      "typeValue": {
       "raw": "{ input?: (React.HTMLAttributes<HTMLDivElement> & Record<`data-${string}`, string>) | undefined; body?: (React.HTMLAttributes<HTMLDivElement> & Record<`data-${string}`, string>) | undefined; }"
      },
      "from": "@epam/uui-core:BaseDatePickerProps",
      "required": false
     },
     {
      "uid": 12,
      "name": "inputCx",
      "comment": {
       "raw": [
        "CSS class(es) to put on datepicker input"
       ]
      },
      "typeValue": {
       "raw": "null | string | number | boolean | ClassDictionary | ClassArray"
      },
      "typeValueRef": "@epam/uui-core:ClassValue",
      "from": "@epam/uui-core:BaseDatePickerProps",
      "required": false
     },
     {
      "uid": 13,
      "name": "bodyCx",
      "comment": {
       "raw": [
        "CSS class(es) to put on datepicker body"
       ]
      },
      "typeValue": {
       "raw": "null | string | number | boolean | ClassDictionary | ClassArray"
      },
      "typeValueRef": "@epam/uui-core:ClassValue",
      "from": "@epam/uui-core:BaseDatePickerProps",
      "required": false
     },
     {
      "uid": 14,
      "name": "value",
      "comment": {
       "raw": [
        "The current value of component"
       ]
      },
      "typeValue": {
       "raw": "null | string"
      },
      "editor": {
       "type": "string"
      },
      "from": "@epam/uui-core:IEditable",
      "required": true
     },
     {
      "uid": 15,
      "name": "onValueChange",
      "comment": {
       "raw": [
        "Called when value needs to be changed (usually due to user interaction)"
       ]
      },
      "typeValue": {
       "raw": "(newValue: string | null) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IEditable",
      "required": true
     },
     {
      "uid": 16,
      "name": "isInvalid",
      "comment": {
       "raw": [
        "True if component contains invalid input"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:ICanBeInvalid",
      "required": false
     },
     {
      "uid": 17,
      "name": "validationMessage",
      "comment": {
       "raw": [
        "Message describing why the value is invalid"
       ]
      },
      "typeValue": {
       "raw": "null | string | number | boolean | React.ReactElement<any, string | React.JSXElementConstructor<any>> | React.ReactFragment | React.ReactPortal"
      },
      "typeValueRef": "@types/react:ReactNode",
      "from": "@epam/uui-core:ICanBeInvalid",
      "required": false
     },
     {
      "uid": 18,
      "name": "validationProps",
      "comment": {
       "raw": [
        "If T is a complex value (object or array), this property contains validation states of inner items"
       ]
      },
      "typeValue": {
       "raw": "{ [key: string]: ICanBeInvalid; }"
      },
      "from": "@epam/uui-core:ICanBeInvalid",
      "required": false
     },
     {
      "uid": 19,
      "name": "isDisabled",
      "comment": {
       "raw": [
        "Disable editing, and visually de-emphasize value of the component"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:IDisableable",
      "required": false
     },
     {
      "uid": 20,
      "name": "isReadonly",
      "comment": {
       "raw": [
        "Disable editing. Unlike isDisabled, keep component's value readable."
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:ICanBeReadonly",
      "required": false
     },
     {
      "uid": 21,
      "name": "isRequired",
      "comment": {
       "raw": [
        "Marks that component's value is required and shouldn't be empty"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:ICanBeRequired",
      "required": false
     },
     {
      "uid": 22,
      "name": "onFocus",
      "comment": {
       "raw": [
        "Called when component gets input focus"
       ]
      },
      "typeValue": {
       "raw": "(e: React.FocusEvent<HTMLInputElement, Element>) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:ICanFocus",
      "required": false
     },
     {
      "uid": 23,
      "name": "placeholder",
      "comment": {
       "raw": [
        "Placeholder to display when empty"
       ]
      },
      "typeValue": {
       "raw": "any"
      },
      "from": "@epam/uui-core:IHasPlaceholder",
      "required": false
     },
     {
      "uid": 24,
      "name": "getValueChangeAnalyticsEvent",
      "comment": {
       "raw": [
        "Given a value, returns an analytics event to send when component is edited.",
        " See [AnalyticsContext](@link https://uui.epam.com/documents?id=analyticsContext&mode=doc&skin=UUI4_promo&category=contexts)."
       ]
      },
      "typeValue": {
       "raw": "(newValue: string | null, oldValue: string | null) => AnalyticsEvent"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IAnalyticableOnChange",
      "required": false
     },
     {
      "uid": 25,
      "name": "size",
      "typeValue": {
       "raw": "'36' | '48' | '24' | '30' | '42' | 'none'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "24",
        "30",
        "36",
        "42",
        "48",
        "none"
       ]
      },
      "from": "@epam/uui:SizeMod",
      "required": false
     },
     {
      "uid": 26,
      "name": "mode",
      "comment": {
       "raw": [
        "Visual mode for component:",
        " - form: default visuals, to use in forms.",
        " - cell: adjust to embed as table cell editor: no borders, no focus (it is applied by DataCell)",
        " - inline: adjust for WYSIWYG UX. Backgrounds removed. Borders appear only on hover."
       ]
      },
      "typeValue": {
       "raw": "'inline' | 'form' | 'cell'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "inline",
        "form",
        "cell"
       ]
      },
      "from": "@epam/uui:IHasEditMode",
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui:DefaultNotificationProps": {
   "summary": {
    "module": "@epam/uui",
    "typeName": {
     "name": "DefaultNotificationProps",
     "nameFull": "DefaultNotificationProps"
    },
    "src": "uui/components/overlays/NotificationCard.tsx",
    "exported": true
   },
   "details": {
    "kind": 263,
    "typeValue": {
     "raw": "DefaultNotificationProps",
     "print": [
      "interface DefaultNotificationProps extends INotification, IHasChildren, IHasCX, IHasRawProps<React.HTMLAttributes<HTMLDivElement>> {",
      "    actions?: NotificationAction[];",
      "}"
     ]
    },
    "props": [
     {
      "uid": 1,
      "name": "actions",
      "typeValue": {
       "raw": "NotificationAction[]"
      },
      "required": false
     },
     {
      "uid": 2,
      "name": "onClose",
      "comment": {
       "raw": [
        "Call to close the notification with abort action. It's rejects `notificationContext.show()` promise."
       ]
      },
      "typeValue": {
       "raw": "() => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:INotification",
      "required": false
     },
     {
      "uid": 3,
      "name": "onSuccess",
      "comment": {
       "raw": [
        "Call to close the notification with success action. It's resolved `notificationContext.show()` promise."
       ]
      },
      "typeValue": {
       "raw": "() => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:INotification",
      "required": false
     },
     {
      "uid": 4,
      "name": "clearTimer",
      "comment": {
       "raw": [
        "Cancel notification closing timer"
       ]
      },
      "typeValue": {
       "raw": "() => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:INotification",
      "required": false
     },
     {
      "uid": 5,
      "name": "refreshTimer",
      "comment": {
       "raw": [
        "Reinitialize notification closing timer. It will be set to the provided notification duration."
       ]
      },
      "typeValue": {
       "raw": "() => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:INotification",
      "required": false
     },
     {
      "uid": 6,
      "name": "id",
      "comment": {
       "raw": [
        "Unique id of the notification"
       ]
      },
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "from": "@epam/uui-core:INotification",
      "required": true
     },
     {
      "uid": 7,
      "name": "key",
      "comment": {
       "raw": [
        "Unique key of the notification"
       ]
      },
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "from": "@epam/uui-core:INotification",
      "required": true
     },
     {
      "uid": 8,
      "name": "children",
      "typeValue": {
       "raw": "null | string | number | boolean | React.ReactElement<any, string | React.JSXElementConstructor<any>> | React.ReactFragment | React.ReactPortal"
      },
      "typeValueRef": "@types/react:ReactNode",
      "from": "@epam/uui-core:IHasChildren",
      "required": false
     },
     {
      "uid": 9,
      "name": "cx",
      "comment": {
       "raw": [
        "CSS class(es) to put on component's root. See {@link https://github.com/JedWatson/classnames#usage} for details"
       ]
      },
      "typeValue": {
       "raw": "null | string | number | boolean | ClassDictionary | ClassArray"
      },
      "typeValueRef": "@epam/uui-core:ClassValue",
      "from": "@epam/uui-core:IHasCX",
      "required": false
     },
     {
      "uid": 10,
      "name": "rawProps",
      "comment": {
       "raw": [
        "Any HTML attributes (native or 'data-') to put on the underlying component"
       ]
      },
      "typeValue": {
       "raw": "React.HTMLAttributes<HTMLDivElement> & Record<`data-${string}`, string>"
      },
      "from": "@epam/uui-core:IHasRawProps",
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui:DropdownContainerMods": {
   "summary": {
    "module": "@epam/uui",
    "typeName": {
     "name": "DropdownContainerMods",
     "nameFull": "DropdownContainerMods"
    },
    "src": "uui/components/overlays/DropdownContainer.tsx",
    "exported": true
   },
   "details": {
    "kind": 263,
    "typeValue": {
     "raw": "DropdownContainerMods",
     "print": [
      "interface DropdownContainerMods {",
      "    vPadding?: '6' | '12' | '18' | '24' | '30' | '48';",
      "    padding?: '6' | '12' | '18' | '24' | '30';",
      "}"
     ]
    },
    "props": [
     {
      "uid": 1,
      "name": "vPadding",
      "typeValue": {
       "raw": "'6' | '12' | '18' | '48' | '24' | '30'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "6",
        "12",
        "18",
        "24",
        "30",
        "48"
       ]
      },
      "required": false
     },
     {
      "uid": 2,
      "name": "padding",
      "typeValue": {
       "raw": "'6' | '12' | '18' | '24' | '30'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "6",
        "12",
        "18",
        "24",
        "30"
       ]
      },
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui:DropdownContainerProps": {
   "summary": {
    "module": "@epam/uui",
    "typeName": {
     "name": "DropdownContainerProps",
     "nameFull": "DropdownContainerProps"
    },
    "src": "uui/components/overlays/DropdownContainer.tsx",
    "exported": true
   },
   "details": {
    "kind": 263,
    "typeValue": {
     "raw": "DropdownContainerProps",
     "print": [
      "interface DropdownContainerProps extends uuiComponents.DropdownContainerProps, DropdownContainerMods {",
      "}"
     ]
    },
    "props": [
     {
      "uid": 1,
      "name": "width",
      "typeValue": {
       "raw": "number | 'auto'"
      },
      "from": "@epam/uui-components:DropdownContainerProps",
      "required": false
     },
     {
      "uid": 2,
      "name": "maxWidth",
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "from": "@epam/uui-components:DropdownContainerProps",
      "required": false
     },
     {
      "uid": 3,
      "name": "height",
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "from": "@epam/uui-components:DropdownContainerProps",
      "required": false
     },
     {
      "uid": 4,
      "name": "showArrow",
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-components:DropdownContainerProps",
      "required": false
     },
     {
      "uid": 5,
      "name": "style",
      "typeValue": {
       "raw": "React.CSSProperties"
      },
      "from": "@epam/uui-components:DropdownContainerProps",
      "required": false
     },
     {
      "uid": 6,
      "name": "focusLock",
      "comment": {
       "raw": [
        "Pass true to wrap DropdownContainer with FocusLock component to support keyboard navigation.",
        " If omitted, true value will be used.",
        "",
        " After DropdownContainer appeared the focus will be set on the first focusable element inside.",
        " @default true"
       ],
       "tags": {
        "@default": true
       }
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-components:DropdownContainerProps",
      "required": false
     },
     {
      "uid": 7,
      "name": "returnFocus",
      "comment": {
       "raw": [
        "Pass true to return focus into initial position on unmount.",
        " If omitted, true value will be used. It's used if focusLock=true."
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-components:DropdownContainerProps",
      "required": false
     },
     {
      "uid": 8,
      "name": "persistentFocus",
      "comment": {
       "raw": [
        "Pass true to lock focus within DropdownContainer.",
        " If omitted, true value will be used. It's used if focusLock=true."
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-components:DropdownContainerProps",
      "required": false
     },
     {
      "uid": 9,
      "name": "lockProps",
      "comment": {
       "raw": [
        "Pass any extra props to the FocusLock wrapper."
       ]
      },
      "typeValue": {
       "raw": "Record<string, any>"
      },
      "from": "@epam/uui-components:DropdownContainerProps",
      "required": false
     },
     {
      "uid": 10,
      "name": "shards",
      "comment": {
       "raw": [
        "Pass an array of ref pointing to the nodes, which focus lock should consider and a part of it. This is a way of focus scattering."
       ]
      },
      "typeValue": {
       "raw": "React.RefObject<HTMLElement>[]"
      },
      "from": "@epam/uui-components:DropdownContainerProps",
      "required": false
     },
     {
      "uid": 11,
      "name": "as",
      "comment": {
       "raw": [
        "Pass element name if you need to change internal FocusLock div element, to any other."
       ]
      },
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "from": "@epam/uui-components:DropdownContainerProps",
      "required": false
     },
     {
      "uid": 12,
      "name": "closeOnEsc",
      "comment": {
       "raw": [
        "Pass true to handle Escape key press and call props.onClose().",
        " If omitted, true value will be used. It's used if focusLock=true."
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-components:DropdownContainerProps",
      "required": false
     },
     {
      "uid": 13,
      "name": "onKeyDown",
      "comment": {
       "raw": [
        "Called on keyDown event in DropdownContainer.",
        "     Can be used to provide your own handlers."
       ]
      },
      "typeValue": {
       "raw": "(e: React.KeyboardEvent<HTMLElement>) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-components:DropdownContainerProps",
      "required": false
     },
     {
      "uid": 14,
      "name": "cx",
      "comment": {
       "raw": [
        "CSS class(es) to put on component's root. See {@link https://github.com/JedWatson/classnames#usage} for details"
       ]
      },
      "typeValue": {
       "raw": "null | string | number | boolean | ClassDictionary | ClassArray"
      },
      "typeValueRef": "@epam/uui-core:ClassValue",
      "from": "@epam/uui-core:IHasCX",
      "required": false
     },
     {
      "uid": 15,
      "name": "children",
      "typeValue": {
       "raw": "null | string | number | boolean | React.ReactElement<any, string | React.JSXElementConstructor<any>> | React.ReactFragment | React.ReactPortal"
      },
      "typeValueRef": "@types/react:ReactNode",
      "from": "@epam/uui-core:IHasChildren",
      "required": false
     },
     {
      "uid": 16,
      "name": "rawProps",
      "comment": {
       "raw": [
        "Any HTML attributes (native or 'data-') to put on the underlying component"
       ]
      },
      "typeValue": {
       "raw": "React.HTMLAttributes<HTMLDivElement> & Record<`data-${string}`, string>"
      },
      "from": "@epam/uui-core:IHasRawProps",
      "required": false
     },
     {
      "uid": 17,
      "name": "forwardedRef",
      "comment": {
       "raw": [
        "this ref is passed to the underlying component"
       ]
      },
      "typeValue": {
       "raw": "null | (instance: HTMLDivElement | null) => void | React.MutableRefObject<HTMLDivElement | null>"
      },
      "from": "@epam/uui-core:IHasForwardedRef",
      "required": false
     },
     {
      "uid": 18,
      "name": "onClose",
      "comment": {
       "raw": [
        "Call to close the Dropdown body"
       ]
      },
      "typeValue": {
       "raw": "() => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IDropdownBodyProps",
      "required": false
     },
     {
      "uid": 19,
      "name": "togglerWidth",
      "comment": {
       "raw": [
        "The width of the toggler, which can be used to adjust the body width to it"
       ]
      },
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "from": "@epam/uui-core:IDropdownBodyProps",
      "required": false
     },
     {
      "uid": 20,
      "name": "togglerHeight",
      "comment": {
       "raw": [
        "The height of the toggler"
       ]
      },
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "from": "@epam/uui-core:IDropdownBodyProps",
      "required": false
     },
     {
      "uid": 21,
      "name": "scheduleUpdate",
      "comment": {
       "raw": [
        "Call to force recompute dropdown position"
       ]
      },
      "typeValue": {
       "raw": "() => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IDropdownBodyProps",
      "required": false
     },
     {
      "uid": 22,
      "name": "isOpen",
      "comment": {
       "raw": [
        "Indicates that dropdown is open"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:IDropdownBodyProps",
      "required": false
     },
     {
      "uid": 23,
      "name": "arrowProps",
      "comment": {
       "raw": [
        "Props that should be provided to the arrow component"
       ]
      },
      "typeValue": {
       "raw": "PopperArrowProps"
      },
      "from": "@epam/uui-core:IDropdownBodyProps",
      "required": false
     },
     {
      "uid": 24,
      "name": "placement",
      "comment": {
       "raw": [
        "Dropdown position relative to the input. See [Popper Docs](@link https://popper.js.org/)"
       ]
      },
      "typeValue": {
       "raw": "'left' | 'right' | 'auto' | 'auto-start' | 'auto-end' | 'top' | 'bottom' | 'top-start' | 'top-end' | 'bottom-start' | 'bottom-end' | 'right-start' | 'right-end' | 'left-start' | 'left-end'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "left",
        "right",
        "auto",
        "auto-start",
        "auto-end",
        "top",
        "bottom",
        "top-start",
        "top-end",
        "bottom-start",
        "bottom-end",
        "right-start",
        "right-end",
        "left-start",
        "left-end"
       ]
      },
      "from": "@epam/uui-core:IDropdownBodyProps",
      "required": false
     },
     {
      "uid": 25,
      "name": "vPadding",
      "typeValue": {
       "raw": "'6' | '12' | '18' | '48' | '24' | '30'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "6",
        "12",
        "18",
        "24",
        "30",
        "48"
       ]
      },
      "from": "@epam/uui:DropdownContainerMods",
      "required": false
     },
     {
      "uid": 26,
      "name": "padding",
      "typeValue": {
       "raw": "'6' | '12' | '18' | '24' | '30'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "6",
        "12",
        "18",
        "24",
        "30"
       ]
      },
      "from": "@epam/uui:DropdownContainerMods",
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui:DropMarkerProps": {
   "summary": {
    "module": "@epam/uui",
    "typeName": {
     "name": "DropMarkerProps",
     "nameFull": "DropMarkerProps"
    },
    "src": "uui/components/dnd/DropMarker.tsx",
    "exported": true
   },
   "details": {
    "kind": 263,
    "typeValue": {
     "raw": "DropMarkerProps",
     "print": [
      "interface DropMarkerProps extends DndActorRenderParams, IHasCX {",
      "    enableBlocker?: boolean;",
      "}"
     ]
    },
    "props": [
     {
      "uid": 1,
      "name": "enableBlocker",
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "required": false
     },
     {
      "uid": 2,
      "name": "isDraggable",
      "comment": {
       "raw": [
        "True, if the element can be dragged. Doesn't mean that DnD is active."
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:DndActorRenderParams",
      "required": true
     },
     {
      "uid": 3,
      "name": "isDraggedOut",
      "comment": {
       "raw": [
        "True, if the element is dragged out. True for placeholder left when it's element it dragged out. False for Drag Ghost."
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:DndActorRenderParams",
      "required": true
     },
     {
      "uid": 4,
      "name": "isDragGhost",
      "comment": {
       "raw": [
        "True, if the element is rendered as Drag Ghost. All other flags are false for drag ghost."
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:DndActorRenderParams",
      "required": true
     },
     {
      "uid": 5,
      "name": "isDraggedOver",
      "comment": {
       "raw": [
        "True, if the element is being dragged over, even if drop is not accepted by the element (canAcceptDrop returned false)"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:DndActorRenderParams",
      "required": true
     },
     {
      "uid": 6,
      "name": "isDropAccepted",
      "comment": {
       "raw": [
        "True, if the element is being dragged over, and drop on it is accepted - canAcceptDrop returned true"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:DndActorRenderParams",
      "required": true
     },
     {
      "uid": 7,
      "name": "isDndInProgress",
      "comment": {
       "raw": [
        "True if any drag and drop operation is in progress, even if the element not being dragged"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:DndActorRenderParams",
      "required": true
     },
     {
      "uid": 8,
      "name": "dragData",
      "comment": {
       "raw": [
        "Drag data associated with the element. Specified always, even if there is no DnD operation happening."
       ]
      },
      "typeValue": {
       "raw": "any"
      },
      "from": "@epam/uui-core:DndActorRenderParams",
      "required": false
     },
     {
      "uid": 9,
      "name": "position",
      "comment": {
       "raw": [
        "Drop position. Chosen from accepted drop positions according to pointer coordinates"
       ]
      },
      "typeValue": {
       "raw": "'left' | 'right' | 'top' | 'bottom' | 'inside'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "left",
        "right",
        "top",
        "bottom",
        "inside"
       ]
      },
      "from": "@epam/uui-core:DndActorRenderParams",
      "required": false
     },
     {
      "uid": 10,
      "name": "eventHandlers",
      "comment": {
       "raw": [
        "Event handlers. Component is expected to pass these events to the top element it renders.",
        " As onClick event on the element will be overwritten, use DndActorProps.onClick to receive click events on the element"
       ]
      },
      "typeValue": {
       "raw": "{ onTouchStart?(e: React.TouchEvent<Element>): void; onPointerDown?(e: React.PointerEvent<Element>): void; onPointerEnter?(e: React.PointerEvent<any>): void; onPointerMove?(e: React.PointerEvent<any>): void; onPointerLeave?(e: React.PointerEvent<any>): void; onPointerUp?(e: React.PointerEvent<any>): void; }"
      },
      "from": "@epam/uui-core:DndActorRenderParams",
      "required": true
     },
     {
      "uid": 11,
      "name": "classNames",
      "comment": {
       "raw": [
        "CSS class names to add to the element.",
        " Some of these markers are used by the DndActor internally, so they must be added even if no used by component itself to apply styles."
       ]
      },
      "typeValue": {
       "raw": "string[]"
      },
      "from": "@epam/uui-core:DndActorRenderParams",
      "required": true
     },
     {
      "uid": 12,
      "name": "ref",
      "comment": {
       "raw": [
        "Ref to the DOM element to perform DnD actions"
       ]
      },
      "typeValue": {
       "raw": "null | (instance: any) => void | React.RefObject<any>"
      },
      "from": "@epam/uui-core:DndActorRenderParams",
      "required": false
     },
     {
      "uid": 13,
      "name": "cx",
      "comment": {
       "raw": [
        "CSS class(es) to put on component's root. See {@link https://github.com/JedWatson/classnames#usage} for details"
       ]
      },
      "typeValue": {
       "raw": "null | string | number | boolean | ClassDictionary | ClassArray"
      },
      "typeValueRef": "@epam/uui-core:ClassValue",
      "from": "@epam/uui-core:IHasCX",
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui:DropSpotProps": {
   "summary": {
    "module": "@epam/uui",
    "typeName": {
     "name": "DropSpotProps",
     "nameFull": "DropSpotProps"
    },
    "src": "uui/components/fileUpload/DropSpot.tsx",
    "exported": true
   },
   "details": {
    "kind": 263,
    "typeValue": {
     "raw": "DropSpotProps",
     "print": [
      "interface DropSpotProps extends IHasRawProps<React.HTMLAttributes<HTMLDivElement>> {",
      "    cx?: string;",
      "    infoText?: string;",
      "    onUploadFiles(files: File[]): any;",
      "    accept?: string;",
      "    single?: boolean;",
      "}"
     ]
    },
    "props": [
     {
      "uid": 1,
      "name": "cx",
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "required": false
     },
     {
      "uid": 2,
      "name": "infoText",
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "required": false
     },
     {
      "uid": 3,
      "name": "onUploadFiles",
      "typeValue": {
       "raw": "(files: File[]) => any"
      },
      "editor": {
       "type": "func"
      },
      "required": true
     },
     {
      "uid": 4,
      "name": "accept",
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "required": false
     },
     {
      "uid": 5,
      "name": "single",
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "required": false
     },
     {
      "uid": 6,
      "name": "rawProps",
      "comment": {
       "raw": [
        "Any HTML attributes (native or 'data-') to put on the underlying component"
       ]
      },
      "typeValue": {
       "raw": "React.HTMLAttributes<HTMLDivElement> & Record<`data-${string}`, string>"
      },
      "from": "@epam/uui-core:IHasRawProps",
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui:EpamBadgeSemanticColor": {
   "summary": {
    "module": "@epam/uui",
    "typeName": {
     "name": "EpamBadgeSemanticColor",
     "nameFull": "EpamBadgeSemanticColor"
    },
    "src": "uui/components/types.ts",
    "exported": true
   },
   "details": {
    "kind": 264,
    "typeValue": {
     "raw": "'info' | 'success' | 'warning' | 'critical' | 'neutral'",
     "print": [
      "type EpamBadgeSemanticColor = 'info' | 'success' | 'warning' | 'critical' | 'neutral';"
     ]
    }
   }
  },
  "@epam/uui:FileCardItem": {
   "summary": {
    "module": "@epam/uui",
    "typeName": {
     "name": "FileCardItem",
     "nameFull": "FileCardItem"
    },
    "src": "uui/components/fileUpload/FileCard.tsx",
    "exported": true
   },
   "details": {
    "kind": 263,
    "typeValue": {
     "raw": "FileCardItem",
     "print": [
      "interface FileCardItem extends Partial<File & FileUploadResponse> {",
      "    progress?: number;",
      "    abortXHR?: () => void;",
      "}"
     ]
    },
    "props": [
     {
      "uid": 1,
      "name": "progress",
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "required": false
     },
     {
      "uid": 2,
      "name": "abortXHR",
      "typeValue": {
       "raw": "() => void"
      },
      "editor": {
       "type": "func"
      },
      "required": false
     },
     {
      "uid": 3,
      "name": "lastModified",
      "comment": {
       "raw": [
        "[MDN Reference](https://developer.mozilla.org/docs/Web/API/File/lastModified)"
       ]
      },
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "from": "node_modules/typescript/lib/lib.dom.d.ts:File",
      "required": true
     },
     {
      "uid": 4,
      "name": "name",
      "comment": {
       "raw": [
        "[MDN Reference](https://developer.mozilla.org/docs/Web/API/File/name)"
       ]
      },
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "from": "node_modules/typescript/lib/lib.dom.d.ts:File",
      "required": true
     },
     {
      "uid": 5,
      "name": "webkitRelativePath",
      "comment": {
       "raw": [
        "[MDN Reference](https://developer.mozilla.org/docs/Web/API/File/webkitRelativePath)"
       ]
      },
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "from": "node_modules/typescript/lib/lib.dom.d.ts:File",
      "required": true
     },
     {
      "uid": 6,
      "name": "size",
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "from": "node_modules/typescript/lib/lib.dom.d.ts:Blob",
      "required": true
     },
     {
      "uid": 7,
      "name": "type",
      "typeValue": {
       "raw": "'attachment' | 'iframe' | 'image'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "attachment",
        "iframe",
        "image"
       ]
      },
      "from": "node_modules/typescript/lib/lib.dom.d.ts:Blob",
      "required": true
     },
     {
      "uid": 8,
      "name": "arrayBuffer",
      "typeValue": {
       "raw": "() => Promise<ArrayBuffer>"
      },
      "editor": {
       "type": "func"
      },
      "from": "node_modules/typescript/lib/lib.dom.d.ts:Blob",
      "required": true
     },
     {
      "uid": 9,
      "name": "slice",
      "typeValue": {
       "raw": "(start?: number | undefined, end?: number | undefined, contentType?: string | undefined) => Blob"
      },
      "editor": {
       "type": "func"
      },
      "from": "node_modules/typescript/lib/lib.dom.d.ts:Blob",
      "required": true
     },
     {
      "uid": 10,
      "name": "stream",
      "typeValue": {
       "raw": "() => ReadableStream<Uint8Array>"
      },
      "editor": {
       "type": "func"
      },
      "from": "node_modules/typescript/lib/lib.dom.d.ts:Blob",
      "required": true
     },
     {
      "uid": 11,
      "name": "text",
      "typeValue": {
       "raw": "() => Promise<string>"
      },
      "editor": {
       "type": "func"
      },
      "from": "node_modules/typescript/lib/lib.dom.d.ts:Blob",
      "required": true
     },
     {
      "uid": 12,
      "name": "id",
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "from": "@epam/uui-core:FileUploadResponse",
      "required": true
     },
     {
      "uid": 13,
      "name": "path",
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "from": "@epam/uui-core:FileUploadResponse",
      "required": false
     },
     {
      "uid": 14,
      "name": "extension",
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "from": "@epam/uui-core:FileUploadResponse",
      "required": false
     },
     {
      "uid": 15,
      "name": "error",
      "typeValue": {
       "raw": "{ isError: boolean; message?: string | undefined; }"
      },
      "from": "@epam/uui-core:FileUploadResponse",
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui:FileCardProps": {
   "summary": {
    "module": "@epam/uui",
    "typeName": {
     "name": "FileCardProps",
     "nameFull": "FileCardProps"
    },
    "src": "uui/components/fileUpload/FileCard.tsx",
    "exported": true
   },
   "details": {
    "kind": 263,
    "typeValue": {
     "raw": "FileCardProps",
     "print": [
      "interface FileCardProps extends IClickable, IHasCX {",
      "    file: FileCardItem;",
      "    width?: number;",
      "}"
     ]
    },
    "props": [
     {
      "uid": 1,
      "name": "file",
      "typeValue": {
       "raw": "FileCardItem"
      },
      "required": true
     },
     {
      "uid": 2,
      "name": "width",
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "required": false
     },
     {
      "uid": 3,
      "name": "onClick",
      "comment": {
       "raw": [
        "Called when component is clicked"
       ]
      },
      "typeValue": {
       "raw": "(e?: any) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IClickable",
      "required": false
     },
     {
      "uid": 4,
      "name": "cx",
      "comment": {
       "raw": [
        "CSS class(es) to put on component's root. See {@link https://github.com/JedWatson/classnames#usage} for details"
       ]
      },
      "typeValue": {
       "raw": "null | string | number | boolean | ClassDictionary | ClassArray"
      },
      "typeValueRef": "@epam/uui-core:ClassValue",
      "from": "@epam/uui-core:IHasCX",
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui:FillStyle": {
   "summary": {
    "module": "@epam/uui",
    "typeName": {
     "name": "FillStyle",
     "nameFull": "FillStyle"
    },
    "src": "uui/components/types.ts",
    "exported": true
   },
   "details": {
    "kind": 264,
    "typeValue": {
     "raw": "'solid' | 'outline' | 'none' | 'ghost'",
     "print": [
      "type FillStyle = ButtonFill;"
     ]
    }
   }
  },
  "@epam/uui:FiltersPanelProps": {
   "summary": {
    "module": "@epam/uui",
    "typeName": {
     "name": "FiltersPanelProps",
     "nameFull": "FiltersPanelProps<TFilter>"
    },
    "src": "uui/components/filters/FiltersPanel.tsx",
    "exported": true
   },
   "details": {
    "kind": 263,
    "typeValue": {
     "raw": "FiltersPanelProps<TFilter>",
     "print": [
      "interface FiltersPanelProps<TFilter> {",
      "    filters: TableFiltersConfig<TFilter>[];",
      "    tableState: DataTableState;",
      "    setTableState: (newState: DataTableState) => void;",
      "    size?: '24' | '30' | '36' | '42' | '48';",
      "}"
     ]
    },
    "props": [
     {
      "uid": 1,
      "name": "filters",
      "typeValue": {
       "raw": "TableFiltersConfig<TFilter>[]"
      },
      "required": true
     },
     {
      "uid": 2,
      "name": "tableState",
      "typeValue": {
       "raw": "DataTableState<any, any>"
      },
      "required": true
     },
     {
      "uid": 3,
      "name": "setTableState",
      "typeValue": {
       "raw": "(newState: DataTableState<any, any>) => void"
      },
      "editor": {
       "type": "func"
      },
      "required": true
     },
     {
      "uid": 4,
      "name": "size",
      "typeValue": {
       "raw": "'36' | '48' | '24' | '30' | '42'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "24",
        "30",
        "36",
        "42",
        "48"
       ]
      },
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui:FlexCellMods": {
   "summary": {
    "module": "@epam/uui",
    "typeName": {
     "name": "FlexCellMods",
     "nameFull": "FlexCellMods"
    },
    "src": "uui/components/layout/FlexItems/FlexCell.tsx",
    "exported": true
   },
   "details": {
    "kind": 264,
    "typeValue": {
     "raw": "FlexCellMods",
     "print": [
      "type FlexCellMods = {};"
     ]
    }
   }
  },
  "@epam/uui:FlexCellProps": {
   "summary": {
    "module": "@epam/uui",
    "typeName": {
     "name": "FlexCellProps",
     "nameFull": "FlexCellProps"
    },
    "src": "uui/components/layout/FlexItems/FlexCell.tsx",
    "exported": true
   },
   "details": {
    "kind": 264,
    "typeValue": {
     "raw": "FlexCellProps",
     "print": [
      "type FlexCellProps = uuiCore.FlexCellProps & FlexCellMods;"
     ]
    },
    "props": [
     {
      "uid": 1,
      "name": "cx",
      "comment": {
       "raw": [
        "CSS class(es) to put on component's root. See {@link https://github.com/JedWatson/classnames#usage} for details"
       ]
      },
      "typeValue": {
       "raw": "null | string | number | boolean | ClassDictionary | ClassArray"
      },
      "typeValueRef": "@epam/uui-core:ClassValue",
      "from": "@epam/uui-core:IHasCX",
      "required": false
     },
     {
      "uid": 2,
      "name": "onClick",
      "comment": {
       "raw": [
        "Called when component is clicked"
       ]
      },
      "typeValue": {
       "raw": "(e?: any) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IClickable",
      "required": false
     },
     {
      "uid": 3,
      "name": "rawProps",
      "comment": {
       "raw": [
        "Any HTML attributes (native or 'data-') to put on the underlying component"
       ]
      },
      "typeValue": {
       "raw": "React.HTMLAttributes<HTMLDivElement> & Record<`data-${string}`, string>"
      },
      "from": "@epam/uui-core:IHasRawProps",
      "required": false
     },
     {
      "uid": 4,
      "name": "key",
      "typeValue": {
       "raw": "null | string | number"
      },
      "from": "@types/react:Attributes",
      "required": false
     },
     {
      "uid": 5,
      "name": "children",
      "typeValue": {
       "raw": "null | string | number | boolean | React.ReactElement<any, string | React.JSXElementConstructor<any>> | React.ReactFragment | React.ReactPortal"
      },
      "typeValueRef": "@types/react:ReactNode",
      "from": "@epam/uui-core:IHasChildren",
      "required": false
     },
     {
      "uid": 6,
      "name": "width",
      "comment": {
       "raw": [
        "CSS width. Set to 'auto' to make FlexCell resize to it's content"
       ]
      },
      "typeValue": {
       "raw": "number | 'auto' | '100%'"
      },
      "from": "@epam/uui-core:FlexCellProps",
      "required": false
     },
     {
      "uid": 7,
      "name": "minWidth",
      "comment": {
       "raw": [
        "CSS min-width"
       ]
      },
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "from": "@epam/uui-core:FlexCellProps",
      "required": false
     },
     {
      "uid": 8,
      "name": "grow",
      "comment": {
       "raw": [
        "Flexbox flex-grow property [Flexbox Guide](https://css-tricks.com/snippets/css/a-guide-to-flexbox/#aa-flex-grow)"
       ]
      },
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "from": "@epam/uui-core:FlexCellProps",
      "required": false
     },
     {
      "uid": 9,
      "name": "shrink",
      "comment": {
       "raw": [
        "Flexbox shrink property [Flexbox Guide](https://css-tricks.com/snippets/css/a-guide-to-flexbox/#aa-flex-shrink)"
       ]
      },
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "from": "@epam/uui-core:FlexCellProps",
      "required": false
     },
     {
      "uid": 10,
      "name": "textAlign",
      "comment": {
       "raw": [
        "CSS text-align property"
       ]
      },
      "typeValue": {
       "raw": "'left' | 'right' | 'center'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "left",
        "right",
        "center"
       ]
      },
      "from": "@epam/uui-core:FlexCellProps",
      "required": false
     },
     {
      "uid": 11,
      "name": "alignSelf",
      "comment": {
       "raw": [
        "Flexbox align-self property. Aligns items vertically for horizontal flexbox. [Flexbox Guide](https://css-tricks.com/snippets/css/a-guide-to-flexbox/#aa-align-self)"
       ]
      },
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "from": "@epam/uui-core:FlexCellProps",
      "required": false
     },
     {
      "uid": 12,
      "name": "style",
      "comment": {
       "raw": [
        "Standard style attribute. Styles are added to element style, overriding supplied flex styles"
       ]
      },
      "typeValue": {
       "raw": "React.CSSProperties"
      },
      "from": "@epam/uui-core:FlexCellProps",
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui:FlexRowProps": {
   "summary": {
    "module": "@epam/uui",
    "typeName": {
     "name": "FlexRowProps",
     "nameFull": "FlexRowProps"
    },
    "src": "uui/components/layout/FlexItems/FlexRow.tsx",
    "exported": true
   },
   "details": {
    "kind": 263,
    "typeValue": {
     "raw": "FlexRowProps",
     "print": [
      "interface FlexRowProps extends Omit<uuiFlexRowProps, 'columnGap' | 'rowGap'> {",
      "}"
     ]
    },
    "props": [
     {
      "uid": 1,
      "name": "cx",
      "comment": {
       "raw": [
        "CSS class(es) to put on component's root. See {@link https://github.com/JedWatson/classnames#usage} for details"
       ]
      },
      "typeValue": {
       "raw": "null | string | number | boolean | ClassDictionary | ClassArray"
      },
      "from": "@epam/uui-core:IHasCX",
      "required": false
     },
     {
      "uid": 2,
      "name": "onClick",
      "comment": {
       "raw": [
        "Called when component is clicked"
       ]
      },
      "typeValue": {
       "raw": "(e?: any) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IClickable",
      "required": false
     },
     {
      "uid": 3,
      "name": "rawProps",
      "comment": {
       "raw": [
        "Any HTML attributes (native or 'data-') to put on the underlying component"
       ]
      },
      "typeValue": {
       "raw": "React.HTMLAttributes<HTMLDivElement> & Record<`data-${string}`, string>"
      },
      "from": "@epam/uui-core:IHasRawProps",
      "required": false
     },
     {
      "uid": 4,
      "name": "key",
      "typeValue": {
       "raw": "null | string | number"
      },
      "from": "@types/react:Attributes",
      "required": false
     },
     {
      "uid": 5,
      "name": "children",
      "typeValue": {
       "raw": "null | string | number | boolean | React.ReactElement<any, string | React.JSXElementConstructor<any>> | React.ReactFragment | React.ReactPortal"
      },
      "from": "@epam/uui-core:IHasChildren",
      "required": false
     },
     {
      "uid": 6,
      "name": "alignItems",
      "comment": {
       "raw": [
        "Flexbox align-items property [Flexbox Guide](https://css-tricks.com/snippets/css/a-guide-to-flexbox/)"
       ]
      },
      "typeValue": {
       "raw": "'top' | 'bottom' | 'center' | 'stretch'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "top",
        "bottom",
        "center",
        "stretch"
       ]
      },
      "from": "@epam/uui-core:FlexRowProps",
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui:FontStyle": {
   "summary": {
    "module": "@epam/uui",
    "typeName": {
     "name": "FontStyle",
     "nameFull": "FontStyle"
    },
    "src": "uui/components/types.ts",
    "exported": true
   },
   "details": {
    "kind": 264,
    "typeValue": {
     "raw": "'primary' | 'regular' | 'semibold' | 'italic' | 'promo'",
     "print": [
      "type FontStyle = 'regular' | 'semibold' | 'italic' | 'primary' | 'promo';"
     ]
    }
   }
  },
  "@epam/uui:GlobalMenuProps": {
   "summary": {
    "module": "@epam/uui",
    "typeName": {
     "name": "GlobalMenuProps",
     "nameFull": "GlobalMenuProps"
    },
    "src": "uui/components/navigation/MainMenu/GlobalMenu.tsx",
    "exported": true
   },
   "details": {
    "kind": 263,
    "typeValue": {
     "raw": "GlobalMenuProps",
     "print": [
      "interface GlobalMenuProps extends IAdaptiveItem, IHasCX, IHasRawProps<React.HTMLAttributes<HTMLButtonElement>> {",
      "}"
     ]
    },
    "props": [
     {
      "uid": 1,
      "name": "estimatedWidth",
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "from": "@epam/uui-core:IAdaptiveItem",
      "required": false
     },
     {
      "uid": 2,
      "name": "priority",
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "from": "@epam/uui-core:IAdaptiveItem",
      "required": false
     },
     {
      "uid": 3,
      "name": "showInBurgerMenu",
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:IAdaptiveItem",
      "required": false
     },
     {
      "uid": 4,
      "name": "collapseToMore",
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:IAdaptiveItem",
      "required": false
     },
     {
      "uid": 5,
      "name": "collapsedContainer",
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:IAdaptiveItem",
      "required": false
     },
     {
      "uid": 6,
      "name": "cx",
      "comment": {
       "raw": [
        "CSS class(es) to put on component's root. See {@link https://github.com/JedWatson/classnames#usage} for details"
       ]
      },
      "typeValue": {
       "raw": "null | string | number | boolean | ClassDictionary | ClassArray"
      },
      "typeValueRef": "@epam/uui-core:ClassValue",
      "from": "@epam/uui-core:IHasCX",
      "required": false
     },
     {
      "uid": 7,
      "name": "rawProps",
      "comment": {
       "raw": [
        "Any HTML attributes (native or 'data-') to put on the underlying component"
       ]
      },
      "typeValue": {
       "raw": "React.HTMLAttributes<HTMLButtonElement> & Record<`data-${string}`, string>"
      },
      "from": "@epam/uui-core:IHasRawProps",
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui:HighlightRange": {
   "summary": {
    "module": "@epam/uui",
    "typeName": {
     "name": "HighlightRange",
     "nameFull": "HighlightRange"
    },
    "src": "uui/components/pickers/highlight.tsx",
    "exported": true
   },
   "details": {
    "kind": 263,
    "typeValue": {
     "raw": "HighlightRange",
     "print": [
      "interface HighlightRange {",
      "    from: number;",
      "    to: number;",
      "    isHighlighted: boolean;",
      "}"
     ]
    },
    "props": [
     {
      "uid": 1,
      "name": "from",
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "required": true
     },
     {
      "uid": 2,
      "name": "to",
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "required": true
     },
     {
      "uid": 3,
      "name": "isHighlighted",
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "required": true
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui:IconButtonMods": {
   "summary": {
    "module": "@epam/uui",
    "typeName": {
     "name": "IconButtonMods",
     "nameFull": "IconButtonMods"
    },
    "src": "uui/components/buttons/IconButton.tsx",
    "exported": true
   },
   "details": {
    "kind": 263,
    "typeValue": {
     "raw": "IconButtonMods",
     "print": [
      "interface IconButtonMods {",
      "    /**",
      "     * @default 'default'",
      "     */",
      "    color?: IconColor;",
      "}"
     ]
    },
    "props": [
     {
      "uid": 1,
      "name": "color",
      "comment": {
       "raw": [
        "@default 'default'"
       ],
       "tags": {
        "@default": "default"
       }
      },
      "typeValue": {
       "raw": "'info' | 'success' | 'warning' | 'error' | 'neutral' | 'secondary'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "info",
        "success",
        "warning",
        "error",
        "neutral",
        "secondary"
       ]
      },
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui:IconButtonProps": {
   "summary": {
    "module": "@epam/uui",
    "typeName": {
     "name": "IconButtonProps",
     "nameFull": "IconButtonProps"
    },
    "src": "uui/components/buttons/IconButton.tsx",
    "exported": true
   },
   "details": {
    "kind": 263,
    "typeValue": {
     "raw": "IconButtonProps",
     "print": [
      "interface IconButtonProps extends IconButtonBaseProps, IconButtonMods {",
      "}"
     ]
    },
    "props": [
     {
      "uid": 1,
      "name": "cx",
      "comment": {
       "raw": [
        "CSS class(es) to put on component's root. See {@link https://github.com/JedWatson/classnames#usage} for details"
       ]
      },
      "typeValue": {
       "raw": "null | string | number | boolean | ClassDictionary | ClassArray"
      },
      "typeValueRef": "@epam/uui-core:ClassValue",
      "from": "@epam/uui-core:IHasCX",
      "required": false
     },
     {
      "uid": 2,
      "name": "onClick",
      "comment": {
       "raw": [
        "Called when component is clicked"
       ]
      },
      "typeValue": {
       "raw": "(e?: any) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IClickable",
      "required": false
     },
     {
      "uid": 3,
      "name": "link",
      "comment": {
       "raw": [
        "Link object to redirect to for SPA-redirects"
       ]
      },
      "typeValue": {
       "raw": "Link"
      },
      "from": "@epam/uui-core:ICanRedirect",
      "required": false
     },
     {
      "uid": 4,
      "name": "href",
      "comment": {
       "raw": [
        "Href (URL) to redirect to, for non-SPA redirects"
       ]
      },
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "from": "@epam/uui-core:ICanRedirect",
      "required": false
     },
     {
      "uid": 5,
      "name": "isLinkActive",
      "comment": {
       "raw": [
        "Highlights component to show that link is active (browser is displaying the page to which link is pointing)"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:ICanRedirect",
      "required": false
     },
     {
      "uid": 6,
      "name": "target",
      "comment": {
       "raw": [
        "Controls where the link should be opened"
       ]
      },
      "typeValue": {
       "raw": "'_blank'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "_blank"
       ]
      },
      "from": "@epam/uui-core:ICanRedirect",
      "required": false
     },
     {
      "uid": 7,
      "name": "isDisabled",
      "comment": {
       "raw": [
        "Disable editing, and visually de-emphasize value of the component"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:IDisableable",
      "required": false
     },
     {
      "uid": 8,
      "name": "icon",
      "comment": {
       "raw": [
        "Icon can be a React element (usually an SVG element)"
       ]
      },
      "typeValue": {
       "raw": "Icon"
      },
      "editor": {
       "type": "component"
      },
      "from": "@epam/uui-core:IHasIcon",
      "required": false
     },
     {
      "uid": 9,
      "name": "iconPosition",
      "comment": {
       "raw": [
        "Position of the icon (left of right)"
       ]
      },
      "typeValue": {
       "raw": "'left' | 'right'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "left",
        "right"
       ]
      },
      "from": "@epam/uui-core:IHasIcon",
      "required": false
     },
     {
      "uid": 10,
      "name": "onIconClick",
      "comment": {
       "raw": [
        "Click handler for the icon"
       ]
      },
      "typeValue": {
       "raw": "() => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IHasIcon",
      "required": false
     },
     {
      "uid": 11,
      "name": "clickAnalyticsEvent",
      "comment": {
       "raw": [
        "An analytics event to send (via AnalyticsContext) when component is clicked.",
        " See [AnalyticsContext](@link https://uui.epam.com/documents?id=analyticsContext&mode=doc&skin=UUI4_promo&category=contexts)."
       ]
      },
      "typeValue": {
       "raw": "null | { [key: string]: any; name: string; }"
      },
      "from": "@epam/uui-core:IAnalyticableClick",
      "required": false
     },
     {
      "uid": 12,
      "name": "tabIndex",
      "comment": {
       "raw": [
        "Controls the order of keyboard navigation between components"
       ]
      },
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "from": "@epam/uui-core:IHasTabIndex",
      "required": false
     },
     {
      "uid": 13,
      "name": "rawProps",
      "comment": {
       "raw": [
        "Any HTML attributes (native or 'data-') to put on the underlying component"
       ]
      },
      "typeValue": {
       "raw": "React.ButtonHTMLAttributes<HTMLButtonElement> & Record<`data-${string}`, string>"
      },
      "from": "@epam/uui-core:IHasRawProps",
      "required": false
     },
     {
      "uid": 14,
      "name": "forwardedRef",
      "comment": {
       "raw": [
        "this ref is passed to the underlying component"
       ]
      },
      "typeValue": {
       "raw": "null | (instance: HTMLButtonElement | HTMLAnchorElement | null) => void | React.MutableRefObject<HTMLButtonElement | HTMLAnchorElement | null>"
      },
      "from": "@epam/uui-core:IHasForwardedRef",
      "required": false
     },
     {
      "uid": 15,
      "name": "color",
      "comment": {
       "raw": [
        "@default 'default'"
       ],
       "tags": {
        "@default": "default"
       }
      },
      "typeValue": {
       "raw": "'info' | 'success' | 'warning' | 'error' | 'neutral' | 'secondary'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "info",
        "success",
        "warning",
        "error",
        "neutral",
        "secondary"
       ]
      },
      "from": "@epam/uui:IconButtonMods",
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui:IconColor": {
   "summary": {
    "module": "@epam/uui",
    "typeName": {
     "name": "IconColor",
     "nameFull": "IconColor"
    },
    "src": "uui/components/buttons/IconButton.tsx",
    "exported": true
   },
   "details": {
    "kind": 264,
    "typeValue": {
     "raw": "'info' | 'success' | 'warning' | 'error' | 'neutral' | 'secondary'",
     "print": [
      "type IconColor = 'info' | 'success' | 'warning' | 'error' | 'secondary' | 'neutral';"
     ]
    }
   }
  },
  "@epam/uui:IDropdownMenuContainer": {
   "summary": {
    "module": "@epam/uui",
    "typeName": {
     "name": "IDropdownMenuContainer",
     "nameFull": "IDropdownMenuContainer"
    },
    "src": "uui/components/overlays/DropdownMenu.tsx",
    "exported": true
   },
   "details": {
    "kind": 263,
    "typeValue": {
     "raw": "IDropdownMenuContainer",
     "print": [
      "interface IDropdownMenuContainer extends VPanelProps, DropdownBodyProps {",
      "    closeOnKey?: React.KeyboardEvent<HTMLElement>['key'];",
      "}"
     ]
    },
    "props": [
     {
      "uid": 1,
      "name": "closeOnKey",
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "required": false
     },
     {
      "uid": 2,
      "name": "cx",
      "comment": {
       "raw": [
        "CSS class(es) to put on component's root. See {@link https://github.com/JedWatson/classnames#usage} for details"
       ]
      },
      "typeValue": {
       "raw": "null | string | number | boolean | ClassDictionary | ClassArray"
      },
      "typeValueRef": "@epam/uui-core:ClassValue",
      "from": "@epam/uui-core:IHasCX",
      "required": false
     },
     {
      "uid": 3,
      "name": "children",
      "typeValue": {
       "raw": "null | string | number | boolean | React.ReactElement<any, string | React.JSXElementConstructor<any>> | React.ReactFragment | React.ReactPortal"
      },
      "typeValueRef": "@types/react:ReactNode",
      "from": "@epam/uui-core:IHasChildren",
      "required": false
     },
     {
      "uid": 4,
      "name": "onClick",
      "comment": {
       "raw": [
        "Called when component is clicked"
       ]
      },
      "typeValue": {
       "raw": "(e?: any) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IClickable",
      "required": false
     },
     {
      "uid": 5,
      "name": "rawProps",
      "comment": {
       "raw": [
        "Any HTML attributes (native or 'data-') to put on the underlying component"
       ]
      },
      "typeValue": {
       "raw": "React.HTMLAttributes<HTMLDivElement> & Record<`data-${string}`, string>"
      },
      "from": "@epam/uui-core:IHasRawProps",
      "required": false
     },
     {
      "uid": 6,
      "name": "forwardedRef",
      "comment": {
       "raw": [
        "this ref is passed to the underlying component"
       ]
      },
      "typeValue": {
       "raw": "null | (instance: HTMLDivElement | null) => void | React.MutableRefObject<HTMLDivElement | null>"
      },
      "from": "@epam/uui-core:IHasForwardedRef",
      "required": false
     },
     {
      "uid": 7,
      "name": "clickAnalyticsEvent",
      "comment": {
       "raw": [
        "An analytics event to send (via AnalyticsContext) when component is clicked.",
        " See [AnalyticsContext](@link https://uui.epam.com/documents?id=analyticsContext&mode=doc&skin=UUI4_promo&category=contexts)."
       ]
      },
      "typeValue": {
       "raw": "null | { [key: string]: any; name: string; }"
      },
      "from": "@epam/uui-core:IAnalyticableClick",
      "required": false
     },
     {
      "uid": 8,
      "name": "style",
      "typeValue": {
       "raw": "React.CSSProperties"
      },
      "from": "@epam/uui-core:VPanelProps",
      "required": false
     },
     {
      "uid": 9,
      "name": "onClose",
      "comment": {
       "raw": [
        "Call to close the Dropdown body"
       ]
      },
      "typeValue": {
       "raw": "() => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IDropdownBodyProps",
      "required": false
     },
     {
      "uid": 10,
      "name": "togglerWidth",
      "comment": {
       "raw": [
        "The width of the toggler, which can be used to adjust the body width to it"
       ]
      },
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "from": "@epam/uui-core:IDropdownBodyProps",
      "required": false
     },
     {
      "uid": 11,
      "name": "togglerHeight",
      "comment": {
       "raw": [
        "The height of the toggler"
       ]
      },
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "from": "@epam/uui-core:IDropdownBodyProps",
      "required": false
     },
     {
      "uid": 12,
      "name": "scheduleUpdate",
      "comment": {
       "raw": [
        "Call to force recompute dropdown position"
       ]
      },
      "typeValue": {
       "raw": "() => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IDropdownBodyProps",
      "required": false
     },
     {
      "uid": 13,
      "name": "isOpen",
      "comment": {
       "raw": [
        "Indicates that dropdown is open"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:IDropdownBodyProps",
      "required": false
     },
     {
      "uid": 14,
      "name": "arrowProps",
      "comment": {
       "raw": [
        "Props that should be provided to the arrow component"
       ]
      },
      "typeValue": {
       "raw": "PopperArrowProps"
      },
      "from": "@epam/uui-core:IDropdownBodyProps",
      "required": false
     },
     {
      "uid": 15,
      "name": "placement",
      "comment": {
       "raw": [
        "Dropdown position relative to the input. See [Popper Docs](@link https://popper.js.org/)"
       ]
      },
      "typeValue": {
       "raw": "'left' | 'right' | 'auto' | 'auto-start' | 'auto-end' | 'top' | 'bottom' | 'top-start' | 'top-end' | 'bottom-start' | 'bottom-end' | 'right-start' | 'right-end' | 'left-start' | 'left-end'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "left",
        "right",
        "auto",
        "auto-start",
        "auto-end",
        "top",
        "bottom",
        "top-start",
        "top-end",
        "bottom-start",
        "bottom-end",
        "right-start",
        "right-end",
        "left-start",
        "left-end"
       ]
      },
      "from": "@epam/uui-core:IDropdownBodyProps",
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui:IDropdownMenuItemProps": {
   "summary": {
    "module": "@epam/uui",
    "typeName": {
     "name": "IDropdownMenuItemProps",
     "nameFull": "IDropdownMenuItemProps"
    },
    "src": "uui/components/overlays/DropdownMenu.tsx",
    "exported": true
   },
   "details": {
    "kind": 263,
    "typeValue": {
     "raw": "IDropdownMenuItemProps",
     "print": [
      "interface IDropdownMenuItemProps extends IHasIcon, ICanRedirect, IHasCX, IDisableable, IAnalyticableClick, IDropdownToggler {",
      "    isSelected?: boolean;",
      "    isActive?: boolean;",
      "    indent?: boolean;",
      "}"
     ]
    },
    "props": [
     {
      "uid": 1,
      "name": "isSelected",
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "required": false
     },
     {
      "uid": 2,
      "name": "isActive",
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "required": false
     },
     {
      "uid": 3,
      "name": "indent",
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "required": false
     },
     {
      "uid": 4,
      "name": "icon",
      "comment": {
       "raw": [
        "Icon can be a React element (usually an SVG element)"
       ]
      },
      "typeValue": {
       "raw": "Icon"
      },
      "editor": {
       "type": "component"
      },
      "from": "@epam/uui-core:IHasIcon",
      "required": false
     },
     {
      "uid": 5,
      "name": "iconPosition",
      "comment": {
       "raw": [
        "Position of the icon (left of right)"
       ]
      },
      "typeValue": {
       "raw": "'left' | 'right'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "left",
        "right"
       ]
      },
      "from": "@epam/uui-core:IHasIcon",
      "required": false
     },
     {
      "uid": 6,
      "name": "onIconClick",
      "comment": {
       "raw": [
        "Click handler for the icon"
       ]
      },
      "typeValue": {
       "raw": "() => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IHasIcon",
      "required": false
     },
     {
      "uid": 7,
      "name": "link",
      "comment": {
       "raw": [
        "Link object to redirect to for SPA-redirects"
       ]
      },
      "typeValue": {
       "raw": "Link"
      },
      "from": "@epam/uui-core:ICanRedirect",
      "required": false
     },
     {
      "uid": 8,
      "name": "href",
      "comment": {
       "raw": [
        "Href (URL) to redirect to, for non-SPA redirects"
       ]
      },
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "from": "@epam/uui-core:ICanRedirect",
      "required": false
     },
     {
      "uid": 9,
      "name": "isLinkActive",
      "comment": {
       "raw": [
        "Highlights component to show that link is active (browser is displaying the page to which link is pointing)"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:ICanRedirect",
      "required": false
     },
     {
      "uid": 10,
      "name": "target",
      "comment": {
       "raw": [
        "Controls where the link should be opened"
       ]
      },
      "typeValue": {
       "raw": "'_blank'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "_blank"
       ]
      },
      "from": "@epam/uui-core:ICanRedirect",
      "required": false
     },
     {
      "uid": 11,
      "name": "cx",
      "comment": {
       "raw": [
        "CSS class(es) to put on component's root. See {@link https://github.com/JedWatson/classnames#usage} for details"
       ]
      },
      "typeValue": {
       "raw": "null | string | number | boolean | ClassDictionary | ClassArray"
      },
      "typeValueRef": "@epam/uui-core:ClassValue",
      "from": "@epam/uui-core:IHasCX",
      "required": false
     },
     {
      "uid": 12,
      "name": "isDisabled",
      "comment": {
       "raw": [
        "Disable editing, and visually de-emphasize value of the component"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:IDisableable",
      "required": false
     },
     {
      "uid": 13,
      "name": "clickAnalyticsEvent",
      "comment": {
       "raw": [
        "An analytics event to send (via AnalyticsContext) when component is clicked.",
        " See [AnalyticsContext](@link https://uui.epam.com/documents?id=analyticsContext&mode=doc&skin=UUI4_promo&category=contexts)."
       ]
      },
      "typeValue": {
       "raw": "null | { [key: string]: any; name: string; }"
      },
      "from": "@epam/uui-core:IAnalyticableClick",
      "required": false
     },
     {
      "uid": 14,
      "name": "isOpen",
      "comment": {
       "raw": [
        "When isDropdown=true, indicate that dropdown is open with chevron icon"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:IDropdownToggler",
      "required": false
     },
     {
      "uid": 15,
      "name": "isDropdown",
      "comment": {
       "raw": [
        "Shows chevron icon, enabling component to act as dropdown toggler"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:IDropdownToggler",
      "required": false
     },
     {
      "uid": 16,
      "name": "toggleDropdownOpening",
      "comment": {
       "raw": [
        "Called when associated dropdown should open or close"
       ]
      },
      "typeValue": {
       "raw": "(value: boolean) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IDropdownToggler",
      "required": false
     },
     {
      "uid": 17,
      "name": "isInteractedOutside",
      "comment": {
       "raw": [
        "Called when component is interacted outside, to close the dropdown"
       ]
      },
      "typeValue": {
       "raw": "(event: Event) => boolean"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IDropdownToggler",
      "required": false
     },
     {
      "uid": 18,
      "name": "ref",
      "comment": {
       "raw": [
        "Component's ref"
       ]
      },
      "typeValue": {
       "raw": "null | (instance: any) => void | React.RefObject<any>"
      },
      "from": "@epam/uui-core:IDropdownToggler",
      "required": false
     },
     {
      "uid": 19,
      "name": "caption",
      "comment": {
       "raw": [
        "Caption. Can be a string, or React.Elements. Certain components supports minimal markup (<b>,<i>,<a>) in captions."
       ]
      },
      "typeValue": {
       "raw": "any"
      },
      "from": "@epam/uui-core:IHasCaption",
      "required": false
     },
     {
      "uid": 20,
      "name": "onClick",
      "comment": {
       "raw": [
        "Called when component is clicked"
       ]
      },
      "typeValue": {
       "raw": "(e?: any) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IClickable",
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui:IHasEditMode": {
   "summary": {
    "module": "@epam/uui",
    "typeName": {
     "name": "IHasEditMode",
     "nameFull": "IHasEditMode"
    },
    "src": "uui/components/types.ts",
    "comment": {
     "raw": [
      "Component can adjust visuals for different contexts: forms, tables cells, on in WYSIWYG UX"
     ]
    },
    "exported": true
   },
   "details": {
    "kind": 263,
    "typeValue": {
     "raw": "IHasEditMode",
     "print": [
      "/** Component can adjust visuals for different contexts: forms, tables cells, on in WYSIWYG UX */",
      "interface IHasEditMode {",
      "    /**",
      "     * Visual mode for component:",
      "     * - form: default visuals, to use in forms.",
      "     * - cell: adjust to embed as table cell editor: no borders, no focus (it is applied by DataCell)",
      "     * - inline: adjust for WYSIWYG UX. Backgrounds removed. Borders appear only on hover.",
      "     */",
      "    mode?: 'form' | 'cell' | 'inline';",
      "}"
     ]
    },
    "props": [
     {
      "uid": 1,
      "name": "mode",
      "comment": {
       "raw": [
        "Visual mode for component:",
        " - form: default visuals, to use in forms.",
        " - cell: adjust to embed as table cell editor: no borders, no focus (it is applied by DataCell)",
        " - inline: adjust for WYSIWYG UX. Backgrounds removed. Borders appear only on hover."
       ]
      },
      "typeValue": {
       "raw": "'inline' | 'form' | 'cell'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "inline",
        "form",
        "cell"
       ]
      },
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui:IndeterminateBarMods": {
   "summary": {
    "module": "@epam/uui",
    "typeName": {
     "name": "IndeterminateBarMods",
     "nameFull": "IndeterminateBarMods"
    },
    "src": "uui/components/widgets/IndeterminateBar.tsx",
    "exported": true
   },
   "details": {
    "kind": 263,
    "typeValue": {
     "raw": "IndeterminateBarMods",
     "print": [
      "interface IndeterminateBarMods extends IHasCX {",
      "    size?: '12' | '18' | '24';",
      "}"
     ]
    },
    "props": [
     {
      "uid": 1,
      "name": "size",
      "typeValue": {
       "raw": "'12' | '18' | '24'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "12",
        "18",
        "24"
       ]
      },
      "required": false
     },
     {
      "uid": 2,
      "name": "cx",
      "comment": {
       "raw": [
        "CSS class(es) to put on component's root. See {@link https://github.com/JedWatson/classnames#usage} for details"
       ]
      },
      "typeValue": {
       "raw": "null | string | number | boolean | ClassDictionary | ClassArray"
      },
      "typeValueRef": "@epam/uui-core:ClassValue",
      "from": "@epam/uui-core:IHasCX",
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui:InputType": {
   "summary": {
    "module": "@epam/uui",
    "typeName": {
     "name": "InputType",
     "nameFull": "InputType"
    },
    "src": "uui/components/datePickers/RangeDatePicker.tsx",
    "exported": true
   },
   "details": {
    "kind": 264,
    "typeValue": {
     "raw": "'from' | 'to'",
     "print": [
      "type InputType = 'from' | 'to';"
     ]
    }
   }
  },
  "@epam/uui:ITextPlaceholderProps": {
   "summary": {
    "module": "@epam/uui",
    "typeName": {
     "name": "ITextPlaceholderProps",
     "nameFull": "ITextPlaceholderProps"
    },
    "src": "uui/components/typography/TextPlaceholder.tsx",
    "exported": true
   },
   "details": {
    "kind": 263,
    "typeValue": {
     "raw": "ITextPlaceholderProps",
     "print": [
      "interface ITextPlaceholderProps extends IHasRawProps<React.HTMLAttributes<HTMLDivElement>>, IHasCX {",
      "    wordsCount?: number;",
      "    isNotAnimated?: boolean;",
      "}"
     ]
    },
    "props": [
     {
      "uid": 1,
      "name": "wordsCount",
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "required": false
     },
     {
      "uid": 2,
      "name": "isNotAnimated",
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "required": false
     },
     {
      "uid": 3,
      "name": "rawProps",
      "comment": {
       "raw": [
        "Any HTML attributes (native or 'data-') to put on the underlying component"
       ]
      },
      "typeValue": {
       "raw": "React.HTMLAttributes<HTMLDivElement> & Record<`data-${string}`, string>"
      },
      "from": "@epam/uui-core:IHasRawProps",
      "required": false
     },
     {
      "uid": 4,
      "name": "cx",
      "comment": {
       "raw": [
        "CSS class(es) to put on component's root. See {@link https://github.com/JedWatson/classnames#usage} for details"
       ]
      },
      "typeValue": {
       "raw": "null | string | number | boolean | ClassDictionary | ClassArray"
      },
      "typeValueRef": "@epam/uui-core:ClassValue",
      "from": "@epam/uui-core:IHasCX",
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui:LabeledInputMods": {
   "summary": {
    "module": "@epam/uui",
    "typeName": {
     "name": "LabeledInputMods",
     "nameFull": "LabeledInputMods"
    },
    "src": "uui/components/layout/LabeledInput.tsx",
    "exported": true
   },
   "details": {
    "kind": 263,
    "typeValue": {
     "raw": "LabeledInputMods",
     "print": [
      "interface LabeledInputMods extends types.SizeMod {",
      "}"
     ]
    },
    "props": [
     {
      "uid": 1,
      "name": "size",
      "typeValue": {
       "raw": "'36' | '48' | '24' | '30' | '42' | 'none'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "24",
        "30",
        "36",
        "42",
        "48",
        "none"
       ]
      },
      "from": "@epam/uui:SizeMod",
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui:LabeledInputProps": {
   "summary": {
    "module": "@epam/uui",
    "typeName": {
     "name": "LabeledInputProps",
     "nameFull": "LabeledInputProps"
    },
    "src": "uui/components/layout/LabeledInput.tsx",
    "exported": true
   },
   "details": {
    "kind": 264,
    "typeValue": {
     "raw": "LabeledInputProps",
     "print": [
      "type LabeledInputProps = uuiComponents.LabeledInputProps & LabeledInputMods;"
     ]
    },
    "props": [
     {
      "uid": 1,
      "name": "Tooltip",
      "comment": {
       "raw": [
        "Overrides the default Tooltip component to use for info tooltip"
       ]
      },
      "typeValue": {
       "raw": "React.ComponentClass<TooltipProps, any> | React.FunctionComponent<TooltipProps>"
      },
      "from": "@epam/uui-components:LabeledInputProps",
      "required": false
     },
     {
      "uid": 2,
      "name": "infoIcon",
      "comment": {
       "raw": [
        "Overrides the default info icon"
       ]
      },
      "typeValue": {
       "raw": "Icon"
      },
      "editor": {
       "type": "component"
      },
      "from": "@epam/uui-components:LabeledInputProps",
      "required": false
     },
     {
      "uid": 3,
      "name": "labelPosition",
      "comment": {
       "raw": [
        "Position of the label, relative to the wrapped component (top of left)"
       ]
      },
      "typeValue": {
       "raw": "'left' | 'top'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "left",
        "top"
       ]
      },
      "from": "@epam/uui-core:LabeledInputCoreProps",
      "required": false
     },
     {
      "uid": 4,
      "name": "info",
      "comment": {
       "raw": [
        "Info hint text to show in tooltip"
       ]
      },
      "typeValue": {
       "raw": "null | string | number | boolean | React.ReactElement<any, string | React.JSXElementConstructor<any>> | React.ReactFragment | React.ReactPortal"
      },
      "typeValueRef": "@types/react:ReactNode",
      "from": "@epam/uui-core:LabeledInputCoreProps",
      "required": false
     },
     {
      "uid": 5,
      "name": "isOptional",
      "comment": {
       "raw": [
        "Marks related field as optional"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:LabeledInputCoreProps",
      "required": false
     },
     {
      "uid": 6,
      "name": "htmlFor",
      "comment": {
       "raw": [
        "HTML 'for' tag to bind the label to a component.",
        " Can be used when component can't be wrapped by the LabeledInput, e.g. when form is layed out as table with labels and inputs placed into different columns"
       ]
      },
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "from": "@epam/uui-core:LabeledInputCoreProps",
      "required": false
     },
     {
      "uid": 7,
      "name": "value",
      "comment": {
       "raw": [
        "A value from LabeledInput children"
       ]
      },
      "typeValue": {
       "raw": "any"
      },
      "from": "@epam/uui-core:LabeledInputCoreProps",
      "required": false
     },
     {
      "uid": 8,
      "name": "maxLength",
      "comment": {
       "raw": [
        "Maximum text length, in characters"
       ]
      },
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "from": "@epam/uui-core:LabeledInputCoreProps",
      "required": false
     },
     {
      "uid": 9,
      "name": "charCounter",
      "comment": {
       "raw": [
        "Showing current text length, in characters and maxLength"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:LabeledInputCoreProps",
      "required": false
     },
     {
      "uid": 10,
      "name": "footnote",
      "comment": {
       "raw": [
        "Additional info positioned at the bottom of LabeledInput"
       ]
      },
      "typeValue": {
       "raw": "null | string | number | boolean | React.ReactElement<any, string | React.JSXElementConstructor<any>> | React.ReactFragment | React.ReactPortal"
      },
      "typeValueRef": "@types/react:ReactNode",
      "from": "@epam/uui-core:LabeledInputCoreProps",
      "required": false
     },
     {
      "uid": 11,
      "name": "sidenote",
      "comment": {
       "raw": [
        "Additional info positioned to the right side of label"
       ]
      },
      "typeValue": {
       "raw": "null | string | number | boolean | React.ReactElement<any, string | React.JSXElementConstructor<any>> | React.ReactFragment | React.ReactPortal"
      },
      "typeValueRef": "@types/react:ReactNode",
      "from": "@epam/uui-core:LabeledInputCoreProps",
      "required": false
     },
     {
      "uid": 12,
      "name": "isInvalid",
      "comment": {
       "raw": [
        "True if component contains invalid input"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:ICanBeInvalid",
      "required": false
     },
     {
      "uid": 13,
      "name": "validationMessage",
      "comment": {
       "raw": [
        "Message describing why the value is invalid"
       ]
      },
      "typeValue": {
       "raw": "null | string | number | boolean | React.ReactElement<any, string | React.JSXElementConstructor<any>> | React.ReactFragment | React.ReactPortal"
      },
      "typeValueRef": "@types/react:ReactNode",
      "from": "@epam/uui-core:ICanBeInvalid",
      "required": false
     },
     {
      "uid": 14,
      "name": "validationProps",
      "comment": {
       "raw": [
        "If T is a complex value (object or array), this property contains validation states of inner items"
       ]
      },
      "typeValue": {
       "raw": "{ [key: string]: ICanBeInvalid; }"
      },
      "from": "@epam/uui-core:ICanBeInvalid",
      "required": false
     },
     {
      "uid": 15,
      "name": "cx",
      "comment": {
       "raw": [
        "CSS class(es) to put on component's root. See {@link https://github.com/JedWatson/classnames#usage} for details"
       ]
      },
      "typeValue": {
       "raw": "null | string | number | boolean | ClassDictionary | ClassArray"
      },
      "typeValueRef": "@epam/uui-core:ClassValue",
      "from": "@epam/uui-core:IHasCX",
      "required": false
     },
     {
      "uid": 16,
      "name": "label",
      "comment": {
       "raw": [
        "Label. Can be a string, or React.Elements. Certain components supports minimal markup (<b>,<i>,<a>) in captions."
       ]
      },
      "typeValue": {
       "raw": "any"
      },
      "from": "@epam/uui-core:IHasLabel",
      "required": false
     },
     {
      "uid": 17,
      "name": "children",
      "typeValue": {
       "raw": "null | string | number | boolean | React.ReactElement<any, string | React.JSXElementConstructor<any>> | React.ReactFragment | React.ReactPortal"
      },
      "typeValueRef": "@types/react:ReactNode",
      "from": "@epam/uui-core:IHasChildren",
      "required": false
     },
     {
      "uid": 18,
      "name": "isRequired",
      "comment": {
       "raw": [
        "Marks that component's value is required and shouldn't be empty"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:ICanBeRequired",
      "required": false
     },
     {
      "uid": 19,
      "name": "rawProps",
      "comment": {
       "raw": [
        "Any HTML attributes (native or 'data-') to put on the underlying component"
       ]
      },
      "typeValue": {
       "raw": "React.HTMLAttributes<HTMLDivElement> & Record<`data-${string}`, string>"
      },
      "from": "@epam/uui-core:IHasRawProps",
      "required": false
     },
     {
      "uid": 20,
      "name": "forwardedRef",
      "comment": {
       "raw": [
        "this ref is passed to the underlying component"
       ]
      },
      "typeValue": {
       "raw": "null | (instance: HTMLDivElement | null) => void | React.MutableRefObject<HTMLDivElement | null>"
      },
      "from": "@epam/uui-core:IHasForwardedRef",
      "required": false
     },
     {
      "uid": 21,
      "name": "size",
      "typeValue": {
       "raw": "'36' | '48' | '24' | '30' | '42' | 'none'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "24",
        "30",
        "36",
        "42",
        "48",
        "none"
       ]
      },
      "from": "@epam/uui:SizeMod",
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui:LinkButtonColorType": {
   "summary": {
    "module": "@epam/uui",
    "typeName": {
     "name": "LinkButtonColorType",
     "nameFull": "LinkButtonColorType"
    },
    "src": "uui/components/buttons/LinkButton.tsx",
    "exported": true
   },
   "details": {
    "kind": 264,
    "typeValue": {
     "raw": "'primary' | 'secondary' | 'contrast'",
     "print": [
      "type LinkButtonColorType = 'primary' | 'secondary' | 'contrast';"
     ]
    }
   }
  },
  "@epam/uui:LinkButtonMods": {
   "summary": {
    "module": "@epam/uui",
    "typeName": {
     "name": "LinkButtonMods",
     "nameFull": "LinkButtonMods"
    },
    "src": "uui/components/buttons/LinkButton.tsx",
    "exported": true
   },
   "details": {
    "kind": 263,
    "typeValue": {
     "raw": "LinkButtonMods",
     "print": [
      "interface LinkButtonMods {",
      "    /**",
      "     * @default '36'",
      "     */",
      "    size?: types.ControlSize | '42';",
      "    /**",
      "     * @default 'primary'",
      "     */",
      "    color?: LinkButtonColorType;",
      "}"
     ]
    },
    "props": [
     {
      "uid": 1,
      "name": "size",
      "comment": {
       "raw": [
        "@default '36'"
       ],
       "tags": {
        "@default": "36"
       }
      },
      "typeValue": {
       "raw": "'36' | '48' | '24' | '30' | '42' | 'none'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "24",
        "30",
        "36",
        "42",
        "48",
        "none"
       ]
      },
      "required": false
     },
     {
      "uid": 2,
      "name": "color",
      "comment": {
       "raw": [
        "@default 'primary'"
       ],
       "tags": {
        "@default": "primary"
       }
      },
      "typeValue": {
       "raw": "'primary' | 'secondary' | 'contrast'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "primary",
        "secondary",
        "contrast"
       ]
      },
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui:LinkButtonProps": {
   "summary": {
    "module": "@epam/uui",
    "typeName": {
     "name": "LinkButtonProps",
     "nameFull": "LinkButtonProps"
    },
    "src": "uui/components/buttons/LinkButton.tsx",
    "exported": true
   },
   "details": {
    "kind": 264,
    "typeValue": {
     "raw": "LinkButtonProps",
     "print": [
      "type LinkButtonProps = LinkButtonMods & ButtonProps;"
     ]
    },
    "props": [
     {
      "uid": 1,
      "name": "size",
      "comment": {
       "raw": [
        "@default '36'"
       ],
       "tags": {
        "@default": "36"
       }
      },
      "typeValue": {
       "raw": "'36' | '48' | '24' | '30' | '42' | 'none'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "24",
        "30",
        "36",
        "42",
        "48",
        "none"
       ]
      },
      "from": "@epam/uui:LinkButtonMods",
      "required": false
     },
     {
      "uid": 2,
      "name": "color",
      "comment": {
       "raw": [
        "@default 'primary'"
       ],
       "tags": {
        "@default": "primary"
       }
      },
      "typeValue": {
       "raw": "'primary' | 'secondary' | 'contrast'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "primary",
        "secondary",
        "contrast"
       ]
      },
      "from": "@epam/uui:LinkButtonMods",
      "required": false
     },
     {
      "uid": 3,
      "name": "clearIcon",
      "comment": {
       "raw": [
        "Icon for clear value button (usually cross)"
       ]
      },
      "typeValue": {
       "raw": "Icon"
      },
      "editor": {
       "type": "component"
      },
      "from": "@epam/uui-components:ButtonProps",
      "required": false
     },
     {
      "uid": 4,
      "name": "captionCX",
      "comment": {
       "raw": [
        "CSS classes to put on the caption"
       ]
      },
      "typeValue": {
       "raw": "null | string | number | boolean | ClassDictionary | ClassArray"
      },
      "typeValueRef": "@epam/uui-core:ClassValue",
      "from": "@epam/uui-components:ButtonProps",
      "required": false
     },
     {
      "uid": 5,
      "name": "countIndicator",
      "comment": {
       "raw": [
        "CountIndicator component"
       ]
      },
      "typeValue": {
       "raw": "React.ComponentClass<IHasCaption, any> | React.FunctionComponent<IHasCaption>"
      },
      "from": "@epam/uui-components:ButtonProps",
      "required": false
     },
     {
      "uid": 6,
      "name": "dropdownIcon",
      "comment": {
       "raw": [
        "Icon for drop-down toggler"
       ]
      },
      "typeValue": {
       "raw": "Icon"
      },
      "editor": {
       "type": "component"
      },
      "from": "@epam/uui-core:ButtonCoreProps",
      "required": false
     },
     {
      "uid": 7,
      "name": "dropdownIconPosition",
      "comment": {
       "raw": [
        "Position of the dropdown icon ('left' of 'right')"
       ]
      },
      "typeValue": {
       "raw": "'left' | 'right'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "left",
        "right"
       ]
      },
      "from": "@epam/uui-core:ButtonCoreProps",
      "required": false
     },
     {
      "uid": 8,
      "name": "count",
      "typeValue": {
       "raw": "null | string | number | boolean | React.ReactElement<any, string | React.JSXElementConstructor<any>> | React.ReactFragment | React.ReactPortal"
      },
      "typeValueRef": "@types/react:ReactNode",
      "from": "@epam/uui-core:ButtonCoreProps",
      "required": false
     },
     {
      "uid": 9,
      "name": "cx",
      "comment": {
       "raw": [
        "CSS class(es) to put on component's root. See {@link https://github.com/JedWatson/classnames#usage} for details"
       ]
      },
      "typeValue": {
       "raw": "null | string | number | boolean | ClassDictionary | ClassArray"
      },
      "typeValueRef": "@epam/uui-core:ClassValue",
      "from": "@epam/uui-core:IHasCX",
      "required": false
     },
     {
      "uid": 10,
      "name": "onClick",
      "comment": {
       "raw": [
        "Called when component is clicked"
       ]
      },
      "typeValue": {
       "raw": "(e?: any) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IClickable",
      "required": false
     },
     {
      "uid": 11,
      "name": "link",
      "comment": {
       "raw": [
        "Link object to redirect to for SPA-redirects"
       ]
      },
      "typeValue": {
       "raw": "Link"
      },
      "from": "@epam/uui-core:ICanRedirect",
      "required": false
     },
     {
      "uid": 12,
      "name": "href",
      "comment": {
       "raw": [
        "Href (URL) to redirect to, for non-SPA redirects"
       ]
      },
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "from": "@epam/uui-core:ICanRedirect",
      "required": false
     },
     {
      "uid": 13,
      "name": "isLinkActive",
      "comment": {
       "raw": [
        "Highlights component to show that link is active (browser is displaying the page to which link is pointing)"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:ICanRedirect",
      "required": false
     },
     {
      "uid": 14,
      "name": "target",
      "comment": {
       "raw": [
        "Controls where the link should be opened"
       ]
      },
      "typeValue": {
       "raw": "'_blank'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "_blank"
       ]
      },
      "from": "@epam/uui-core:ICanRedirect",
      "required": false
     },
     {
      "uid": 15,
      "name": "isDisabled",
      "comment": {
       "raw": [
        "Disable editing, and visually de-emphasize value of the component"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:IDisableable",
      "required": false
     },
     {
      "uid": 16,
      "name": "icon",
      "comment": {
       "raw": [
        "Icon can be a React element (usually an SVG element)"
       ]
      },
      "typeValue": {
       "raw": "Icon"
      },
      "editor": {
       "type": "component"
      },
      "from": "@epam/uui-core:IHasIcon",
      "required": false
     },
     {
      "uid": 17,
      "name": "iconPosition",
      "comment": {
       "raw": [
        "Position of the icon (left of right)"
       ]
      },
      "typeValue": {
       "raw": "'left' | 'right'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "left",
        "right"
       ]
      },
      "from": "@epam/uui-core:IHasIcon",
      "required": false
     },
     {
      "uid": 18,
      "name": "onIconClick",
      "comment": {
       "raw": [
        "Click handler for the icon"
       ]
      },
      "typeValue": {
       "raw": "() => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IHasIcon",
      "required": false
     },
     {
      "uid": 19,
      "name": "clickAnalyticsEvent",
      "comment": {
       "raw": [
        "An analytics event to send (via AnalyticsContext) when component is clicked.",
        " See [AnalyticsContext](@link https://uui.epam.com/documents?id=analyticsContext&mode=doc&skin=UUI4_promo&category=contexts)."
       ]
      },
      "typeValue": {
       "raw": "null | { [key: string]: any; name: string; }"
      },
      "from": "@epam/uui-core:IAnalyticableClick",
      "required": false
     },
     {
      "uid": 20,
      "name": "tabIndex",
      "comment": {
       "raw": [
        "Controls the order of keyboard navigation between components"
       ]
      },
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "from": "@epam/uui-core:IHasTabIndex",
      "required": false
     },
     {
      "uid": 21,
      "name": "rawProps",
      "comment": {
       "raw": [
        "Any HTML attributes (native or 'data-') to put on the underlying component"
       ]
      },
      "typeValue": {
       "raw": "React.ButtonHTMLAttributes<HTMLButtonElement> & Record<`data-${string}`, string>"
      },
      "from": "@epam/uui-core:IHasRawProps",
      "required": false
     },
     {
      "uid": 22,
      "name": "caption",
      "comment": {
       "raw": [
        "Caption. Can be a string, or React.Elements. Certain components supports minimal markup (<b>,<i>,<a>) in captions."
       ]
      },
      "typeValue": {
       "raw": "any"
      },
      "from": "@epam/uui-core:IHasCaption",
      "required": false
     },
     {
      "uid": 23,
      "name": "onClear",
      "comment": {
       "raw": [
        "Call to clear toggler value"
       ]
      },
      "typeValue": {
       "raw": "(e?: any) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IBasicPickerToggler",
      "required": false
     },
     {
      "uid": 24,
      "name": "isOpen",
      "comment": {
       "raw": [
        "When isDropdown=true, indicate that dropdown is open with chevron icon"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:IDropdownToggler",
      "required": false
     },
     {
      "uid": 25,
      "name": "isDropdown",
      "comment": {
       "raw": [
        "Shows chevron icon, enabling component to act as dropdown toggler"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:IDropdownToggler",
      "required": false
     },
     {
      "uid": 26,
      "name": "toggleDropdownOpening",
      "comment": {
       "raw": [
        "Called when associated dropdown should open or close"
       ]
      },
      "typeValue": {
       "raw": "(value: boolean) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IDropdownToggler",
      "required": false
     },
     {
      "uid": 27,
      "name": "isInteractedOutside",
      "comment": {
       "raw": [
        "Called when component is interacted outside, to close the dropdown"
       ]
      },
      "typeValue": {
       "raw": "(event: Event) => boolean"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IDropdownToggler",
      "required": false
     },
     {
      "uid": 28,
      "name": "ref",
      "comment": {
       "raw": [
        "Component's ref"
       ]
      },
      "typeValue": {
       "raw": "null | (instance: any) => void | React.RefObject<any>"
      },
      "from": "@epam/uui-core:IDropdownToggler",
      "required": false
     },
     {
      "uid": 29,
      "name": "forwardedRef",
      "comment": {
       "raw": [
        "this ref is passed to the underlying component"
       ]
      },
      "typeValue": {
       "raw": "null | (instance: HTMLButtonElement | HTMLAnchorElement | null) => void | React.MutableRefObject<HTMLButtonElement | HTMLAnchorElement | null>"
      },
      "from": "@epam/uui-core:IHasForwardedRef",
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui:MainMenuAvatarProps": {
   "summary": {
    "module": "@epam/uui",
    "typeName": {
     "name": "MainMenuAvatarProps",
     "nameFull": "MainMenuAvatarProps"
    },
    "src": "uui/components/navigation/MainMenu/MainMenuAvatar.tsx",
    "exported": true
   },
   "details": {
    "kind": 263,
    "typeValue": {
     "raw": "MainMenuAvatarProps",
     "print": [
      "interface MainMenuAvatarProps extends IAdaptiveItem, IDropdownToggler, IHasCX {",
      "    avatarUrl?: string;",
      "    icon?: Icon;",
      "}"
     ]
    },
    "props": [
     {
      "uid": 1,
      "name": "avatarUrl",
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "required": false
     },
     {
      "uid": 2,
      "name": "icon",
      "typeValue": {
       "raw": "Icon"
      },
      "editor": {
       "type": "component"
      },
      "required": false
     },
     {
      "uid": 3,
      "name": "estimatedWidth",
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "from": "@epam/uui-core:IAdaptiveItem",
      "required": false
     },
     {
      "uid": 4,
      "name": "priority",
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "from": "@epam/uui-core:IAdaptiveItem",
      "required": false
     },
     {
      "uid": 5,
      "name": "showInBurgerMenu",
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:IAdaptiveItem",
      "required": false
     },
     {
      "uid": 6,
      "name": "collapseToMore",
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:IAdaptiveItem",
      "required": false
     },
     {
      "uid": 7,
      "name": "collapsedContainer",
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:IAdaptiveItem",
      "required": false
     },
     {
      "uid": 8,
      "name": "isOpen",
      "comment": {
       "raw": [
        "When isDropdown=true, indicate that dropdown is open with chevron icon"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:IDropdownToggler",
      "required": false
     },
     {
      "uid": 9,
      "name": "isDropdown",
      "comment": {
       "raw": [
        "Shows chevron icon, enabling component to act as dropdown toggler"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:IDropdownToggler",
      "required": false
     },
     {
      "uid": 10,
      "name": "toggleDropdownOpening",
      "comment": {
       "raw": [
        "Called when associated dropdown should open or close"
       ]
      },
      "typeValue": {
       "raw": "(value: boolean) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IDropdownToggler",
      "required": false
     },
     {
      "uid": 11,
      "name": "isInteractedOutside",
      "comment": {
       "raw": [
        "Called when component is interacted outside, to close the dropdown"
       ]
      },
      "typeValue": {
       "raw": "(event: Event) => boolean"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IDropdownToggler",
      "required": false
     },
     {
      "uid": 12,
      "name": "ref",
      "comment": {
       "raw": [
        "Component's ref"
       ]
      },
      "typeValue": {
       "raw": "null | (instance: any) => void | React.RefObject<any>"
      },
      "from": "@epam/uui-core:IDropdownToggler",
      "required": false
     },
     {
      "uid": 13,
      "name": "isDisabled",
      "comment": {
       "raw": [
        "Disables component"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:IDropdownToggler",
      "required": false
     },
     {
      "uid": 14,
      "name": "caption",
      "comment": {
       "raw": [
        "Caption. Can be a string, or React.Elements. Certain components supports minimal markup (<b>,<i>,<a>) in captions."
       ]
      },
      "typeValue": {
       "raw": "any"
      },
      "from": "@epam/uui-core:IHasCaption",
      "required": false
     },
     {
      "uid": 15,
      "name": "onClick",
      "comment": {
       "raw": [
        "Called when component is clicked"
       ]
      },
      "typeValue": {
       "raw": "(e?: any) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IClickable",
      "required": false
     },
     {
      "uid": 16,
      "name": "cx",
      "comment": {
       "raw": [
        "CSS class(es) to put on component's root. See {@link https://github.com/JedWatson/classnames#usage} for details"
       ]
      },
      "typeValue": {
       "raw": "null | string | number | boolean | ClassDictionary | ClassArray"
      },
      "typeValueRef": "@epam/uui-core:ClassValue",
      "from": "@epam/uui-core:IHasCX",
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui:MainMenuButtonMods": {
   "summary": {
    "module": "@epam/uui",
    "typeName": {
     "name": "MainMenuButtonMods",
     "nameFull": "MainMenuButtonMods"
    },
    "src": "uui/components/navigation/MainMenu/MainMenuButton.tsx",
    "exported": true
   },
   "details": {
    "kind": 263,
    "typeValue": {
     "raw": "MainMenuButtonMods",
     "print": [
      "interface MainMenuButtonMods {",
      "    type?: 'primary' | 'secondary';",
      "}"
     ]
    },
    "props": [
     {
      "uid": 1,
      "name": "type",
      "typeValue": {
       "raw": "'primary' | 'secondary'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "primary",
        "secondary"
       ]
      },
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui:MainMenuIconProps": {
   "summary": {
    "module": "@epam/uui",
    "typeName": {
     "name": "MainMenuIconProps",
     "nameFull": "MainMenuIconProps"
    },
    "src": "uui/components/navigation/MainMenu/MainMenuIcon.tsx",
    "exported": true
   },
   "details": {
    "kind": 263,
    "typeValue": {
     "raw": "MainMenuIconProps",
     "print": [
      "interface MainMenuIconProps extends ButtonProps, IAdaptiveItem {",
      "    icon: Icon;",
      "}"
     ]
    },
    "props": [
     {
      "uid": 1,
      "name": "icon",
      "typeValue": {
       "raw": "Icon"
      },
      "typeValueRef": "@epam/uui-core:Icon",
      "editor": {
       "type": "component"
      },
      "required": true
     },
     {
      "uid": 2,
      "name": "clearIcon",
      "comment": {
       "raw": [
        "Icon for clear value button (usually cross)"
       ]
      },
      "typeValue": {
       "raw": "Icon"
      },
      "editor": {
       "type": "component"
      },
      "from": "@epam/uui-components:ButtonProps",
      "required": false
     },
     {
      "uid": 3,
      "name": "captionCX",
      "comment": {
       "raw": [
        "CSS classes to put on the caption"
       ]
      },
      "typeValue": {
       "raw": "null | string | number | boolean | ClassDictionary | ClassArray"
      },
      "typeValueRef": "@epam/uui-core:ClassValue",
      "from": "@epam/uui-components:ButtonProps",
      "required": false
     },
     {
      "uid": 4,
      "name": "countIndicator",
      "comment": {
       "raw": [
        "CountIndicator component"
       ]
      },
      "typeValue": {
       "raw": "React.ComponentClass<IHasCaption, any> | React.FunctionComponent<IHasCaption>"
      },
      "from": "@epam/uui-components:ButtonProps",
      "required": false
     },
     {
      "uid": 5,
      "name": "dropdownIcon",
      "comment": {
       "raw": [
        "Icon for drop-down toggler"
       ]
      },
      "typeValue": {
       "raw": "Icon"
      },
      "editor": {
       "type": "component"
      },
      "from": "@epam/uui-core:ButtonCoreProps",
      "required": false
     },
     {
      "uid": 6,
      "name": "dropdownIconPosition",
      "comment": {
       "raw": [
        "Position of the dropdown icon ('left' of 'right')"
       ]
      },
      "typeValue": {
       "raw": "'left' | 'right'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "left",
        "right"
       ]
      },
      "from": "@epam/uui-core:ButtonCoreProps",
      "required": false
     },
     {
      "uid": 7,
      "name": "count",
      "typeValue": {
       "raw": "null | string | number | boolean | React.ReactElement<any, string | React.JSXElementConstructor<any>> | React.ReactFragment | React.ReactPortal"
      },
      "typeValueRef": "@types/react:ReactNode",
      "from": "@epam/uui-core:ButtonCoreProps",
      "required": false
     },
     {
      "uid": 8,
      "name": "cx",
      "comment": {
       "raw": [
        "CSS class(es) to put on component's root. See {@link https://github.com/JedWatson/classnames#usage} for details"
       ]
      },
      "typeValue": {
       "raw": "null | string | number | boolean | ClassDictionary | ClassArray"
      },
      "typeValueRef": "@epam/uui-core:ClassValue",
      "from": "@epam/uui-core:IHasCX",
      "required": false
     },
     {
      "uid": 9,
      "name": "onClick",
      "comment": {
       "raw": [
        "Called when component is clicked"
       ]
      },
      "typeValue": {
       "raw": "(e?: any) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IClickable",
      "required": false
     },
     {
      "uid": 10,
      "name": "link",
      "comment": {
       "raw": [
        "Link object to redirect to for SPA-redirects"
       ]
      },
      "typeValue": {
       "raw": "Link"
      },
      "from": "@epam/uui-core:ICanRedirect",
      "required": false
     },
     {
      "uid": 11,
      "name": "href",
      "comment": {
       "raw": [
        "Href (URL) to redirect to, for non-SPA redirects"
       ]
      },
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "from": "@epam/uui-core:ICanRedirect",
      "required": false
     },
     {
      "uid": 12,
      "name": "isLinkActive",
      "comment": {
       "raw": [
        "Highlights component to show that link is active (browser is displaying the page to which link is pointing)"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:ICanRedirect",
      "required": false
     },
     {
      "uid": 13,
      "name": "target",
      "comment": {
       "raw": [
        "Controls where the link should be opened"
       ]
      },
      "typeValue": {
       "raw": "'_blank'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "_blank"
       ]
      },
      "from": "@epam/uui-core:ICanRedirect",
      "required": false
     },
     {
      "uid": 14,
      "name": "isDisabled",
      "comment": {
       "raw": [
        "Disable editing, and visually de-emphasize value of the component"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:IDisableable",
      "required": false
     },
     {
      "uid": 15,
      "name": "iconPosition",
      "comment": {
       "raw": [
        "Position of the icon (left of right)"
       ]
      },
      "typeValue": {
       "raw": "'left' | 'right'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "left",
        "right"
       ]
      },
      "from": "@epam/uui-core:IHasIcon",
      "required": false
     },
     {
      "uid": 16,
      "name": "onIconClick",
      "comment": {
       "raw": [
        "Click handler for the icon"
       ]
      },
      "typeValue": {
       "raw": "() => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IHasIcon",
      "required": false
     },
     {
      "uid": 17,
      "name": "clickAnalyticsEvent",
      "comment": {
       "raw": [
        "An analytics event to send (via AnalyticsContext) when component is clicked.",
        " See [AnalyticsContext](@link https://uui.epam.com/documents?id=analyticsContext&mode=doc&skin=UUI4_promo&category=contexts)."
       ]
      },
      "typeValue": {
       "raw": "null | { [key: string]: any; name: string; }"
      },
      "from": "@epam/uui-core:IAnalyticableClick",
      "required": false
     },
     {
      "uid": 18,
      "name": "tabIndex",
      "comment": {
       "raw": [
        "Controls the order of keyboard navigation between components"
       ]
      },
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "from": "@epam/uui-core:IHasTabIndex",
      "required": false
     },
     {
      "uid": 19,
      "name": "rawProps",
      "comment": {
       "raw": [
        "Any HTML attributes (native or 'data-') to put on the underlying component"
       ]
      },
      "typeValue": {
       "raw": "React.ButtonHTMLAttributes<HTMLButtonElement> & Record<`data-${string}`, string>"
      },
      "from": "@epam/uui-core:IHasRawProps",
      "required": false
     },
     {
      "uid": 20,
      "name": "caption",
      "comment": {
       "raw": [
        "Caption. Can be a string, or React.Elements. Certain components supports minimal markup (<b>,<i>,<a>) in captions."
       ]
      },
      "typeValue": {
       "raw": "any"
      },
      "from": "@epam/uui-core:IHasCaption",
      "required": false
     },
     {
      "uid": 21,
      "name": "onClear",
      "comment": {
       "raw": [
        "Call to clear toggler value"
       ]
      },
      "typeValue": {
       "raw": "(e?: any) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IBasicPickerToggler",
      "required": false
     },
     {
      "uid": 22,
      "name": "isOpen",
      "comment": {
       "raw": [
        "When isDropdown=true, indicate that dropdown is open with chevron icon"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:IDropdownToggler",
      "required": false
     },
     {
      "uid": 23,
      "name": "isDropdown",
      "comment": {
       "raw": [
        "Shows chevron icon, enabling component to act as dropdown toggler"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:IDropdownToggler",
      "required": false
     },
     {
      "uid": 24,
      "name": "toggleDropdownOpening",
      "comment": {
       "raw": [
        "Called when associated dropdown should open or close"
       ]
      },
      "typeValue": {
       "raw": "(value: boolean) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IDropdownToggler",
      "required": false
     },
     {
      "uid": 25,
      "name": "isInteractedOutside",
      "comment": {
       "raw": [
        "Called when component is interacted outside, to close the dropdown"
       ]
      },
      "typeValue": {
       "raw": "(event: Event) => boolean"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IDropdownToggler",
      "required": false
     },
     {
      "uid": 26,
      "name": "ref",
      "comment": {
       "raw": [
        "Component's ref"
       ]
      },
      "typeValue": {
       "raw": "null | (instance: any) => void | React.RefObject<any>"
      },
      "from": "@epam/uui-core:IDropdownToggler",
      "required": false
     },
     {
      "uid": 27,
      "name": "forwardedRef",
      "comment": {
       "raw": [
        "this ref is passed to the underlying component"
       ]
      },
      "typeValue": {
       "raw": "null | (instance: HTMLButtonElement | HTMLAnchorElement | null) => void | React.MutableRefObject<HTMLButtonElement | HTMLAnchorElement | null>"
      },
      "from": "@epam/uui-core:IHasForwardedRef",
      "required": false
     },
     {
      "uid": 28,
      "name": "estimatedWidth",
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "from": "@epam/uui-core:IAdaptiveItem",
      "required": false
     },
     {
      "uid": 29,
      "name": "priority",
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "from": "@epam/uui-core:IAdaptiveItem",
      "required": false
     },
     {
      "uid": 30,
      "name": "showInBurgerMenu",
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:IAdaptiveItem",
      "required": false
     },
     {
      "uid": 31,
      "name": "collapseToMore",
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:IAdaptiveItem",
      "required": false
     },
     {
      "uid": 32,
      "name": "collapsedContainer",
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:IAdaptiveItem",
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui:MainMenuMods": {
   "summary": {
    "module": "@epam/uui",
    "typeName": {
     "name": "MainMenuMods",
     "nameFull": "MainMenuMods"
    },
    "src": "uui/components/navigation/MainMenu/MainMenu.tsx",
    "exported": true
   },
   "details": {
    "kind": 263,
    "typeValue": {
     "raw": "MainMenuMods",
     "print": [
      "interface MainMenuMods {",
      "}"
     ]
    }
   }
  },
  "@epam/uui:MainMenuProps": {
   "summary": {
    "module": "@epam/uui",
    "typeName": {
     "name": "MainMenuProps",
     "nameFull": "MainMenuProps"
    },
    "src": "uui/components/navigation/MainMenu/MainMenu.tsx",
    "exported": true
   },
   "details": {
    "kind": 264,
    "typeValue": {
     "raw": "MainMenuProps",
     "print": [
      "type MainMenuProps = uuiComponents.MainMenuProps & MainMenuMods;"
     ]
    },
    "props": [
     {
      "uid": 1,
      "name": "items",
      "typeValue": {
       "raw": "{ render: (item: any, hiddenItems?: any[] | undefined, displayedItems?: any[] | undefined) => any; priority: number; collapsedContainer?: boolean | undefined; id: string; }[]"
      },
      "from": "@epam/uui-components:MainMenuProps",
      "required": false
     },
     {
      "uid": 2,
      "name": "children",
      "typeValue": {
       "raw": "any"
      },
      "from": "@epam/uui-components:MainMenuProps",
      "required": false
     },
     {
      "uid": 3,
      "name": "externalGap",
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "from": "@epam/uui-components:MainMenuProps",
      "required": false
     },
     {
      "uid": 4,
      "name": "appLogoUrl",
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "from": "@epam/uui-components:MainMenuProps",
      "required": false
     },
     {
      "uid": 5,
      "name": "appLogoBgColor",
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "from": "@epam/uui-components:MainMenuProps",
      "required": false
     },
     {
      "uid": 6,
      "name": "customerLogoUrl",
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "from": "@epam/uui-components:MainMenuProps",
      "required": false
     },
     {
      "uid": 7,
      "name": "customerLogoBgColor",
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "from": "@epam/uui-components:MainMenuProps",
      "required": false
     },
     {
      "uid": 8,
      "name": "customerLogoWidth",
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "from": "@epam/uui-components:MainMenuProps",
      "required": false
     },
     {
      "uid": 9,
      "name": "isTransparent",
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-components:MainMenuProps",
      "required": false
     },
     {
      "uid": 10,
      "name": "renderBurger",
      "typeValue": {
       "raw": "(props: { onClose: () => void; }) => React.ReactNode"
      },
      "editor": {
       "type": "component"
      },
      "from": "@epam/uui-components:MainMenuProps",
      "required": false
     },
     {
      "uid": 11,
      "name": "alwaysShowBurger",
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-components:MainMenuProps",
      "required": false
     },
     {
      "uid": 12,
      "name": "serverBadge",
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "from": "@epam/uui-components:MainMenuProps",
      "required": false
     },
     {
      "uid": 13,
      "name": "tooltipTechInfo",
      "typeValue": {
       "raw": "null | string | number | boolean | React.ReactElement<any, string | React.JSXElementConstructor<any>> | React.ReactFragment | React.ReactPortal"
      },
      "typeValueRef": "@types/react:ReactNode",
      "from": "@epam/uui-components:MainMenuProps",
      "required": false
     },
     {
      "uid": 14,
      "name": "logoLink",
      "typeValue": {
       "raw": "Link"
      },
      "from": "@epam/uui-components:MainMenuProps",
      "required": false
     },
     {
      "uid": 15,
      "name": "logoHref",
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "from": "@epam/uui-components:MainMenuProps",
      "required": false
     },
     {
      "uid": 16,
      "name": "logoWidth",
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "from": "@epam/uui-components:MainMenuProps",
      "required": false
     },
     {
      "uid": 17,
      "name": "onLogoClick",
      "typeValue": {
       "raw": "(e: React.MouseEvent<Element, MouseEvent>) => any"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-components:MainMenuProps",
      "required": false
     },
     {
      "uid": 18,
      "name": "customerLogoLink",
      "typeValue": {
       "raw": "Link"
      },
      "from": "@epam/uui-components:MainMenuProps",
      "required": false
     },
     {
      "uid": 19,
      "name": "customerLogoHref",
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "from": "@epam/uui-components:MainMenuProps",
      "required": false
     },
     {
      "uid": 20,
      "name": "MainMenuDropdown",
      "typeValue": {
       "raw": "React.ComponentClass<MainMenuDropdownProps, any> | React.FunctionComponent<MainMenuDropdownProps>"
      },
      "from": "@epam/uui-components:MainMenuProps",
      "required": false
     },
     {
      "uid": 21,
      "name": "Burger",
      "typeValue": {
       "raw": "React.ComponentClass<BurgerProps, any> | React.FunctionComponent<BurgerProps>"
      },
      "from": "@epam/uui-components:MainMenuProps",
      "required": false
     },
     {
      "uid": 22,
      "name": "cx",
      "comment": {
       "raw": [
        "CSS class(es) to put on component's root. See {@link https://github.com/JedWatson/classnames#usage} for details"
       ]
      },
      "typeValue": {
       "raw": "null | string | number | boolean | ClassDictionary | ClassArray"
      },
      "typeValueRef": "@epam/uui-core:ClassValue",
      "from": "@epam/uui-core:IHasCX",
      "required": false
     },
     {
      "uid": 23,
      "name": "rawProps",
      "comment": {
       "raw": [
        "Any HTML attributes (native or 'data-') to put on the underlying component"
       ]
      },
      "typeValue": {
       "raw": "React.HTMLAttributes<HTMLDivElement> & Record<`data-${string}`, string>"
      },
      "from": "@epam/uui-core:IHasRawProps",
      "required": false
     },
     {
      "uid": 24,
      "name": "forwardedRef",
      "comment": {
       "raw": [
        "this ref is passed to the underlying component"
       ]
      },
      "typeValue": {
       "raw": "null | (instance: HTMLDivElement | null) => void | React.MutableRefObject<HTMLDivElement | null>"
      },
      "from": "@epam/uui-core:IHasForwardedRef",
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui:MainMenuSearchProps": {
   "summary": {
    "module": "@epam/uui",
    "typeName": {
     "name": "MainMenuSearchProps",
     "nameFull": "MainMenuSearchProps"
    },
    "src": "uui/components/navigation/MainMenu/MainMenuSearch.tsx",
    "exported": true
   },
   "details": {
    "kind": 263,
    "typeValue": {
     "raw": "MainMenuSearchProps",
     "print": [
      "interface MainMenuSearchProps extends TextInputProps, IAdaptiveItem {",
      "}"
     ]
    },
    "props": [
     {
      "uid": 1,
      "name": "acceptIcon",
      "comment": {
       "raw": [
        "Overrides accept (check) icon"
       ]
      },
      "typeValue": {
       "raw": "Icon"
      },
      "editor": {
       "type": "component"
      },
      "from": "@epam/uui-components:TextInputProps",
      "required": false
     },
     {
      "uid": 2,
      "name": "cancelIcon",
      "comment": {
       "raw": [
        "Overrides cancel (cross) icon"
       ]
      },
      "typeValue": {
       "raw": "Icon"
      },
      "editor": {
       "type": "component"
      },
      "from": "@epam/uui-components:TextInputProps",
      "required": false
     },
     {
      "uid": 3,
      "name": "dropdownIcon",
      "comment": {
       "raw": [
        "Overrides dropdown (chevron) icon"
       ]
      },
      "typeValue": {
       "raw": "Icon"
      },
      "editor": {
       "type": "component"
      },
      "from": "@epam/uui-components:TextInputProps",
      "required": false
     },
     {
      "uid": 4,
      "name": "inputCx",
      "comment": {
       "raw": [
        "CSS class(es) to put to the HTML Input element"
       ]
      },
      "typeValue": {
       "raw": "null | string | number | boolean | ClassDictionary | ClassArray"
      },
      "typeValueRef": "@epam/uui-core:ClassValue",
      "from": "@epam/uui-components:TextInputProps",
      "required": false
     },
     {
      "uid": 5,
      "name": "renderInput",
      "comment": {
       "raw": [
        "overrides rendering of HTML Input element"
       ]
      },
      "typeValue": {
       "raw": "(props: IRenderInputProps) => JSX.Element"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-components:TextInputProps",
      "required": false
     },
     {
      "uid": 6,
      "name": "onCancel",
      "comment": {
       "raw": [
        "Enables cancel (cross) icon, and fires when the icon is clicked"
       ]
      },
      "typeValue": {
       "raw": "() => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:TextInputCoreProps",
      "required": false
     },
     {
      "uid": 7,
      "name": "onAccept",
      "comment": {
       "raw": [
        "Enables accept (check) icon, and fires when the icon is clicked"
       ]
      },
      "typeValue": {
       "raw": "() => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:TextInputCoreProps",
      "required": false
     },
     {
      "uid": 8,
      "name": "onKeyDown",
      "comment": {
       "raw": [
        "keydown event handler to put on the HTML input element"
       ]
      },
      "typeValue": {
       "raw": "(e?: any) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:TextInputCoreProps",
      "required": false
     },
     {
      "uid": 9,
      "name": "autoFocus",
      "comment": {
       "raw": [
        "Put focus on the element, when component is mounted"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:TextInputCoreProps",
      "required": false
     },
     {
      "uid": 10,
      "name": "type",
      "comment": {
       "raw": [
        "Standard 'type' attribute to put on the HTML input element (e.g. 'password')"
       ]
      },
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "from": "@epam/uui-core:TextInputCoreProps",
      "required": false
     },
     {
      "uid": 11,
      "name": "autoComplete",
      "comment": {
       "raw": [
        "Standard [autocomplete attribute]{@link https://www.w3schools.com/tags/att_input_autocomplete.asp}"
       ]
      },
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "from": "@epam/uui-core:TextInputCoreProps",
      "required": false
     },
     {
      "uid": 12,
      "name": "name",
      "comment": {
       "raw": [
        "Standard [name attribute]{@link https://www.w3schools.com/tags/att_input_name.asp}"
       ]
      },
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "from": "@epam/uui-core:TextInputCoreProps",
      "required": false
     },
     {
      "uid": 13,
      "name": "maxLength",
      "comment": {
       "raw": [
        "Maximum input length in characters"
       ]
      },
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "from": "@epam/uui-core:TextInputCoreProps",
      "required": false
     },
     {
      "uid": 14,
      "name": "inputMode",
      "comment": {
       "raw": [
        "Standard [inputMode attribute]{@link https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/inputmode}"
       ]
      },
      "typeValue": {
       "raw": "'none' | 'text' | 'tel' | 'url' | 'email' | 'numeric' | 'decimal' | 'search'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "none",
        "text",
        "tel",
        "url",
        "email",
        "numeric",
        "decimal",
        "search"
       ]
      },
      "from": "@epam/uui-core:TextInputCoreProps",
      "required": false
     },
     {
      "uid": 15,
      "name": "id",
      "comment": {
       "raw": [
        "HTML ID attribute for input"
       ]
      },
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "from": "@epam/uui-core:TextInputCoreProps",
      "required": false
     },
     {
      "uid": 16,
      "name": "cx",
      "comment": {
       "raw": [
        "CSS class(es) to put on component's root. See {@link https://github.com/JedWatson/classnames#usage} for details"
       ]
      },
      "typeValue": {
       "raw": "null | string | number | boolean | ClassDictionary | ClassArray"
      },
      "typeValueRef": "@epam/uui-core:ClassValue",
      "from": "@epam/uui-core:IHasCX",
      "required": false
     },
     {
      "uid": 17,
      "name": "onClick",
      "comment": {
       "raw": [
        "Called when component is clicked"
       ]
      },
      "typeValue": {
       "raw": "(e?: any) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IClickable",
      "required": false
     },
     {
      "uid": 18,
      "name": "isDisabled",
      "comment": {
       "raw": [
        "Disable editing, and visually de-emphasize value of the component"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:IDisableable",
      "required": false
     },
     {
      "uid": 19,
      "name": "value",
      "comment": {
       "raw": [
        "The current value of component"
       ]
      },
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "from": "@epam/uui-core:IEditable",
      "required": true
     },
     {
      "uid": 20,
      "name": "onValueChange",
      "comment": {
       "raw": [
        "Called when value needs to be changed (usually due to user interaction)"
       ]
      },
      "typeValue": {
       "raw": "(newValue: string | undefined) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IEditable",
      "required": true
     },
     {
      "uid": 21,
      "name": "isInvalid",
      "comment": {
       "raw": [
        "True if component contains invalid input"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:ICanBeInvalid",
      "required": false
     },
     {
      "uid": 22,
      "name": "validationMessage",
      "comment": {
       "raw": [
        "Message describing why the value is invalid"
       ]
      },
      "typeValue": {
       "raw": "null | string | number | boolean | React.ReactElement<any, string | React.JSXElementConstructor<any>> | React.ReactFragment | React.ReactPortal"
      },
      "typeValueRef": "@types/react:ReactNode",
      "from": "@epam/uui-core:ICanBeInvalid",
      "required": false
     },
     {
      "uid": 23,
      "name": "validationProps",
      "comment": {
       "raw": [
        "If T is a complex value (object or array), this property contains validation states of inner items"
       ]
      },
      "typeValue": {
       "raw": "{ [key: string]: ICanBeInvalid; }"
      },
      "from": "@epam/uui-core:ICanBeInvalid",
      "required": false
     },
     {
      "uid": 24,
      "name": "isReadonly",
      "comment": {
       "raw": [
        "Disable editing. Unlike isDisabled, keep component's value readable."
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:ICanBeReadonly",
      "required": false
     },
     {
      "uid": 25,
      "name": "isRequired",
      "comment": {
       "raw": [
        "Marks that component's value is required and shouldn't be empty"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:ICanBeRequired",
      "required": false
     },
     {
      "uid": 26,
      "name": "placeholder",
      "comment": {
       "raw": [
        "Placeholder to display when empty"
       ]
      },
      "typeValue": {
       "raw": "any"
      },
      "from": "@epam/uui-core:IHasPlaceholder",
      "required": false
     },
     {
      "uid": 27,
      "name": "icon",
      "comment": {
       "raw": [
        "Icon can be a React element (usually an SVG element)"
       ]
      },
      "typeValue": {
       "raw": "Icon"
      },
      "editor": {
       "type": "component"
      },
      "from": "@epam/uui-core:IHasIcon",
      "required": false
     },
     {
      "uid": 28,
      "name": "iconPosition",
      "comment": {
       "raw": [
        "Position of the icon (left of right)"
       ]
      },
      "typeValue": {
       "raw": "'left' | 'right'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "left",
        "right"
       ]
      },
      "from": "@epam/uui-core:IHasIcon",
      "required": false
     },
     {
      "uid": 29,
      "name": "onIconClick",
      "comment": {
       "raw": [
        "Click handler for the icon"
       ]
      },
      "typeValue": {
       "raw": "() => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IHasIcon",
      "required": false
     },
     {
      "uid": 30,
      "name": "isOpen",
      "comment": {
       "raw": [
        "When isDropdown=true, indicate that dropdown is open with chevron icon"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:IDropdownToggler",
      "required": false
     },
     {
      "uid": 31,
      "name": "isDropdown",
      "comment": {
       "raw": [
        "Shows chevron icon, enabling component to act as dropdown toggler"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:IDropdownToggler",
      "required": false
     },
     {
      "uid": 32,
      "name": "toggleDropdownOpening",
      "comment": {
       "raw": [
        "Called when associated dropdown should open or close"
       ]
      },
      "typeValue": {
       "raw": "(value: boolean) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IDropdownToggler",
      "required": false
     },
     {
      "uid": 33,
      "name": "isInteractedOutside",
      "comment": {
       "raw": [
        "Called when component is interacted outside, to close the dropdown"
       ]
      },
      "typeValue": {
       "raw": "(event: Event) => boolean"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IDropdownToggler",
      "required": false
     },
     {
      "uid": 34,
      "name": "ref",
      "comment": {
       "raw": [
        "Component's ref"
       ]
      },
      "typeValue": {
       "raw": "null | (instance: any) => void | React.RefObject<any>"
      },
      "from": "@epam/uui-core:IDropdownToggler",
      "required": false
     },
     {
      "uid": 35,
      "name": "caption",
      "comment": {
       "raw": [
        "Caption. Can be a string, or React.Elements. Certain components supports minimal markup (<b>,<i>,<a>) in captions."
       ]
      },
      "typeValue": {
       "raw": "any"
      },
      "from": "@epam/uui-core:IHasCaption",
      "required": false
     },
     {
      "uid": 36,
      "name": "getValueChangeAnalyticsEvent",
      "comment": {
       "raw": [
        "Given a value, returns an analytics event to send when component is edited.",
        " See [AnalyticsContext](@link https://uui.epam.com/documents?id=analyticsContext&mode=doc&skin=UUI4_promo&category=contexts)."
       ]
      },
      "typeValue": {
       "raw": "(newValue: string | null, oldValue: string | null) => AnalyticsEvent"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IAnalyticableOnChange",
      "required": false
     },
     {
      "uid": 37,
      "name": "rawProps",
      "comment": {
       "raw": [
        "Any HTML attributes (native or 'data-') to put on the underlying component"
       ]
      },
      "typeValue": {
       "raw": "React.HTMLAttributes<HTMLInputElement> & Record<`data-${string}`, string>"
      },
      "from": "@epam/uui-core:IHasRawProps",
      "required": false
     },
     {
      "uid": 38,
      "name": "onFocus",
      "comment": {
       "raw": [
        "Called when component gets input focus"
       ]
      },
      "typeValue": {
       "raw": "(e: React.FocusEvent<HTMLInputElement, Element>) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:ICanFocus",
      "required": false
     },
     {
      "uid": 39,
      "name": "onBlur",
      "comment": {
       "raw": [
        "Called when component looses input focus"
       ]
      },
      "typeValue": {
       "raw": "(e: React.FocusEvent<HTMLInputElement, Element>) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:ICanFocus",
      "required": false
     },
     {
      "uid": 40,
      "name": "tabIndex",
      "comment": {
       "raw": [
        "Controls the order of keyboard navigation between components"
       ]
      },
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "from": "@epam/uui-core:IHasTabIndex",
      "required": false
     },
     {
      "uid": 41,
      "name": "estimatedWidth",
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "from": "@epam/uui-core:IAdaptiveItem",
      "required": false
     },
     {
      "uid": 42,
      "name": "priority",
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "from": "@epam/uui-core:IAdaptiveItem",
      "required": false
     },
     {
      "uid": 43,
      "name": "showInBurgerMenu",
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:IAdaptiveItem",
      "required": false
     },
     {
      "uid": 44,
      "name": "collapseToMore",
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:IAdaptiveItem",
      "required": false
     },
     {
      "uid": 45,
      "name": "collapsedContainer",
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:IAdaptiveItem",
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui:ModalFooterProps": {
   "summary": {
    "module": "@epam/uui",
    "typeName": {
     "name": "ModalFooterProps",
     "nameFull": "ModalFooterProps"
    },
    "src": "uui/components/overlays/Modals.tsx",
    "exported": true
   },
   "details": {
    "kind": 263,
    "typeValue": {
     "raw": "ModalFooterProps",
     "print": [
      "interface ModalFooterProps extends RowMods, ModalFooterCoreProps {",
      "}"
     ]
    },
    "props": [
     {
      "uid": 1,
      "name": "borderBottom",
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui:RowMods",
      "required": false
     },
     {
      "uid": 2,
      "name": "columnGap",
      "typeValue": {
       "raw": "number | '6' | '12' | '18' | '36' | '24'"
      },
      "from": "@epam/uui:RowMods",
      "required": false
     },
     {
      "uid": 3,
      "name": "margin",
      "typeValue": {
       "raw": "'12' | '24'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "12",
        "24"
       ]
      },
      "from": "@epam/uui:RowMods",
      "required": false
     },
     {
      "uid": 4,
      "name": "padding",
      "typeValue": {
       "raw": "'6' | '12' | '18' | '24'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "6",
        "12",
        "18",
        "24"
       ]
      },
      "from": "@epam/uui:RowMods",
      "required": false
     },
     {
      "uid": 5,
      "name": "rowGap",
      "typeValue": {
       "raw": "number | '6' | '12' | '18' | '36' | '24'"
      },
      "from": "@epam/uui:RowMods",
      "required": false
     },
     {
      "uid": 6,
      "name": "spacing",
      "typeValue": {
       "raw": "'6' | '12' | '18'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "6",
        "12",
        "18"
       ]
      },
      "from": "@epam/uui:RowMods",
      "required": false
     },
     {
      "uid": 7,
      "name": "topShadow",
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui:RowMods",
      "required": false
     },
     {
      "uid": 8,
      "name": "vPadding",
      "typeValue": {
       "raw": "'12' | '18' | '36' | '48' | '24'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "12",
        "18",
        "24",
        "36",
        "48"
       ]
      },
      "from": "@epam/uui:RowMods",
      "required": false
     },
     {
      "uid": 9,
      "name": "background",
      "typeValue": {
       "raw": "'surface'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "surface"
       ]
      },
      "from": "@epam/uui:RowMods",
      "required": false
     },
     {
      "uid": 10,
      "name": "size",
      "typeValue": {
       "raw": "null | '36' | '48' | '24' | '30' | '42'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "24",
        "30",
        "36",
        "42",
        "48",
        null
       ]
      },
      "from": "@epam/uui:RowSizeMod",
      "required": false
     },
     {
      "uid": 11,
      "name": "borderTop",
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:ModalFooterCoreProps",
      "required": false
     },
     {
      "uid": 12,
      "name": "children",
      "typeValue": {
       "raw": "null | string | number | boolean | React.ReactElement<any, string | React.JSXElementConstructor<any>> | React.ReactFragment | React.ReactPortal"
      },
      "typeValueRef": "@types/react:ReactNode",
      "from": "@epam/uui-core:IHasChildren",
      "required": false
     },
     {
      "uid": 13,
      "name": "cx",
      "comment": {
       "raw": [
        "CSS class(es) to put on component's root. See {@link https://github.com/JedWatson/classnames#usage} for details"
       ]
      },
      "typeValue": {
       "raw": "null | string | number | boolean | ClassDictionary | ClassArray"
      },
      "typeValueRef": "@epam/uui-core:ClassValue",
      "from": "@epam/uui-core:IHasCX",
      "required": false
     },
     {
      "uid": 14,
      "name": "rawProps",
      "comment": {
       "raw": [
        "Any HTML attributes (native or 'data-') to put on the underlying component"
       ]
      },
      "typeValue": {
       "raw": "React.HTMLAttributes<HTMLDivElement> & Record<`data-${string}`, string>"
      },
      "from": "@epam/uui-core:IHasRawProps",
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui:ModalHeaderProps": {
   "summary": {
    "module": "@epam/uui",
    "typeName": {
     "name": "ModalHeaderProps",
     "nameFull": "ModalHeaderProps"
    },
    "src": "uui/components/overlays/Modals.tsx",
    "exported": true
   },
   "details": {
    "kind": 263,
    "typeValue": {
     "raw": "ModalHeaderProps",
     "print": [
      "interface ModalHeaderProps extends RowMods, ModalHeaderCoreProps {",
      "}"
     ]
    },
    "props": [
     {
      "uid": 1,
      "name": "borderBottom",
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui:RowMods",
      "required": false
     },
     {
      "uid": 2,
      "name": "columnGap",
      "typeValue": {
       "raw": "number | '6' | '12' | '18' | '36' | '24'"
      },
      "from": "@epam/uui:RowMods",
      "required": false
     },
     {
      "uid": 3,
      "name": "margin",
      "typeValue": {
       "raw": "'12' | '24'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "12",
        "24"
       ]
      },
      "from": "@epam/uui:RowMods",
      "required": false
     },
     {
      "uid": 4,
      "name": "padding",
      "typeValue": {
       "raw": "'6' | '12' | '18' | '24'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "6",
        "12",
        "18",
        "24"
       ]
      },
      "from": "@epam/uui:RowMods",
      "required": false
     },
     {
      "uid": 5,
      "name": "rowGap",
      "typeValue": {
       "raw": "number | '6' | '12' | '18' | '36' | '24'"
      },
      "from": "@epam/uui:RowMods",
      "required": false
     },
     {
      "uid": 6,
      "name": "spacing",
      "typeValue": {
       "raw": "'6' | '12' | '18'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "6",
        "12",
        "18"
       ]
      },
      "from": "@epam/uui:RowMods",
      "required": false
     },
     {
      "uid": 7,
      "name": "topShadow",
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui:RowMods",
      "required": false
     },
     {
      "uid": 8,
      "name": "vPadding",
      "typeValue": {
       "raw": "'12' | '18' | '36' | '48' | '24'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "12",
        "18",
        "24",
        "36",
        "48"
       ]
      },
      "from": "@epam/uui:RowMods",
      "required": false
     },
     {
      "uid": 9,
      "name": "background",
      "typeValue": {
       "raw": "'surface'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "surface"
       ]
      },
      "from": "@epam/uui:RowMods",
      "required": false
     },
     {
      "uid": 10,
      "name": "size",
      "typeValue": {
       "raw": "null | '36' | '48' | '24' | '30' | '42'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "24",
        "30",
        "36",
        "42",
        "48",
        null
       ]
      },
      "from": "@epam/uui:RowSizeMod",
      "required": false
     },
     {
      "uid": 11,
      "name": "onClose",
      "typeValue": {
       "raw": "() => any"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:ModalHeaderCoreProps",
      "required": false
     },
     {
      "uid": 12,
      "name": "title",
      "typeValue": {
       "raw": "null | string | number | boolean | React.ReactElement<any, string | React.JSXElementConstructor<any>> | React.ReactFragment | React.ReactPortal"
      },
      "typeValueRef": "@types/react:ReactNode",
      "from": "@epam/uui-core:ModalHeaderCoreProps",
      "required": false
     },
     {
      "uid": 13,
      "name": "children",
      "typeValue": {
       "raw": "null | string | number | boolean | React.ReactElement<any, string | React.JSXElementConstructor<any>> | React.ReactFragment | React.ReactPortal"
      },
      "typeValueRef": "@types/react:ReactNode",
      "from": "@epam/uui-core:IHasChildren",
      "required": false
     },
     {
      "uid": 14,
      "name": "cx",
      "comment": {
       "raw": [
        "CSS class(es) to put on component's root. See {@link https://github.com/JedWatson/classnames#usage} for details"
       ]
      },
      "typeValue": {
       "raw": "null | string | number | boolean | ClassDictionary | ClassArray"
      },
      "typeValueRef": "@epam/uui-core:ClassValue",
      "from": "@epam/uui-core:IHasCX",
      "required": false
     },
     {
      "uid": 15,
      "name": "rawProps",
      "comment": {
       "raw": [
        "Any HTML attributes (native or 'data-') to put on the underlying component"
       ]
      },
      "typeValue": {
       "raw": "React.HTMLAttributes<HTMLDivElement> & Record<`data-${string}`, string>"
      },
      "from": "@epam/uui-core:IHasRawProps",
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui:ModalWindowMods": {
   "summary": {
    "module": "@epam/uui",
    "typeName": {
     "name": "ModalWindowMods",
     "nameFull": "ModalWindowMods"
    },
    "src": "uui/components/overlays/Modals.tsx",
    "exported": true
   },
   "details": {
    "kind": 263,
    "typeValue": {
     "raw": "ModalWindowMods",
     "print": [
      "interface ModalWindowMods {",
      "    width?: number;",
      "    height?: number;",
      "}"
     ]
    },
    "props": [
     {
      "uid": 1,
      "name": "width",
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "required": false
     },
     {
      "uid": 2,
      "name": "height",
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui:ModalWindowProps": {
   "summary": {
    "module": "@epam/uui",
    "typeName": {
     "name": "ModalWindowProps",
     "nameFull": "ModalWindowProps"
    },
    "src": "uui/components/overlays/Modals.tsx",
    "exported": true
   },
   "details": {
    "kind": 264,
    "typeValue": {
     "raw": "ModalWindowProps",
     "print": [
      "type ModalWindowProps = UuiModalWindowProps & ModalWindowMods;"
     ]
    },
    "props": [
     {
      "uid": 1,
      "name": "cx",
      "comment": {
       "raw": [
        "CSS class(es) to put on component's root. See {@link https://github.com/JedWatson/classnames#usage} for details"
       ]
      },
      "typeValue": {
       "raw": "null | string | number | boolean | ClassDictionary | ClassArray"
      },
      "typeValueRef": "@epam/uui-core:ClassValue",
      "from": "@epam/uui-core:IHasCX",
      "required": false
     },
     {
      "uid": 2,
      "name": "children",
      "typeValue": {
       "raw": "null | string | number | boolean | React.ReactElement<any, string | React.JSXElementConstructor<any>> | React.ReactFragment | React.ReactPortal"
      },
      "typeValueRef": "@types/react:ReactNode",
      "from": "@epam/uui-core:IHasChildren",
      "required": false
     },
     {
      "uid": 3,
      "name": "onClick",
      "comment": {
       "raw": [
        "Called when component is clicked"
       ]
      },
      "typeValue": {
       "raw": "(e?: any) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IClickable",
      "required": false
     },
     {
      "uid": 4,
      "name": "rawProps",
      "comment": {
       "raw": [
        "Any HTML attributes (native or 'data-') to put on the underlying component"
       ]
      },
      "typeValue": {
       "raw": "React.HTMLAttributes<HTMLDivElement> & Record<`data-${string}`, string>"
      },
      "from": "@epam/uui-core:IHasRawProps",
      "required": false
     },
     {
      "uid": 5,
      "name": "forwardedRef",
      "comment": {
       "raw": [
        "this ref is passed to the underlying component"
       ]
      },
      "typeValue": {
       "raw": "null | (instance: HTMLDivElement | null) => void | React.MutableRefObject<HTMLDivElement | null>"
      },
      "from": "@epam/uui-core:IHasForwardedRef",
      "required": false
     },
     {
      "uid": 6,
      "name": "clickAnalyticsEvent",
      "comment": {
       "raw": [
        "An analytics event to send (via AnalyticsContext) when component is clicked.",
        " See [AnalyticsContext](@link https://uui.epam.com/documents?id=analyticsContext&mode=doc&skin=UUI4_promo&category=contexts)."
       ]
      },
      "typeValue": {
       "raw": "null | { [key: string]: any; name: string; }"
      },
      "from": "@epam/uui-core:IAnalyticableClick",
      "required": false
     },
     {
      "uid": 7,
      "name": "style",
      "typeValue": {
       "raw": "React.CSSProperties"
      },
      "from": "@epam/uui-core:VPanelProps",
      "required": false
     },
     {
      "uid": 8,
      "name": "width",
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "from": "@epam/uui:ModalWindowMods",
      "required": false
     },
     {
      "uid": 9,
      "name": "height",
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "from": "@epam/uui:ModalWindowMods",
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui:MultiSwitchProps": {
   "summary": {
    "module": "@epam/uui",
    "typeName": {
     "name": "MultiSwitchProps",
     "nameFull": "MultiSwitchProps<TValue>"
    },
    "src": "uui/components/inputs/MultiSwitch.tsx",
    "exported": true
   },
   "details": {
    "kind": 263,
    "typeValue": {
     "raw": "MultiSwitchProps<TValue>",
     "print": [
      "interface MultiSwitchProps<TValue> extends IEditable<TValue>, SizeMod, IHasRawProps<React.HTMLAttributes<HTMLDivElement>> {",
      "    items: MultiSwitchItem<TValue>[];",
      "    /**",
      "     * @default 'primary'",
      "     */",
      "    color?: UuiMultiSwitchColor;",
      "}"
     ]
    },
    "props": [
     {
      "uid": 1,
      "name": "items",
      "typeValue": {
       "raw": "MultiSwitchItem<TValue>[]"
      },
      "required": true
     },
     {
      "uid": 2,
      "name": "color",
      "comment": {
       "raw": [
        "@default 'primary'"
       ],
       "tags": {
        "@default": "primary"
       }
      },
      "typeValue": {
       "raw": "'primary' | 'secondary'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "primary",
        "secondary"
       ]
      },
      "required": false
     },
     {
      "uid": 3,
      "name": "value",
      "comment": {
       "raw": [
        "The current value of component"
       ]
      },
      "typeValue": {
       "raw": "TValue"
      },
      "from": "@epam/uui-core:IEditable",
      "required": true
     },
     {
      "uid": 4,
      "name": "onValueChange",
      "comment": {
       "raw": [
        "Called when value needs to be changed (usually due to user interaction)"
       ]
      },
      "typeValue": {
       "raw": "(newValue: TValue) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IEditable",
      "required": true
     },
     {
      "uid": 5,
      "name": "isInvalid",
      "comment": {
       "raw": [
        "True if component contains invalid input"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:ICanBeInvalid",
      "required": false
     },
     {
      "uid": 6,
      "name": "validationMessage",
      "comment": {
       "raw": [
        "Message describing why the value is invalid"
       ]
      },
      "typeValue": {
       "raw": "null | string | number | boolean | React.ReactElement<any, string | React.JSXElementConstructor<any>> | React.ReactFragment | React.ReactPortal"
      },
      "typeValueRef": "@types/react:ReactNode",
      "from": "@epam/uui-core:ICanBeInvalid",
      "required": false
     },
     {
      "uid": 7,
      "name": "validationProps",
      "comment": {
       "raw": [
        "If T is a complex value (object or array), this property contains validation states of inner items"
       ]
      },
      "typeValue": {
       "raw": "{ [key: string]: ICanBeInvalid; }"
      },
      "from": "@epam/uui-core:ICanBeInvalid",
      "required": false
     },
     {
      "uid": 8,
      "name": "isDisabled",
      "comment": {
       "raw": [
        "Disable editing, and visually de-emphasize value of the component"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:IDisableable",
      "required": false
     },
     {
      "uid": 9,
      "name": "isReadonly",
      "comment": {
       "raw": [
        "Disable editing. Unlike isDisabled, keep component's value readable."
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:ICanBeReadonly",
      "required": false
     },
     {
      "uid": 10,
      "name": "isRequired",
      "comment": {
       "raw": [
        "Marks that component's value is required and shouldn't be empty"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:ICanBeRequired",
      "required": false
     },
     {
      "uid": 11,
      "name": "size",
      "typeValue": {
       "raw": "'36' | '48' | '24' | '30' | '42' | 'none'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "24",
        "30",
        "36",
        "42",
        "48",
        "none"
       ]
      },
      "from": "@epam/uui:SizeMod",
      "required": false
     },
     {
      "uid": 12,
      "name": "rawProps",
      "comment": {
       "raw": [
        "Any HTML attributes (native or 'data-') to put on the underlying component"
       ]
      },
      "typeValue": {
       "raw": "React.HTMLAttributes<HTMLDivElement> & Record<`data-${string}`, string>"
      },
      "from": "@epam/uui-core:IHasRawProps",
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui:NotificationCardProps": {
   "summary": {
    "module": "@epam/uui",
    "typeName": {
     "name": "NotificationCardProps",
     "nameFull": "NotificationCardProps"
    },
    "src": "uui/components/overlays/NotificationCard.tsx",
    "exported": true
   },
   "details": {
    "kind": 263,
    "typeValue": {
     "raw": "NotificationCardProps",
     "print": [
      "interface NotificationCardProps extends DefaultNotificationProps {",
      "    icon?: Icon;",
      "    color?: SemanticColor;",
      "}"
     ]
    },
    "props": [
     {
      "uid": 1,
      "name": "icon",
      "typeValue": {
       "raw": "Icon"
      },
      "editor": {
       "type": "component"
      },
      "required": false
     },
     {
      "uid": 2,
      "name": "color",
      "typeValue": {
       "raw": "'info' | 'success' | 'warning' | 'error'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "info",
        "success",
        "warning",
        "error"
       ]
      },
      "required": false
     },
     {
      "uid": 3,
      "name": "actions",
      "typeValue": {
       "raw": "NotificationAction[]"
      },
      "from": "@epam/uui:DefaultNotificationProps",
      "required": false
     },
     {
      "uid": 4,
      "name": "onClose",
      "comment": {
       "raw": [
        "Call to close the notification with abort action. It's rejects `notificationContext.show()` promise."
       ]
      },
      "typeValue": {
       "raw": "() => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:INotification",
      "required": false
     },
     {
      "uid": 5,
      "name": "onSuccess",
      "comment": {
       "raw": [
        "Call to close the notification with success action. It's resolved `notificationContext.show()` promise."
       ]
      },
      "typeValue": {
       "raw": "() => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:INotification",
      "required": false
     },
     {
      "uid": 6,
      "name": "clearTimer",
      "comment": {
       "raw": [
        "Cancel notification closing timer"
       ]
      },
      "typeValue": {
       "raw": "() => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:INotification",
      "required": false
     },
     {
      "uid": 7,
      "name": "refreshTimer",
      "comment": {
       "raw": [
        "Reinitialize notification closing timer. It will be set to the provided notification duration."
       ]
      },
      "typeValue": {
       "raw": "() => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:INotification",
      "required": false
     },
     {
      "uid": 8,
      "name": "id",
      "comment": {
       "raw": [
        "Unique id of the notification"
       ]
      },
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "from": "@epam/uui-core:INotification",
      "required": true
     },
     {
      "uid": 9,
      "name": "key",
      "comment": {
       "raw": [
        "Unique key of the notification"
       ]
      },
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "from": "@epam/uui-core:INotification",
      "required": true
     },
     {
      "uid": 10,
      "name": "children",
      "typeValue": {
       "raw": "null | string | number | boolean | React.ReactElement<any, string | React.JSXElementConstructor<any>> | React.ReactFragment | React.ReactPortal"
      },
      "typeValueRef": "@types/react:ReactNode",
      "from": "@epam/uui-core:IHasChildren",
      "required": false
     },
     {
      "uid": 11,
      "name": "cx",
      "comment": {
       "raw": [
        "CSS class(es) to put on component's root. See {@link https://github.com/JedWatson/classnames#usage} for details"
       ]
      },
      "typeValue": {
       "raw": "null | string | number | boolean | ClassDictionary | ClassArray"
      },
      "typeValueRef": "@epam/uui-core:ClassValue",
      "from": "@epam/uui-core:IHasCX",
      "required": false
     },
     {
      "uid": 12,
      "name": "rawProps",
      "comment": {
       "raw": [
        "Any HTML attributes (native or 'data-') to put on the underlying component"
       ]
      },
      "typeValue": {
       "raw": "React.HTMLAttributes<HTMLDivElement> & Record<`data-${string}`, string>"
      },
      "from": "@epam/uui-core:IHasRawProps",
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui:NumericInputMods": {
   "summary": {
    "module": "@epam/uui",
    "typeName": {
     "name": "NumericInputMods",
     "nameFull": "NumericInputMods"
    },
    "src": "uui/components/inputs/NumericInput.tsx",
    "exported": true
   },
   "details": {
    "kind": 263,
    "typeValue": {
     "raw": "NumericInputMods",
     "print": [
      "interface NumericInputMods extends types.SizeMod, IHasEditMode {",
      "}"
     ]
    },
    "props": [
     {
      "uid": 1,
      "name": "size",
      "typeValue": {
       "raw": "'36' | '48' | '24' | '30' | '42' | 'none'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "24",
        "30",
        "36",
        "42",
        "48",
        "none"
       ]
      },
      "from": "@epam/uui:SizeMod",
      "required": false
     },
     {
      "uid": 2,
      "name": "mode",
      "comment": {
       "raw": [
        "Visual mode for component:",
        " - form: default visuals, to use in forms.",
        " - cell: adjust to embed as table cell editor: no borders, no focus (it is applied by DataCell)",
        " - inline: adjust for WYSIWYG UX. Backgrounds removed. Borders appear only on hover."
       ]
      },
      "typeValue": {
       "raw": "'inline' | 'form' | 'cell'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "inline",
        "form",
        "cell"
       ]
      },
      "from": "@epam/uui:IHasEditMode",
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui:NumericInputProps": {
   "summary": {
    "module": "@epam/uui",
    "typeName": {
     "name": "NumericInputProps",
     "nameFull": "NumericInputProps"
    },
    "src": "uui/components/inputs/NumericInput.tsx",
    "exported": true
   },
   "details": {
    "kind": 264,
    "typeValue": {
     "raw": "NumericInputProps",
     "print": [
      "type NumericInputProps = uuiNumericInputProps & NumericInputMods;"
     ]
    },
    "props": [
     {
      "uid": 1,
      "name": "max",
      "comment": {
       "raw": [
        "Maximum value (default is Number.MAX_SAFE_INTEGER)"
       ]
      },
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "from": "@epam/uui-components:NumericInputProps",
      "required": false
     },
     {
      "uid": 2,
      "name": "min",
      "comment": {
       "raw": [
        "Minimum value (default is 0)",
        " @default 0"
       ],
       "tags": {
        "@default": 0
       }
      },
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "from": "@epam/uui-components:NumericInputProps",
      "required": false
     },
     {
      "uid": 3,
      "name": "upIcon",
      "comment": {
       "raw": [
        "Overrides the up/increase icon"
       ]
      },
      "typeValue": {
       "raw": "Icon"
      },
      "editor": {
       "type": "component"
      },
      "from": "@epam/uui-components:NumericInputProps",
      "required": false
     },
     {
      "uid": 4,
      "name": "downIcon",
      "comment": {
       "raw": [
        "Overrides the down/decrease icon"
       ]
      },
      "typeValue": {
       "raw": "Icon"
      },
      "editor": {
       "type": "component"
      },
      "from": "@epam/uui-components:NumericInputProps",
      "required": false
     },
     {
      "uid": 5,
      "name": "step",
      "comment": {
       "raw": [
        "Increase/decrease step on up/down icons clicks and up/down arrow keys"
       ]
      },
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "from": "@epam/uui-components:NumericInputProps",
      "required": false
     },
     {
      "uid": 6,
      "name": "inputCx",
      "comment": {
       "raw": [
        "CSS classes to put directly on the Input element"
       ]
      },
      "typeValue": {
       "raw": "null | string | number | boolean | ClassDictionary | ClassArray"
      },
      "typeValueRef": "@epam/uui-core:ClassValue",
      "from": "@epam/uui-components:NumericInputProps",
      "required": false
     },
     {
      "uid": 7,
      "name": "id",
      "comment": {
       "raw": [
        "HTML ID"
       ]
      },
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "from": "@epam/uui-components:NumericInputProps",
      "required": false
     },
     {
      "uid": 8,
      "name": "disableArrows",
      "comment": {
       "raw": [
        "Turn off up/down (increase/decrease) buttons"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-components:NumericInputProps",
      "required": false
     },
     {
      "uid": 9,
      "name": "align",
      "comment": {
       "raw": [
        "Align text inside the component. Useful for tables (in cell-mode) - to align numbers in table column"
       ]
      },
      "typeValue": {
       "raw": "'left' | 'right'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "left",
        "right"
       ]
      },
      "from": "@epam/uui-components:NumericInputProps",
      "required": false
     },
     {
      "uid": 10,
      "name": "disableLocaleFormatting",
      "comment": {
       "raw": [
        "Turns off locale-based formatting, standard Number.toString() is used instead",
        " @default false"
       ],
       "tags": {
        "@default": false
       }
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-components:NumericInputProps",
      "required": false
     },
     {
      "uid": 11,
      "name": "formatOptions",
      "comment": {
       "raw": [
        "Number formatting options. See #{link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/NumberFormat/NumberFormat}"
       ]
      },
      "typeValue": {
       "raw": "Intl.NumberFormatOptions"
      },
      "from": "@epam/uui-components:NumericInputProps",
      "required": false
     },
     {
      "uid": 12,
      "name": "formatValue",
      "comment": {
       "raw": [
        "A function to convert current input value to displayed text.",
        " Overrides standard Intl-based formatting.",
        " If passed, only maximumFractionDigits considered from formatOptions when both properties provided.",
        " Formatting is applied only when input is not focused."
       ]
      },
      "typeValue": {
       "raw": "(value: number) => string"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-components:NumericInputProps",
      "required": false
     },
     {
      "uid": 13,
      "name": "onFocus",
      "comment": {
       "raw": [
        "Called when component gets input focus"
       ]
      },
      "typeValue": {
       "raw": "(e: React.FocusEvent<HTMLInputElement, Element>) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:ICanFocus",
      "required": false
     },
     {
      "uid": 14,
      "name": "onBlur",
      "comment": {
       "raw": [
        "Called when component looses input focus"
       ]
      },
      "typeValue": {
       "raw": "(e: React.FocusEvent<HTMLInputElement, Element>) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:ICanFocus",
      "required": false
     },
     {
      "uid": 15,
      "name": "cx",
      "comment": {
       "raw": [
        "CSS class(es) to put on component's root. See {@link https://github.com/JedWatson/classnames#usage} for details"
       ]
      },
      "typeValue": {
       "raw": "null | string | number | boolean | ClassDictionary | ClassArray"
      },
      "typeValueRef": "@epam/uui-core:ClassValue",
      "from": "@epam/uui-core:IHasCX",
      "required": false
     },
     {
      "uid": 16,
      "name": "onClick",
      "comment": {
       "raw": [
        "Called when component is clicked"
       ]
      },
      "typeValue": {
       "raw": "(e?: any) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IClickable",
      "required": false
     },
     {
      "uid": 17,
      "name": "isDisabled",
      "comment": {
       "raw": [
        "Disable editing, and visually de-emphasize value of the component"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:IDisableable",
      "required": false
     },
     {
      "uid": 18,
      "name": "value",
      "comment": {
       "raw": [
        "The current value of component"
       ]
      },
      "typeValue": {
       "raw": "null | number"
      },
      "editor": {
       "type": "number"
      },
      "from": "@epam/uui-core:IEditable",
      "required": true
     },
     {
      "uid": 19,
      "name": "onValueChange",
      "comment": {
       "raw": [
        "Called when value needs to be changed (usually due to user interaction)"
       ]
      },
      "typeValue": {
       "raw": "(newValue: number | null) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IEditable",
      "required": true
     },
     {
      "uid": 20,
      "name": "isInvalid",
      "comment": {
       "raw": [
        "True if component contains invalid input"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:ICanBeInvalid",
      "required": false
     },
     {
      "uid": 21,
      "name": "validationMessage",
      "comment": {
       "raw": [
        "Message describing why the value is invalid"
       ]
      },
      "typeValue": {
       "raw": "null | string | number | boolean | React.ReactElement<any, string | React.JSXElementConstructor<any>> | React.ReactFragment | React.ReactPortal"
      },
      "typeValueRef": "@types/react:ReactNode",
      "from": "@epam/uui-core:ICanBeInvalid",
      "required": false
     },
     {
      "uid": 22,
      "name": "validationProps",
      "comment": {
       "raw": [
        "If T is a complex value (object or array), this property contains validation states of inner items"
       ]
      },
      "typeValue": {
       "raw": "{ [key: string]: ICanBeInvalid; }"
      },
      "from": "@epam/uui-core:ICanBeInvalid",
      "required": false
     },
     {
      "uid": 23,
      "name": "isReadonly",
      "comment": {
       "raw": [
        "Disable editing. Unlike isDisabled, keep component's value readable."
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:ICanBeReadonly",
      "required": false
     },
     {
      "uid": 24,
      "name": "isRequired",
      "comment": {
       "raw": [
        "Marks that component's value is required and shouldn't be empty"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:ICanBeRequired",
      "required": false
     },
     {
      "uid": 25,
      "name": "placeholder",
      "comment": {
       "raw": [
        "Placeholder to display when empty"
       ]
      },
      "typeValue": {
       "raw": "any"
      },
      "from": "@epam/uui-core:IHasPlaceholder",
      "required": false
     },
     {
      "uid": 26,
      "name": "getValueChangeAnalyticsEvent",
      "comment": {
       "raw": [
        "Given a value, returns an analytics event to send when component is edited.",
        " See [AnalyticsContext](@link https://uui.epam.com/documents?id=analyticsContext&mode=doc&skin=UUI4_promo&category=contexts)."
       ]
      },
      "typeValue": {
       "raw": "(newValue: number | null, oldValue: number | null) => AnalyticsEvent"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IAnalyticableOnChange",
      "required": false
     },
     {
      "uid": 27,
      "name": "rawProps",
      "comment": {
       "raw": [
        "Any HTML attributes (native or 'data-') to put on the underlying component"
       ]
      },
      "typeValue": {
       "raw": "React.HTMLAttributes<HTMLDivElement> & Record<`data-${string}`, string>"
      },
      "from": "@epam/uui-core:IHasRawProps",
      "required": false
     },
     {
      "uid": 28,
      "name": "forwardedRef",
      "comment": {
       "raw": [
        "this ref is passed to the underlying component"
       ]
      },
      "typeValue": {
       "raw": "null | (instance: HTMLDivElement | null) => void | React.MutableRefObject<HTMLDivElement | null>"
      },
      "from": "@epam/uui-core:IHasForwardedRef",
      "required": false
     },
     {
      "uid": 29,
      "name": "size",
      "typeValue": {
       "raw": "'36' | '48' | '24' | '30' | '42' | 'none'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "24",
        "30",
        "36",
        "42",
        "48",
        "none"
       ]
      },
      "from": "@epam/uui:SizeMod",
      "required": false
     },
     {
      "uid": 30,
      "name": "mode",
      "comment": {
       "raw": [
        "Visual mode for component:",
        " - form: default visuals, to use in forms.",
        " - cell: adjust to embed as table cell editor: no borders, no focus (it is applied by DataCell)",
        " - inline: adjust for WYSIWYG UX. Backgrounds removed. Borders appear only on hover."
       ]
      },
      "typeValue": {
       "raw": "'inline' | 'form' | 'cell'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "inline",
        "form",
        "cell"
       ]
      },
      "from": "@epam/uui:IHasEditMode",
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui:PanelMods": {
   "summary": {
    "module": "@epam/uui",
    "typeName": {
     "name": "PanelMods",
     "nameFull": "PanelMods"
    },
    "src": "uui/components/layout/FlexItems/Panel.tsx",
    "exported": true
   },
   "details": {
    "kind": 263,
    "typeValue": {
     "raw": "PanelMods",
     "print": [
      "interface PanelMods {",
      "    shadow?: boolean;",
      "    margin?: '24';",
      "    background?: 'surface';",
      "}"
     ]
    },
    "props": [
     {
      "uid": 1,
      "name": "shadow",
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "required": false
     },
     {
      "uid": 2,
      "name": "margin",
      "typeValue": {
       "raw": "'24'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "24"
       ]
      },
      "required": false
     },
     {
      "uid": 3,
      "name": "background",
      "typeValue": {
       "raw": "'surface'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "surface"
       ]
      },
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui:PanelProps": {
   "summary": {
    "module": "@epam/uui",
    "typeName": {
     "name": "PanelProps",
     "nameFull": "PanelProps"
    },
    "src": "uui/components/layout/FlexItems/Panel.tsx",
    "exported": true
   },
   "details": {
    "kind": 264,
    "typeValue": {
     "raw": "PanelProps",
     "print": [
      "type PanelProps = VPanelProps & PanelMods;"
     ]
    },
    "props": [
     {
      "uid": 1,
      "name": "cx",
      "comment": {
       "raw": [
        "CSS class(es) to put on component's root. See {@link https://github.com/JedWatson/classnames#usage} for details"
       ]
      },
      "typeValue": {
       "raw": "null | string | number | boolean | ClassDictionary | ClassArray"
      },
      "typeValueRef": "@epam/uui-core:ClassValue",
      "from": "@epam/uui-core:IHasCX",
      "required": false
     },
     {
      "uid": 2,
      "name": "children",
      "typeValue": {
       "raw": "null | string | number | boolean | React.ReactElement<any, string | React.JSXElementConstructor<any>> | React.ReactFragment | React.ReactPortal"
      },
      "typeValueRef": "@types/react:ReactNode",
      "from": "@epam/uui-core:IHasChildren",
      "required": false
     },
     {
      "uid": 3,
      "name": "onClick",
      "comment": {
       "raw": [
        "Called when component is clicked"
       ]
      },
      "typeValue": {
       "raw": "(e?: any) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IClickable",
      "required": false
     },
     {
      "uid": 4,
      "name": "rawProps",
      "comment": {
       "raw": [
        "Any HTML attributes (native or 'data-') to put on the underlying component"
       ]
      },
      "typeValue": {
       "raw": "React.HTMLAttributes<HTMLDivElement> & Record<`data-${string}`, string>"
      },
      "from": "@epam/uui-core:IHasRawProps",
      "required": false
     },
     {
      "uid": 5,
      "name": "forwardedRef",
      "comment": {
       "raw": [
        "this ref is passed to the underlying component"
       ]
      },
      "typeValue": {
       "raw": "null | (instance: HTMLDivElement | null) => void | React.MutableRefObject<HTMLDivElement | null>"
      },
      "from": "@epam/uui-core:IHasForwardedRef",
      "required": false
     },
     {
      "uid": 6,
      "name": "clickAnalyticsEvent",
      "comment": {
       "raw": [
        "An analytics event to send (via AnalyticsContext) when component is clicked.",
        " See [AnalyticsContext](@link https://uui.epam.com/documents?id=analyticsContext&mode=doc&skin=UUI4_promo&category=contexts)."
       ]
      },
      "typeValue": {
       "raw": "null | { [key: string]: any; name: string; }"
      },
      "from": "@epam/uui-core:IAnalyticableClick",
      "required": false
     },
     {
      "uid": 7,
      "name": "style",
      "typeValue": {
       "raw": "React.CSSProperties"
      },
      "from": "@epam/uui-core:VPanelProps",
      "required": false
     },
     {
      "uid": 8,
      "name": "shadow",
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui:PanelMods",
      "required": false
     },
     {
      "uid": 9,
      "name": "margin",
      "typeValue": {
       "raw": "'24'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "24"
       ]
      },
      "from": "@epam/uui:PanelMods",
      "required": false
     },
     {
      "uid": 10,
      "name": "background",
      "typeValue": {
       "raw": "'surface'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "surface"
       ]
      },
      "from": "@epam/uui:PanelMods",
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui:PickerInputProps": {
   "summary": {
    "module": "@epam/uui",
    "typeName": {
     "name": "PickerInputProps",
     "nameFull": "PickerInputProps"
    },
    "src": "uui/components/pickers/PickerInput.tsx",
    "exported": true
   },
   "details": {
    "kind": 264,
    "typeValue": {
     "raw": "PickerInputProps",
     "print": [
      "type PickerInputProps = SizeMod & IHasEditMode & {};"
     ]
    },
    "props": [
     {
      "uid": 1,
      "name": "size",
      "typeValue": {
       "raw": "'36' | '48' | '24' | '30' | '42' | 'none'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "24",
        "30",
        "36",
        "42",
        "48",
        "none"
       ]
      },
      "from": "@epam/uui:SizeMod",
      "required": false
     },
     {
      "uid": 2,
      "name": "mode",
      "comment": {
       "raw": [
        "Visual mode for component:",
        " - form: default visuals, to use in forms.",
        " - cell: adjust to embed as table cell editor: no borders, no focus (it is applied by DataCell)",
        " - inline: adjust for WYSIWYG UX. Backgrounds removed. Borders appear only on hover."
       ]
      },
      "typeValue": {
       "raw": "'inline' | 'form' | 'cell'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "inline",
        "form",
        "cell"
       ]
      },
      "from": "@epam/uui:IHasEditMode",
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui:PickerItemProps": {
   "summary": {
    "module": "@epam/uui",
    "typeName": {
     "name": "PickerItemProps",
     "nameFull": "PickerItemProps<TItem, TId>"
    },
    "src": "uui/components/pickers/PickerItem.tsx",
    "exported": true
   },
   "details": {
    "kind": 263,
    "typeValue": {
     "raw": "PickerItemProps<TItem, TId>",
     "print": [
      "interface PickerItemProps<TItem, TId> extends DataRowProps<TItem, TId>, SizeMod {",
      "    avatarUrl?: string;",
      "    icon?: Icon;",
      "    title?: string;",
      "    subtitle?: string;",
      "    dataSourceState?: DataSourceState;",
      "    /**",
      "     * Enables highlighting of the items' text with search-matching results.",
      "     * @default true",
      "     * */",
      "    highlightSearchMatches?: boolean;",
      "}"
     ]
    },
    "props": [
     {
      "uid": 1,
      "name": "avatarUrl",
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "required": false
     },
     {
      "uid": 2,
      "name": "icon",
      "typeValue": {
       "raw": "Icon"
      },
      "editor": {
       "type": "component"
      },
      "required": false
     },
     {
      "uid": 3,
      "name": "title",
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "required": false
     },
     {
      "uid": 4,
      "name": "subtitle",
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "required": false
     },
     {
      "uid": 5,
      "name": "dataSourceState",
      "typeValue": {
       "raw": "DataSourceState<Record<string, any>, any>"
      },
      "required": false
     },
     {
      "uid": 6,
      "name": "highlightSearchMatches",
      "comment": {
       "raw": [
        "Enables highlighting of the items' text with search-matching results.",
        " @default true"
       ],
       "tags": {
        "@default": true
       }
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "required": false
     },
     {
      "uid": 7,
      "name": "cx",
      "comment": {
       "raw": [
        "CSS class(es) to put on component's root. See {@link https://github.com/JedWatson/classnames#usage} for details"
       ]
      },
      "typeValue": {
       "raw": "null | string | number | boolean | ClassDictionary | ClassArray"
      },
      "typeValueRef": "@epam/uui-core:ClassValue",
      "from": "@epam/uui-core:IHasCX",
      "required": false
     },
     {
      "uid": 8,
      "name": "onClick",
      "comment": {
       "raw": [
        "Called when component is clicked"
       ]
      },
      "typeValue": {
       "raw": "((e?: any) => void) & ((rowProps: DataRowProps<TItem, TId>) => void) & ((rowProps: DataRowProps<TItem, TId>) => void)"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IClickable",
      "required": false
     },
     {
      "uid": 9,
      "name": "key",
      "typeValue": {
       "raw": "null | string | number"
      },
      "from": "@types/react:Attributes",
      "required": false
     },
     {
      "uid": 10,
      "name": "children",
      "typeValue": {
       "raw": "null | string | number | boolean | React.ReactElement<any, string | React.JSXElementConstructor<any>> | React.ReactFragment | React.ReactPortal"
      },
      "typeValueRef": "@types/react:ReactNode",
      "from": "@epam/uui-core:IHasChildren",
      "required": false
     },
     {
      "uid": 11,
      "name": "rawProps",
      "comment": {
       "raw": [
        "Any HTML attributes (native or 'data-') to put on the underlying component"
       ]
      },
      "typeValue": {
       "raw": "React.HTMLAttributes<HTMLDivElement> & Record<`data-${string}`, string>"
      },
      "from": "@epam/uui-core:IHasRawProps",
      "required": false
     },
     {
      "uid": 12,
      "name": "alignItems",
      "comment": {
       "raw": [
        "Flexbox align-items property [Flexbox Guide](https://css-tricks.com/snippets/css/a-guide-to-flexbox/)"
       ]
      },
      "typeValue": {
       "raw": "'top' | 'bottom' | 'center' | 'stretch'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "top",
        "bottom",
        "center",
        "stretch"
       ]
      },
      "from": "@epam/uui-core:FlexRowProps",
      "required": false
     },
     {
      "uid": 13,
      "name": "columnGap",
      "comment": {
       "raw": [
        "Flexbox column gap property [Flexbox Guide](https://css-tricks.com/snippets/css/a-guide-to-flexbox/#aa-gap-row-gap-column-gap)"
       ]
      },
      "typeValue": {
       "raw": "number | '6' | '12' | '18' | '36' | '24'"
      },
      "from": "@epam/uui-core:FlexRowProps",
      "required": false
     },
     {
      "uid": 14,
      "name": "rowGap",
      "comment": {
       "raw": [
        "Flexbox row gap property [Flexbox Guide](https://css-tricks.com/snippets/css/a-guide-to-flexbox/#aa-gap-row-gap-column-gap)"
       ]
      },
      "typeValue": {
       "raw": "number | '6' | '12' | '18' | '36' | '24'"
      },
      "from": "@epam/uui-core:FlexRowProps",
      "required": false
     },
     {
      "uid": 15,
      "name": "checkbox",
      "comment": {
       "raw": [
        "If row needs a checkbox, this field should be specified and it props can be configured here"
       ]
      },
      "typeValue": {
       "raw": "{ isVisible: boolean; } & IDisableable & ICanBeInvalid"
      },
      "from": "@epam/uui-core:DataRowOptions",
      "required": false
     },
     {
      "uid": 16,
      "name": "isSelectable",
      "comment": {
       "raw": [
        "True if row is selectable (for whole-row single-selection, multi-selection via checkbox are configured with the checkbox prop)"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:DataRowOptions",
      "required": false
     },
     {
      "uid": 17,
      "name": "dnd",
      "comment": {
       "raw": [
        "Configures row drag-n-drop options - if it can be dragged, can rows can be dropped into it, etc."
       ]
      },
      "typeValue": {
       "raw": "IDndActor<any, any>"
      },
      "from": "@epam/uui-core:DataRowOptions",
      "required": false
     },
     {
      "uid": 18,
      "name": "link",
      "comment": {
       "raw": [
        "Can be specified to make row act as a link (plain or SPA)"
       ]
      },
      "typeValue": {
       "raw": "Link"
      },
      "from": "@epam/uui-core:DataRowOptions",
      "required": false
     },
     {
      "uid": 19,
      "name": "pin",
      "comment": {
       "raw": [
        "A pure function that gets pinned state for each row.",
        " If row pinned, it means that it will be sticky inside their parent section."
       ]
      },
      "typeValue": {
       "raw": "(rowProps: DataRowProps<TItem, TId>) => boolean"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:DataRowOptions",
      "required": false
     },
     {
      "uid": 20,
      "name": "isDisabled",
      "comment": {
       "raw": [
        "Disable editing, and visually de-emphasize value of the component"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:IDisableable",
      "required": false
     },
     {
      "uid": 21,
      "name": "value",
      "comment": {
       "raw": [
        "The current value of component"
       ]
      },
      "typeValue": {
       "raw": "TItem"
      },
      "from": "@epam/uui-core:IEditable",
      "required": true
     },
     {
      "uid": 22,
      "name": "onValueChange",
      "comment": {
       "raw": [
        "Called when value needs to be changed (usually due to user interaction)"
       ]
      },
      "typeValue": {
       "raw": "(newValue: TItem) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IEditable",
      "required": true
     },
     {
      "uid": 23,
      "name": "isInvalid",
      "comment": {
       "raw": [
        "True if component contains invalid input"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:ICanBeInvalid",
      "required": false
     },
     {
      "uid": 24,
      "name": "validationMessage",
      "comment": {
       "raw": [
        "Message describing why the value is invalid"
       ]
      },
      "typeValue": {
       "raw": "null | string | number | boolean | React.ReactElement<any, string | React.JSXElementConstructor<any>> | React.ReactFragment | React.ReactPortal"
      },
      "from": "@epam/uui-core:ICanBeInvalid",
      "required": false
     },
     {
      "uid": 25,
      "name": "validationProps",
      "comment": {
       "raw": [
        "If T is a complex value (object or array), this property contains validation states of inner items"
       ]
      },
      "typeValue": {
       "raw": "{ [key: string]: ICanBeInvalid; }"
      },
      "from": "@epam/uui-core:ICanBeInvalid",
      "required": false
     },
     {
      "uid": 26,
      "name": "isReadonly",
      "comment": {
       "raw": [
        "Disable editing. Unlike isDisabled, keep component's value readable."
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:ICanBeReadonly",
      "required": false
     },
     {
      "uid": 27,
      "name": "isRequired",
      "comment": {
       "raw": [
        "Marks that component's value is required and shouldn't be empty"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:ICanBeRequired",
      "required": false
     },
     {
      "uid": 28,
      "name": "id",
      "comment": {
       "raw": [
        "ID of the TItem rows displays"
       ]
      },
      "typeValue": {
       "raw": "TId"
      },
      "from": "@epam/uui-core:DataRowProps",
      "required": true
     },
     {
      "uid": 29,
      "name": "rowKey",
      "comment": {
       "raw": [
        "Key to be used as component's key when rendering. Usually, it's stringified ID"
       ]
      },
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "from": "@epam/uui-core:DataRowProps",
      "required": true
     },
     {
      "uid": 30,
      "name": "index",
      "comment": {
       "raw": [
        "Index of the row, from the top of the list. This doesn't account any hierarchy."
       ]
      },
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "from": "@epam/uui-core:DataRowProps",
      "required": true
     },
     {
      "uid": 31,
      "name": "parentId",
      "comment": {
       "raw": [
        "ID of the parent TItem"
       ]
      },
      "typeValue": {
       "raw": "TId"
      },
      "from": "@epam/uui-core:DataRowProps",
      "required": false
     },
     {
      "uid": 32,
      "name": "path",
      "comment": {
       "raw": [
        "Hierarchical path from the root node to the item (excluding the item itself)"
       ]
      },
      "typeValue": {
       "raw": "DataRowPathItem<TId, TItem>[]"
      },
      "from": "@epam/uui-core:DataRowProps",
      "required": false
     },
     {
      "uid": 33,
      "name": "depth",
      "comment": {
       "raw": [
        "Depth of the row in tree, 0 for the top-level"
       ]
      },
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "from": "@epam/uui-core:DataRowProps",
      "required": false
     },
     {
      "uid": 34,
      "name": "indent",
      "comment": {
       "raw": [
        "Indent of the item, to show hierarchy.",
        "  Unlike depth, it contains additional logic, to not add unnecessary indents:",
        "  if all children of node has no children, all nodes would get the same indent as parent."
       ]
      },
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "from": "@epam/uui-core:DataRowProps",
      "required": false
     },
     {
      "uid": 35,
      "name": "isLoading",
      "comment": {
       "raw": [
        "True if row is in loading state. 'value' is empty in this case"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:DataRowProps",
      "required": false
     },
     {
      "uid": 36,
      "name": "isUnknown",
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:DataRowProps",
      "required": false
     },
     {
      "uid": 37,
      "name": "isFoldable",
      "comment": {
       "raw": [
        "True if row be folded or unfolded (usually because it contains children)"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:DataRowProps",
      "required": false
     },
     {
      "uid": 38,
      "name": "isFolded",
      "comment": {
       "raw": [
        "True if row is currently folded"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:DataRowProps",
      "required": false
     },
     {
      "uid": 39,
      "name": "isChecked",
      "comment": {
       "raw": [
        "True if row is checked with checkbox"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:DataRowProps",
      "required": false
     },
     {
      "uid": 40,
      "name": "isCheckable",
      "comment": {
       "raw": [
        "True if row has checkbox and can be checkable"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:DataRowProps",
      "required": false
     },
     {
      "uid": 41,
      "name": "isChildrenChecked",
      "comment": {
       "raw": [
        "True if some of row's children are checked.",
        " Used to show 'indefinite' checkbox state, to show user that something inside is checked"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:DataRowProps",
      "required": false
     },
     {
      "uid": 42,
      "name": "isSelected",
      "comment": {
       "raw": [
        "True if row is selected (in single-select mode, or in case when interface use both single row selection and checkboxes)"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:DataRowProps",
      "required": false
     },
     {
      "uid": 43,
      "name": "isChildrenSelected",
      "comment": {
       "raw": [
        "True if any of row's children is selected."
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:DataRowProps",
      "required": false
     },
     {
      "uid": 44,
      "name": "isFocused",
      "comment": {
       "raw": [
        "True if row is focused. Focus can be changed via keyboard arrow keys, or by hovering mouse on top of the row"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:DataRowProps",
      "required": false
     },
     {
      "uid": 45,
      "name": "isLastChild",
      "comment": {
       "raw": [
        "True if row is the last child of his parent"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:DataRowProps",
      "required": false
     },
     {
      "uid": 46,
      "name": "onFold",
      "comment": {
       "raw": [
        "Handles row folding change.",
        " We demand to pass the row as well, to avoid creating closures for each row."
       ]
      },
      "typeValue": {
       "raw": "(rowProps: DataRowProps<TItem, TId>) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:DataRowProps",
      "required": false
     },
     {
      "uid": 47,
      "name": "onCheck",
      "comment": {
       "raw": [
        "Handles row checkbox change.",
        " We demand to pass the row as well, to avoid creating closures for each row."
       ]
      },
      "typeValue": {
       "raw": "(rowProps: DataRowProps<TItem, TId>) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:DataRowProps",
      "required": false
     },
     {
      "uid": 48,
      "name": "onSelect",
      "comment": {
       "raw": [
        "Handles row selection.",
        " We demand to pass the row as well, to avoid creating closures for each row."
       ]
      },
      "typeValue": {
       "raw": "(rowProps: DataRowProps<TItem, TId>) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:DataRowProps",
      "required": false
     },
     {
      "uid": 49,
      "name": "onFocus",
      "comment": {
       "raw": [
        "Handles row focusing."
       ]
      },
      "typeValue": {
       "raw": "(focusedIndex: number) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:DataRowProps",
      "required": false
     },
     {
      "uid": 50,
      "name": "isPinned",
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:DataRowProps",
      "required": false
     },
     {
      "uid": 51,
      "name": "size",
      "typeValue": {
       "raw": "'36' | '48' | '24' | '30' | '42' | 'none'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "24",
        "30",
        "36",
        "42",
        "48",
        "none"
       ]
      },
      "from": "@epam/uui:SizeMod",
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui:PickerListItemProps": {
   "summary": {
    "module": "@epam/uui",
    "typeName": {
     "name": "PickerListItemProps",
     "nameFull": "PickerListItemProps<TItem, TId>"
    },
    "src": "uui/components/pickers/PickerListItem.tsx",
    "exported": true
   },
   "details": {
    "kind": 263,
    "typeValue": {
     "raw": "PickerListItemProps<TItem, TId>",
     "print": [
      "interface PickerListItemProps<TItem, TId> extends DataRowProps<TItem, TId> {",
      "    getName(item: TItem): string;",
      "}"
     ]
    },
    "props": [
     {
      "uid": 1,
      "name": "getName",
      "typeValue": {
       "raw": "(item: TItem) => string"
      },
      "editor": {
       "type": "func"
      },
      "required": true
     },
     {
      "uid": 2,
      "name": "cx",
      "comment": {
       "raw": [
        "CSS class(es) to put on component's root. See {@link https://github.com/JedWatson/classnames#usage} for details"
       ]
      },
      "typeValue": {
       "raw": "null | string | number | boolean | ClassDictionary | ClassArray"
      },
      "typeValueRef": "@epam/uui-core:ClassValue",
      "from": "@epam/uui-core:IHasCX",
      "required": false
     },
     {
      "uid": 3,
      "name": "onClick",
      "comment": {
       "raw": [
        "Called when component is clicked"
       ]
      },
      "typeValue": {
       "raw": "((e?: any) => void) & ((rowProps: DataRowProps<TItem, TId>) => void) & ((rowProps: DataRowProps<TItem, TId>) => void)"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IClickable",
      "required": false
     },
     {
      "uid": 4,
      "name": "key",
      "typeValue": {
       "raw": "null | string | number"
      },
      "from": "@types/react:Attributes",
      "required": false
     },
     {
      "uid": 5,
      "name": "children",
      "typeValue": {
       "raw": "null | string | number | boolean | React.ReactElement<any, string | React.JSXElementConstructor<any>> | React.ReactFragment | React.ReactPortal"
      },
      "typeValueRef": "@types/react:ReactNode",
      "from": "@epam/uui-core:IHasChildren",
      "required": false
     },
     {
      "uid": 6,
      "name": "rawProps",
      "comment": {
       "raw": [
        "Any HTML attributes (native or 'data-') to put on the underlying component"
       ]
      },
      "typeValue": {
       "raw": "React.HTMLAttributes<HTMLDivElement> & Record<`data-${string}`, string>"
      },
      "from": "@epam/uui-core:IHasRawProps",
      "required": false
     },
     {
      "uid": 7,
      "name": "alignItems",
      "comment": {
       "raw": [
        "Flexbox align-items property [Flexbox Guide](https://css-tricks.com/snippets/css/a-guide-to-flexbox/)"
       ]
      },
      "typeValue": {
       "raw": "'top' | 'bottom' | 'center' | 'stretch'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "top",
        "bottom",
        "center",
        "stretch"
       ]
      },
      "from": "@epam/uui-core:FlexRowProps",
      "required": false
     },
     {
      "uid": 8,
      "name": "columnGap",
      "comment": {
       "raw": [
        "Flexbox column gap property [Flexbox Guide](https://css-tricks.com/snippets/css/a-guide-to-flexbox/#aa-gap-row-gap-column-gap)"
       ]
      },
      "typeValue": {
       "raw": "number | '6' | '12' | '18' | '36' | '24'"
      },
      "from": "@epam/uui-core:FlexRowProps",
      "required": false
     },
     {
      "uid": 9,
      "name": "rowGap",
      "comment": {
       "raw": [
        "Flexbox row gap property [Flexbox Guide](https://css-tricks.com/snippets/css/a-guide-to-flexbox/#aa-gap-row-gap-column-gap)"
       ]
      },
      "typeValue": {
       "raw": "number | '6' | '12' | '18' | '36' | '24'"
      },
      "from": "@epam/uui-core:FlexRowProps",
      "required": false
     },
     {
      "uid": 10,
      "name": "checkbox",
      "comment": {
       "raw": [
        "If row needs a checkbox, this field should be specified and it props can be configured here"
       ]
      },
      "typeValue": {
       "raw": "{ isVisible: boolean; } & IDisableable & ICanBeInvalid"
      },
      "from": "@epam/uui-core:DataRowOptions",
      "required": false
     },
     {
      "uid": 11,
      "name": "isSelectable",
      "comment": {
       "raw": [
        "True if row is selectable (for whole-row single-selection, multi-selection via checkbox are configured with the checkbox prop)"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:DataRowOptions",
      "required": false
     },
     {
      "uid": 12,
      "name": "dnd",
      "comment": {
       "raw": [
        "Configures row drag-n-drop options - if it can be dragged, can rows can be dropped into it, etc."
       ]
      },
      "typeValue": {
       "raw": "IDndActor<any, any>"
      },
      "from": "@epam/uui-core:DataRowOptions",
      "required": false
     },
     {
      "uid": 13,
      "name": "link",
      "comment": {
       "raw": [
        "Can be specified to make row act as a link (plain or SPA)"
       ]
      },
      "typeValue": {
       "raw": "Link"
      },
      "from": "@epam/uui-core:DataRowOptions",
      "required": false
     },
     {
      "uid": 14,
      "name": "pin",
      "comment": {
       "raw": [
        "A pure function that gets pinned state for each row.",
        " If row pinned, it means that it will be sticky inside their parent section."
       ]
      },
      "typeValue": {
       "raw": "(rowProps: DataRowProps<TItem, TId>) => boolean"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:DataRowOptions",
      "required": false
     },
     {
      "uid": 15,
      "name": "isDisabled",
      "comment": {
       "raw": [
        "Disable editing, and visually de-emphasize value of the component"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:IDisableable",
      "required": false
     },
     {
      "uid": 16,
      "name": "value",
      "comment": {
       "raw": [
        "The current value of component"
       ]
      },
      "typeValue": {
       "raw": "TItem"
      },
      "from": "@epam/uui-core:IEditable",
      "required": true
     },
     {
      "uid": 17,
      "name": "onValueChange",
      "comment": {
       "raw": [
        "Called when value needs to be changed (usually due to user interaction)"
       ]
      },
      "typeValue": {
       "raw": "(newValue: TItem) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IEditable",
      "required": true
     },
     {
      "uid": 18,
      "name": "isInvalid",
      "comment": {
       "raw": [
        "True if component contains invalid input"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:ICanBeInvalid",
      "required": false
     },
     {
      "uid": 19,
      "name": "validationMessage",
      "comment": {
       "raw": [
        "Message describing why the value is invalid"
       ]
      },
      "typeValue": {
       "raw": "null | string | number | boolean | React.ReactElement<any, string | React.JSXElementConstructor<any>> | React.ReactFragment | React.ReactPortal"
      },
      "from": "@epam/uui-core:ICanBeInvalid",
      "required": false
     },
     {
      "uid": 20,
      "name": "validationProps",
      "comment": {
       "raw": [
        "If T is a complex value (object or array), this property contains validation states of inner items"
       ]
      },
      "typeValue": {
       "raw": "{ [key: string]: ICanBeInvalid; }"
      },
      "from": "@epam/uui-core:ICanBeInvalid",
      "required": false
     },
     {
      "uid": 21,
      "name": "isReadonly",
      "comment": {
       "raw": [
        "Disable editing. Unlike isDisabled, keep component's value readable."
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:ICanBeReadonly",
      "required": false
     },
     {
      "uid": 22,
      "name": "isRequired",
      "comment": {
       "raw": [
        "Marks that component's value is required and shouldn't be empty"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:ICanBeRequired",
      "required": false
     },
     {
      "uid": 23,
      "name": "id",
      "comment": {
       "raw": [
        "ID of the TItem rows displays"
       ]
      },
      "typeValue": {
       "raw": "TId"
      },
      "from": "@epam/uui-core:DataRowProps",
      "required": true
     },
     {
      "uid": 24,
      "name": "rowKey",
      "comment": {
       "raw": [
        "Key to be used as component's key when rendering. Usually, it's stringified ID"
       ]
      },
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "from": "@epam/uui-core:DataRowProps",
      "required": true
     },
     {
      "uid": 25,
      "name": "index",
      "comment": {
       "raw": [
        "Index of the row, from the top of the list. This doesn't account any hierarchy."
       ]
      },
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "from": "@epam/uui-core:DataRowProps",
      "required": true
     },
     {
      "uid": 26,
      "name": "parentId",
      "comment": {
       "raw": [
        "ID of the parent TItem"
       ]
      },
      "typeValue": {
       "raw": "TId"
      },
      "from": "@epam/uui-core:DataRowProps",
      "required": false
     },
     {
      "uid": 27,
      "name": "path",
      "comment": {
       "raw": [
        "Hierarchical path from the root node to the item (excluding the item itself)"
       ]
      },
      "typeValue": {
       "raw": "DataRowPathItem<TId, TItem>[]"
      },
      "from": "@epam/uui-core:DataRowProps",
      "required": false
     },
     {
      "uid": 28,
      "name": "depth",
      "comment": {
       "raw": [
        "Depth of the row in tree, 0 for the top-level"
       ]
      },
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "from": "@epam/uui-core:DataRowProps",
      "required": false
     },
     {
      "uid": 29,
      "name": "indent",
      "comment": {
       "raw": [
        "Indent of the item, to show hierarchy.",
        "  Unlike depth, it contains additional logic, to not add unnecessary indents:",
        "  if all children of node has no children, all nodes would get the same indent as parent."
       ]
      },
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "from": "@epam/uui-core:DataRowProps",
      "required": false
     },
     {
      "uid": 30,
      "name": "isLoading",
      "comment": {
       "raw": [
        "True if row is in loading state. 'value' is empty in this case"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:DataRowProps",
      "required": false
     },
     {
      "uid": 31,
      "name": "isUnknown",
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:DataRowProps",
      "required": false
     },
     {
      "uid": 32,
      "name": "isFoldable",
      "comment": {
       "raw": [
        "True if row be folded or unfolded (usually because it contains children)"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:DataRowProps",
      "required": false
     },
     {
      "uid": 33,
      "name": "isFolded",
      "comment": {
       "raw": [
        "True if row is currently folded"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:DataRowProps",
      "required": false
     },
     {
      "uid": 34,
      "name": "isChecked",
      "comment": {
       "raw": [
        "True if row is checked with checkbox"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:DataRowProps",
      "required": false
     },
     {
      "uid": 35,
      "name": "isCheckable",
      "comment": {
       "raw": [
        "True if row has checkbox and can be checkable"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:DataRowProps",
      "required": false
     },
     {
      "uid": 36,
      "name": "isChildrenChecked",
      "comment": {
       "raw": [
        "True if some of row's children are checked.",
        " Used to show 'indefinite' checkbox state, to show user that something inside is checked"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:DataRowProps",
      "required": false
     },
     {
      "uid": 37,
      "name": "isSelected",
      "comment": {
       "raw": [
        "True if row is selected (in single-select mode, or in case when interface use both single row selection and checkboxes)"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:DataRowProps",
      "required": false
     },
     {
      "uid": 38,
      "name": "isChildrenSelected",
      "comment": {
       "raw": [
        "True if any of row's children is selected."
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:DataRowProps",
      "required": false
     },
     {
      "uid": 39,
      "name": "isFocused",
      "comment": {
       "raw": [
        "True if row is focused. Focus can be changed via keyboard arrow keys, or by hovering mouse on top of the row"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:DataRowProps",
      "required": false
     },
     {
      "uid": 40,
      "name": "isLastChild",
      "comment": {
       "raw": [
        "True if row is the last child of his parent"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:DataRowProps",
      "required": false
     },
     {
      "uid": 41,
      "name": "onFold",
      "comment": {
       "raw": [
        "Handles row folding change.",
        " We demand to pass the row as well, to avoid creating closures for each row."
       ]
      },
      "typeValue": {
       "raw": "(rowProps: DataRowProps<TItem, TId>) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:DataRowProps",
      "required": false
     },
     {
      "uid": 42,
      "name": "onCheck",
      "comment": {
       "raw": [
        "Handles row checkbox change.",
        " We demand to pass the row as well, to avoid creating closures for each row."
       ]
      },
      "typeValue": {
       "raw": "(rowProps: DataRowProps<TItem, TId>) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:DataRowProps",
      "required": false
     },
     {
      "uid": 43,
      "name": "onSelect",
      "comment": {
       "raw": [
        "Handles row selection.",
        " We demand to pass the row as well, to avoid creating closures for each row."
       ]
      },
      "typeValue": {
       "raw": "(rowProps: DataRowProps<TItem, TId>) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:DataRowProps",
      "required": false
     },
     {
      "uid": 44,
      "name": "onFocus",
      "comment": {
       "raw": [
        "Handles row focusing."
       ]
      },
      "typeValue": {
       "raw": "(focusedIndex: number) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:DataRowProps",
      "required": false
     },
     {
      "uid": 45,
      "name": "isPinned",
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:DataRowProps",
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui:PickerListProps": {
   "summary": {
    "module": "@epam/uui",
    "typeName": {
     "name": "PickerListProps",
     "nameFull": "PickerListProps<TItem, TId>"
    },
    "src": "uui/components/pickers/PickerList.tsx",
    "exported": true
   },
   "details": {
    "kind": 264,
    "typeValue": {
     "raw": "SizeMod & IHasPlaceholder & PickerModalOptions<TItem, TId> & { renderModalToggler?(props: IClickable & IHasCaption & IDisableable, selection: DataRowProps<TItem, TId>[]): React.ReactNode; noOptionsMessage?: React.ReactNode; } & PickerBaseOptions<TItem, TId> & { selectionMode: 'single'; valueType?: 'id' | undefined; } & IEditable<TId> & IAnalyticableOnChange<any> & { maxDefaultItems?: number | undefined; maxTotalItems?: number | undefined; defaultIds?: TId[] | undefined; settingsKey?: string | undefined; sortBy?(item: TItem, sorting: SortingOption<any>): string; } & IHasEditMode | SizeMod & IHasPlaceholder & PickerModalOptions<TItem, TId> & { renderModalToggler?(props: IClickable & IHasCaption & IDisableable, selection: DataRowProps<TItem, TId>[]): React.ReactNode; noOptionsMessage?: React.ReactNode; } & PickerBaseOptions<TItem, TId> & { selectionMode: 'single'; valueType: 'entity'; } & IEditable<TItem> & IAnalyticableOnChange<any> & { maxDefaultItems?: number | undefined; maxTotalItems?: number | undefined; defaultIds?: TId[] | undefined; settingsKey?: string | undefined; sortBy?(item: TItem, sorting: SortingOption<any>): string; } & IHasEditMode | SizeMod & IHasPlaceholder & PickerModalOptions<TItem, TId> & { renderModalToggler?(props: IClickable & IHasCaption & IDisableable, selection: DataRowProps<TItem, TId>[]): React.ReactNode; noOptionsMessage?: React.ReactNode; } & PickerBaseOptions<TItem, TId> & { selectionMode: 'multi'; valueType?: 'id' | undefined; emptyValue?: [] | null | undefined; } & IEditable<TId[]> & IAnalyticableOnChange<any> & { maxDefaultItems?: number | undefined; maxTotalItems?: number | undefined; defaultIds?: TId[] | undefined; settingsKey?: string | undefined; sortBy?(item: TItem, sorting: SortingOption<any>): string; } & IHasEditMode | SizeMod & IHasPlaceholder & PickerModalOptions<TItem, TId> & { renderModalToggler?(props: IClickable & IHasCaption & IDisableable, selection: DataRowProps<TItem, TId>[]): React.ReactNode; noOptionsMessage?: React.ReactNode; } & PickerBaseOptions<TItem, TId> & { selectionMode: 'multi'; valueType: 'entity'; emptyValue?: [] | null | undefined; } & IEditable<TItem[]> & IAnalyticableOnChange<any> & { maxDefaultItems?: number | undefined; maxTotalItems?: number | undefined; defaultIds?: TId[] | undefined; settingsKey?: string | undefined; sortBy?(item: TItem, sorting: SortingOption<any>): string; } & IHasEditMode",
     "print": [
      "type PickerListProps<TItem, TId> = SizeMod & IHasPlaceholder & PickerModalOptions<TItem, TId> & {",
      "    renderModalToggler?(props: IClickable & IHasCaption & IDisableable, selection: DataRowProps<TItem, TId>[]): React.ReactNode;",
      "    noOptionsMessage?: React.ReactNode;",
      "} & PickerListBaseProps<TItem, TId> & IHasEditMode;"
     ]
    },
    "props": [
     {
      "uid": 115,
      "name": "size",
      "typeValue": {
       "raw": "'36' | '48' | '24' | '30' | '42' | 'none'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "24",
        "30",
        "36",
        "42",
        "48",
        "none"
       ]
      },
      "from": "@epam/uui:SizeMod",
      "required": false
     },
     {
      "uid": 116,
      "name": "placeholder",
      "comment": {
       "raw": [
        "Placeholder to display when empty"
       ]
      },
      "typeValue": {
       "raw": "any"
      },
      "from": "@epam/uui-core:IHasPlaceholder",
      "required": false
     },
     {
      "uid": 117,
      "name": "renderFilter",
      "typeValue": {
       "raw": "(editableFilter: IEditable<any>) => React.ReactNode"
      },
      "editor": {
       "type": "component"
      },
      "from": "@epam/uui-components:PickerModalOptions",
      "required": false
     },
     {
      "uid": 118,
      "name": "renderFooter",
      "typeValue": {
       "raw": "(props: PickerFooterProps<TItem, TId> & Partial<IModal<any, any>>) => React.ReactNode"
      },
      "editor": {
       "type": "component"
      },
      "from": "@epam/uui-components:PickerModalOptions",
      "required": false
     },
     {
      "uid": 119,
      "name": "disallowClickOutside",
      "comment": {
       "raw": [
        "@default false"
       ],
       "tags": {
        "@default": false
       }
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-components:PickerModalOptions",
      "required": false
     },
     {
      "uid": 120,
      "name": "rawProps",
      "comment": {
       "raw": [
        "Any HTML attributes (native or 'data-') to put on the underlying component"
       ]
      },
      "typeValue": {
       "raw": "React.HTMLAttributes<HTMLDivElement> & Record<`data-${string}`, string>"
      },
      "from": "@epam/uui-core:IHasRawProps",
      "required": false
     },
     {
      "uid": 121,
      "name": "renderModalToggler",
      "typeValue": {
       "raw": "(props: IClickable & IHasCaption & IDisableable, selection: DataRowProps<TItem, TId>[]) => React.ReactNode"
      },
      "editor": {
       "type": "component"
      },
      "required": false
     },
     {
      "uid": 122,
      "name": "noOptionsMessage",
      "typeValue": {
       "raw": "null | string | number | boolean | React.ReactElement<any, string | React.JSXElementConstructor<any>> | React.ReactFragment | React.ReactPortal"
      },
      "typeValueRef": "@types/react:ReactNode",
      "required": false
     },
     {
      "uid": 123,
      "name": "entityName",
      "comment": {
       "raw": [
        "Name of the entity being selected. Affects wording like \"Please select [entity]\""
       ]
      },
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "from": "@epam/uui-core:PickerBaseOptions",
      "required": false
     },
     {
      "uid": 124,
      "name": "entityPluralName",
      "comment": {
       "raw": [
        "Plural name of the entity being selected. Affects wording like \"X [entities] selected\""
       ]
      },
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "from": "@epam/uui-core:PickerBaseOptions",
      "required": false
     },
     {
      "uid": 125,
      "name": "dataSource",
      "comment": {
       "raw": [
        "Datasource to get data for the picker"
       ]
      },
      "typeValue": {
       "raw": "IDataSource<TItem, TId, any>"
      },
      "from": "@epam/uui-core:PickerBaseOptions",
      "required": true
     },
     {
      "uid": 126,
      "name": "getName",
      "comment": {
       "raw": [
        "A pure function that gets entity name from entity object.",
        "     Default: (item) => item.name."
       ]
      },
      "typeValue": {
       "raw": "(item: TItem) => string"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:PickerBaseOptions",
      "required": false
     },
     {
      "uid": 127,
      "name": "renderRow",
      "comment": {
       "raw": [
        "Allow to customize how each selectable row is rendered. Can be used to add subtitles, avatars, etc."
       ]
      },
      "typeValue": {
       "raw": "(props: DataRowProps<TItem, TId>, dataSourceState: DataSourceState<Record<string, any>, any>) => React.ReactNode"
      },
      "editor": {
       "type": "component"
      },
      "from": "@epam/uui-core:PickerBaseOptions",
      "required": false
     },
     {
      "uid": 128,
      "name": "getRowOptions",
      "comment": {
       "raw": [
        "Gets options for each row. Allow to make rows non-selectable, as well as many other tweaks."
       ]
      },
      "typeValue": {
       "raw": "(item: TItem, index: number) => DataRowOptions<TItem, TId>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:PickerBaseOptions",
      "required": false
     },
     {
      "uid": 129,
      "name": "renderNotFound",
      "comment": {
       "raw": [
        "Overrides the default 'no records found' banner.",
        " The 'search' callback parameter allows to distinguish cases when there's no records at all, and when current search doesn't find anything."
       ]
      },
      "typeValue": {
       "raw": "(props: { search: string; onClose: () => void; }) => React.ReactNode"
      },
      "editor": {
       "type": "component"
      },
      "from": "@epam/uui-core:PickerBaseOptions",
      "required": false
     },
     {
      "uid": 130,
      "name": "emptyValue",
      "comment": {
       "raw": [
        "Defines which value is to set on clear. E.g. you can put an empty array instead of null for empty multi-select Pickers"
       ]
      },
      "typeValue": {
       "raw": "null | []"
      },
      "from": "@epam/uui-core:PickerBaseOptions",
      "required": false
     },
     {
      "uid": 131,
      "name": "sortBy",
      "comment": {
       "raw": [
        "Defines how items should be sorted. By default, items are shown in order they are provided to the DataSource"
       ]
      },
      "typeValue": {
       "raw": "((item: TItem, sorting: SortingOption<any>) => any) & ((item: TItem, sorting: SortingOption<any>) => string)"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:PickerBaseOptions",
      "required": false
     },
     {
      "uid": 132,
      "name": "filter",
      "comment": {
       "raw": [
        "Additional filter to apply to the DataSource. Can be used to limit selection somehow, w/o re-building the DataSource. E.g. in the linked pickers scenario."
       ]
      },
      "typeValue": {
       "raw": "any"
      },
      "from": "@epam/uui-core:PickerBaseOptions",
      "required": false
     },
     {
      "uid": 133,
      "name": "sorting",
      "comment": {
       "raw": [
        "Defines sorting to pass to the DataSource"
       ]
      },
      "typeValue": {
       "raw": "SortingOption<any>"
      },
      "from": "@epam/uui-core:PickerBaseOptions",
      "required": false
     },
     {
      "uid": 134,
      "name": "cascadeSelection",
      "comment": {
       "raw": [
        "Controls how the selection (checking items) of a parent node affects the selection of its all children, and vice versa.",
        " - false: All nodes are selected independently (default).",
        " - true or 'explicit': Selecting a parent node explicitly selects all its children. Unchecking the last parent's child unchecks its parent.",
        " - 'implicit': Selecting a parent node means that all children are considered checked.",
        "   The user sees all these nodes as checked on the UI, but only the selected parent is visible in the PickerInput tags, and only the checked",
        "   parent is present in the Picker's value or DataSourceState.checked array. When the user unchecks the first child of such a parent,",
        "   its parents become unchecked and all children but the unchecked one become checked, making children's selection explicit. If the last",
        "   unchecked child gets checked, all children from the checked are removed, returning to the implicit state when only the parent is checked."
       ]
      },
      "typeValue": {
       "raw": "boolean | 'implicit' | 'explicit'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        false,
        true,
        "implicit",
        "explicit"
       ]
      },
      "from": "@epam/uui-core:PickerBaseOptions",
      "required": false
     },
     {
      "uid": 135,
      "name": "isFoldedByDefault",
      "comment": {
       "raw": [
        "You can return true for all, or some items to fold them."
       ]
      },
      "typeValue": {
       "raw": "(item: TItem) => boolean"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:PickerBaseOptions",
      "required": false
     },
     {
      "uid": 136,
      "name": "getSearchFields",
      "comment": {
       "raw": [
        "Given an item, should return an array of string fields to search on. By default, the search is performed on item.name field."
       ]
      },
      "typeValue": {
       "raw": "(item: TItem) => string[]"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:PickerBaseOptions",
      "required": false
     },
     {
      "uid": 61,
      "name": "selectionMode",
      "comment": {
       "raw": [
        "If 'single' provided - only one item is selected. In case of 'multi' - multiple items are selected"
       ]
      },
      "typeValue": {
       "raw": "'single'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "single"
       ]
      },
      "from": "@epam/uui-core:SinglePickerProps",
      "required": true
     },
     {
      "uid": 24,
      "name": "valueType",
      "comment": {
       "raw": [
        "Defines what to use in value/onValueChange: 'id' - item id (TId). 'entity' - the item itself (TItem)"
       ]
      },
      "typeValue": {
       "raw": "'id'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "id"
       ]
      },
      "from": "@epam/uui-core:SinglePickerProps",
      "required": false
     },
     {
      "uid": 25,
      "name": "value",
      "comment": {
       "raw": [
        "The current value of component"
       ]
      },
      "typeValue": {
       "raw": "TId"
      },
      "from": "@epam/uui-core:IEditable",
      "required": true
     },
     {
      "uid": 26,
      "name": "onValueChange",
      "comment": {
       "raw": [
        "Called when value needs to be changed (usually due to user interaction)"
       ]
      },
      "typeValue": {
       "raw": "(newValue: TId) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IEditable",
      "required": true
     },
     {
      "uid": 141,
      "name": "isInvalid",
      "comment": {
       "raw": [
        "True if component contains invalid input"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:ICanBeInvalid",
      "required": false
     },
     {
      "uid": 142,
      "name": "validationMessage",
      "comment": {
       "raw": [
        "Message describing why the value is invalid"
       ]
      },
      "typeValue": {
       "raw": "null | string | number | boolean | React.ReactElement<any, string | React.JSXElementConstructor<any>> | React.ReactFragment | React.ReactPortal"
      },
      "typeValueRef": "@types/react:ReactNode",
      "from": "@epam/uui-core:ICanBeInvalid",
      "required": false
     },
     {
      "uid": 143,
      "name": "validationProps",
      "comment": {
       "raw": [
        "If T is a complex value (object or array), this property contains validation states of inner items"
       ]
      },
      "typeValue": {
       "raw": "{ [key: string]: ICanBeInvalid; }"
      },
      "from": "@epam/uui-core:ICanBeInvalid",
      "required": false
     },
     {
      "uid": 144,
      "name": "isDisabled",
      "comment": {
       "raw": [
        "Disable editing, and visually de-emphasize value of the component"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:IDisableable",
      "required": false
     },
     {
      "uid": 145,
      "name": "isReadonly",
      "comment": {
       "raw": [
        "Disable editing. Unlike isDisabled, keep component's value readable."
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:ICanBeReadonly",
      "required": false
     },
     {
      "uid": 146,
      "name": "isRequired",
      "comment": {
       "raw": [
        "Marks that component's value is required and shouldn't be empty"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:ICanBeRequired",
      "required": false
     },
     {
      "uid": 147,
      "name": "getValueChangeAnalyticsEvent",
      "comment": {
       "raw": [
        "Given a value, returns an analytics event to send when component is edited.",
        " See [AnalyticsContext](@link https://uui.epam.com/documents?id=analyticsContext&mode=doc&skin=UUI4_promo&category=contexts)."
       ]
      },
      "typeValue": {
       "raw": "(newValue: any, oldValue: any) => AnalyticsEvent"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IAnalyticableOnChange",
      "required": false
     },
     {
      "uid": 148,
      "name": "maxDefaultItems",
      "comment": {
       "raw": [
        "Number of default items to show initially, when nothing is selected.",
        " @default 10"
       ],
       "tags": {
        "@default": 10
       }
      },
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "from": "@epam/uui-components:PickerListBaseProps",
      "required": false
     },
     {
      "uid": 149,
      "name": "maxTotalItems",
      "comment": {
       "raw": [
        "Maximum total number of items to show, including selected",
        " @default 50"
       ],
       "tags": {
        "@default": 50
       }
      },
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "from": "@epam/uui-components:PickerListBaseProps",
      "required": false
     },
     {
      "uid": 150,
      "name": "defaultIds",
      "comment": {
       "raw": [
        "Ids of items to show first.",
        " If not specified, top props.maxDefaultItems will be shown according to the DataSource sorting settings (default is 10)"
       ]
      },
      "typeValue": {
       "raw": "TId[]"
      },
      "from": "@epam/uui-components:PickerListBaseProps",
      "required": false
     },
     {
      "uid": 151,
      "name": "settingsKey",
      "comment": {
       "raw": [
        "If provided, top picks will be automatically adjusted based on last user selection, and stored as user setting under provided key"
       ]
      },
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "from": "@epam/uui-components:PickerListBaseProps",
      "required": false
     },
     {
      "uid": 152,
      "name": "mode",
      "comment": {
       "raw": [
        "Visual mode for component:",
        " - form: default visuals, to use in forms.",
        " - cell: adjust to embed as table cell editor: no borders, no focus (it is applied by DataCell)",
        " - inline: adjust for WYSIWYG UX. Backgrounds removed. Borders appear only on hover."
       ]
      },
      "typeValue": {
       "raw": "'inline' | 'form' | 'cell'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "inline",
        "form",
        "cell"
       ]
      },
      "from": "@epam/uui:IHasEditMode",
      "required": false
     },
     {
      "uid": 62,
      "name": "valueType",
      "comment": {
       "raw": [
        "Defines what to use in value/onValueChange: 'id' - item id (TId). 'entity' - the item itself (TItem)"
       ]
      },
      "typeValue": {
       "raw": "'entity'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "entity"
       ]
      },
      "from": "@epam/uui-core:SinglePickerProps",
      "required": true
     },
     {
      "uid": 63,
      "name": "value",
      "comment": {
       "raw": [
        "The current value of component"
       ]
      },
      "typeValue": {
       "raw": "TItem"
      },
      "from": "@epam/uui-core:IEditable",
      "required": true
     },
     {
      "uid": 64,
      "name": "onValueChange",
      "comment": {
       "raw": [
        "Called when value needs to be changed (usually due to user interaction)"
       ]
      },
      "typeValue": {
       "raw": "(newValue: TItem) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IEditable",
      "required": true
     },
     {
      "uid": 137,
      "name": "selectionMode",
      "comment": {
       "raw": [
        "If 'single' provided - only one item is selected. In case of 'multi' - multiple items are selected"
       ]
      },
      "typeValue": {
       "raw": "'multi'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "multi"
       ]
      },
      "from": "@epam/uui-core:ArrayPickerProps",
      "required": true
     },
     {
      "uid": 100,
      "name": "valueType",
      "comment": {
       "raw": [
        "Defines what to use in value/onValueChange: 'id' - item id (TId). 'entity' - the item itself (TItem)"
       ]
      },
      "typeValue": {
       "raw": "'id'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "id"
       ]
      },
      "from": "@epam/uui-core:ArrayPickerProps",
      "required": false
     },
     {
      "uid": 101,
      "name": "value",
      "comment": {
       "raw": [
        "The current value of component"
       ]
      },
      "typeValue": {
       "raw": "TId[]"
      },
      "from": "@epam/uui-core:IEditable",
      "required": true
     },
     {
      "uid": 102,
      "name": "onValueChange",
      "comment": {
       "raw": [
        "Called when value needs to be changed (usually due to user interaction)"
       ]
      },
      "typeValue": {
       "raw": "(newValue: TId[]) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IEditable",
      "required": true
     },
     {
      "uid": 138,
      "name": "valueType",
      "comment": {
       "raw": [
        "Defines what to use in value/onValueChange: 'id' - item id (TId). 'entity' - the item itself (TItem)"
       ]
      },
      "typeValue": {
       "raw": "'entity'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "entity"
       ]
      },
      "from": "@epam/uui-core:ArrayPickerProps",
      "required": true
     },
     {
      "uid": 139,
      "name": "value",
      "comment": {
       "raw": [
        "The current value of component"
       ]
      },
      "typeValue": {
       "raw": "TItem[]"
      },
      "from": "@epam/uui-core:IEditable",
      "required": true
     },
     {
      "uid": 140,
      "name": "onValueChange",
      "comment": {
       "raw": [
        "Called when value needs to be changed (usually due to user interaction)"
       ]
      },
      "typeValue": {
       "raw": "(newValue: TItem[]) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IEditable",
      "required": true
     }
    ],
    "propsFromUnion": true
   }
  },
  "@epam/uui:PickerModalProps": {
   "summary": {
    "module": "@epam/uui",
    "typeName": {
     "name": "PickerModalProps",
     "nameFull": "PickerModalProps<TItem, TId>"
    },
    "src": "uui/components/pickers/PickerModal.tsx",
    "exported": true
   },
   "details": {
    "kind": 264,
    "typeValue": {
     "raw": "PickerBaseOptions<TItem, TId> & IHasCaption & { selectionMode: 'single'; valueType: 'id'; initialValue: TId; } & IModal<TId, any> & PickerModalOptions<TItem, TId> | PickerBaseOptions<TItem, TId> & IHasCaption & { selectionMode: 'single'; valueType: 'entity'; initialValue: TItem; } & IModal<TItem, any> & PickerModalOptions<TItem, TId> | PickerBaseOptions<TItem, TId> & IHasCaption & { selectionMode: 'multi'; valueType: 'id'; initialValue: TId[]; } & IModal<TId[], any> & PickerModalOptions<TItem, TId> | PickerBaseOptions<TItem, TId> & IHasCaption & { selectionMode: 'multi'; valueType: 'entity'; initialValue: TItem[]; } & IModal<TItem[], any> & PickerModalOptions<TItem, TId>",
     "print": [
      "type PickerModalProps<TItem, TId> = PickerBaseOptions<TItem, TId> & IHasCaption & (PickerModalScalarProps<TId, TItem> | PickerModalArrayProps<TId, TItem>) & PickerModalOptions<TItem, TId>;"
     ]
    },
    "props": [
     {
      "uid": 88,
      "name": "entityName",
      "comment": {
       "raw": [
        "Name of the entity being selected. Affects wording like \"Please select [entity]\""
       ]
      },
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "from": "@epam/uui-core:PickerBaseOptions",
      "required": false
     },
     {
      "uid": 89,
      "name": "entityPluralName",
      "comment": {
       "raw": [
        "Plural name of the entity being selected. Affects wording like \"X [entities] selected\""
       ]
      },
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "from": "@epam/uui-core:PickerBaseOptions",
      "required": false
     },
     {
      "uid": 90,
      "name": "dataSource",
      "comment": {
       "raw": [
        "Datasource to get data for the picker"
       ]
      },
      "typeValue": {
       "raw": "IDataSource<TItem, TId, any>"
      },
      "from": "@epam/uui-core:PickerBaseOptions",
      "required": true
     },
     {
      "uid": 91,
      "name": "getName",
      "comment": {
       "raw": [
        "A pure function that gets entity name from entity object.",
        "     Default: (item) => item.name."
       ]
      },
      "typeValue": {
       "raw": "(item: TItem) => string"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:PickerBaseOptions",
      "required": false
     },
     {
      "uid": 92,
      "name": "renderRow",
      "comment": {
       "raw": [
        "Allow to customize how each selectable row is rendered. Can be used to add subtitles, avatars, etc."
       ]
      },
      "typeValue": {
       "raw": "(props: DataRowProps<TItem, TId>, dataSourceState: DataSourceState<Record<string, any>, any>) => React.ReactNode"
      },
      "editor": {
       "type": "component"
      },
      "from": "@epam/uui-core:PickerBaseOptions",
      "required": false
     },
     {
      "uid": 93,
      "name": "getRowOptions",
      "comment": {
       "raw": [
        "Gets options for each row. Allow to make rows non-selectable, as well as many other tweaks."
       ]
      },
      "typeValue": {
       "raw": "(item: TItem, index: number) => DataRowOptions<TItem, TId>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:PickerBaseOptions",
      "required": false
     },
     {
      "uid": 94,
      "name": "renderNotFound",
      "comment": {
       "raw": [
        "Overrides the default 'no records found' banner.",
        " The 'search' callback parameter allows to distinguish cases when there's no records at all, and when current search doesn't find anything."
       ]
      },
      "typeValue": {
       "raw": "(props: { search: string; onClose: () => void; }) => React.ReactNode"
      },
      "editor": {
       "type": "component"
      },
      "from": "@epam/uui-core:PickerBaseOptions",
      "required": false
     },
     {
      "uid": 95,
      "name": "emptyValue",
      "comment": {
       "raw": [
        "Defines which value is to set on clear. E.g. you can put an empty array instead of null for empty multi-select Pickers"
       ]
      },
      "typeValue": {
       "raw": "null | []"
      },
      "from": "@epam/uui-core:PickerBaseOptions",
      "required": false
     },
     {
      "uid": 96,
      "name": "sortBy",
      "comment": {
       "raw": [
        "Defines how items should be sorted. By default, items are shown in order they are provided to the DataSource"
       ]
      },
      "typeValue": {
       "raw": "(item: TItem, sorting: SortingOption<any>) => any"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:PickerBaseOptions",
      "required": false
     },
     {
      "uid": 97,
      "name": "filter",
      "comment": {
       "raw": [
        "Additional filter to apply to the DataSource. Can be used to limit selection somehow, w/o re-building the DataSource. E.g. in the linked pickers scenario."
       ]
      },
      "typeValue": {
       "raw": "any"
      },
      "from": "@epam/uui-core:PickerBaseOptions",
      "required": false
     },
     {
      "uid": 98,
      "name": "sorting",
      "comment": {
       "raw": [
        "Defines sorting to pass to the DataSource"
       ]
      },
      "typeValue": {
       "raw": "SortingOption<any>"
      },
      "from": "@epam/uui-core:PickerBaseOptions",
      "required": false
     },
     {
      "uid": 99,
      "name": "cascadeSelection",
      "comment": {
       "raw": [
        "Controls how the selection (checking items) of a parent node affects the selection of its all children, and vice versa.",
        " - false: All nodes are selected independently (default).",
        " - true or 'explicit': Selecting a parent node explicitly selects all its children. Unchecking the last parent's child unchecks its parent.",
        " - 'implicit': Selecting a parent node means that all children are considered checked.",
        "   The user sees all these nodes as checked on the UI, but only the selected parent is visible in the PickerInput tags, and only the checked",
        "   parent is present in the Picker's value or DataSourceState.checked array. When the user unchecks the first child of such a parent,",
        "   its parents become unchecked and all children but the unchecked one become checked, making children's selection explicit. If the last",
        "   unchecked child gets checked, all children from the checked are removed, returning to the implicit state when only the parent is checked."
       ]
      },
      "typeValue": {
       "raw": "boolean | 'implicit' | 'explicit'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        false,
        true,
        "implicit",
        "explicit"
       ]
      },
      "from": "@epam/uui-core:PickerBaseOptions",
      "required": false
     },
     {
      "uid": 100,
      "name": "isFoldedByDefault",
      "comment": {
       "raw": [
        "You can return true for all, or some items to fold them."
       ]
      },
      "typeValue": {
       "raw": "(item: TItem) => boolean"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:PickerBaseOptions",
      "required": false
     },
     {
      "uid": 101,
      "name": "getSearchFields",
      "comment": {
       "raw": [
        "Given an item, should return an array of string fields to search on. By default, the search is performed on item.name field."
       ]
      },
      "typeValue": {
       "raw": "(item: TItem) => string[]"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:PickerBaseOptions",
      "required": false
     },
     {
      "uid": 102,
      "name": "caption",
      "comment": {
       "raw": [
        "Caption. Can be a string, or React.Elements. Certain components supports minimal markup (<b>,<i>,<a>) in captions."
       ]
      },
      "typeValue": {
       "raw": "any"
      },
      "from": "@epam/uui-core:IHasCaption",
      "required": false
     },
     {
      "uid": 45,
      "name": "selectionMode",
      "typeValue": {
       "raw": "'single'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "single"
       ]
      },
      "from": "@epam/uui-components:PickerModalScalarProps",
      "required": true
     },
     {
      "uid": 17,
      "name": "valueType",
      "typeValue": {
       "raw": "'id'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "id"
       ]
      },
      "from": "@epam/uui-components:PickerModalScalarProps",
      "required": true
     },
     {
      "uid": 18,
      "name": "initialValue",
      "typeValue": {
       "raw": "TId"
      },
      "from": "@epam/uui-components:PickerModalScalarProps",
      "required": true
     },
     {
      "uid": 106,
      "name": "isActive",
      "comment": {
       "raw": [
        "Indicates whether the modal is currently displayed"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:IModal",
      "required": false
     },
     {
      "uid": 107,
      "name": "key",
      "comment": {
       "raw": [
        "Unique key of the modal"
       ]
      },
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "from": "@epam/uui-core:IModal",
      "required": true
     },
     {
      "uid": 108,
      "name": "zIndex",
      "comment": {
       "raw": [
        "Modal zIndex value. Calculated via LayoutContext."
       ]
      },
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "from": "@epam/uui-core:IModal",
      "required": true
     },
     {
      "uid": 22,
      "name": "success",
      "comment": {
       "raw": [
        "Call to successfully close the modal. It's resolves `modalContext.show()` promise with provided value."
       ]
      },
      "typeValue": {
       "raw": "(result: TId) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IModal",
      "required": true
     },
     {
      "uid": 110,
      "name": "abort",
      "comment": {
       "raw": [
        "Call to close the modal with abort action. It's rejects `modalContext.show()` promise with provided value."
       ]
      },
      "typeValue": {
       "raw": "(result?: any) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IModal",
      "required": true
     },
     {
      "uid": 111,
      "name": "parameters",
      "comment": {
       "raw": [
        "Parameters that provided via second param of `modalContext.show` method"
       ]
      },
      "typeValue": {
       "raw": "any"
      },
      "from": "@epam/uui-core:IModal",
      "required": false
     },
     {
      "uid": 112,
      "name": "depth",
      "comment": {
       "raw": [
        "Depth of current modal layer"
       ]
      },
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "from": "@epam/uui-core:IModal",
      "required": false
     },
     {
      "uid": 113,
      "name": "renderFilter",
      "typeValue": {
       "raw": "(editableFilter: IEditable<any>) => React.ReactNode"
      },
      "editor": {
       "type": "component"
      },
      "from": "@epam/uui-components:PickerModalOptions",
      "required": false
     },
     {
      "uid": 114,
      "name": "renderFooter",
      "typeValue": {
       "raw": "(props: PickerFooterProps<TItem, TId> & Partial<IModal<any, any>>) => React.ReactNode"
      },
      "editor": {
       "type": "component"
      },
      "from": "@epam/uui-components:PickerModalOptions",
      "required": false
     },
     {
      "uid": 115,
      "name": "disallowClickOutside",
      "comment": {
       "raw": [
        "@default false"
       ],
       "tags": {
        "@default": false
       }
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-components:PickerModalOptions",
      "required": false
     },
     {
      "uid": 116,
      "name": "rawProps",
      "comment": {
       "raw": [
        "Any HTML attributes (native or 'data-') to put on the underlying component"
       ]
      },
      "typeValue": {
       "raw": "React.HTMLAttributes<HTMLDivElement> & Record<`data-${string}`, string>"
      },
      "from": "@epam/uui-core:IHasRawProps",
      "required": false
     },
     {
      "uid": 46,
      "name": "valueType",
      "typeValue": {
       "raw": "'entity'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "entity"
       ]
      },
      "from": "@epam/uui-components:PickerModalScalarProps",
      "required": true
     },
     {
      "uid": 47,
      "name": "initialValue",
      "typeValue": {
       "raw": "TItem"
      },
      "from": "@epam/uui-components:PickerModalScalarProps",
      "required": true
     },
     {
      "uid": 51,
      "name": "success",
      "comment": {
       "raw": [
        "Call to successfully close the modal. It's resolves `modalContext.show()` promise with provided value."
       ]
      },
      "typeValue": {
       "raw": "(result: TItem) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IModal",
      "required": true
     },
     {
      "uid": 103,
      "name": "selectionMode",
      "typeValue": {
       "raw": "'multi'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "multi"
       ]
      },
      "from": "@epam/uui-components:PickerModalArrayProps",
      "required": true
     },
     {
      "uid": 75,
      "name": "valueType",
      "typeValue": {
       "raw": "'id'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "id"
       ]
      },
      "from": "@epam/uui-components:PickerModalArrayProps",
      "required": true
     },
     {
      "uid": 76,
      "name": "initialValue",
      "typeValue": {
       "raw": "TId[]"
      },
      "from": "@epam/uui-components:PickerModalArrayProps",
      "required": true
     },
     {
      "uid": 80,
      "name": "success",
      "comment": {
       "raw": [
        "Call to successfully close the modal. It's resolves `modalContext.show()` promise with provided value."
       ]
      },
      "typeValue": {
       "raw": "(result: TId[]) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IModal",
      "required": true
     },
     {
      "uid": 104,
      "name": "valueType",
      "typeValue": {
       "raw": "'entity'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "entity"
       ]
      },
      "from": "@epam/uui-components:PickerModalArrayProps",
      "required": true
     },
     {
      "uid": 105,
      "name": "initialValue",
      "typeValue": {
       "raw": "TItem[]"
      },
      "from": "@epam/uui-components:PickerModalArrayProps",
      "required": true
     },
     {
      "uid": 109,
      "name": "success",
      "comment": {
       "raw": [
        "Call to successfully close the modal. It's resolves `modalContext.show()` promise with provided value."
       ]
      },
      "typeValue": {
       "raw": "(result: TItem[]) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IModal",
      "required": true
     }
    ],
    "propsFromUnion": true
   }
  },
  "@epam/uui:pickerPart": {
   "summary": {
    "module": "@epam/uui",
    "typeName": {
     "name": "pickerPart",
     "nameFull": "pickerPart"
    },
    "src": "uui/components/datePickers/RangeDatePickerBody.tsx",
    "exported": true
   },
   "details": {
    "kind": 264,
    "typeValue": {
     "raw": "'from' | 'to'",
     "print": [
      "type pickerPart = 'from' | 'to';"
     ]
    }
   }
  },
  "@epam/uui:PickerTogglerMods": {
   "summary": {
    "module": "@epam/uui",
    "typeName": {
     "name": "PickerTogglerMods",
     "nameFull": "PickerTogglerMods"
    },
    "src": "uui/components/pickers/PickerToggler.tsx",
    "exported": true
   },
   "details": {
    "kind": 263,
    "typeValue": {
     "raw": "PickerTogglerMods",
     "print": [
      "interface PickerTogglerMods extends types.IHasEditMode {",
      "    size?: '24' | '30' | '36' | '42' | '48';",
      "}"
     ]
    },
    "props": [
     {
      "uid": 1,
      "name": "size",
      "typeValue": {
       "raw": "'36' | '48' | '24' | '30' | '42'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "24",
        "30",
        "36",
        "42",
        "48"
       ]
      },
      "required": false
     },
     {
      "uid": 2,
      "name": "mode",
      "comment": {
       "raw": [
        "Visual mode for component:",
        " - form: default visuals, to use in forms.",
        " - cell: adjust to embed as table cell editor: no borders, no focus (it is applied by DataCell)",
        " - inline: adjust for WYSIWYG UX. Backgrounds removed. Borders appear only on hover."
       ]
      },
      "typeValue": {
       "raw": "'inline' | 'form' | 'cell'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "inline",
        "form",
        "cell"
       ]
      },
      "from": "@epam/uui:IHasEditMode",
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui:PresetsPanelProps": {
   "summary": {
    "module": "@epam/uui",
    "typeName": {
     "name": "PresetsPanelProps",
     "nameFull": "PresetsPanelProps"
    },
    "src": "uui/components/filters/PresetPanel/PresetsPanel.tsx",
    "exported": true
   },
   "details": {
    "kind": 263,
    "typeValue": {
     "raw": "PresetsPanelProps",
     "print": [
      "interface PresetsPanelProps extends IPresetsApi, IHasRawProps<React.HTMLAttributes<HTMLDivElement>> {",
      "    tableState: DataTableState;",
      "}"
     ]
    },
    "props": [
     {
      "uid": 1,
      "name": "tableState",
      "typeValue": {
       "raw": "DataTableState<any, any>"
      },
      "required": true
     },
     {
      "uid": 2,
      "name": "activePresetId",
      "comment": {
       "raw": [
        "ID of selected preset"
       ]
      },
      "typeValue": {
       "raw": "null | number"
      },
      "editor": {
       "type": "number"
      },
      "from": "@epam/uui-core:IPresetsApi",
      "required": false
     },
     {
      "uid": 3,
      "name": "choosePreset",
      "comment": {
       "raw": [
        "Function that selects given preset"
       ]
      },
      "typeValue": {
       "raw": "(preset: ITablePreset<any, any>) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IPresetsApi",
      "required": true
     },
     {
      "uid": 4,
      "name": "createNewPreset",
      "comment": {
       "raw": [
        "Function that gives preset name and create new preset with this name and current table state"
       ]
      },
      "typeValue": {
       "raw": "(name: string) => Promise<number>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IPresetsApi",
      "required": true
     },
     {
      "uid": 5,
      "name": "hasPresetChanged",
      "comment": {
       "raw": [
        "Function that gives preset and return if this preset changed or not"
       ]
      },
      "typeValue": {
       "raw": "(preset: ITablePreset<any, any>) => boolean"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IPresetsApi",
      "required": true
     },
     {
      "uid": 6,
      "name": "duplicatePreset",
      "comment": {
       "raw": [
        "Function that gives the preset and creat their duplicate"
       ]
      },
      "typeValue": {
       "raw": "(preset: ITablePreset<any, any>) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IPresetsApi",
      "required": true
     },
     {
      "uid": 7,
      "name": "deletePreset",
      "comment": {
       "raw": [
        "Function that deletes given preset"
       ]
      },
      "typeValue": {
       "raw": "(preset: ITablePreset<any, any>) => Promise<void>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IPresetsApi",
      "required": true
     },
     {
      "uid": 8,
      "name": "updatePreset",
      "comment": {
       "raw": [
        "Function that updates given preset"
       ]
      },
      "typeValue": {
       "raw": "(preset: ITablePreset<any, any>) => Promise<void>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IPresetsApi",
      "required": true
     },
     {
      "uid": 9,
      "name": "getPresetLink",
      "comment": {
       "raw": [
        "Function that gives preset and return URL link on given preset"
       ]
      },
      "typeValue": {
       "raw": "(preset: ITablePreset<any, any>) => string"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IPresetsApi",
      "required": true
     },
     {
      "uid": 10,
      "name": "presets",
      "comment": {
       "raw": [
        "Array of presets"
       ]
      },
      "typeValue": {
       "raw": "ITablePreset<any, any>[]"
      },
      "from": "@epam/uui-core:IPresetsApi",
      "required": true
     },
     {
      "uid": 11,
      "name": "rawProps",
      "comment": {
       "raw": [
        "Any HTML attributes (native or 'data-') to put on the underlying component"
       ]
      },
      "typeValue": {
       "raw": "React.HTMLAttributes<HTMLDivElement> & Record<`data-${string}`, string>"
      },
      "from": "@epam/uui-core:IHasRawProps",
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui:ProgressBarMods": {
   "summary": {
    "module": "@epam/uui",
    "typeName": {
     "name": "ProgressBarMods",
     "nameFull": "ProgressBarMods"
    },
    "src": "uui/components/widgets/ProgressBar.tsx",
    "exported": true
   },
   "details": {
    "kind": 263,
    "typeValue": {
     "raw": "ProgressBarMods",
     "print": [
      "interface ProgressBarMods {",
      "    size?: '12' | '18' | '24';",
      "    striped?: boolean;",
      "}"
     ]
    },
    "props": [
     {
      "uid": 1,
      "name": "size",
      "typeValue": {
       "raw": "'12' | '18' | '24'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "12",
        "18",
        "24"
       ]
      },
      "required": false
     },
     {
      "uid": 2,
      "name": "striped",
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui:RadioInputMods": {
   "summary": {
    "module": "@epam/uui",
    "typeName": {
     "name": "RadioInputMods",
     "nameFull": "RadioInputMods"
    },
    "src": "uui/components/inputs/RadioInput.tsx",
    "exported": true
   },
   "details": {
    "kind": 263,
    "typeValue": {
     "raw": "RadioInputMods",
     "print": [
      "interface RadioInputMods {",
      "    /**",
      "     * @default '18'",
      "     */",
      "    size?: '12' | '18';",
      "}"
     ]
    },
    "props": [
     {
      "uid": 1,
      "name": "size",
      "comment": {
       "raw": [
        "@default '18'"
       ],
       "tags": {
        "@default": "18"
       }
      },
      "typeValue": {
       "raw": "'12' | '18'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "12",
        "18"
       ]
      },
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui:RadioInputProps": {
   "summary": {
    "module": "@epam/uui",
    "typeName": {
     "name": "RadioInputProps",
     "nameFull": "RadioInputProps"
    },
    "src": "uui/components/inputs/RadioInput.tsx",
    "exported": true
   },
   "details": {
    "kind": 264,
    "typeValue": {
     "raw": "RadioInputProps",
     "print": [
      "type RadioInputProps = RadioInputMods & UuiRadioInputProps;"
     ]
    },
    "props": [
     {
      "uid": 1,
      "name": "size",
      "comment": {
       "raw": [
        "@default '18'"
       ],
       "tags": {
        "@default": "18"
       }
      },
      "typeValue": {
       "raw": "'12' | '18'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "12",
        "18"
       ]
      },
      "from": "@epam/uui:RadioInputMods",
      "required": false
     },
     {
      "uid": 2,
      "name": "icon",
      "typeValue": {
       "raw": "Icon"
      },
      "editor": {
       "type": "component"
      },
      "from": "@epam/uui-components:RadioInputProps",
      "required": false
     },
     {
      "uid": 3,
      "name": "renderLabel",
      "typeValue": {
       "raw": "() => React.ReactNode"
      },
      "editor": {
       "type": "component"
      },
      "from": "@epam/uui-components:RadioInputProps",
      "required": false
     },
     {
      "uid": 4,
      "name": "tabIndex",
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "from": "@epam/uui-components:RadioInputProps",
      "required": false
     },
     {
      "uid": 5,
      "name": "id",
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "from": "@epam/uui-components:RadioInputProps",
      "required": false
     },
     {
      "uid": 6,
      "name": "cx",
      "comment": {
       "raw": [
        "CSS class(es) to put on component's root. See {@link https://github.com/JedWatson/classnames#usage} for details"
       ]
      },
      "typeValue": {
       "raw": "null | string | number | boolean | ClassDictionary | ClassArray"
      },
      "typeValueRef": "@epam/uui-core:ClassValue",
      "from": "@epam/uui-core:IHasCX",
      "required": false
     },
     {
      "uid": 7,
      "name": "isDisabled",
      "comment": {
       "raw": [
        "Disable editing, and visually de-emphasize value of the component"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:IDisableable",
      "required": false
     },
     {
      "uid": 8,
      "name": "value",
      "comment": {
       "raw": [
        "The current value of component"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:IEditable",
      "required": true
     },
     {
      "uid": 9,
      "name": "onValueChange",
      "comment": {
       "raw": [
        "Called when value needs to be changed (usually due to user interaction)"
       ]
      },
      "typeValue": {
       "raw": "(newValue: boolean) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IEditable",
      "required": true
     },
     {
      "uid": 10,
      "name": "isInvalid",
      "comment": {
       "raw": [
        "True if component contains invalid input"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:ICanBeInvalid",
      "required": false
     },
     {
      "uid": 11,
      "name": "validationMessage",
      "comment": {
       "raw": [
        "Message describing why the value is invalid"
       ]
      },
      "typeValue": {
       "raw": "null | string | number | boolean | React.ReactElement<any, string | React.JSXElementConstructor<any>> | React.ReactFragment | React.ReactPortal"
      },
      "typeValueRef": "@types/react:ReactNode",
      "from": "@epam/uui-core:ICanBeInvalid",
      "required": false
     },
     {
      "uid": 12,
      "name": "validationProps",
      "comment": {
       "raw": [
        "If T is a complex value (object or array), this property contains validation states of inner items"
       ]
      },
      "typeValue": {
       "raw": "{ [key: string]: ICanBeInvalid; }"
      },
      "from": "@epam/uui-core:ICanBeInvalid",
      "required": false
     },
     {
      "uid": 13,
      "name": "isReadonly",
      "comment": {
       "raw": [
        "Disable editing. Unlike isDisabled, keep component's value readable."
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:ICanBeReadonly",
      "required": false
     },
     {
      "uid": 14,
      "name": "isRequired",
      "comment": {
       "raw": [
        "Marks that component's value is required and shouldn't be empty"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:ICanBeRequired",
      "required": false
     },
     {
      "uid": 15,
      "name": "label",
      "comment": {
       "raw": [
        "Label. Can be a string, or React.Elements. Certain components supports minimal markup (<b>,<i>,<a>) in captions."
       ]
      },
      "typeValue": {
       "raw": "any"
      },
      "from": "@epam/uui-core:IHasLabel",
      "required": false
     },
     {
      "uid": 16,
      "name": "getValueChangeAnalyticsEvent",
      "comment": {
       "raw": [
        "Given a value, returns an analytics event to send when component is edited.",
        " See [AnalyticsContext](@link https://uui.epam.com/documents?id=analyticsContext&mode=doc&skin=UUI4_promo&category=contexts)."
       ]
      },
      "typeValue": {
       "raw": "(newValue: boolean | null, oldValue: boolean | null) => AnalyticsEvent"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IAnalyticableOnChange",
      "required": false
     },
     {
      "uid": 17,
      "name": "rawProps",
      "comment": {
       "raw": [
        "Any HTML attributes (native or 'data-') to put on the underlying component"
       ]
      },
      "typeValue": {
       "raw": "React.LabelHTMLAttributes<HTMLLabelElement> & Record<`data-${string}`, string>"
      },
      "from": "@epam/uui-core:IHasRawProps",
      "required": false
     },
     {
      "uid": 18,
      "name": "forwardedRef",
      "comment": {
       "raw": [
        "this ref is passed to the underlying component"
       ]
      },
      "typeValue": {
       "raw": "null | (instance: HTMLLabelElement | null) => void | React.MutableRefObject<HTMLLabelElement | null>"
      },
      "from": "@epam/uui-core:IHasForwardedRef",
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui:RangeDatePickerBodyProps": {
   "summary": {
    "module": "@epam/uui",
    "typeName": {
     "name": "RangeDatePickerBodyProps",
     "nameFull": "RangeDatePickerBodyProps<T>"
    },
    "src": "uui/components/datePickers/RangeDatePickerBody.tsx",
    "exported": true
   },
   "details": {
    "kind": 263,
    "typeValue": {
     "raw": "RangeDatePickerBodyProps<T>",
     "print": [
      "interface RangeDatePickerBodyProps<T> extends DatePickerBodyBaseOptions, IEditable<PickerBodyValue<T>> {",
      "    focusPart: InputType;",
      "    renderFooter?(): React.ReactNode;",
      "    isHoliday?: (day: Dayjs) => boolean;",
      "    renderHeader?: (props: IEditable<PickerBodyValue<string>>) => React.ReactNode;",
      "}"
     ]
    },
    "props": [
     {
      "uid": 1,
      "name": "focusPart",
      "typeValue": {
       "raw": "'from' | 'to'"
      },
      "typeValueRef": "@epam/uui:InputType",
      "editor": {
       "type": "oneOf",
       "options": [
        "from",
        "to"
       ]
      },
      "required": true
     },
     {
      "uid": 2,
      "name": "renderFooter",
      "typeValue": {
       "raw": "() => React.ReactNode"
      },
      "editor": {
       "type": "component"
      },
      "required": false
     },
     {
      "uid": 3,
      "name": "isHoliday",
      "typeValue": {
       "raw": "(day: Dayjs) => boolean"
      },
      "editor": {
       "type": "func"
      },
      "required": false
     },
     {
      "uid": 4,
      "name": "renderHeader",
      "typeValue": {
       "raw": "(props: IEditable<PickerBodyValue<string>>) => React.ReactNode"
      },
      "editor": {
       "type": "component"
      },
      "required": false
     },
     {
      "uid": 5,
      "name": "filter",
      "typeValue": {
       "raw": "(day: Dayjs) => boolean"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-components:DatePickerBodyBaseOptions",
      "required": false
     },
     {
      "uid": 6,
      "name": "changeIsOpen",
      "typeValue": {
       "raw": "(newValue: boolean) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-components:DatePickerBodyBaseOptions",
      "required": false
     },
     {
      "uid": 7,
      "name": "presets",
      "typeValue": {
       "raw": "RangeDatePickerPresets"
      },
      "from": "@epam/uui-components:DatePickerBodyBaseOptions",
      "required": false
     },
     {
      "uid": 8,
      "name": "renderDay",
      "typeValue": {
       "raw": "(day: Dayjs, onDayClick: (day: Dayjs) => void) => React.ReactElement<Element, string | React.JSXElementConstructor<any>>"
      },
      "editor": {
       "type": "component"
      },
      "from": "@epam/uui-components:DatePickerBodyBaseOptions",
      "required": false
     },
     {
      "uid": 9,
      "name": "cx",
      "comment": {
       "raw": [
        "CSS class(es) to put on component's root. See {@link https://github.com/JedWatson/classnames#usage} for details"
       ]
      },
      "typeValue": {
       "raw": "null | string | number | boolean | ClassDictionary | ClassArray"
      },
      "typeValueRef": "@epam/uui-core:ClassValue",
      "from": "@epam/uui-core:IHasCX",
      "required": false
     },
     {
      "uid": 10,
      "name": "rawProps",
      "comment": {
       "raw": [
        "Any HTML attributes (native or 'data-') to put on the underlying component"
       ]
      },
      "typeValue": {
       "raw": "React.HTMLAttributes<HTMLDivElement> & Record<`data-${string}`, string>"
      },
      "from": "@epam/uui-core:IHasRawProps",
      "required": false
     },
     {
      "uid": 11,
      "name": "forwardedRef",
      "comment": {
       "raw": [
        "this ref is passed to the underlying component"
       ]
      },
      "typeValue": {
       "raw": "null | (instance: HTMLDivElement | null) => void | React.MutableRefObject<HTMLDivElement | null>"
      },
      "from": "@epam/uui-core:IHasForwardedRef",
      "required": false
     },
     {
      "uid": 12,
      "name": "value",
      "comment": {
       "raw": [
        "The current value of component"
       ]
      },
      "typeValue": {
       "raw": "PickerBodyValue<T>"
      },
      "from": "@epam/uui-core:IEditable",
      "required": true
     },
     {
      "uid": 13,
      "name": "onValueChange",
      "comment": {
       "raw": [
        "Called when value needs to be changed (usually due to user interaction)"
       ]
      },
      "typeValue": {
       "raw": "(newValue: PickerBodyValue<T>) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IEditable",
      "required": true
     },
     {
      "uid": 14,
      "name": "isInvalid",
      "comment": {
       "raw": [
        "True if component contains invalid input"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:ICanBeInvalid",
      "required": false
     },
     {
      "uid": 15,
      "name": "validationMessage",
      "comment": {
       "raw": [
        "Message describing why the value is invalid"
       ]
      },
      "typeValue": {
       "raw": "null | string | number | boolean | React.ReactElement<any, string | React.JSXElementConstructor<any>> | React.ReactFragment | React.ReactPortal"
      },
      "typeValueRef": "@types/react:ReactNode",
      "from": "@epam/uui-core:ICanBeInvalid",
      "required": false
     },
     {
      "uid": 16,
      "name": "validationProps",
      "comment": {
       "raw": [
        "If T is a complex value (object or array), this property contains validation states of inner items"
       ]
      },
      "typeValue": {
       "raw": "{ [key: string]: ICanBeInvalid; }"
      },
      "from": "@epam/uui-core:ICanBeInvalid",
      "required": false
     },
     {
      "uid": 17,
      "name": "isDisabled",
      "comment": {
       "raw": [
        "Disable editing, and visually de-emphasize value of the component"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:IDisableable",
      "required": false
     },
     {
      "uid": 18,
      "name": "isReadonly",
      "comment": {
       "raw": [
        "Disable editing. Unlike isDisabled, keep component's value readable."
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:ICanBeReadonly",
      "required": false
     },
     {
      "uid": 19,
      "name": "isRequired",
      "comment": {
       "raw": [
        "Marks that component's value is required and shouldn't be empty"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:ICanBeRequired",
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui:RangeDatePickerProps": {
   "summary": {
    "module": "@epam/uui",
    "typeName": {
     "name": "RangeDatePickerProps",
     "nameFull": "RangeDatePickerProps"
    },
    "src": "uui/components/datePickers/RangeDatePicker.tsx",
    "exported": true
   },
   "details": {
    "kind": 263,
    "typeValue": {
     "raw": "RangeDatePickerProps",
     "print": [
      "interface RangeDatePickerProps extends BaseRangeDatePickerProps, SizeMod {",
      "    getPlaceholder?(type: InputType): string;",
      "}"
     ]
    },
    "props": [
     {
      "uid": 1,
      "name": "getPlaceholder",
      "typeValue": {
       "raw": "(type: InputType) => string"
      },
      "editor": {
       "type": "func"
      },
      "required": false
     },
     {
      "uid": 2,
      "name": "format",
      "comment": {
       "raw": [
        "Date format string, see [dayjs docs](@link https://day.js.org/docs/en/display/format)"
       ]
      },
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "from": "@epam/uui-core:BaseRangeDatePickerProps",
      "required": false
     },
     {
      "uid": 3,
      "name": "filter",
      "comment": {
       "raw": [
        "Filter selectable days. Days, for which this callback returns false - will be disabled"
       ]
      },
      "typeValue": {
       "raw": "(day: Dayjs) => boolean"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:BaseRangeDatePickerProps",
      "required": false
     },
     {
      "uid": 4,
      "name": "renderTarget",
      "comment": {
       "raw": [
        "Overrides rendering of picker Target - component which triggers dropdown. Can be used to attach RangeDatePicker to other components, e.g. Buttons"
       ]
      },
      "typeValue": {
       "raw": "(props: IDropdownToggler) => React.ReactNode"
      },
      "editor": {
       "type": "component"
      },
      "from": "@epam/uui-core:BaseRangeDatePickerProps",
      "required": false
     },
     {
      "uid": 5,
      "name": "renderFooter",
      "comment": {
       "raw": [
        "Allows to add a custom footer to the Picker's dropdown body"
       ]
      },
      "typeValue": {
       "raw": "(value: RangeDatePickerValue) => React.ReactNode"
      },
      "editor": {
       "type": "component"
      },
      "from": "@epam/uui-core:BaseRangeDatePickerProps",
      "required": false
     },
     {
      "uid": 6,
      "name": "renderDay",
      "comment": {
       "raw": [
        "Overrides rendering of the single day. For example, to highlight certain days"
       ]
      },
      "typeValue": {
       "raw": "(day: Dayjs, onDayClick: (day: Dayjs) => void) => React.ReactElement<Element, string | React.JSXElementConstructor<any>>"
      },
      "editor": {
       "type": "component"
      },
      "from": "@epam/uui-core:BaseRangeDatePickerProps",
      "required": false
     },
     {
      "uid": 7,
      "name": "presets",
      "comment": {
       "raw": [
        "Range presets (like 'this week', 'this month', etc.) to display at the right of the Picker's body.",
        " UUI provides defaults in the 'rangeDatePickerPresets' exported variable - you can use it as is, or build on top of it (e.g. add your presets)"
       ]
      },
      "typeValue": {
       "raw": "RangeDatePickerPresets"
      },
      "from": "@epam/uui-core:BaseRangeDatePickerProps",
      "required": false
     },
     {
      "uid": 8,
      "name": "disableClear",
      "comment": {
       "raw": [
        "Disables clearing component (with the cross icon)",
        " @default false"
       ],
       "tags": {
        "@default": false
       }
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:BaseRangeDatePickerProps",
      "required": false
     },
     {
      "uid": 9,
      "name": "placement",
      "comment": {
       "raw": [
        "Dropdown position relative to the input. See [Popper Docs](@link https://popper.js.org/)",
        " @default 'bottom-start'"
       ],
       "tags": {
        "@default": "bottom-start"
       }
      },
      "typeValue": {
       "raw": "'left' | 'right' | 'auto' | 'auto-start' | 'auto-end' | 'top' | 'bottom' | 'top-start' | 'top-end' | 'bottom-start' | 'bottom-end' | 'right-start' | 'right-end' | 'left-start' | 'left-end'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "left",
        "right",
        "auto",
        "auto-start",
        "auto-end",
        "top",
        "bottom",
        "top-start",
        "top-end",
        "bottom-start",
        "bottom-end",
        "right-start",
        "right-end",
        "left-start",
        "left-end"
       ]
      },
      "from": "@epam/uui-core:BaseRangeDatePickerProps",
      "required": false
     },
     {
      "uid": 10,
      "name": "isHoliday",
      "comment": {
       "raw": [
        "If this function returns true, the day will be highlighted as holiday"
       ]
      },
      "typeValue": {
       "raw": "(day: Dayjs) => boolean"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:BaseRangeDatePickerProps",
      "required": false
     },
     {
      "uid": 11,
      "name": "onFocus",
      "comment": {
       "raw": [
        "Called when component gets input focus"
       ]
      },
      "typeValue": {
       "raw": "(e: React.FocusEvent<HTMLInputElement, Element>, inputType: 'from' | 'to') => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:BaseRangeDatePickerProps",
      "required": false
     },
     {
      "uid": 12,
      "name": "onBlur",
      "comment": {
       "raw": [
        "Called when component looses input focus"
       ]
      },
      "typeValue": {
       "raw": "(e: React.FocusEvent<HTMLInputElement, Element>, inputType: 'from' | 'to') => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:BaseRangeDatePickerProps",
      "required": false
     },
     {
      "uid": 13,
      "name": "onOpenChange",
      "comment": {
       "raw": [
        "Called when component is opened/closed"
       ]
      },
      "typeValue": {
       "raw": "(isOpen: boolean) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:BaseRangeDatePickerProps",
      "required": false
     },
     {
      "uid": 14,
      "name": "rawProps",
      "comment": {
       "raw": [
        "rawProps as HTML attributes"
       ]
      },
      "typeValue": {
       "raw": "{ from?: (React.HTMLAttributes<HTMLDivElement> & Record<`data-${string}`, string>) | undefined; to?: (React.HTMLAttributes<HTMLDivElement> & Record<`data-${string}`, string>) | undefined; body?: (React.HTMLAttributes<HTMLDivElement> & Record<`data-${string}`, string>) | undefined; }"
      },
      "from": "@epam/uui-core:BaseRangeDatePickerProps",
      "required": false
     },
     {
      "uid": 15,
      "name": "inputCx",
      "comment": {
       "raw": [
        "Styles for input and body components in RangeDatePicker"
       ]
      },
      "typeValue": {
       "raw": "null | string | number | boolean | ClassDictionary | ClassArray"
      },
      "typeValueRef": "@epam/uui-core:ClassValue",
      "from": "@epam/uui-core:BaseRangeDatePickerProps",
      "required": false
     },
     {
      "uid": 16,
      "name": "bodyCx",
      "typeValue": {
       "raw": "null | string | number | boolean | ClassDictionary | ClassArray"
      },
      "typeValueRef": "@epam/uui-core:ClassValue",
      "from": "@epam/uui-core:BaseRangeDatePickerProps",
      "required": false
     },
     {
      "uid": 17,
      "name": "value",
      "comment": {
       "raw": [
        "The current value of component"
       ]
      },
      "typeValue": {
       "raw": "RangeDatePickerValue"
      },
      "from": "@epam/uui-core:IEditable",
      "required": true
     },
     {
      "uid": 18,
      "name": "onValueChange",
      "comment": {
       "raw": [
        "Called when value needs to be changed (usually due to user interaction)"
       ]
      },
      "typeValue": {
       "raw": "(newValue: RangeDatePickerValue) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IEditable",
      "required": true
     },
     {
      "uid": 19,
      "name": "isInvalid",
      "comment": {
       "raw": [
        "True if component contains invalid input"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:ICanBeInvalid",
      "required": false
     },
     {
      "uid": 20,
      "name": "validationMessage",
      "comment": {
       "raw": [
        "Message describing why the value is invalid"
       ]
      },
      "typeValue": {
       "raw": "null | string | number | boolean | React.ReactElement<any, string | React.JSXElementConstructor<any>> | React.ReactFragment | React.ReactPortal"
      },
      "typeValueRef": "@types/react:ReactNode",
      "from": "@epam/uui-core:ICanBeInvalid",
      "required": false
     },
     {
      "uid": 21,
      "name": "validationProps",
      "comment": {
       "raw": [
        "If T is a complex value (object or array), this property contains validation states of inner items"
       ]
      },
      "typeValue": {
       "raw": "{ [key: string]: ICanBeInvalid; }"
      },
      "from": "@epam/uui-core:ICanBeInvalid",
      "required": false
     },
     {
      "uid": 22,
      "name": "isDisabled",
      "comment": {
       "raw": [
        "Disable editing, and visually de-emphasize value of the component"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:IDisableable",
      "required": false
     },
     {
      "uid": 23,
      "name": "isReadonly",
      "comment": {
       "raw": [
        "Disable editing. Unlike isDisabled, keep component's value readable."
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:ICanBeReadonly",
      "required": false
     },
     {
      "uid": 24,
      "name": "isRequired",
      "comment": {
       "raw": [
        "Marks that component's value is required and shouldn't be empty"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:ICanBeRequired",
      "required": false
     },
     {
      "uid": 25,
      "name": "getValueChangeAnalyticsEvent",
      "comment": {
       "raw": [
        "Given a value, returns an analytics event to send when component is edited.",
        " See [AnalyticsContext](@link https://uui.epam.com/documents?id=analyticsContext&mode=doc&skin=UUI4_promo&category=contexts)."
       ]
      },
      "typeValue": {
       "raw": "(newValue: RangeDatePickerValue | null, oldValue: RangeDatePickerValue | null) => AnalyticsEvent"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IAnalyticableOnChange",
      "required": false
     },
     {
      "uid": 26,
      "name": "size",
      "typeValue": {
       "raw": "'36' | '48' | '24' | '30' | '42' | 'none'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "24",
        "30",
        "36",
        "42",
        "48",
        "none"
       ]
      },
      "from": "@epam/uui:SizeMod",
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui:RangeDatePickerValue": {
   "summary": {
    "module": "@epam/uui",
    "typeName": {
     "name": "RangeDatePickerValue",
     "nameFull": "RangeDatePickerValue"
    },
    "src": "uui/components/datePickers/RangeDatePickerBody.tsx",
    "exported": true
   },
   "details": {
    "kind": 263,
    "typeValue": {
     "raw": "RangeDatePickerValue",
     "print": [
      "interface RangeDatePickerValue {",
      "    from: string | null;",
      "    to: string | null;",
      "}"
     ]
    },
    "props": [
     {
      "uid": 1,
      "name": "from",
      "typeValue": {
       "raw": "null | string"
      },
      "editor": {
       "type": "string"
      },
      "required": false
     },
     {
      "uid": 2,
      "name": "to",
      "typeValue": {
       "raw": "null | string"
      },
      "editor": {
       "type": "string"
      },
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui:RichTextViewMods": {
   "summary": {
    "module": "@epam/uui",
    "typeName": {
     "name": "RichTextViewMods",
     "nameFull": "RichTextViewMods"
    },
    "src": "uui/components/typography/RichTextView.tsx",
    "exported": true
   },
   "details": {
    "kind": 263,
    "typeValue": {
     "raw": "RichTextViewMods",
     "print": [
      "interface RichTextViewMods {",
      "    /**",
      "     * @default '14'",
      "     */",
      "    size?: '12' | '14' | '16';",
      "}"
     ]
    },
    "props": [
     {
      "uid": 1,
      "name": "size",
      "comment": {
       "raw": [
        "@default '14'"
       ],
       "tags": {
        "@default": "14"
       }
      },
      "typeValue": {
       "raw": "'12' | '14' | '16'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "12",
        "14",
        "16"
       ]
      },
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui:RichTextViewProps": {
   "summary": {
    "module": "@epam/uui",
    "typeName": {
     "name": "RichTextViewProps",
     "nameFull": "RichTextViewProps"
    },
    "src": "uui/components/typography/RichTextView.tsx",
    "exported": true
   },
   "details": {
    "kind": 264,
    "typeValue": {
     "raw": "RichTextViewProps",
     "print": [
      "type RichTextViewProps = uuiComponents.RichTextViewProps & RichTextViewMods;"
     ]
    },
    "props": [
     {
      "uid": 1,
      "name": "htmlContent",
      "typeValue": {
       "raw": "any"
      },
      "from": "@epam/uui-components:RichTextViewProps",
      "required": false
     },
     {
      "uid": 2,
      "name": "cx",
      "comment": {
       "raw": [
        "CSS class(es) to put on component's root. See {@link https://github.com/JedWatson/classnames#usage} for details"
       ]
      },
      "typeValue": {
       "raw": "null | string | number | boolean | ClassDictionary | ClassArray"
      },
      "typeValueRef": "@epam/uui-core:ClassValue",
      "from": "@epam/uui-core:IHasCX",
      "required": false
     },
     {
      "uid": 3,
      "name": "children",
      "typeValue": {
       "raw": "null | string | number | boolean | React.ReactElement<any, string | React.JSXElementConstructor<any>> | React.ReactFragment | React.ReactPortal"
      },
      "typeValueRef": "@types/react:ReactNode",
      "from": "@epam/uui-core:IHasChildren",
      "required": false
     },
     {
      "uid": 4,
      "name": "rawProps",
      "comment": {
       "raw": [
        "Any HTML attributes (native or 'data-') to put on the underlying component"
       ]
      },
      "typeValue": {
       "raw": "React.HTMLAttributes<HTMLDivElement> & Record<`data-${string}`, string>"
      },
      "from": "@epam/uui-core:IHasRawProps",
      "required": false
     },
     {
      "uid": 5,
      "name": "size",
      "comment": {
       "raw": [
        "@default '14'"
       ],
       "tags": {
        "@default": "14"
       }
      },
      "typeValue": {
       "raw": "'12' | '14' | '16'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "12",
        "14",
        "16"
       ]
      },
      "from": "@epam/uui:RichTextViewMods",
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui:RowMods": {
   "summary": {
    "module": "@epam/uui",
    "typeName": {
     "name": "RowMods",
     "nameFull": "RowMods"
    },
    "src": "uui/components/layout/FlexItems/FlexRow.tsx",
    "exported": true
   },
   "details": {
    "kind": 263,
    "typeValue": {
     "raw": "RowMods",
     "print": [
      "interface RowMods extends RowSizeMod {",
      "    borderBottom?: boolean;",
      "    columnGap?: number | '6' | '12' | '18' | '24' | '36';",
      "    margin?: '12' | '24';",
      "    padding?: '6' | '12' | '18' | '24';",
      "    rowGap?: number | '6' | '12' | '18' | '24' | '36';",
      "    spacing?: '6' | '12' | '18';",
      "    topShadow?: boolean;",
      "    vPadding?: '12' | '18' | '24' | '36' | '48';",
      "    background?: 'surface';",
      "}"
     ]
    },
    "props": [
     {
      "uid": 1,
      "name": "borderBottom",
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "required": false
     },
     {
      "uid": 2,
      "name": "columnGap",
      "typeValue": {
       "raw": "number | '6' | '12' | '18' | '36' | '24'"
      },
      "required": false
     },
     {
      "uid": 3,
      "name": "margin",
      "typeValue": {
       "raw": "'12' | '24'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "12",
        "24"
       ]
      },
      "required": false
     },
     {
      "uid": 4,
      "name": "padding",
      "typeValue": {
       "raw": "'6' | '12' | '18' | '24'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "6",
        "12",
        "18",
        "24"
       ]
      },
      "required": false
     },
     {
      "uid": 5,
      "name": "rowGap",
      "typeValue": {
       "raw": "number | '6' | '12' | '18' | '36' | '24'"
      },
      "required": false
     },
     {
      "uid": 6,
      "name": "spacing",
      "typeValue": {
       "raw": "'6' | '12' | '18'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "6",
        "12",
        "18"
       ]
      },
      "required": false
     },
     {
      "uid": 7,
      "name": "topShadow",
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "required": false
     },
     {
      "uid": 8,
      "name": "vPadding",
      "typeValue": {
       "raw": "'12' | '18' | '36' | '48' | '24'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "12",
        "18",
        "24",
        "36",
        "48"
       ]
      },
      "required": false
     },
     {
      "uid": 9,
      "name": "background",
      "typeValue": {
       "raw": "'surface'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "surface"
       ]
      },
      "required": false
     },
     {
      "uid": 10,
      "name": "size",
      "typeValue": {
       "raw": "null | '36' | '48' | '24' | '30' | '42'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "24",
        "30",
        "36",
        "42",
        "48",
        null
       ]
      },
      "from": "@epam/uui:RowSizeMod",
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui:RowSize": {
   "summary": {
    "module": "@epam/uui",
    "typeName": {
     "name": "RowSize",
     "nameFull": "RowSize"
    },
    "src": "uui/components/types.ts",
    "exported": true
   },
   "details": {
    "kind": 264,
    "typeValue": {
     "raw": "null | '36' | '48' | '24' | '30' | '42'",
     "print": [
      "type RowSize = null | '24' | '30' | '36' | '42' | '48';"
     ]
    }
   }
  },
  "@epam/uui:RowSizeMod": {
   "summary": {
    "module": "@epam/uui",
    "typeName": {
     "name": "RowSizeMod",
     "nameFull": "RowSizeMod"
    },
    "src": "uui/components/types.ts",
    "exported": true
   },
   "details": {
    "kind": 263,
    "typeValue": {
     "raw": "RowSizeMod",
     "print": [
      "interface RowSizeMod {",
      "    size?: RowSize;",
      "}"
     ]
    },
    "props": [
     {
      "uid": 1,
      "name": "size",
      "typeValue": {
       "raw": "null | '36' | '48' | '24' | '30' | '42'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "24",
        "30",
        "36",
        "42",
        "48",
        null
       ]
      },
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui:SearchInputProps": {
   "summary": {
    "module": "@epam/uui",
    "typeName": {
     "name": "SearchInputProps",
     "nameFull": "SearchInputProps"
    },
    "src": "uui/components/inputs/TextInput.tsx",
    "exported": true
   },
   "details": {
    "kind": 263,
    "typeValue": {
     "raw": "SearchInputProps",
     "print": [
      "interface SearchInputProps extends TextInputProps, IEditableDebouncerOptions {",
      "}"
     ]
    },
    "props": [
     {
      "uid": 1,
      "name": "acceptIcon",
      "comment": {
       "raw": [
        "Overrides accept (check) icon"
       ]
      },
      "typeValue": {
       "raw": "Icon"
      },
      "editor": {
       "type": "component"
      },
      "from": "@epam/uui-components:TextInputProps",
      "required": false
     },
     {
      "uid": 2,
      "name": "cancelIcon",
      "comment": {
       "raw": [
        "Overrides cancel (cross) icon"
       ]
      },
      "typeValue": {
       "raw": "Icon"
      },
      "editor": {
       "type": "component"
      },
      "from": "@epam/uui-components:TextInputProps",
      "required": false
     },
     {
      "uid": 3,
      "name": "dropdownIcon",
      "comment": {
       "raw": [
        "Overrides dropdown (chevron) icon"
       ]
      },
      "typeValue": {
       "raw": "Icon"
      },
      "editor": {
       "type": "component"
      },
      "from": "@epam/uui-components:TextInputProps",
      "required": false
     },
     {
      "uid": 4,
      "name": "inputCx",
      "comment": {
       "raw": [
        "CSS class(es) to put to the HTML Input element"
       ]
      },
      "typeValue": {
       "raw": "null | string | number | boolean | ClassDictionary | ClassArray"
      },
      "typeValueRef": "@epam/uui-core:ClassValue",
      "from": "@epam/uui-components:TextInputProps",
      "required": false
     },
     {
      "uid": 5,
      "name": "renderInput",
      "comment": {
       "raw": [
        "overrides rendering of HTML Input element"
       ]
      },
      "typeValue": {
       "raw": "(props: IRenderInputProps) => JSX.Element"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-components:TextInputProps",
      "required": false
     },
     {
      "uid": 6,
      "name": "onCancel",
      "comment": {
       "raw": [
        "Enables cancel (cross) icon, and fires when the icon is clicked"
       ]
      },
      "typeValue": {
       "raw": "() => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:TextInputCoreProps",
      "required": false
     },
     {
      "uid": 7,
      "name": "onAccept",
      "comment": {
       "raw": [
        "Enables accept (check) icon, and fires when the icon is clicked"
       ]
      },
      "typeValue": {
       "raw": "() => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:TextInputCoreProps",
      "required": false
     },
     {
      "uid": 8,
      "name": "onKeyDown",
      "comment": {
       "raw": [
        "keydown event handler to put on the HTML input element"
       ]
      },
      "typeValue": {
       "raw": "(e?: any) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:TextInputCoreProps",
      "required": false
     },
     {
      "uid": 9,
      "name": "autoFocus",
      "comment": {
       "raw": [
        "Put focus on the element, when component is mounted"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:TextInputCoreProps",
      "required": false
     },
     {
      "uid": 10,
      "name": "type",
      "comment": {
       "raw": [
        "Standard 'type' attribute to put on the HTML input element (e.g. 'password')"
       ]
      },
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "from": "@epam/uui-core:TextInputCoreProps",
      "required": false
     },
     {
      "uid": 11,
      "name": "autoComplete",
      "comment": {
       "raw": [
        "Standard [autocomplete attribute]{@link https://www.w3schools.com/tags/att_input_autocomplete.asp}"
       ]
      },
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "from": "@epam/uui-core:TextInputCoreProps",
      "required": false
     },
     {
      "uid": 12,
      "name": "name",
      "comment": {
       "raw": [
        "Standard [name attribute]{@link https://www.w3schools.com/tags/att_input_name.asp}"
       ]
      },
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "from": "@epam/uui-core:TextInputCoreProps",
      "required": false
     },
     {
      "uid": 13,
      "name": "maxLength",
      "comment": {
       "raw": [
        "Maximum input length in characters"
       ]
      },
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "from": "@epam/uui-core:TextInputCoreProps",
      "required": false
     },
     {
      "uid": 14,
      "name": "inputMode",
      "comment": {
       "raw": [
        "Standard [inputMode attribute]{@link https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/inputmode}"
       ]
      },
      "typeValue": {
       "raw": "'none' | 'text' | 'tel' | 'url' | 'email' | 'numeric' | 'decimal' | 'search'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "none",
        "text",
        "tel",
        "url",
        "email",
        "numeric",
        "decimal",
        "search"
       ]
      },
      "from": "@epam/uui-core:TextInputCoreProps",
      "required": false
     },
     {
      "uid": 15,
      "name": "id",
      "comment": {
       "raw": [
        "HTML ID attribute for input"
       ]
      },
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "from": "@epam/uui-core:TextInputCoreProps",
      "required": false
     },
     {
      "uid": 16,
      "name": "cx",
      "comment": {
       "raw": [
        "CSS class(es) to put on component's root. See {@link https://github.com/JedWatson/classnames#usage} for details"
       ]
      },
      "typeValue": {
       "raw": "null | string | number | boolean | ClassDictionary | ClassArray"
      },
      "typeValueRef": "@epam/uui-core:ClassValue",
      "from": "@epam/uui-core:IHasCX",
      "required": false
     },
     {
      "uid": 17,
      "name": "onClick",
      "comment": {
       "raw": [
        "Called when component is clicked"
       ]
      },
      "typeValue": {
       "raw": "(e?: any) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IClickable",
      "required": false
     },
     {
      "uid": 18,
      "name": "isDisabled",
      "comment": {
       "raw": [
        "Disable editing, and visually de-emphasize value of the component"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:IDisableable",
      "required": false
     },
     {
      "uid": 19,
      "name": "value",
      "comment": {
       "raw": [
        "The current value of component"
       ]
      },
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "from": "@epam/uui-core:IEditable",
      "required": true
     },
     {
      "uid": 20,
      "name": "onValueChange",
      "comment": {
       "raw": [
        "Called when value needs to be changed (usually due to user interaction)"
       ]
      },
      "typeValue": {
       "raw": "(newValue: string | undefined) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IEditable",
      "required": true
     },
     {
      "uid": 21,
      "name": "isInvalid",
      "comment": {
       "raw": [
        "True if component contains invalid input"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:ICanBeInvalid",
      "required": false
     },
     {
      "uid": 22,
      "name": "validationMessage",
      "comment": {
       "raw": [
        "Message describing why the value is invalid"
       ]
      },
      "typeValue": {
       "raw": "null | string | number | boolean | React.ReactElement<any, string | React.JSXElementConstructor<any>> | React.ReactFragment | React.ReactPortal"
      },
      "typeValueRef": "@types/react:ReactNode",
      "from": "@epam/uui-core:ICanBeInvalid",
      "required": false
     },
     {
      "uid": 23,
      "name": "validationProps",
      "comment": {
       "raw": [
        "If T is a complex value (object or array), this property contains validation states of inner items"
       ]
      },
      "typeValue": {
       "raw": "{ [key: string]: ICanBeInvalid; }"
      },
      "from": "@epam/uui-core:ICanBeInvalid",
      "required": false
     },
     {
      "uid": 24,
      "name": "isReadonly",
      "comment": {
       "raw": [
        "Disable editing. Unlike isDisabled, keep component's value readable."
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:ICanBeReadonly",
      "required": false
     },
     {
      "uid": 25,
      "name": "isRequired",
      "comment": {
       "raw": [
        "Marks that component's value is required and shouldn't be empty"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:ICanBeRequired",
      "required": false
     },
     {
      "uid": 26,
      "name": "placeholder",
      "comment": {
       "raw": [
        "Placeholder to display when empty"
       ]
      },
      "typeValue": {
       "raw": "any"
      },
      "from": "@epam/uui-core:IHasPlaceholder",
      "required": false
     },
     {
      "uid": 27,
      "name": "icon",
      "comment": {
       "raw": [
        "Icon can be a React element (usually an SVG element)"
       ]
      },
      "typeValue": {
       "raw": "Icon"
      },
      "editor": {
       "type": "component"
      },
      "from": "@epam/uui-core:IHasIcon",
      "required": false
     },
     {
      "uid": 28,
      "name": "iconPosition",
      "comment": {
       "raw": [
        "Position of the icon (left of right)"
       ]
      },
      "typeValue": {
       "raw": "'left' | 'right'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "left",
        "right"
       ]
      },
      "from": "@epam/uui-core:IHasIcon",
      "required": false
     },
     {
      "uid": 29,
      "name": "onIconClick",
      "comment": {
       "raw": [
        "Click handler for the icon"
       ]
      },
      "typeValue": {
       "raw": "() => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IHasIcon",
      "required": false
     },
     {
      "uid": 30,
      "name": "isOpen",
      "comment": {
       "raw": [
        "When isDropdown=true, indicate that dropdown is open with chevron icon"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:IDropdownToggler",
      "required": false
     },
     {
      "uid": 31,
      "name": "isDropdown",
      "comment": {
       "raw": [
        "Shows chevron icon, enabling component to act as dropdown toggler"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:IDropdownToggler",
      "required": false
     },
     {
      "uid": 32,
      "name": "toggleDropdownOpening",
      "comment": {
       "raw": [
        "Called when associated dropdown should open or close"
       ]
      },
      "typeValue": {
       "raw": "(value: boolean) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IDropdownToggler",
      "required": false
     },
     {
      "uid": 33,
      "name": "isInteractedOutside",
      "comment": {
       "raw": [
        "Called when component is interacted outside, to close the dropdown"
       ]
      },
      "typeValue": {
       "raw": "(event: Event) => boolean"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IDropdownToggler",
      "required": false
     },
     {
      "uid": 34,
      "name": "ref",
      "comment": {
       "raw": [
        "Component's ref"
       ]
      },
      "typeValue": {
       "raw": "null | (instance: any) => void | React.RefObject<any>"
      },
      "from": "@epam/uui-core:IDropdownToggler",
      "required": false
     },
     {
      "uid": 35,
      "name": "caption",
      "comment": {
       "raw": [
        "Caption. Can be a string, or React.Elements. Certain components supports minimal markup (<b>,<i>,<a>) in captions."
       ]
      },
      "typeValue": {
       "raw": "any"
      },
      "from": "@epam/uui-core:IHasCaption",
      "required": false
     },
     {
      "uid": 36,
      "name": "getValueChangeAnalyticsEvent",
      "comment": {
       "raw": [
        "Given a value, returns an analytics event to send when component is edited.",
        " See [AnalyticsContext](@link https://uui.epam.com/documents?id=analyticsContext&mode=doc&skin=UUI4_promo&category=contexts)."
       ]
      },
      "typeValue": {
       "raw": "(newValue: string | null, oldValue: string | null) => AnalyticsEvent"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IAnalyticableOnChange",
      "required": false
     },
     {
      "uid": 37,
      "name": "rawProps",
      "comment": {
       "raw": [
        "Any HTML attributes (native or 'data-') to put on the underlying component"
       ]
      },
      "typeValue": {
       "raw": "React.HTMLAttributes<HTMLInputElement> & Record<`data-${string}`, string>"
      },
      "from": "@epam/uui-core:IHasRawProps",
      "required": false
     },
     {
      "uid": 38,
      "name": "onFocus",
      "comment": {
       "raw": [
        "Called when component gets input focus"
       ]
      },
      "typeValue": {
       "raw": "(e: React.FocusEvent<HTMLInputElement, Element>) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:ICanFocus",
      "required": false
     },
     {
      "uid": 39,
      "name": "onBlur",
      "comment": {
       "raw": [
        "Called when component looses input focus"
       ]
      },
      "typeValue": {
       "raw": "(e: React.FocusEvent<HTMLInputElement, Element>) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:ICanFocus",
      "required": false
     },
     {
      "uid": 40,
      "name": "tabIndex",
      "comment": {
       "raw": [
        "Controls the order of keyboard navigation between components"
       ]
      },
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "from": "@epam/uui-core:IHasTabIndex",
      "required": false
     },
     {
      "uid": 41,
      "name": "size",
      "comment": {
       "raw": [
        "@default '36'"
       ],
       "tags": {
        "@default": "36"
       }
      },
      "typeValue": {
       "raw": "'36' | '48' | '24' | '30' | '42' | 'none'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "24",
        "30",
        "36",
        "42",
        "48",
        "none"
       ]
      },
      "from": "@epam/uui:TextInputMods",
      "required": false
     },
     {
      "uid": 42,
      "name": "mode",
      "comment": {
       "raw": [
        "Visual mode for component:",
        " - form: default visuals, to use in forms.",
        " - cell: adjust to embed as table cell editor: no borders, no focus (it is applied by DataCell)",
        " - inline: adjust for WYSIWYG UX. Backgrounds removed. Borders appear only on hover."
       ]
      },
      "typeValue": {
       "raw": "'inline' | 'form' | 'cell'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "inline",
        "form",
        "cell"
       ]
      },
      "from": "@epam/uui:IHasEditMode",
      "required": false
     },
     {
      "uid": 43,
      "name": "disableDebounce",
      "comment": {
       "raw": [
        "Pass true to disable debouncing"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:IEditableDebouncerOptions",
      "required": false
     },
     {
      "uid": 44,
      "name": "debounceDelay",
      "comment": {
       "raw": [
        "Debounce delay in ms. Default value is 500ms"
       ]
      },
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "from": "@epam/uui-core:IEditableDebouncerOptions",
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui:SemanticColor": {
   "summary": {
    "module": "@epam/uui",
    "typeName": {
     "name": "SemanticColor",
     "nameFull": "SemanticColor"
    },
    "src": "uui/components/types.ts",
    "exported": true
   },
   "details": {
    "kind": 264,
    "typeValue": {
     "raw": "'info' | 'success' | 'warning' | 'error'",
     "print": [
      "type SemanticColor = 'info' | 'success' | 'warning' | 'error';"
     ]
    }
   }
  },
  "@epam/uui:SizeMod": {
   "summary": {
    "module": "@epam/uui",
    "typeName": {
     "name": "SizeMod",
     "nameFull": "SizeMod"
    },
    "src": "uui/components/types.ts",
    "exported": true
   },
   "details": {
    "kind": 263,
    "typeValue": {
     "raw": "SizeMod",
     "print": [
      "interface SizeMod {",
      "    size?: ControlSize;",
      "}"
     ]
    },
    "props": [
     {
      "uid": 1,
      "name": "size",
      "typeValue": {
       "raw": "'36' | '48' | '24' | '30' | '42' | 'none'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "24",
        "30",
        "36",
        "42",
        "48",
        "none"
       ]
      },
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui:SliderMods": {
   "summary": {
    "module": "@epam/uui",
    "typeName": {
     "name": "SliderMods",
     "nameFull": "SliderMods"
    },
    "src": "uui/components/inputs/Slider.tsx",
    "exported": true
   },
   "details": {
    "kind": 263,
    "typeValue": {
     "raw": "SliderMods",
     "print": [
      "interface SliderMods {",
      "}"
     ]
    }
   }
  },
  "@epam/uui:SliderProps": {
   "summary": {
    "module": "@epam/uui",
    "typeName": {
     "name": "SliderProps",
     "nameFull": "SliderProps"
    },
    "src": "uui/components/inputs/Slider.tsx",
    "exported": true
   },
   "details": {
    "kind": 263,
    "typeValue": {
     "raw": "SliderProps",
     "print": [
      "interface SliderProps extends SliderBaseProps<number>, SliderMods {",
      "}"
     ]
    },
    "props": [
     {
      "uid": 1,
      "name": "min",
      "comment": {
       "raw": [
        "Min value (when slider is at leftmost position)"
       ]
      },
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "from": "@epam/uui-components:SliderBaseProps",
      "required": true
     },
     {
      "uid": 2,
      "name": "max",
      "comment": {
       "raw": [
        "Max value (when slider is at rightmost position)"
       ]
      },
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "from": "@epam/uui-components:SliderBaseProps",
      "required": true
     },
     {
      "uid": 3,
      "name": "step",
      "comment": {
       "raw": [
        "Value change step"
       ]
      },
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "from": "@epam/uui-components:SliderBaseProps",
      "required": true
     },
     {
      "uid": 4,
      "name": "splitAt",
      "comment": {
       "raw": [
        "Slider renders a label at each splitAt position"
       ]
      },
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "from": "@epam/uui-components:SliderBaseProps",
      "required": false
     },
     {
      "uid": 5,
      "name": "renderLabel",
      "comment": {
       "raw": [
        "Overrides rendering of values labels"
       ]
      },
      "typeValue": {
       "raw": "(value: number) => string"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-components:SliderBaseProps",
      "required": false
     },
     {
      "uid": 6,
      "name": "showTooltip",
      "comment": {
       "raw": [
        "Toggles rendering of tooltip with current value"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-components:SliderBaseProps",
      "required": false
     },
     {
      "uid": 7,
      "name": "cx",
      "comment": {
       "raw": [
        "CSS class(es) to put on component's root. See {@link https://github.com/JedWatson/classnames#usage} for details"
       ]
      },
      "typeValue": {
       "raw": "null | string | number | boolean | ClassDictionary | ClassArray"
      },
      "typeValueRef": "@epam/uui-core:ClassValue",
      "from": "@epam/uui-core:IHasCX",
      "required": false
     },
     {
      "uid": 8,
      "name": "value",
      "comment": {
       "raw": [
        "The current value of component"
       ]
      },
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "from": "@epam/uui-core:IEditable",
      "required": true
     },
     {
      "uid": 9,
      "name": "onValueChange",
      "comment": {
       "raw": [
        "Called when value needs to be changed (usually due to user interaction)"
       ]
      },
      "typeValue": {
       "raw": "(newValue: number) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IEditable",
      "required": true
     },
     {
      "uid": 10,
      "name": "isInvalid",
      "comment": {
       "raw": [
        "True if component contains invalid input"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:ICanBeInvalid",
      "required": false
     },
     {
      "uid": 11,
      "name": "validationMessage",
      "comment": {
       "raw": [
        "Message describing why the value is invalid"
       ]
      },
      "typeValue": {
       "raw": "null | string | number | boolean | React.ReactElement<any, string | React.JSXElementConstructor<any>> | React.ReactFragment | React.ReactPortal"
      },
      "typeValueRef": "@types/react:ReactNode",
      "from": "@epam/uui-core:ICanBeInvalid",
      "required": false
     },
     {
      "uid": 12,
      "name": "validationProps",
      "comment": {
       "raw": [
        "If T is a complex value (object or array), this property contains validation states of inner items"
       ]
      },
      "typeValue": {
       "raw": "{ [key: string]: ICanBeInvalid; }"
      },
      "from": "@epam/uui-core:ICanBeInvalid",
      "required": false
     },
     {
      "uid": 13,
      "name": "isDisabled",
      "comment": {
       "raw": [
        "Disable editing, and visually de-emphasize value of the component"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:IDisableable",
      "required": false
     },
     {
      "uid": 14,
      "name": "isReadonly",
      "comment": {
       "raw": [
        "Disable editing. Unlike isDisabled, keep component's value readable."
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:ICanBeReadonly",
      "required": false
     },
     {
      "uid": 15,
      "name": "isRequired",
      "comment": {
       "raw": [
        "Marks that component's value is required and shouldn't be empty"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:ICanBeRequired",
      "required": false
     },
     {
      "uid": 16,
      "name": "rawProps",
      "comment": {
       "raw": [
        "Any HTML attributes (native or 'data-') to put on the underlying component"
       ]
      },
      "typeValue": {
       "raw": "React.HTMLAttributes<HTMLDivElement> & Record<`data-${string}`, string>"
      },
      "from": "@epam/uui-core:IHasRawProps",
      "required": false
     },
     {
      "uid": 17,
      "name": "forwardedRef",
      "comment": {
       "raw": [
        "this ref is passed to the underlying component"
       ]
      },
      "typeValue": {
       "raw": "null | (instance: HTMLDivElement | null) => void | React.MutableRefObject<HTMLDivElement | null>"
      },
      "from": "@epam/uui-core:IHasForwardedRef",
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui:SpinnerProps": {
   "summary": {
    "module": "@epam/uui",
    "typeName": {
     "name": "SpinnerProps",
     "nameFull": "SpinnerProps"
    },
    "src": "uui/components/widgets/Spinner.tsx",
    "exported": true
   },
   "details": {
    "kind": 264,
    "typeValue": {
     "raw": "SpinnerProps",
     "print": [
      "type SpinnerProps = UuiSpinnerProps;"
     ]
    },
    "props": [
     {
      "uid": 1,
      "name": "cx",
      "comment": {
       "raw": [
        "CSS class(es) to put on component's root. See {@link https://github.com/JedWatson/classnames#usage} for details"
       ]
      },
      "typeValue": {
       "raw": "null | string | number | boolean | ClassDictionary | ClassArray"
      },
      "typeValueRef": "@epam/uui-core:ClassValue",
      "from": "@epam/uui-core:IHasCX",
      "required": false
     },
     {
      "uid": 2,
      "name": "rawProps",
      "comment": {
       "raw": [
        "Any HTML attributes (native or 'data-') to put on the underlying component"
       ]
      },
      "typeValue": {
       "raw": "React.HTMLAttributes<HTMLDivElement> & Record<`data-${string}`, string>"
      },
      "from": "@epam/uui-core:IHasRawProps",
      "required": false
     },
     {
      "uid": 3,
      "name": "forwardedRef",
      "comment": {
       "raw": [
        "this ref is passed to the underlying component"
       ]
      },
      "typeValue": {
       "raw": "null | (instance: HTMLDivElement | null) => void | React.MutableRefObject<HTMLDivElement | null>"
      },
      "from": "@epam/uui-core:IHasForwardedRef",
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui:StatusIndicatorColors": {
   "summary": {
    "module": "@epam/uui",
    "typeName": {
     "name": "StatusIndicatorColors",
     "nameFull": "StatusIndicatorColors"
    },
    "src": "uui/components/widgets/StatusIndicator.tsx",
    "exported": true
   },
   "details": {
    "kind": 264,
    "typeValue": {
     "raw": "'info' | 'success' | 'warning' | 'critical' | 'neutral'",
     "print": [
      "type StatusIndicatorColors = 'neutral' | 'info' | 'success' | 'warning' | 'critical';"
     ]
    }
   }
  },
  "@epam/uui:StatusIndicatorProps": {
   "summary": {
    "module": "@epam/uui",
    "typeName": {
     "name": "StatusIndicatorProps",
     "nameFull": "StatusIndicatorProps"
    },
    "src": "uui/components/widgets/StatusIndicator.tsx",
    "exported": true
   },
   "details": {
    "kind": 263,
    "typeValue": {
     "raw": "StatusIndicatorProps",
     "print": [
      "interface StatusIndicatorProps extends IHasCX {",
      "    /**",
      "     * Component size. If omitted, 24 size will be used.",
      "     * @default '24'",
      "     */",
      "    size?: '24' | '18' | '12';",
      "    /**",
      "     * Component color.",
      "     * @default 'neutral'",
      "     */",
      "    color?: StatusIndicatorColors;",
      "    /**",
      "     * Fill mode, solid is used by default",
      "     * @default 'solid'",
      "     */",
      "    fill?: 'solid' | 'outline';",
      "    /** Component caption. */",
      "    caption: string;",
      "}"
     ]
    },
    "props": [
     {
      "uid": 1,
      "name": "size",
      "comment": {
       "raw": [
        "Component size. If omitted, 24 size will be used.",
        " @default '24'"
       ],
       "tags": {
        "@default": "24"
       }
      },
      "typeValue": {
       "raw": "'12' | '18' | '24'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "12",
        "18",
        "24"
       ]
      },
      "required": false
     },
     {
      "uid": 2,
      "name": "color",
      "comment": {
       "raw": [
        "Component color.",
        " @default 'neutral'"
       ],
       "tags": {
        "@default": "neutral"
       }
      },
      "typeValue": {
       "raw": "'info' | 'success' | 'warning' | 'critical' | 'neutral'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "info",
        "success",
        "warning",
        "critical",
        "neutral"
       ]
      },
      "required": false
     },
     {
      "uid": 3,
      "name": "fill",
      "comment": {
       "raw": [
        "Fill mode, solid is used by default",
        " @default 'solid'"
       ],
       "tags": {
        "@default": "solid"
       }
      },
      "typeValue": {
       "raw": "'solid' | 'outline'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "solid",
        "outline"
       ]
      },
      "required": false
     },
     {
      "uid": 4,
      "name": "caption",
      "comment": {
       "raw": [
        "Component caption."
       ]
      },
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "required": true
     },
     {
      "uid": 5,
      "name": "cx",
      "comment": {
       "raw": [
        "CSS class(es) to put on component's root. See {@link https://github.com/JedWatson/classnames#usage} for details"
       ]
      },
      "typeValue": {
       "raw": "null | string | number | boolean | ClassDictionary | ClassArray"
      },
      "typeValueRef": "@epam/uui-core:ClassValue",
      "from": "@epam/uui-core:IHasCX",
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui:SwitchMods": {
   "summary": {
    "module": "@epam/uui",
    "typeName": {
     "name": "SwitchMods",
     "nameFull": "SwitchMods"
    },
    "src": "uui/components/inputs/Switch.tsx",
    "exported": true
   },
   "details": {
    "kind": 263,
    "typeValue": {
     "raw": "SwitchMods",
     "print": [
      "interface SwitchMods {",
      "    /**",
      "     * @default '18'",
      "     */",
      "    size?: '12' | '18' | '24';",
      "}"
     ]
    },
    "props": [
     {
      "uid": 1,
      "name": "size",
      "comment": {
       "raw": [
        "@default '18'"
       ],
       "tags": {
        "@default": "18"
       }
      },
      "typeValue": {
       "raw": "'12' | '18' | '24'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "12",
        "18",
        "24"
       ]
      },
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui:SwitchProps": {
   "summary": {
    "module": "@epam/uui",
    "typeName": {
     "name": "SwitchProps",
     "nameFull": "SwitchProps"
    },
    "src": "uui/components/inputs/Switch.tsx",
    "exported": true
   },
   "details": {
    "kind": 264,
    "typeValue": {
     "raw": "SwitchProps",
     "print": [
      "type SwitchProps = uuiComponents.SwitchProps & SwitchMods;"
     ]
    },
    "props": [
     {
      "uid": 1,
      "name": "id",
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "from": "@epam/uui-components:SwitchProps",
      "required": false
     },
     {
      "uid": 2,
      "name": "cx",
      "comment": {
       "raw": [
        "CSS class(es) to put on component's root. See {@link https://github.com/JedWatson/classnames#usage} for details"
       ]
      },
      "typeValue": {
       "raw": "null | string | number | boolean | ClassDictionary | ClassArray"
      },
      "typeValueRef": "@epam/uui-core:ClassValue",
      "from": "@epam/uui-core:IHasCX",
      "required": false
     },
     {
      "uid": 3,
      "name": "isDisabled",
      "comment": {
       "raw": [
        "Disable editing, and visually de-emphasize value of the component"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:IDisableable",
      "required": false
     },
     {
      "uid": 4,
      "name": "value",
      "comment": {
       "raw": [
        "The current value of component"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:IEditable",
      "required": true
     },
     {
      "uid": 5,
      "name": "onValueChange",
      "comment": {
       "raw": [
        "Called when value needs to be changed (usually due to user interaction)"
       ]
      },
      "typeValue": {
       "raw": "(newValue: boolean) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IEditable",
      "required": true
     },
     {
      "uid": 6,
      "name": "isInvalid",
      "comment": {
       "raw": [
        "True if component contains invalid input"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:ICanBeInvalid",
      "required": false
     },
     {
      "uid": 7,
      "name": "validationMessage",
      "comment": {
       "raw": [
        "Message describing why the value is invalid"
       ]
      },
      "typeValue": {
       "raw": "null | string | number | boolean | React.ReactElement<any, string | React.JSXElementConstructor<any>> | React.ReactFragment | React.ReactPortal"
      },
      "typeValueRef": "@types/react:ReactNode",
      "from": "@epam/uui-core:ICanBeInvalid",
      "required": false
     },
     {
      "uid": 8,
      "name": "validationProps",
      "comment": {
       "raw": [
        "If T is a complex value (object or array), this property contains validation states of inner items"
       ]
      },
      "typeValue": {
       "raw": "{ [key: string]: ICanBeInvalid; }"
      },
      "from": "@epam/uui-core:ICanBeInvalid",
      "required": false
     },
     {
      "uid": 9,
      "name": "isReadonly",
      "comment": {
       "raw": [
        "Disable editing. Unlike isDisabled, keep component's value readable."
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:ICanBeReadonly",
      "required": false
     },
     {
      "uid": 10,
      "name": "isRequired",
      "comment": {
       "raw": [
        "Marks that component's value is required and shouldn't be empty"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:ICanBeRequired",
      "required": false
     },
     {
      "uid": 11,
      "name": "label",
      "comment": {
       "raw": [
        "Label. Can be a string, or React.Elements. Certain components supports minimal markup (<b>,<i>,<a>) in captions."
       ]
      },
      "typeValue": {
       "raw": "any"
      },
      "from": "@epam/uui-core:IHasLabel",
      "required": false
     },
     {
      "uid": 12,
      "name": "getValueChangeAnalyticsEvent",
      "comment": {
       "raw": [
        "Given a value, returns an analytics event to send when component is edited.",
        " See [AnalyticsContext](@link https://uui.epam.com/documents?id=analyticsContext&mode=doc&skin=UUI4_promo&category=contexts)."
       ]
      },
      "typeValue": {
       "raw": "(newValue: boolean | null, oldValue: boolean | null) => AnalyticsEvent"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IAnalyticableOnChange",
      "required": false
     },
     {
      "uid": 13,
      "name": "rawProps",
      "comment": {
       "raw": [
        "Any HTML attributes (native or 'data-') to put on the underlying component"
       ]
      },
      "typeValue": {
       "raw": "React.LabelHTMLAttributes<HTMLLabelElement> & Record<`data-${string}`, string>"
      },
      "from": "@epam/uui-core:IHasRawProps",
      "required": false
     },
     {
      "uid": 14,
      "name": "forwardedRef",
      "comment": {
       "raw": [
        "this ref is passed to the underlying component"
       ]
      },
      "typeValue": {
       "raw": "null | (instance: HTMLLabelElement | null) => void | React.MutableRefObject<HTMLLabelElement | null>"
      },
      "from": "@epam/uui-core:IHasForwardedRef",
      "required": false
     },
     {
      "uid": 15,
      "name": "tabIndex",
      "comment": {
       "raw": [
        "Controls the order of keyboard navigation between components"
       ]
      },
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "from": "@epam/uui-core:IHasTabIndex",
      "required": false
     },
     {
      "uid": 16,
      "name": "size",
      "comment": {
       "raw": [
        "@default '18'"
       ],
       "tags": {
        "@default": "18"
       }
      },
      "typeValue": {
       "raw": "'12' | '18' | '24'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "12",
        "18",
        "24"
       ]
      },
      "from": "@epam/uui:SwitchMods",
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui:TabButtonMods": {
   "summary": {
    "module": "@epam/uui",
    "typeName": {
     "name": "TabButtonMods",
     "nameFull": "TabButtonMods"
    },
    "src": "uui/components/buttons/TabButton.tsx",
    "exported": true
   },
   "details": {
    "kind": 263,
    "typeValue": {
     "raw": "TabButtonMods",
     "print": [
      "interface TabButtonMods {",
      "    /**",
      "     * @default '48'",
      "     */",
      "    size?: '36' | '48' | '60';",
      "    withNotify?: boolean;",
      "}"
     ]
    },
    "props": [
     {
      "uid": 1,
      "name": "size",
      "comment": {
       "raw": [
        "@default '48'"
       ],
       "tags": {
        "@default": "48"
       }
      },
      "typeValue": {
       "raw": "'36' | '48' | '60'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "36",
        "48",
        "60"
       ]
      },
      "required": false
     },
     {
      "uid": 2,
      "name": "withNotify",
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui:TabButtonProps": {
   "summary": {
    "module": "@epam/uui",
    "typeName": {
     "name": "TabButtonProps",
     "nameFull": "TabButtonProps"
    },
    "src": "uui/components/buttons/TabButton.tsx",
    "exported": true
   },
   "details": {
    "kind": 264,
    "typeValue": {
     "raw": "TabButtonProps",
     "print": [
      "type TabButtonProps = TabButtonMods & ButtonProps;"
     ]
    },
    "props": [
     {
      "uid": 1,
      "name": "size",
      "comment": {
       "raw": [
        "@default '48'"
       ],
       "tags": {
        "@default": "48"
       }
      },
      "typeValue": {
       "raw": "'36' | '48' | '60'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "36",
        "48",
        "60"
       ]
      },
      "from": "@epam/uui:TabButtonMods",
      "required": false
     },
     {
      "uid": 2,
      "name": "withNotify",
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui:TabButtonMods",
      "required": false
     },
     {
      "uid": 3,
      "name": "clearIcon",
      "comment": {
       "raw": [
        "Icon for clear value button (usually cross)"
       ]
      },
      "typeValue": {
       "raw": "Icon"
      },
      "editor": {
       "type": "component"
      },
      "from": "@epam/uui-components:ButtonProps",
      "required": false
     },
     {
      "uid": 4,
      "name": "captionCX",
      "comment": {
       "raw": [
        "CSS classes to put on the caption"
       ]
      },
      "typeValue": {
       "raw": "null | string | number | boolean | ClassDictionary | ClassArray"
      },
      "typeValueRef": "@epam/uui-core:ClassValue",
      "from": "@epam/uui-components:ButtonProps",
      "required": false
     },
     {
      "uid": 5,
      "name": "countIndicator",
      "comment": {
       "raw": [
        "CountIndicator component"
       ]
      },
      "typeValue": {
       "raw": "React.ComponentClass<IHasCaption, any> | React.FunctionComponent<IHasCaption>"
      },
      "from": "@epam/uui-components:ButtonProps",
      "required": false
     },
     {
      "uid": 6,
      "name": "dropdownIcon",
      "comment": {
       "raw": [
        "Icon for drop-down toggler"
       ]
      },
      "typeValue": {
       "raw": "Icon"
      },
      "editor": {
       "type": "component"
      },
      "from": "@epam/uui-core:ButtonCoreProps",
      "required": false
     },
     {
      "uid": 7,
      "name": "dropdownIconPosition",
      "comment": {
       "raw": [
        "Position of the dropdown icon ('left' of 'right')"
       ]
      },
      "typeValue": {
       "raw": "'left' | 'right'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "left",
        "right"
       ]
      },
      "from": "@epam/uui-core:ButtonCoreProps",
      "required": false
     },
     {
      "uid": 8,
      "name": "count",
      "typeValue": {
       "raw": "null | string | number | boolean | React.ReactElement<any, string | React.JSXElementConstructor<any>> | React.ReactFragment | React.ReactPortal"
      },
      "typeValueRef": "@types/react:ReactNode",
      "from": "@epam/uui-core:ButtonCoreProps",
      "required": false
     },
     {
      "uid": 9,
      "name": "cx",
      "comment": {
       "raw": [
        "CSS class(es) to put on component's root. See {@link https://github.com/JedWatson/classnames#usage} for details"
       ]
      },
      "typeValue": {
       "raw": "null | string | number | boolean | ClassDictionary | ClassArray"
      },
      "typeValueRef": "@epam/uui-core:ClassValue",
      "from": "@epam/uui-core:IHasCX",
      "required": false
     },
     {
      "uid": 10,
      "name": "onClick",
      "comment": {
       "raw": [
        "Called when component is clicked"
       ]
      },
      "typeValue": {
       "raw": "(e?: any) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IClickable",
      "required": false
     },
     {
      "uid": 11,
      "name": "link",
      "comment": {
       "raw": [
        "Link object to redirect to for SPA-redirects"
       ]
      },
      "typeValue": {
       "raw": "Link"
      },
      "from": "@epam/uui-core:ICanRedirect",
      "required": false
     },
     {
      "uid": 12,
      "name": "href",
      "comment": {
       "raw": [
        "Href (URL) to redirect to, for non-SPA redirects"
       ]
      },
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "from": "@epam/uui-core:ICanRedirect",
      "required": false
     },
     {
      "uid": 13,
      "name": "isLinkActive",
      "comment": {
       "raw": [
        "Highlights component to show that link is active (browser is displaying the page to which link is pointing)"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:ICanRedirect",
      "required": false
     },
     {
      "uid": 14,
      "name": "target",
      "comment": {
       "raw": [
        "Controls where the link should be opened"
       ]
      },
      "typeValue": {
       "raw": "'_blank'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "_blank"
       ]
      },
      "from": "@epam/uui-core:ICanRedirect",
      "required": false
     },
     {
      "uid": 15,
      "name": "isDisabled",
      "comment": {
       "raw": [
        "Disable editing, and visually de-emphasize value of the component"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:IDisableable",
      "required": false
     },
     {
      "uid": 16,
      "name": "icon",
      "comment": {
       "raw": [
        "Icon can be a React element (usually an SVG element)"
       ]
      },
      "typeValue": {
       "raw": "Icon"
      },
      "editor": {
       "type": "component"
      },
      "from": "@epam/uui-core:IHasIcon",
      "required": false
     },
     {
      "uid": 17,
      "name": "iconPosition",
      "comment": {
       "raw": [
        "Position of the icon (left of right)"
       ]
      },
      "typeValue": {
       "raw": "'left' | 'right'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "left",
        "right"
       ]
      },
      "from": "@epam/uui-core:IHasIcon",
      "required": false
     },
     {
      "uid": 18,
      "name": "onIconClick",
      "comment": {
       "raw": [
        "Click handler for the icon"
       ]
      },
      "typeValue": {
       "raw": "() => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IHasIcon",
      "required": false
     },
     {
      "uid": 19,
      "name": "clickAnalyticsEvent",
      "comment": {
       "raw": [
        "An analytics event to send (via AnalyticsContext) when component is clicked.",
        " See [AnalyticsContext](@link https://uui.epam.com/documents?id=analyticsContext&mode=doc&skin=UUI4_promo&category=contexts)."
       ]
      },
      "typeValue": {
       "raw": "null | { [key: string]: any; name: string; }"
      },
      "from": "@epam/uui-core:IAnalyticableClick",
      "required": false
     },
     {
      "uid": 20,
      "name": "tabIndex",
      "comment": {
       "raw": [
        "Controls the order of keyboard navigation between components"
       ]
      },
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "from": "@epam/uui-core:IHasTabIndex",
      "required": false
     },
     {
      "uid": 21,
      "name": "rawProps",
      "comment": {
       "raw": [
        "Any HTML attributes (native or 'data-') to put on the underlying component"
       ]
      },
      "typeValue": {
       "raw": "React.ButtonHTMLAttributes<HTMLButtonElement> & Record<`data-${string}`, string>"
      },
      "from": "@epam/uui-core:IHasRawProps",
      "required": false
     },
     {
      "uid": 22,
      "name": "caption",
      "comment": {
       "raw": [
        "Caption. Can be a string, or React.Elements. Certain components supports minimal markup (<b>,<i>,<a>) in captions."
       ]
      },
      "typeValue": {
       "raw": "any"
      },
      "from": "@epam/uui-core:IHasCaption",
      "required": false
     },
     {
      "uid": 23,
      "name": "onClear",
      "comment": {
       "raw": [
        "Call to clear toggler value"
       ]
      },
      "typeValue": {
       "raw": "(e?: any) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IBasicPickerToggler",
      "required": false
     },
     {
      "uid": 24,
      "name": "isOpen",
      "comment": {
       "raw": [
        "When isDropdown=true, indicate that dropdown is open with chevron icon"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:IDropdownToggler",
      "required": false
     },
     {
      "uid": 25,
      "name": "isDropdown",
      "comment": {
       "raw": [
        "Shows chevron icon, enabling component to act as dropdown toggler"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:IDropdownToggler",
      "required": false
     },
     {
      "uid": 26,
      "name": "toggleDropdownOpening",
      "comment": {
       "raw": [
        "Called when associated dropdown should open or close"
       ]
      },
      "typeValue": {
       "raw": "(value: boolean) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IDropdownToggler",
      "required": false
     },
     {
      "uid": 27,
      "name": "isInteractedOutside",
      "comment": {
       "raw": [
        "Called when component is interacted outside, to close the dropdown"
       ]
      },
      "typeValue": {
       "raw": "(event: Event) => boolean"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IDropdownToggler",
      "required": false
     },
     {
      "uid": 28,
      "name": "ref",
      "comment": {
       "raw": [
        "Component's ref"
       ]
      },
      "typeValue": {
       "raw": "null | (instance: any) => void | React.RefObject<any>"
      },
      "from": "@epam/uui-core:IDropdownToggler",
      "required": false
     },
     {
      "uid": 29,
      "name": "forwardedRef",
      "comment": {
       "raw": [
        "this ref is passed to the underlying component"
       ]
      },
      "typeValue": {
       "raw": "null | (instance: HTMLButtonElement | HTMLAnchorElement | null) => void | React.MutableRefObject<HTMLButtonElement | HTMLAnchorElement | null>"
      },
      "from": "@epam/uui-core:IHasForwardedRef",
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui:TagMods": {
   "summary": {
    "module": "@epam/uui",
    "typeName": {
     "name": "TagMods",
     "nameFull": "TagMods"
    },
    "src": "uui/components/widgets/Tag.tsx",
    "exported": true
   },
   "details": {
    "kind": 263,
    "typeValue": {
     "raw": "TagMods",
     "print": [
      "interface TagMods {",
      "    /**",
      "     * @default '36'",
      "     */",
      "    size?: TagSize;",
      "}"
     ]
    },
    "props": [
     {
      "uid": 1,
      "name": "size",
      "comment": {
       "raw": [
        "@default '36'"
       ],
       "tags": {
        "@default": "36"
       }
      },
      "typeValue": {
       "raw": "'18' | '36' | '48' | '24' | '30' | '42'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "18",
        "24",
        "30",
        "36",
        "42",
        "48"
       ]
      },
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui:TagProps": {
   "summary": {
    "module": "@epam/uui",
    "typeName": {
     "name": "TagProps",
     "nameFull": "TagProps"
    },
    "src": "uui/components/widgets/Tag.tsx",
    "exported": true
   },
   "details": {
    "kind": 264,
    "typeValue": {
     "raw": "TagProps",
     "print": [
      "type TagProps = ButtonProps & TagMods;"
     ]
    },
    "props": [
     {
      "uid": 1,
      "name": "clearIcon",
      "comment": {
       "raw": [
        "Icon for clear value button (usually cross)"
       ]
      },
      "typeValue": {
       "raw": "Icon"
      },
      "editor": {
       "type": "component"
      },
      "from": "@epam/uui-components:ButtonProps",
      "required": false
     },
     {
      "uid": 2,
      "name": "captionCX",
      "comment": {
       "raw": [
        "CSS classes to put on the caption"
       ]
      },
      "typeValue": {
       "raw": "null | string | number | boolean | ClassDictionary | ClassArray"
      },
      "typeValueRef": "@epam/uui-core:ClassValue",
      "from": "@epam/uui-components:ButtonProps",
      "required": false
     },
     {
      "uid": 3,
      "name": "countIndicator",
      "comment": {
       "raw": [
        "CountIndicator component"
       ]
      },
      "typeValue": {
       "raw": "React.ComponentClass<IHasCaption, any> | React.FunctionComponent<IHasCaption>"
      },
      "from": "@epam/uui-components:ButtonProps",
      "required": false
     },
     {
      "uid": 4,
      "name": "dropdownIcon",
      "comment": {
       "raw": [
        "Icon for drop-down toggler"
       ]
      },
      "typeValue": {
       "raw": "Icon"
      },
      "editor": {
       "type": "component"
      },
      "from": "@epam/uui-core:ButtonCoreProps",
      "required": false
     },
     {
      "uid": 5,
      "name": "dropdownIconPosition",
      "comment": {
       "raw": [
        "Position of the dropdown icon ('left' of 'right')"
       ]
      },
      "typeValue": {
       "raw": "'left' | 'right'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "left",
        "right"
       ]
      },
      "from": "@epam/uui-core:ButtonCoreProps",
      "required": false
     },
     {
      "uid": 6,
      "name": "count",
      "typeValue": {
       "raw": "null | string | number | boolean | React.ReactElement<any, string | React.JSXElementConstructor<any>> | React.ReactFragment | React.ReactPortal"
      },
      "typeValueRef": "@types/react:ReactNode",
      "from": "@epam/uui-core:ButtonCoreProps",
      "required": false
     },
     {
      "uid": 7,
      "name": "cx",
      "comment": {
       "raw": [
        "CSS class(es) to put on component's root. See {@link https://github.com/JedWatson/classnames#usage} for details"
       ]
      },
      "typeValue": {
       "raw": "null | string | number | boolean | ClassDictionary | ClassArray"
      },
      "typeValueRef": "@epam/uui-core:ClassValue",
      "from": "@epam/uui-core:IHasCX",
      "required": false
     },
     {
      "uid": 8,
      "name": "onClick",
      "comment": {
       "raw": [
        "Called when component is clicked"
       ]
      },
      "typeValue": {
       "raw": "(e?: any) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IClickable",
      "required": false
     },
     {
      "uid": 9,
      "name": "link",
      "comment": {
       "raw": [
        "Link object to redirect to for SPA-redirects"
       ]
      },
      "typeValue": {
       "raw": "Link"
      },
      "from": "@epam/uui-core:ICanRedirect",
      "required": false
     },
     {
      "uid": 10,
      "name": "href",
      "comment": {
       "raw": [
        "Href (URL) to redirect to, for non-SPA redirects"
       ]
      },
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "from": "@epam/uui-core:ICanRedirect",
      "required": false
     },
     {
      "uid": 11,
      "name": "isLinkActive",
      "comment": {
       "raw": [
        "Highlights component to show that link is active (browser is displaying the page to which link is pointing)"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:ICanRedirect",
      "required": false
     },
     {
      "uid": 12,
      "name": "target",
      "comment": {
       "raw": [
        "Controls where the link should be opened"
       ]
      },
      "typeValue": {
       "raw": "'_blank'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "_blank"
       ]
      },
      "from": "@epam/uui-core:ICanRedirect",
      "required": false
     },
     {
      "uid": 13,
      "name": "isDisabled",
      "comment": {
       "raw": [
        "Disable editing, and visually de-emphasize value of the component"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:IDisableable",
      "required": false
     },
     {
      "uid": 14,
      "name": "icon",
      "comment": {
       "raw": [
        "Icon can be a React element (usually an SVG element)"
       ]
      },
      "typeValue": {
       "raw": "Icon"
      },
      "editor": {
       "type": "component"
      },
      "from": "@epam/uui-core:IHasIcon",
      "required": false
     },
     {
      "uid": 15,
      "name": "iconPosition",
      "comment": {
       "raw": [
        "Position of the icon (left of right)"
       ]
      },
      "typeValue": {
       "raw": "'left' | 'right'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "left",
        "right"
       ]
      },
      "from": "@epam/uui-core:IHasIcon",
      "required": false
     },
     {
      "uid": 16,
      "name": "onIconClick",
      "comment": {
       "raw": [
        "Click handler for the icon"
       ]
      },
      "typeValue": {
       "raw": "() => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IHasIcon",
      "required": false
     },
     {
      "uid": 17,
      "name": "clickAnalyticsEvent",
      "comment": {
       "raw": [
        "An analytics event to send (via AnalyticsContext) when component is clicked.",
        " See [AnalyticsContext](@link https://uui.epam.com/documents?id=analyticsContext&mode=doc&skin=UUI4_promo&category=contexts)."
       ]
      },
      "typeValue": {
       "raw": "null | { [key: string]: any; name: string; }"
      },
      "from": "@epam/uui-core:IAnalyticableClick",
      "required": false
     },
     {
      "uid": 18,
      "name": "tabIndex",
      "comment": {
       "raw": [
        "Controls the order of keyboard navigation between components"
       ]
      },
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "from": "@epam/uui-core:IHasTabIndex",
      "required": false
     },
     {
      "uid": 19,
      "name": "rawProps",
      "comment": {
       "raw": [
        "Any HTML attributes (native or 'data-') to put on the underlying component"
       ]
      },
      "typeValue": {
       "raw": "React.ButtonHTMLAttributes<HTMLButtonElement> & Record<`data-${string}`, string>"
      },
      "from": "@epam/uui-core:IHasRawProps",
      "required": false
     },
     {
      "uid": 20,
      "name": "caption",
      "comment": {
       "raw": [
        "Caption. Can be a string, or React.Elements. Certain components supports minimal markup (<b>,<i>,<a>) in captions."
       ]
      },
      "typeValue": {
       "raw": "any"
      },
      "from": "@epam/uui-core:IHasCaption",
      "required": false
     },
     {
      "uid": 21,
      "name": "onClear",
      "comment": {
       "raw": [
        "Call to clear toggler value"
       ]
      },
      "typeValue": {
       "raw": "(e?: any) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IBasicPickerToggler",
      "required": false
     },
     {
      "uid": 22,
      "name": "isOpen",
      "comment": {
       "raw": [
        "When isDropdown=true, indicate that dropdown is open with chevron icon"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:IDropdownToggler",
      "required": false
     },
     {
      "uid": 23,
      "name": "isDropdown",
      "comment": {
       "raw": [
        "Shows chevron icon, enabling component to act as dropdown toggler"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:IDropdownToggler",
      "required": false
     },
     {
      "uid": 24,
      "name": "toggleDropdownOpening",
      "comment": {
       "raw": [
        "Called when associated dropdown should open or close"
       ]
      },
      "typeValue": {
       "raw": "(value: boolean) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IDropdownToggler",
      "required": false
     },
     {
      "uid": 25,
      "name": "isInteractedOutside",
      "comment": {
       "raw": [
        "Called when component is interacted outside, to close the dropdown"
       ]
      },
      "typeValue": {
       "raw": "(event: Event) => boolean"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IDropdownToggler",
      "required": false
     },
     {
      "uid": 26,
      "name": "ref",
      "comment": {
       "raw": [
        "Component's ref"
       ]
      },
      "typeValue": {
       "raw": "null | (instance: any) => void | React.RefObject<any>"
      },
      "from": "@epam/uui-core:IDropdownToggler",
      "required": false
     },
     {
      "uid": 27,
      "name": "forwardedRef",
      "comment": {
       "raw": [
        "this ref is passed to the underlying component"
       ]
      },
      "typeValue": {
       "raw": "null | (instance: HTMLButtonElement | HTMLAnchorElement | null) => void | React.MutableRefObject<HTMLButtonElement | HTMLAnchorElement | null>"
      },
      "from": "@epam/uui-core:IHasForwardedRef",
      "required": false
     },
     {
      "uid": 28,
      "name": "size",
      "comment": {
       "raw": [
        "@default '36'"
       ],
       "tags": {
        "@default": "36"
       }
      },
      "typeValue": {
       "raw": "'18' | '36' | '48' | '24' | '30' | '42'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "18",
        "24",
        "30",
        "36",
        "42",
        "48"
       ]
      },
      "from": "@epam/uui:TagMods",
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui:TagSize": {
   "summary": {
    "module": "@epam/uui",
    "typeName": {
     "name": "TagSize",
     "nameFull": "TagSize"
    },
    "src": "uui/components/widgets/Tag.tsx",
    "exported": true
   },
   "details": {
    "kind": 264,
    "typeValue": {
     "raw": "'18' | '36' | '48' | '24' | '30' | '42'",
     "print": [
      "type TagSize = '18' | '24' | '30' | '36' | '42' | '48';"
     ]
    }
   }
  },
  "@epam/uui:TextAreaMods": {
   "summary": {
    "module": "@epam/uui",
    "typeName": {
     "name": "TextAreaMods",
     "nameFull": "TextAreaMods"
    },
    "src": "uui/components/inputs/TextArea.tsx",
    "exported": true
   },
   "details": {
    "kind": 263,
    "typeValue": {
     "raw": "TextAreaMods",
     "print": [
      "interface TextAreaMods extends types.IHasEditMode {",
      "    /** @default '36' */",
      "    size?: types.ControlSize;",
      "}"
     ]
    },
    "props": [
     {
      "uid": 1,
      "name": "size",
      "comment": {
       "raw": [
        "@default '36'"
       ],
       "tags": {
        "@default": "36"
       }
      },
      "typeValue": {
       "raw": "'36' | '48' | '24' | '30' | '42' | 'none'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "24",
        "30",
        "36",
        "42",
        "48",
        "none"
       ]
      },
      "required": false
     },
     {
      "uid": 2,
      "name": "mode",
      "comment": {
       "raw": [
        "Visual mode for component:",
        " - form: default visuals, to use in forms.",
        " - cell: adjust to embed as table cell editor: no borders, no focus (it is applied by DataCell)",
        " - inline: adjust for WYSIWYG UX. Backgrounds removed. Borders appear only on hover."
       ]
      },
      "typeValue": {
       "raw": "'inline' | 'form' | 'cell'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "inline",
        "form",
        "cell"
       ]
      },
      "from": "@epam/uui:IHasEditMode",
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui:TextAreaProps": {
   "summary": {
    "module": "@epam/uui",
    "typeName": {
     "name": "TextAreaProps",
     "nameFull": "TextAreaProps"
    },
    "src": "uui/components/inputs/TextArea.tsx",
    "exported": true
   },
   "details": {
    "kind": 264,
    "typeValue": {
     "raw": "TextAreaProps",
     "print": [
      "type TextAreaProps = UuiTextAreaProps & TextAreaMods;"
     ]
    },
    "props": [
     {
      "uid": 1,
      "name": "rows",
      "comment": {
       "raw": [
        "Adjust height to fit specified number or text rows. HTML TextArea attribute."
       ]
      },
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "from": "@epam/uui-components:TextAreaProps",
      "required": false
     },
     {
      "uid": 2,
      "name": "autoSize",
      "comment": {
       "raw": [
        "Enables auto-resizing height to fit text. Rows prop is ignored in this mode"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-components:TextAreaProps",
      "required": false
     },
     {
      "uid": 3,
      "name": "onKeyDown",
      "comment": {
       "raw": [
        "onKeyDown event handler to put on HTML Input"
       ]
      },
      "typeValue": {
       "raw": "(e?: any) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-components:TextAreaProps",
      "required": false
     },
     {
      "uid": 4,
      "name": "autoFocus",
      "comment": {
       "raw": [
        "Automatically sets input focus to component, when its mounted"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-components:TextAreaProps",
      "required": false
     },
     {
      "uid": 5,
      "name": "inputCx",
      "comment": {
       "raw": [
        "CSS class names to put to the HTML Input element"
       ]
      },
      "typeValue": {
       "raw": "null | string | number | boolean | ClassDictionary | ClassArray"
      },
      "typeValueRef": "@epam/uui-core:ClassValue",
      "from": "@epam/uui-components:TextAreaProps",
      "required": false
     },
     {
      "uid": 6,
      "name": "maxLength",
      "comment": {
       "raw": [
        "Maximum text length, in characters"
       ]
      },
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "from": "@epam/uui-components:TextAreaProps",
      "required": false
     },
     {
      "uid": 7,
      "name": "id",
      "comment": {
       "raw": [
        "HTML id attribute to put on the HTML Input element"
       ]
      },
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "from": "@epam/uui-components:TextAreaProps",
      "required": false
     },
     {
      "uid": 8,
      "name": "cx",
      "comment": {
       "raw": [
        "CSS class(es) to put on component's root. See {@link https://github.com/JedWatson/classnames#usage} for details"
       ]
      },
      "typeValue": {
       "raw": "null | string | number | boolean | ClassDictionary | ClassArray"
      },
      "typeValueRef": "@epam/uui-core:ClassValue",
      "from": "@epam/uui-core:IHasCX",
      "required": false
     },
     {
      "uid": 9,
      "name": "value",
      "comment": {
       "raw": [
        "The current value of component"
       ]
      },
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "from": "@epam/uui-core:IEditable",
      "required": true
     },
     {
      "uid": 10,
      "name": "onValueChange",
      "comment": {
       "raw": [
        "Called when value needs to be changed (usually due to user interaction)"
       ]
      },
      "typeValue": {
       "raw": "(newValue: string) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IEditable",
      "required": true
     },
     {
      "uid": 11,
      "name": "isInvalid",
      "comment": {
       "raw": [
        "True if component contains invalid input"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:ICanBeInvalid",
      "required": false
     },
     {
      "uid": 12,
      "name": "validationMessage",
      "comment": {
       "raw": [
        "Message describing why the value is invalid"
       ]
      },
      "typeValue": {
       "raw": "null | string | number | boolean | React.ReactElement<any, string | React.JSXElementConstructor<any>> | React.ReactFragment | React.ReactPortal"
      },
      "typeValueRef": "@types/react:ReactNode",
      "from": "@epam/uui-core:ICanBeInvalid",
      "required": false
     },
     {
      "uid": 13,
      "name": "validationProps",
      "comment": {
       "raw": [
        "If T is a complex value (object or array), this property contains validation states of inner items"
       ]
      },
      "typeValue": {
       "raw": "{ [key: string]: ICanBeInvalid; }"
      },
      "from": "@epam/uui-core:ICanBeInvalid",
      "required": false
     },
     {
      "uid": 14,
      "name": "isDisabled",
      "comment": {
       "raw": [
        "Disable editing, and visually de-emphasize value of the component"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:IDisableable",
      "required": false
     },
     {
      "uid": 15,
      "name": "isReadonly",
      "comment": {
       "raw": [
        "Disable editing. Unlike isDisabled, keep component's value readable."
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:ICanBeReadonly",
      "required": false
     },
     {
      "uid": 16,
      "name": "isRequired",
      "comment": {
       "raw": [
        "Marks that component's value is required and shouldn't be empty"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:ICanBeRequired",
      "required": false
     },
     {
      "uid": 17,
      "name": "placeholder",
      "comment": {
       "raw": [
        "Placeholder to display when empty"
       ]
      },
      "typeValue": {
       "raw": "any"
      },
      "from": "@epam/uui-core:IHasPlaceholder",
      "required": false
     },
     {
      "uid": 18,
      "name": "rawProps",
      "comment": {
       "raw": [
        "Any HTML attributes (native or 'data-') to put on the underlying component"
       ]
      },
      "typeValue": {
       "raw": "React.TextareaHTMLAttributes<HTMLDivElement> & Record<`data-${string}`, string>"
      },
      "from": "@epam/uui-core:IHasRawProps",
      "required": false
     },
     {
      "uid": 19,
      "name": "forwardedRef",
      "comment": {
       "raw": [
        "this ref is passed to the underlying component"
       ]
      },
      "typeValue": {
       "raw": "null | (instance: HTMLDivElement | null) => void | React.MutableRefObject<HTMLDivElement | null>"
      },
      "from": "@epam/uui-core:IHasForwardedRef",
      "required": false
     },
     {
      "uid": 20,
      "name": "onFocus",
      "comment": {
       "raw": [
        "Called when component gets input focus"
       ]
      },
      "typeValue": {
       "raw": "(e: React.FocusEvent<HTMLTextAreaElement, Element>) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:ICanFocus",
      "required": false
     },
     {
      "uid": 21,
      "name": "onBlur",
      "comment": {
       "raw": [
        "Called when component looses input focus"
       ]
      },
      "typeValue": {
       "raw": "(e: React.FocusEvent<HTMLTextAreaElement, Element>) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:ICanFocus",
      "required": false
     },
     {
      "uid": 22,
      "name": "size",
      "comment": {
       "raw": [
        "@default '36'"
       ],
       "tags": {
        "@default": "36"
       }
      },
      "typeValue": {
       "raw": "'36' | '48' | '24' | '30' | '42' | 'none'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "24",
        "30",
        "36",
        "42",
        "48",
        "none"
       ]
      },
      "from": "@epam/uui:TextAreaMods",
      "required": false
     },
     {
      "uid": 23,
      "name": "mode",
      "comment": {
       "raw": [
        "Visual mode for component:",
        " - form: default visuals, to use in forms.",
        " - cell: adjust to embed as table cell editor: no borders, no focus (it is applied by DataCell)",
        " - inline: adjust for WYSIWYG UX. Backgrounds removed. Borders appear only on hover."
       ]
      },
      "typeValue": {
       "raw": "'inline' | 'form' | 'cell'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "inline",
        "form",
        "cell"
       ]
      },
      "from": "@epam/uui:IHasEditMode",
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui:TextColor": {
   "summary": {
    "module": "@epam/uui",
    "typeName": {
     "name": "TextColor",
     "nameFull": "TextColor"
    },
    "src": "uui/components/typography/Text.tsx",
    "exported": true
   },
   "details": {
    "kind": 264,
    "typeValue": {
     "raw": "'info' | 'success' | 'warning' | 'error' | 'primary' | 'secondary' | 'white' | 'contrast' | 'brand' | 'disabled'",
     "print": [
      "type TextColor = 'info' | 'warning' | 'error' | 'success' | 'brand' | 'primary' | 'secondary' | 'disabled' | 'contrast' | 'white';"
     ]
    }
   }
  },
  "@epam/uui:TextInputMods": {
   "summary": {
    "module": "@epam/uui",
    "typeName": {
     "name": "TextInputMods",
     "nameFull": "TextInputMods"
    },
    "src": "uui/components/inputs/TextInput.tsx",
    "exported": true
   },
   "details": {
    "kind": 263,
    "typeValue": {
     "raw": "TextInputMods",
     "print": [
      "interface TextInputMods extends IHasEditMode {",
      "    /**",
      "     * @default '36'",
      "     */",
      "    size?: ControlSize;",
      "}"
     ]
    },
    "props": [
     {
      "uid": 1,
      "name": "size",
      "comment": {
       "raw": [
        "@default '36'"
       ],
       "tags": {
        "@default": "36"
       }
      },
      "typeValue": {
       "raw": "'36' | '48' | '24' | '30' | '42' | 'none'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "24",
        "30",
        "36",
        "42",
        "48",
        "none"
       ]
      },
      "required": false
     },
     {
      "uid": 2,
      "name": "mode",
      "comment": {
       "raw": [
        "Visual mode for component:",
        " - form: default visuals, to use in forms.",
        " - cell: adjust to embed as table cell editor: no borders, no focus (it is applied by DataCell)",
        " - inline: adjust for WYSIWYG UX. Backgrounds removed. Borders appear only on hover."
       ]
      },
      "typeValue": {
       "raw": "'inline' | 'form' | 'cell'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "inline",
        "form",
        "cell"
       ]
      },
      "from": "@epam/uui:IHasEditMode",
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui:TextInputProps": {
   "summary": {
    "module": "@epam/uui",
    "typeName": {
     "name": "TextInputProps",
     "nameFull": "TextInputProps"
    },
    "src": "uui/components/inputs/TextInput.tsx",
    "exported": true
   },
   "details": {
    "kind": 263,
    "typeValue": {
     "raw": "TextInputProps",
     "print": [
      "interface TextInputProps extends CoreTextInputProps, TextInputMods {",
      "}"
     ]
    },
    "props": [
     {
      "uid": 1,
      "name": "acceptIcon",
      "comment": {
       "raw": [
        "Overrides accept (check) icon"
       ]
      },
      "typeValue": {
       "raw": "Icon"
      },
      "editor": {
       "type": "component"
      },
      "from": "@epam/uui-components:TextInputProps",
      "required": false
     },
     {
      "uid": 2,
      "name": "cancelIcon",
      "comment": {
       "raw": [
        "Overrides cancel (cross) icon"
       ]
      },
      "typeValue": {
       "raw": "Icon"
      },
      "editor": {
       "type": "component"
      },
      "from": "@epam/uui-components:TextInputProps",
      "required": false
     },
     {
      "uid": 3,
      "name": "dropdownIcon",
      "comment": {
       "raw": [
        "Overrides dropdown (chevron) icon"
       ]
      },
      "typeValue": {
       "raw": "Icon"
      },
      "editor": {
       "type": "component"
      },
      "from": "@epam/uui-components:TextInputProps",
      "required": false
     },
     {
      "uid": 4,
      "name": "inputCx",
      "comment": {
       "raw": [
        "CSS class(es) to put to the HTML Input element"
       ]
      },
      "typeValue": {
       "raw": "null | string | number | boolean | ClassDictionary | ClassArray"
      },
      "typeValueRef": "@epam/uui-core:ClassValue",
      "from": "@epam/uui-components:TextInputProps",
      "required": false
     },
     {
      "uid": 5,
      "name": "renderInput",
      "comment": {
       "raw": [
        "overrides rendering of HTML Input element"
       ]
      },
      "typeValue": {
       "raw": "(props: IRenderInputProps) => JSX.Element"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-components:TextInputProps",
      "required": false
     },
     {
      "uid": 6,
      "name": "onCancel",
      "comment": {
       "raw": [
        "Enables cancel (cross) icon, and fires when the icon is clicked"
       ]
      },
      "typeValue": {
       "raw": "() => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:TextInputCoreProps",
      "required": false
     },
     {
      "uid": 7,
      "name": "onAccept",
      "comment": {
       "raw": [
        "Enables accept (check) icon, and fires when the icon is clicked"
       ]
      },
      "typeValue": {
       "raw": "() => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:TextInputCoreProps",
      "required": false
     },
     {
      "uid": 8,
      "name": "onKeyDown",
      "comment": {
       "raw": [
        "keydown event handler to put on the HTML input element"
       ]
      },
      "typeValue": {
       "raw": "(e?: any) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:TextInputCoreProps",
      "required": false
     },
     {
      "uid": 9,
      "name": "autoFocus",
      "comment": {
       "raw": [
        "Put focus on the element, when component is mounted"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:TextInputCoreProps",
      "required": false
     },
     {
      "uid": 10,
      "name": "type",
      "comment": {
       "raw": [
        "Standard 'type' attribute to put on the HTML input element (e.g. 'password')"
       ]
      },
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "from": "@epam/uui-core:TextInputCoreProps",
      "required": false
     },
     {
      "uid": 11,
      "name": "autoComplete",
      "comment": {
       "raw": [
        "Standard [autocomplete attribute]{@link https://www.w3schools.com/tags/att_input_autocomplete.asp}"
       ]
      },
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "from": "@epam/uui-core:TextInputCoreProps",
      "required": false
     },
     {
      "uid": 12,
      "name": "name",
      "comment": {
       "raw": [
        "Standard [name attribute]{@link https://www.w3schools.com/tags/att_input_name.asp}"
       ]
      },
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "from": "@epam/uui-core:TextInputCoreProps",
      "required": false
     },
     {
      "uid": 13,
      "name": "maxLength",
      "comment": {
       "raw": [
        "Maximum input length in characters"
       ]
      },
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "from": "@epam/uui-core:TextInputCoreProps",
      "required": false
     },
     {
      "uid": 14,
      "name": "inputMode",
      "comment": {
       "raw": [
        "Standard [inputMode attribute]{@link https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/inputmode}"
       ]
      },
      "typeValue": {
       "raw": "'none' | 'text' | 'tel' | 'url' | 'email' | 'numeric' | 'decimal' | 'search'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "none",
        "text",
        "tel",
        "url",
        "email",
        "numeric",
        "decimal",
        "search"
       ]
      },
      "from": "@epam/uui-core:TextInputCoreProps",
      "required": false
     },
     {
      "uid": 15,
      "name": "id",
      "comment": {
       "raw": [
        "HTML ID attribute for input"
       ]
      },
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "from": "@epam/uui-core:TextInputCoreProps",
      "required": false
     },
     {
      "uid": 16,
      "name": "cx",
      "comment": {
       "raw": [
        "CSS class(es) to put on component's root. See {@link https://github.com/JedWatson/classnames#usage} for details"
       ]
      },
      "typeValue": {
       "raw": "null | string | number | boolean | ClassDictionary | ClassArray"
      },
      "typeValueRef": "@epam/uui-core:ClassValue",
      "from": "@epam/uui-core:IHasCX",
      "required": false
     },
     {
      "uid": 17,
      "name": "onClick",
      "comment": {
       "raw": [
        "Called when component is clicked"
       ]
      },
      "typeValue": {
       "raw": "(e?: any) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IClickable",
      "required": false
     },
     {
      "uid": 18,
      "name": "isDisabled",
      "comment": {
       "raw": [
        "Disable editing, and visually de-emphasize value of the component"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:IDisableable",
      "required": false
     },
     {
      "uid": 19,
      "name": "value",
      "comment": {
       "raw": [
        "The current value of component"
       ]
      },
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "from": "@epam/uui-core:IEditable",
      "required": true
     },
     {
      "uid": 20,
      "name": "onValueChange",
      "comment": {
       "raw": [
        "Called when value needs to be changed (usually due to user interaction)"
       ]
      },
      "typeValue": {
       "raw": "(newValue: string | undefined) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IEditable",
      "required": true
     },
     {
      "uid": 21,
      "name": "isInvalid",
      "comment": {
       "raw": [
        "True if component contains invalid input"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:ICanBeInvalid",
      "required": false
     },
     {
      "uid": 22,
      "name": "validationMessage",
      "comment": {
       "raw": [
        "Message describing why the value is invalid"
       ]
      },
      "typeValue": {
       "raw": "null | string | number | boolean | React.ReactElement<any, string | React.JSXElementConstructor<any>> | React.ReactFragment | React.ReactPortal"
      },
      "typeValueRef": "@types/react:ReactNode",
      "from": "@epam/uui-core:ICanBeInvalid",
      "required": false
     },
     {
      "uid": 23,
      "name": "validationProps",
      "comment": {
       "raw": [
        "If T is a complex value (object or array), this property contains validation states of inner items"
       ]
      },
      "typeValue": {
       "raw": "{ [key: string]: ICanBeInvalid; }"
      },
      "from": "@epam/uui-core:ICanBeInvalid",
      "required": false
     },
     {
      "uid": 24,
      "name": "isReadonly",
      "comment": {
       "raw": [
        "Disable editing. Unlike isDisabled, keep component's value readable."
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:ICanBeReadonly",
      "required": false
     },
     {
      "uid": 25,
      "name": "isRequired",
      "comment": {
       "raw": [
        "Marks that component's value is required and shouldn't be empty"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:ICanBeRequired",
      "required": false
     },
     {
      "uid": 26,
      "name": "placeholder",
      "comment": {
       "raw": [
        "Placeholder to display when empty"
       ]
      },
      "typeValue": {
       "raw": "any"
      },
      "from": "@epam/uui-core:IHasPlaceholder",
      "required": false
     },
     {
      "uid": 27,
      "name": "icon",
      "comment": {
       "raw": [
        "Icon can be a React element (usually an SVG element)"
       ]
      },
      "typeValue": {
       "raw": "Icon"
      },
      "editor": {
       "type": "component"
      },
      "from": "@epam/uui-core:IHasIcon",
      "required": false
     },
     {
      "uid": 28,
      "name": "iconPosition",
      "comment": {
       "raw": [
        "Position of the icon (left of right)"
       ]
      },
      "typeValue": {
       "raw": "'left' | 'right'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "left",
        "right"
       ]
      },
      "from": "@epam/uui-core:IHasIcon",
      "required": false
     },
     {
      "uid": 29,
      "name": "onIconClick",
      "comment": {
       "raw": [
        "Click handler for the icon"
       ]
      },
      "typeValue": {
       "raw": "() => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IHasIcon",
      "required": false
     },
     {
      "uid": 30,
      "name": "isOpen",
      "comment": {
       "raw": [
        "When isDropdown=true, indicate that dropdown is open with chevron icon"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:IDropdownToggler",
      "required": false
     },
     {
      "uid": 31,
      "name": "isDropdown",
      "comment": {
       "raw": [
        "Shows chevron icon, enabling component to act as dropdown toggler"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:IDropdownToggler",
      "required": false
     },
     {
      "uid": 32,
      "name": "toggleDropdownOpening",
      "comment": {
       "raw": [
        "Called when associated dropdown should open or close"
       ]
      },
      "typeValue": {
       "raw": "(value: boolean) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IDropdownToggler",
      "required": false
     },
     {
      "uid": 33,
      "name": "isInteractedOutside",
      "comment": {
       "raw": [
        "Called when component is interacted outside, to close the dropdown"
       ]
      },
      "typeValue": {
       "raw": "(event: Event) => boolean"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IDropdownToggler",
      "required": false
     },
     {
      "uid": 34,
      "name": "ref",
      "comment": {
       "raw": [
        "Component's ref"
       ]
      },
      "typeValue": {
       "raw": "null | (instance: any) => void | React.RefObject<any>"
      },
      "from": "@epam/uui-core:IDropdownToggler",
      "required": false
     },
     {
      "uid": 35,
      "name": "caption",
      "comment": {
       "raw": [
        "Caption. Can be a string, or React.Elements. Certain components supports minimal markup (<b>,<i>,<a>) in captions."
       ]
      },
      "typeValue": {
       "raw": "any"
      },
      "from": "@epam/uui-core:IHasCaption",
      "required": false
     },
     {
      "uid": 36,
      "name": "getValueChangeAnalyticsEvent",
      "comment": {
       "raw": [
        "Given a value, returns an analytics event to send when component is edited.",
        " See [AnalyticsContext](@link https://uui.epam.com/documents?id=analyticsContext&mode=doc&skin=UUI4_promo&category=contexts)."
       ]
      },
      "typeValue": {
       "raw": "(newValue: string | null, oldValue: string | null) => AnalyticsEvent"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IAnalyticableOnChange",
      "required": false
     },
     {
      "uid": 37,
      "name": "rawProps",
      "comment": {
       "raw": [
        "Any HTML attributes (native or 'data-') to put on the underlying component"
       ]
      },
      "typeValue": {
       "raw": "React.HTMLAttributes<HTMLInputElement> & Record<`data-${string}`, string>"
      },
      "from": "@epam/uui-core:IHasRawProps",
      "required": false
     },
     {
      "uid": 38,
      "name": "onFocus",
      "comment": {
       "raw": [
        "Called when component gets input focus"
       ]
      },
      "typeValue": {
       "raw": "(e: React.FocusEvent<HTMLInputElement, Element>) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:ICanFocus",
      "required": false
     },
     {
      "uid": 39,
      "name": "onBlur",
      "comment": {
       "raw": [
        "Called when component looses input focus"
       ]
      },
      "typeValue": {
       "raw": "(e: React.FocusEvent<HTMLInputElement, Element>) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:ICanFocus",
      "required": false
     },
     {
      "uid": 40,
      "name": "tabIndex",
      "comment": {
       "raw": [
        "Controls the order of keyboard navigation between components"
       ]
      },
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "from": "@epam/uui-core:IHasTabIndex",
      "required": false
     },
     {
      "uid": 41,
      "name": "size",
      "comment": {
       "raw": [
        "@default '36'"
       ],
       "tags": {
        "@default": "36"
       }
      },
      "typeValue": {
       "raw": "'36' | '48' | '24' | '30' | '42' | 'none'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "24",
        "30",
        "36",
        "42",
        "48",
        "none"
       ]
      },
      "from": "@epam/uui:TextInputMods",
      "required": false
     },
     {
      "uid": 42,
      "name": "mode",
      "comment": {
       "raw": [
        "Visual mode for component:",
        " - form: default visuals, to use in forms.",
        " - cell: adjust to embed as table cell editor: no borders, no focus (it is applied by DataCell)",
        " - inline: adjust for WYSIWYG UX. Backgrounds removed. Borders appear only on hover."
       ]
      },
      "typeValue": {
       "raw": "'inline' | 'form' | 'cell'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "inline",
        "form",
        "cell"
       ]
      },
      "from": "@epam/uui:IHasEditMode",
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui:TextMods": {
   "summary": {
    "module": "@epam/uui",
    "typeName": {
     "name": "TextMods",
     "nameFull": "TextMods"
    },
    "src": "uui/components/typography/Text.tsx",
    "exported": true
   },
   "details": {
    "kind": 263,
    "typeValue": {
     "raw": "TextMods",
     "print": [
      "interface TextMods extends TextSettings {",
      "    size?: types.TextSize | '42';",
      "    font?: types.FontStyle;",
      "    color?: TextColor;",
      "}"
     ]
    },
    "props": [
     {
      "uid": 1,
      "name": "size",
      "typeValue": {
       "raw": "'18' | '36' | '48' | '24' | '30' | '42' | 'none'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "18",
        "24",
        "30",
        "36",
        "42",
        "48",
        "none"
       ]
      },
      "required": false
     },
     {
      "uid": 2,
      "name": "font",
      "typeValue": {
       "raw": "'primary' | 'regular' | 'semibold' | 'italic' | 'promo'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "primary",
        "regular",
        "semibold",
        "italic",
        "promo"
       ]
      },
      "required": false
     },
     {
      "uid": 3,
      "name": "color",
      "typeValue": {
       "raw": "'info' | 'success' | 'warning' | 'error' | 'primary' | 'secondary' | 'white' | 'contrast' | 'brand' | 'disabled'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "info",
        "success",
        "warning",
        "error",
        "primary",
        "secondary",
        "white",
        "contrast",
        "brand",
        "disabled"
       ]
      },
      "required": false
     },
     {
      "uid": 4,
      "name": "lineHeight",
      "typeValue": {
       "raw": "'12' | '18' | '24' | '30'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "12",
        "18",
        "24",
        "30"
       ]
      },
      "from": "@epam/uui:TextSettings",
      "required": false
     },
     {
      "uid": 5,
      "name": "fontSize",
      "typeValue": {
       "raw": "'12' | '18' | '24' | '14' | '16' | '10'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "10",
        "12",
        "14",
        "16",
        "18",
        "24"
       ]
      },
      "from": "@epam/uui:TextSettings",
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui:TextPlaceholderProps": {
   "summary": {
    "module": "@epam/uui",
    "typeName": {
     "name": "TextPlaceholderProps",
     "nameFull": "TextPlaceholderProps"
    },
    "src": "uui/components/typography/TextPlaceholder.tsx",
    "exported": true
   },
   "details": {
    "kind": 264,
    "typeValue": {
     "raw": "TextPlaceholderProps",
     "print": [
      "type TextPlaceholderProps = PropsWithChildren<ITextPlaceholderProps>;"
     ]
    },
    "props": [
     {
      "uid": 1,
      "name": "wordsCount",
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "from": "@epam/uui:ITextPlaceholderProps",
      "required": false
     },
     {
      "uid": 2,
      "name": "isNotAnimated",
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui:ITextPlaceholderProps",
      "required": false
     },
     {
      "uid": 3,
      "name": "rawProps",
      "comment": {
       "raw": [
        "Any HTML attributes (native or 'data-') to put on the underlying component"
       ]
      },
      "typeValue": {
       "raw": "React.HTMLAttributes<HTMLDivElement> & Record<`data-${string}`, string>"
      },
      "from": "@epam/uui-core:IHasRawProps",
      "required": false
     },
     {
      "uid": 4,
      "name": "cx",
      "comment": {
       "raw": [
        "CSS class(es) to put on component's root. See {@link https://github.com/JedWatson/classnames#usage} for details"
       ]
      },
      "typeValue": {
       "raw": "null | string | number | boolean | ClassDictionary | ClassArray"
      },
      "typeValueRef": "@epam/uui-core:ClassValue",
      "from": "@epam/uui-core:IHasCX",
      "required": false
     },
     {
      "uid": 5,
      "name": "children",
      "typeValue": {
       "raw": "null | string | number | boolean | React.ReactElement<any, string | React.JSXElementConstructor<any>> | React.ReactFragment | React.ReactPortal"
      },
      "typeValueRef": "@types/react:ReactNode",
      "from": "@types/react:PropsWithChildren",
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui:TextProps": {
   "summary": {
    "module": "@epam/uui",
    "typeName": {
     "name": "TextProps",
     "nameFull": "TextProps"
    },
    "src": "uui/components/typography/Text.tsx",
    "exported": true
   },
   "details": {
    "kind": 264,
    "typeValue": {
     "raw": "TextProps",
     "print": [
      "type TextProps = UuiTextProps & TextMods;"
     ]
    },
    "props": [
     {
      "uid": 1,
      "name": "cx",
      "comment": {
       "raw": [
        "CSS class(es) to put on component's root. See {@link https://github.com/JedWatson/classnames#usage} for details"
       ]
      },
      "typeValue": {
       "raw": "null | string | number | boolean | ClassDictionary | ClassArray"
      },
      "typeValueRef": "@epam/uui-core:ClassValue",
      "from": "@epam/uui-core:IHasCX",
      "required": false
     },
     {
      "uid": 2,
      "name": "children",
      "typeValue": {
       "raw": "null | string | number | boolean | React.ReactElement<any, string | React.JSXElementConstructor<any>> | React.ReactFragment | React.ReactPortal"
      },
      "typeValueRef": "@types/react:ReactNode",
      "from": "@epam/uui-core:IHasChildren",
      "required": false
     },
     {
      "uid": 3,
      "name": "onClick",
      "comment": {
       "raw": [
        "Called when component is clicked"
       ]
      },
      "typeValue": {
       "raw": "(e?: any) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IClickable",
      "required": false
     },
     {
      "uid": 4,
      "name": "clickAnalyticsEvent",
      "comment": {
       "raw": [
        "An analytics event to send (via AnalyticsContext) when component is clicked.",
        " See [AnalyticsContext](@link https://uui.epam.com/documents?id=analyticsContext&mode=doc&skin=UUI4_promo&category=contexts)."
       ]
      },
      "typeValue": {
       "raw": "null | { [key: string]: any; name: string; }"
      },
      "from": "@epam/uui-core:IAnalyticableClick",
      "required": false
     },
     {
      "uid": 5,
      "name": "rawProps",
      "comment": {
       "raw": [
        "Any HTML attributes (native or 'data-') to put on the underlying component"
       ]
      },
      "typeValue": {
       "raw": "React.HTMLAttributes<HTMLDivElement> & Record<`data-${string}`, string>"
      },
      "from": "@epam/uui-core:IHasRawProps",
      "required": false
     },
     {
      "uid": 6,
      "name": "forwardedRef",
      "comment": {
       "raw": [
        "this ref is passed to the underlying component"
       ]
      },
      "typeValue": {
       "raw": "null | (instance: HTMLDivElement | null) => void | React.MutableRefObject<HTMLDivElement | null>"
      },
      "from": "@epam/uui-core:IHasForwardedRef",
      "required": false
     },
     {
      "uid": 7,
      "name": "size",
      "typeValue": {
       "raw": "'18' | '36' | '48' | '24' | '30' | '42' | 'none'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "18",
        "24",
        "30",
        "36",
        "42",
        "48",
        "none"
       ]
      },
      "from": "@epam/uui:TextMods",
      "required": false
     },
     {
      "uid": 8,
      "name": "font",
      "typeValue": {
       "raw": "'primary' | 'regular' | 'semibold' | 'italic' | 'promo'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "primary",
        "regular",
        "semibold",
        "italic",
        "promo"
       ]
      },
      "from": "@epam/uui:TextMods",
      "required": false
     },
     {
      "uid": 9,
      "name": "color",
      "typeValue": {
       "raw": "'info' | 'success' | 'warning' | 'error' | 'primary' | 'secondary' | 'white' | 'contrast' | 'brand' | 'disabled'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "info",
        "success",
        "warning",
        "error",
        "primary",
        "secondary",
        "white",
        "contrast",
        "brand",
        "disabled"
       ]
      },
      "from": "@epam/uui:TextMods",
      "required": false
     },
     {
      "uid": 10,
      "name": "lineHeight",
      "typeValue": {
       "raw": "'12' | '18' | '24' | '30'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "12",
        "18",
        "24",
        "30"
       ]
      },
      "from": "@epam/uui:TextSettings",
      "required": false
     },
     {
      "uid": 11,
      "name": "fontSize",
      "typeValue": {
       "raw": "'12' | '18' | '24' | '14' | '16' | '10'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "10",
        "12",
        "14",
        "16",
        "18",
        "24"
       ]
      },
      "from": "@epam/uui:TextSettings",
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui:TextSettings": {
   "summary": {
    "module": "@epam/uui",
    "typeName": {
     "name": "TextSettings",
     "nameFull": "TextSettings"
    },
    "src": "uui/helpers/textLayout.tsx",
    "exported": true
   },
   "details": {
    "kind": 263,
    "typeValue": {
     "raw": "TextSettings",
     "print": [
      "interface TextSettings {",
      "    lineHeight?: '12' | '18' | '24' | '30';",
      "    fontSize?: '10' | '12' | '14' | '16' | '18' | '24';",
      "}"
     ]
    },
    "props": [
     {
      "uid": 1,
      "name": "lineHeight",
      "typeValue": {
       "raw": "'12' | '18' | '24' | '30'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "12",
        "18",
        "24",
        "30"
       ]
      },
      "required": false
     },
     {
      "uid": 2,
      "name": "fontSize",
      "typeValue": {
       "raw": "'12' | '18' | '24' | '14' | '16' | '10'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "10",
        "12",
        "14",
        "16",
        "18",
        "24"
       ]
      },
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui:TextSize": {
   "summary": {
    "module": "@epam/uui",
    "typeName": {
     "name": "TextSize",
     "nameFull": "TextSize"
    },
    "src": "uui/components/types.ts",
    "exported": true
   },
   "details": {
    "kind": 264,
    "typeValue": {
     "raw": "'18' | '36' | '48' | '24' | '30' | 'none'",
     "print": [
      "type TextSize = 'none' | '18' | '24' | '30' | '36' | '48';"
     ]
    }
   }
  },
  "@epam/uui:TimePickerProps": {
   "summary": {
    "module": "@epam/uui",
    "typeName": {
     "name": "TimePickerProps",
     "nameFull": "TimePickerProps"
    },
    "src": "uui/components/inputs/TimePicker.tsx",
    "exported": true
   },
   "details": {
    "kind": 263,
    "typeValue": {
     "raw": "TimePickerProps",
     "print": [
      "interface TimePickerProps extends BaseTimePickerProps, SizeMod, IHasEditMode {",
      "    /**",
      "     * @default 5",
      "     */",
      "    minutesStep?: number;",
      "    /**",
      "     * @default 12",
      "     */",
      "    format?: 12 | 24;",
      "}"
     ]
    },
    "props": [
     {
      "uid": 1,
      "name": "minutesStep",
      "comment": {
       "raw": [
        "@default 5"
       ],
       "tags": {
        "@default": 5
       }
      },
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "required": false
     },
     {
      "uid": 2,
      "name": "format",
      "comment": {
       "raw": [
        "@default 12"
       ],
       "tags": {
        "@default": 12
       }
      },
      "typeValue": {
       "raw": "12 | 24"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        12,
        24
       ]
      },
      "required": false
     },
     {
      "uid": 3,
      "name": "id",
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "from": "@epam/uui-components:BaseTimePickerProps",
      "required": false
     },
     {
      "uid": 4,
      "name": "renderTarget",
      "typeValue": {
       "raw": "(props: IDropdownToggler) => React.ReactNode"
      },
      "editor": {
       "type": "component"
      },
      "from": "@epam/uui-components:BaseTimePickerProps",
      "required": false
     },
     {
      "uid": 5,
      "name": "rawProps",
      "typeValue": {
       "raw": "{ input?: (React.HTMLAttributes<HTMLDivElement> & Record<`data-${string}`, string>) | undefined; body?: (React.HTMLAttributes<HTMLDivElement> & Record<`data-${string}`, string>) | undefined; }"
      },
      "from": "@epam/uui-components:BaseTimePickerProps",
      "required": false
     },
     {
      "uid": 6,
      "name": "inputCx",
      "comment": {
       "raw": [
        "CSS class(es) to put on input-part component. See https://github.com/JedWatson/classnames#usage for details"
       ]
      },
      "typeValue": {
       "raw": "null | string | number | boolean | ClassDictionary | ClassArray"
      },
      "typeValueRef": "@epam/uui-core:ClassValue",
      "from": "@epam/uui-components:BaseTimePickerProps",
      "required": false
     },
     {
      "uid": 7,
      "name": "bodyCx",
      "comment": {
       "raw": [
        "CSS class(es) to put on body-part component. See https://github.com/JedWatson/classnames#usage for details"
       ]
      },
      "typeValue": {
       "raw": "null | string | number | boolean | ClassDictionary | ClassArray"
      },
      "typeValueRef": "@epam/uui-core:ClassValue",
      "from": "@epam/uui-components:BaseTimePickerProps",
      "required": false
     },
     {
      "uid": 8,
      "name": "value",
      "comment": {
       "raw": [
        "The current value of component"
       ]
      },
      "typeValue": {
       "raw": "null | TimePickerValue"
      },
      "from": "@epam/uui-core:IEditable",
      "required": true
     },
     {
      "uid": 9,
      "name": "onValueChange",
      "comment": {
       "raw": [
        "Called when value needs to be changed (usually due to user interaction)"
       ]
      },
      "typeValue": {
       "raw": "(newValue: TimePickerValue | null) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IEditable",
      "required": true
     },
     {
      "uid": 10,
      "name": "isInvalid",
      "comment": {
       "raw": [
        "True if component contains invalid input"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:ICanBeInvalid",
      "required": false
     },
     {
      "uid": 11,
      "name": "validationMessage",
      "comment": {
       "raw": [
        "Message describing why the value is invalid"
       ]
      },
      "typeValue": {
       "raw": "null | string | number | boolean | React.ReactElement<any, string | React.JSXElementConstructor<any>> | React.ReactFragment | React.ReactPortal"
      },
      "typeValueRef": "@types/react:ReactNode",
      "from": "@epam/uui-core:ICanBeInvalid",
      "required": false
     },
     {
      "uid": 12,
      "name": "validationProps",
      "comment": {
       "raw": [
        "If T is a complex value (object or array), this property contains validation states of inner items"
       ]
      },
      "typeValue": {
       "raw": "{ [key: string]: ICanBeInvalid; }"
      },
      "from": "@epam/uui-core:ICanBeInvalid",
      "required": false
     },
     {
      "uid": 13,
      "name": "isDisabled",
      "comment": {
       "raw": [
        "Disable editing, and visually de-emphasize value of the component"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:IDisableable",
      "required": false
     },
     {
      "uid": 14,
      "name": "isReadonly",
      "comment": {
       "raw": [
        "Disable editing. Unlike isDisabled, keep component's value readable."
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:ICanBeReadonly",
      "required": false
     },
     {
      "uid": 15,
      "name": "isRequired",
      "comment": {
       "raw": [
        "Marks that component's value is required and shouldn't be empty"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:ICanBeRequired",
      "required": false
     },
     {
      "uid": 16,
      "name": "placeholder",
      "comment": {
       "raw": [
        "Placeholder to display when empty"
       ]
      },
      "typeValue": {
       "raw": "any"
      },
      "from": "@epam/uui-core:IHasPlaceholder",
      "required": false
     },
     {
      "uid": 17,
      "name": "size",
      "typeValue": {
       "raw": "'36' | '48' | '24' | '30' | '42' | 'none'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "24",
        "30",
        "36",
        "42",
        "48",
        "none"
       ]
      },
      "from": "@epam/uui:SizeMod",
      "required": false
     },
     {
      "uid": 18,
      "name": "mode",
      "comment": {
       "raw": [
        "Visual mode for component:",
        " - form: default visuals, to use in forms.",
        " - cell: adjust to embed as table cell editor: no borders, no focus (it is applied by DataCell)",
        " - inline: adjust for WYSIWYG UX. Backgrounds removed. Borders appear only on hover."
       ]
      },
      "typeValue": {
       "raw": "'inline' | 'form' | 'cell'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "inline",
        "form",
        "cell"
       ]
      },
      "from": "@epam/uui:IHasEditMode",
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui:TooltipMods": {
   "summary": {
    "module": "@epam/uui",
    "typeName": {
     "name": "TooltipMods",
     "nameFull": "TooltipMods"
    },
    "src": "uui/components/overlays/Tooltip.tsx",
    "exported": true
   },
   "details": {
    "kind": 263,
    "typeValue": {
     "raw": "TooltipMods",
     "print": [
      "interface TooltipMods {",
      "    /**",
      "     * Tooltip color",
      "     * @default 'contrast'",
      "     */",
      "    color?: 'neutral' | 'contrast' | 'critical';",
      "}"
     ]
    },
    "props": [
     {
      "uid": 1,
      "name": "color",
      "comment": {
       "raw": [
        "Tooltip color",
        " @default 'contrast'"
       ],
       "tags": {
        "@default": "contrast"
       }
      },
      "typeValue": {
       "raw": "'critical' | 'neutral' | 'contrast'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "critical",
        "neutral",
        "contrast"
       ]
      },
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui:TooltipProps": {
   "summary": {
    "module": "@epam/uui",
    "typeName": {
     "name": "TooltipProps",
     "nameFull": "TooltipProps"
    },
    "src": "uui/components/overlays/Tooltip.tsx",
    "exported": true
   },
   "details": {
    "kind": 264,
    "typeValue": {
     "raw": "TooltipProps",
     "print": [
      "type TooltipProps = UuiTooltipProps & TooltipMods;"
     ]
    },
    "props": [
     {
      "uid": 1,
      "name": "content",
      "comment": {
       "raw": [
        "Content to show in the tooltip (ReactNode)"
       ]
      },
      "typeValue": {
       "raw": "any"
      },
      "from": "@epam/uui-core:TooltipCoreProps",
      "required": false
     },
     {
      "uid": 2,
      "name": "renderContent",
      "comment": {
       "raw": [
        "Alternative to 'content' prop, you can pass a render function.",
        " The function will only be called when content is shown, this can save performance."
       ]
      },
      "typeValue": {
       "raw": "() => any"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:TooltipCoreProps",
      "required": false
     },
     {
      "uid": 3,
      "name": "offset",
      "comment": {
       "raw": [
        "See [Popper docs]{@link https://popper.js.org/docs/v2/modifiers/offset/}"
       ]
      },
      "typeValue": {
       "raw": "OffsetsFunction | [number | null | undefined, number | null | undefined]"
      },
      "from": "@epam/uui-core:TooltipCoreProps",
      "required": false
     },
     {
      "uid": 4,
      "name": "children",
      "comment": {
       "raw": [
        "React Node(s) to show tooltip for"
       ]
      },
      "typeValue": {
       "raw": "null | string | number | boolean | React.ReactElement<any, string | React.JSXElementConstructor<any>> | React.ReactFragment | React.ReactPortal"
      },
      "typeValueRef": "@types/react:ReactNode",
      "from": "@epam/uui-core:TooltipCoreProps",
      "required": false
     },
     {
      "uid": 5,
      "name": "maxWidth",
      "comment": {
       "raw": [
        "Max width of tooltip"
       ]
      },
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "from": "@epam/uui-core:TooltipCoreProps",
      "required": false
     },
     {
      "uid": 6,
      "name": "cx",
      "comment": {
       "raw": [
        "CSS class(es) to put on component's root. See {@link https://github.com/JedWatson/classnames#usage} for details"
       ]
      },
      "typeValue": {
       "raw": "null | string | number | boolean | ClassDictionary | ClassArray"
      },
      "typeValueRef": "@epam/uui-core:ClassValue",
      "from": "@epam/uui-core:IHasCX",
      "required": false
     },
     {
      "uid": 7,
      "name": "rawProps",
      "comment": {
       "raw": [
        "Any HTML attributes (native or 'data-') to put on the underlying component"
       ]
      },
      "typeValue": {
       "raw": "React.HTMLAttributes<HTMLDivElement> & Record<`data-${string}`, string>"
      },
      "from": "@epam/uui-core:IHasRawProps",
      "required": false
     },
     {
      "uid": 8,
      "name": "value",
      "comment": {
       "raw": [
        "The current value of component"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:IEditable",
      "required": true
     },
     {
      "uid": 9,
      "name": "onValueChange",
      "comment": {
       "raw": [
        "Called when value needs to be changed (usually due to user interaction)"
       ]
      },
      "typeValue": {
       "raw": "(newValue: boolean) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IEditable",
      "required": true
     },
     {
      "uid": 10,
      "name": "isInvalid",
      "comment": {
       "raw": [
        "True if component contains invalid input"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:ICanBeInvalid",
      "required": false
     },
     {
      "uid": 11,
      "name": "validationMessage",
      "comment": {
       "raw": [
        "Message describing why the value is invalid"
       ]
      },
      "typeValue": {
       "raw": "null | string | number | boolean | React.ReactElement<any, string | React.JSXElementConstructor<any>> | React.ReactFragment | React.ReactPortal"
      },
      "from": "@epam/uui-core:ICanBeInvalid",
      "required": false
     },
     {
      "uid": 12,
      "name": "validationProps",
      "comment": {
       "raw": [
        "If T is a complex value (object or array), this property contains validation states of inner items"
       ]
      },
      "typeValue": {
       "raw": "{ [key: string]: ICanBeInvalid; }"
      },
      "from": "@epam/uui-core:ICanBeInvalid",
      "required": false
     },
     {
      "uid": 13,
      "name": "isDisabled",
      "comment": {
       "raw": [
        "Disable editing, and visually de-emphasize value of the component"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:IDisableable",
      "required": false
     },
     {
      "uid": 14,
      "name": "isReadonly",
      "comment": {
       "raw": [
        "Disable editing. Unlike isDisabled, keep component's value readable."
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:ICanBeReadonly",
      "required": false
     },
     {
      "uid": 15,
      "name": "isRequired",
      "comment": {
       "raw": [
        "Marks that component's value is required and shouldn't be empty"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:ICanBeRequired",
      "required": false
     },
     {
      "uid": 16,
      "name": "onClose",
      "typeValue": {
       "raw": "() => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:DropdownProps",
      "required": false
     },
     {
      "uid": 17,
      "name": "placement",
      "typeValue": {
       "raw": "'left' | 'right' | 'auto' | 'auto-start' | 'auto-end' | 'top' | 'bottom' | 'top-start' | 'top-end' | 'bottom-start' | 'bottom-end' | 'right-start' | 'right-end' | 'left-start' | 'left-end'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "left",
        "right",
        "auto",
        "auto-start",
        "auto-end",
        "top",
        "bottom",
        "top-start",
        "top-end",
        "bottom-start",
        "bottom-end",
        "right-start",
        "right-end",
        "left-start",
        "left-end"
       ]
      },
      "from": "@epam/uui-core:DropdownProps",
      "required": false
     },
     {
      "uid": 18,
      "name": "modifiers",
      "typeValue": {
       "raw": "(StrictModifier<any> | Partial<Modifier<any, object>>)[]"
      },
      "from": "@epam/uui-core:DropdownProps",
      "required": false
     },
     {
      "uid": 19,
      "name": "openDelay",
      "comment": {
       "raw": [
        "@default 0"
       ],
       "tags": {
        "@default": 0
       }
      },
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "from": "@epam/uui-core:DropdownProps",
      "required": false
     },
     {
      "uid": 20,
      "name": "closeDelay",
      "comment": {
       "raw": [
        "@default 0"
       ],
       "tags": {
        "@default": 0
       }
      },
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "from": "@epam/uui-core:DropdownProps",
      "required": false
     },
     {
      "uid": 21,
      "name": "closeOnMouseLeave",
      "comment": {
       "raw": [
        "@default false"
       ],
       "tags": {
        "@default": false
       }
      },
      "typeValue": {
       "raw": "false | 'toggler' | 'boundary'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        false,
        "toggler",
        "boundary"
       ]
      },
      "from": "@epam/uui-core:DropdownProps",
      "required": false
     },
     {
      "uid": 22,
      "name": "portalTarget",
      "typeValue": {
       "raw": "HTMLElement"
      },
      "from": "@epam/uui-core:DropdownProps",
      "required": false
     },
     {
      "uid": 23,
      "name": "boundaryElement",
      "typeValue": {
       "raw": "HTMLElement | HTMLElement[] | 'clippingParents'"
      },
      "from": "@epam/uui-core:DropdownProps",
      "required": false
     },
     {
      "uid": 24,
      "name": "closeBodyOnTogglerHidden",
      "comment": {
       "raw": [
        "@default true"
       ],
       "tags": {
        "@default": true
       }
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:DropdownProps",
      "required": false
     },
     {
      "uid": 25,
      "name": "color",
      "comment": {
       "raw": [
        "Tooltip color",
        " @default 'contrast'"
       ],
       "tags": {
        "@default": "contrast"
       }
      },
      "typeValue": {
       "raw": "'critical' | 'neutral' | 'contrast'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "critical",
        "neutral",
        "contrast"
       ]
      },
      "from": "@epam/uui:TooltipMods",
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui:UuiMultiSwitchColor": {
   "summary": {
    "module": "@epam/uui",
    "typeName": {
     "name": "UuiMultiSwitchColor",
     "nameFull": "UuiMultiSwitchColor"
    },
    "src": "uui/components/inputs/MultiSwitch.tsx",
    "exported": true
   },
   "details": {
    "kind": 264,
    "typeValue": {
     "raw": "'primary' | 'secondary'",
     "print": [
      "type UuiMultiSwitchColor = 'primary' | 'secondary';"
     ]
    }
   }
  },
  "@epam/uui:VerticalTabButtonProps": {
   "summary": {
    "module": "@epam/uui",
    "typeName": {
     "name": "VerticalTabButtonProps",
     "nameFull": "VerticalTabButtonProps"
    },
    "src": "uui/components/buttons/VerticalTabButton.tsx",
    "exported": true
   },
   "details": {
    "kind": 264,
    "typeValue": {
     "raw": "VerticalTabButtonProps",
     "print": [
      "type VerticalTabButtonProps = ButtonProps & TabButtonMods;"
     ]
    },
    "props": [
     {
      "uid": 1,
      "name": "clearIcon",
      "comment": {
       "raw": [
        "Icon for clear value button (usually cross)"
       ]
      },
      "typeValue": {
       "raw": "Icon"
      },
      "editor": {
       "type": "component"
      },
      "from": "@epam/uui-components:ButtonProps",
      "required": false
     },
     {
      "uid": 2,
      "name": "captionCX",
      "comment": {
       "raw": [
        "CSS classes to put on the caption"
       ]
      },
      "typeValue": {
       "raw": "null | string | number | boolean | ClassDictionary | ClassArray"
      },
      "typeValueRef": "@epam/uui-core:ClassValue",
      "from": "@epam/uui-components:ButtonProps",
      "required": false
     },
     {
      "uid": 3,
      "name": "countIndicator",
      "comment": {
       "raw": [
        "CountIndicator component"
       ]
      },
      "typeValue": {
       "raw": "React.ComponentClass<IHasCaption, any> | React.FunctionComponent<IHasCaption>"
      },
      "from": "@epam/uui-components:ButtonProps",
      "required": false
     },
     {
      "uid": 4,
      "name": "dropdownIcon",
      "comment": {
       "raw": [
        "Icon for drop-down toggler"
       ]
      },
      "typeValue": {
       "raw": "Icon"
      },
      "editor": {
       "type": "component"
      },
      "from": "@epam/uui-core:ButtonCoreProps",
      "required": false
     },
     {
      "uid": 5,
      "name": "dropdownIconPosition",
      "comment": {
       "raw": [
        "Position of the dropdown icon ('left' of 'right')"
       ]
      },
      "typeValue": {
       "raw": "'left' | 'right'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "left",
        "right"
       ]
      },
      "from": "@epam/uui-core:ButtonCoreProps",
      "required": false
     },
     {
      "uid": 6,
      "name": "count",
      "typeValue": {
       "raw": "null | string | number | boolean | React.ReactElement<any, string | React.JSXElementConstructor<any>> | React.ReactFragment | React.ReactPortal"
      },
      "typeValueRef": "@types/react:ReactNode",
      "from": "@epam/uui-core:ButtonCoreProps",
      "required": false
     },
     {
      "uid": 7,
      "name": "cx",
      "comment": {
       "raw": [
        "CSS class(es) to put on component's root. See {@link https://github.com/JedWatson/classnames#usage} for details"
       ]
      },
      "typeValue": {
       "raw": "null | string | number | boolean | ClassDictionary | ClassArray"
      },
      "typeValueRef": "@epam/uui-core:ClassValue",
      "from": "@epam/uui-core:IHasCX",
      "required": false
     },
     {
      "uid": 8,
      "name": "onClick",
      "comment": {
       "raw": [
        "Called when component is clicked"
       ]
      },
      "typeValue": {
       "raw": "(e?: any) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IClickable",
      "required": false
     },
     {
      "uid": 9,
      "name": "link",
      "comment": {
       "raw": [
        "Link object to redirect to for SPA-redirects"
       ]
      },
      "typeValue": {
       "raw": "Link"
      },
      "from": "@epam/uui-core:ICanRedirect",
      "required": false
     },
     {
      "uid": 10,
      "name": "href",
      "comment": {
       "raw": [
        "Href (URL) to redirect to, for non-SPA redirects"
       ]
      },
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "from": "@epam/uui-core:ICanRedirect",
      "required": false
     },
     {
      "uid": 11,
      "name": "isLinkActive",
      "comment": {
       "raw": [
        "Highlights component to show that link is active (browser is displaying the page to which link is pointing)"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:ICanRedirect",
      "required": false
     },
     {
      "uid": 12,
      "name": "target",
      "comment": {
       "raw": [
        "Controls where the link should be opened"
       ]
      },
      "typeValue": {
       "raw": "'_blank'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "_blank"
       ]
      },
      "from": "@epam/uui-core:ICanRedirect",
      "required": false
     },
     {
      "uid": 13,
      "name": "isDisabled",
      "comment": {
       "raw": [
        "Disable editing, and visually de-emphasize value of the component"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:IDisableable",
      "required": false
     },
     {
      "uid": 14,
      "name": "icon",
      "comment": {
       "raw": [
        "Icon can be a React element (usually an SVG element)"
       ]
      },
      "typeValue": {
       "raw": "Icon"
      },
      "editor": {
       "type": "component"
      },
      "from": "@epam/uui-core:IHasIcon",
      "required": false
     },
     {
      "uid": 15,
      "name": "iconPosition",
      "comment": {
       "raw": [
        "Position of the icon (left of right)"
       ]
      },
      "typeValue": {
       "raw": "'left' | 'right'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "left",
        "right"
       ]
      },
      "from": "@epam/uui-core:IHasIcon",
      "required": false
     },
     {
      "uid": 16,
      "name": "onIconClick",
      "comment": {
       "raw": [
        "Click handler for the icon"
       ]
      },
      "typeValue": {
       "raw": "() => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IHasIcon",
      "required": false
     },
     {
      "uid": 17,
      "name": "clickAnalyticsEvent",
      "comment": {
       "raw": [
        "An analytics event to send (via AnalyticsContext) when component is clicked.",
        " See [AnalyticsContext](@link https://uui.epam.com/documents?id=analyticsContext&mode=doc&skin=UUI4_promo&category=contexts)."
       ]
      },
      "typeValue": {
       "raw": "null | { [key: string]: any; name: string; }"
      },
      "from": "@epam/uui-core:IAnalyticableClick",
      "required": false
     },
     {
      "uid": 18,
      "name": "tabIndex",
      "comment": {
       "raw": [
        "Controls the order of keyboard navigation between components"
       ]
      },
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "from": "@epam/uui-core:IHasTabIndex",
      "required": false
     },
     {
      "uid": 19,
      "name": "rawProps",
      "comment": {
       "raw": [
        "Any HTML attributes (native or 'data-') to put on the underlying component"
       ]
      },
      "typeValue": {
       "raw": "React.ButtonHTMLAttributes<HTMLButtonElement> & Record<`data-${string}`, string>"
      },
      "from": "@epam/uui-core:IHasRawProps",
      "required": false
     },
     {
      "uid": 20,
      "name": "caption",
      "comment": {
       "raw": [
        "Caption. Can be a string, or React.Elements. Certain components supports minimal markup (<b>,<i>,<a>) in captions."
       ]
      },
      "typeValue": {
       "raw": "any"
      },
      "from": "@epam/uui-core:IHasCaption",
      "required": false
     },
     {
      "uid": 21,
      "name": "onClear",
      "comment": {
       "raw": [
        "Call to clear toggler value"
       ]
      },
      "typeValue": {
       "raw": "(e?: any) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IBasicPickerToggler",
      "required": false
     },
     {
      "uid": 22,
      "name": "isOpen",
      "comment": {
       "raw": [
        "When isDropdown=true, indicate that dropdown is open with chevron icon"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:IDropdownToggler",
      "required": false
     },
     {
      "uid": 23,
      "name": "isDropdown",
      "comment": {
       "raw": [
        "Shows chevron icon, enabling component to act as dropdown toggler"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:IDropdownToggler",
      "required": false
     },
     {
      "uid": 24,
      "name": "toggleDropdownOpening",
      "comment": {
       "raw": [
        "Called when associated dropdown should open or close"
       ]
      },
      "typeValue": {
       "raw": "(value: boolean) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IDropdownToggler",
      "required": false
     },
     {
      "uid": 25,
      "name": "isInteractedOutside",
      "comment": {
       "raw": [
        "Called when component is interacted outside, to close the dropdown"
       ]
      },
      "typeValue": {
       "raw": "(event: Event) => boolean"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IDropdownToggler",
      "required": false
     },
     {
      "uid": 26,
      "name": "ref",
      "comment": {
       "raw": [
        "Component's ref"
       ]
      },
      "typeValue": {
       "raw": "null | (instance: any) => void | React.RefObject<any>"
      },
      "from": "@epam/uui-core:IDropdownToggler",
      "required": false
     },
     {
      "uid": 27,
      "name": "forwardedRef",
      "comment": {
       "raw": [
        "this ref is passed to the underlying component"
       ]
      },
      "typeValue": {
       "raw": "null | (instance: HTMLButtonElement | HTMLAnchorElement | null) => void | React.MutableRefObject<HTMLButtonElement | HTMLAnchorElement | null>"
      },
      "from": "@epam/uui-core:IHasForwardedRef",
      "required": false
     },
     {
      "uid": 28,
      "name": "size",
      "comment": {
       "raw": [
        "@default '48'"
       ],
       "tags": {
        "@default": "48"
       }
      },
      "typeValue": {
       "raw": "'36' | '48' | '60'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "36",
        "48",
        "60"
       ]
      },
      "from": "@epam/uui:TabButtonMods",
      "required": false
     },
     {
      "uid": 29,
      "name": "withNotify",
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui:TabButtonMods",
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui:VirtualListProps": {
   "summary": {
    "module": "@epam/uui",
    "typeName": {
     "name": "VirtualListProps",
     "nameFull": "VirtualListProps<List>"
    },
    "src": "uui/components/layout/VirtualList.tsx",
    "exported": true
   },
   "details": {
    "kind": 264,
    "typeValue": {
     "raw": "BaseVirtualListProps & { rows?: React.ReactNode[] | undefined; renderRows: (config: VirtualListRenderRowsParams<List>) => React.ReactNode; } | BaseVirtualListProps & { rows: React.ReactNode[]; renderRows?: ((config: VirtualListRenderRowsParams<List>) => React.ReactNode) | undefined; }",
     "print": [
      "type VirtualListProps<List extends HTMLElement = any> = BaseVirtualListProps & VirtualListRenderRows<List>;"
     ]
    },
    "props": [
     {
      "uid": 18,
      "name": "rowsCount",
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "from": "@epam/uui:BaseVirtualListProps",
      "required": false
     },
     {
      "uid": 19,
      "name": "role",
      "typeValue": {
       "raw": "'none' | 'search' | 'link' | 'form' | 'cell' | string & {} | 'alert' | 'alertdialog' | 'application' | 'article' | 'banner' | 'button' | 'checkbox' | 'columnheader' | 'combobox' | 'complementary' | 'contentinfo' | 'definition' | 'dialog' | 'directory' | 'document' | 'feed' | 'figure' | 'grid' | 'gridcell' | 'group' | 'heading' | 'img' | 'list' | 'listbox' | 'listitem' | 'log' | 'main' | 'marquee' | 'math' | 'menu' | 'menubar' | 'menuitem' | 'menuitemcheckbox' | 'menuitemradio' | 'navigation' | 'note' | 'option' | 'presentation' | 'progressbar' | 'radio' | 'radiogroup' | 'region' | 'row' | 'rowgroup' | 'rowheader' | 'scrollbar' | 'searchbox' | 'separator' | 'slider' | 'spinbutton' | 'status' | 'switch' | 'tab' | 'table' | 'tablist' | 'tabpanel' | 'term' | 'textbox' | 'timer' | 'toolbar' | 'tooltip' | 'tree' | 'treegrid' | 'treeitem'"
      },
      "from": "@epam/uui:BaseVirtualListProps",
      "required": false
     },
     {
      "uid": 20,
      "name": "onScroll",
      "typeValue": {
       "raw": "(value: PositionValues) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui:BaseVirtualListProps",
      "required": false
     },
     {
      "uid": 21,
      "name": "rowsSelector",
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "from": "@epam/uui:BaseVirtualListProps",
      "required": false
     },
     {
      "uid": 22,
      "name": "isLoading",
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui:BaseVirtualListProps",
      "required": false
     },
     {
      "uid": 23,
      "name": "cx",
      "comment": {
       "raw": [
        "CSS class(es) to put on component's root. See {@link https://github.com/JedWatson/classnames#usage} for details"
       ]
      },
      "typeValue": {
       "raw": "null | string | number | boolean | ClassDictionary | ClassArray"
      },
      "typeValueRef": "@epam/uui-core:ClassValue",
      "from": "@epam/uui-core:IHasCX",
      "required": false
     },
     {
      "uid": 24,
      "name": "value",
      "comment": {
       "raw": [
        "The current value of component"
       ]
      },
      "typeValue": {
       "raw": "VirtualListState"
      },
      "from": "@epam/uui-core:IEditable",
      "required": true
     },
     {
      "uid": 25,
      "name": "onValueChange",
      "comment": {
       "raw": [
        "Called when value needs to be changed (usually due to user interaction)"
       ]
      },
      "typeValue": {
       "raw": "(newValue: VirtualListState) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IEditable",
      "required": true
     },
     {
      "uid": 26,
      "name": "isInvalid",
      "comment": {
       "raw": [
        "True if component contains invalid input"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:ICanBeInvalid",
      "required": false
     },
     {
      "uid": 27,
      "name": "validationMessage",
      "comment": {
       "raw": [
        "Message describing why the value is invalid"
       ]
      },
      "typeValue": {
       "raw": "null | string | number | boolean | React.ReactElement<any, string | React.JSXElementConstructor<any>> | React.ReactFragment | React.ReactPortal"
      },
      "typeValueRef": "@types/react:ReactNode",
      "from": "@epam/uui-core:ICanBeInvalid",
      "required": false
     },
     {
      "uid": 28,
      "name": "validationProps",
      "comment": {
       "raw": [
        "If T is a complex value (object or array), this property contains validation states of inner items"
       ]
      },
      "typeValue": {
       "raw": "{ [key: string]: ICanBeInvalid; }"
      },
      "from": "@epam/uui-core:ICanBeInvalid",
      "required": false
     },
     {
      "uid": 29,
      "name": "isDisabled",
      "comment": {
       "raw": [
        "Disable editing, and visually de-emphasize value of the component"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:IDisableable",
      "required": false
     },
     {
      "uid": 30,
      "name": "isReadonly",
      "comment": {
       "raw": [
        "Disable editing. Unlike isDisabled, keep component's value readable."
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:ICanBeReadonly",
      "required": false
     },
     {
      "uid": 31,
      "name": "isRequired",
      "comment": {
       "raw": [
        "Marks that component's value is required and shouldn't be empty"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:ICanBeRequired",
      "required": false
     },
     {
      "uid": 32,
      "name": "rawProps",
      "comment": {
       "raw": [
        "Any HTML attributes (native or 'data-') to put on the underlying component"
       ]
      },
      "typeValue": {
       "raw": "React.HTMLAttributes<HTMLDivElement> & Record<`data-${string}`, string>"
      },
      "from": "@epam/uui-core:IHasRawProps",
      "required": false
     },
     {
      "uid": 33,
      "name": "rows",
      "typeValue": {
       "raw": "React.ReactNode[]"
      },
      "from": "@epam/uui:VirtualListRenderRows",
      "required": true
     },
     {
      "uid": 34,
      "name": "renderRows",
      "typeValue": {
       "raw": "(config: VirtualListRenderRowsParams<List>) => React.ReactNode"
      },
      "editor": {
       "type": "component"
      },
      "from": "@epam/uui:VirtualListRenderRows",
      "required": false
     }
    ],
    "propsFromUnion": true
   }
  },
  "@epam/uui:VirtualListRenderRowsParams": {
   "summary": {
    "module": "@epam/uui",
    "typeName": {
     "name": "VirtualListRenderRowsParams",
     "nameFull": "VirtualListRenderRowsParams<ListContainer>"
    },
    "src": "uui/components/layout/VirtualList.tsx",
    "exported": true
   },
   "details": {
    "kind": 263,
    "typeValue": {
     "raw": "VirtualListRenderRowsParams<ListContainer>",
     "print": [
      "interface VirtualListRenderRowsParams<ListContainer extends HTMLElement = any> {",
      "    listContainerRef: React.MutableRefObject<ListContainer>;",
      "    estimatedHeight: number;",
      "    offsetY: number;",
      "    scrollShadows: {",
      "        verticalTop: boolean;",
      "        verticalBottom: boolean;",
      "        horizontalLeft: boolean;",
      "        horizontalRight: boolean;",
      "    };",
      "}"
     ]
    },
    "props": [
     {
      "uid": 1,
      "name": "listContainerRef",
      "typeValue": {
       "raw": "React.MutableRefObject<ListContainer>"
      },
      "required": true
     },
     {
      "uid": 2,
      "name": "estimatedHeight",
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "required": true
     },
     {
      "uid": 3,
      "name": "offsetY",
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "required": true
     },
     {
      "uid": 4,
      "name": "scrollShadows",
      "typeValue": {
       "raw": "{ verticalTop: boolean; verticalBottom: boolean; horizontalLeft: boolean; horizontalRight: boolean; }"
      },
      "required": true
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui:BaseRowMods": {
   "summary": {
    "module": "@epam/uui",
    "typeName": {
     "name": "BaseRowMods",
     "nameFull": "BaseRowMods"
    },
    "src": "uui/components/tables/types.ts",
    "exported": false
   }
  },
  "@epam/uui:BaseVirtualListProps": {
   "summary": {
    "module": "@epam/uui",
    "typeName": {
     "name": "BaseVirtualListProps",
     "nameFull": "BaseVirtualListProps"
    },
    "src": "uui/components/layout/VirtualList.tsx",
    "exported": false
   }
  },
  "@epam/uui:TableSizesAndPositionMods": {
   "summary": {
    "module": "@epam/uui",
    "typeName": {
     "name": "TableSizesAndPositionMods",
     "nameFull": "TableSizesAndPositionMods"
    },
    "src": "uui/components/tables/types.ts",
    "exported": false
   }
  },
  "@epam/uui:VirtualListRenderRows": {
   "summary": {
    "module": "@epam/uui",
    "typeName": {
     "name": "VirtualListRenderRows",
     "nameFull": "VirtualListRenderRows<List>"
    },
    "src": "uui/components/layout/VirtualList.tsx",
    "exported": false
   }
  },
  "@epam/promo:AlertMods": {
   "summary": {
    "module": "@epam/promo",
    "typeName": {
     "name": "AlertMods",
     "nameFull": "AlertMods"
    },
    "src": "epam-promo/components/overlays/Alert.tsx",
    "exported": true
   },
   "details": {
    "kind": 263,
    "typeValue": {
     "raw": "AlertMods",
     "print": [
      "interface AlertMods {",
      "    /** @default 'blue' */",
      "    color?: EpamPrimaryColor;",
      "}"
     ]
    },
    "props": [
     {
      "uid": 1,
      "name": "color",
      "comment": {
       "raw": [
        "@default 'blue'"
       ],
       "tags": {
        "@default": "blue"
       }
      },
      "typeValue": {
       "raw": "'blue' | 'green' | 'amber' | 'red'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "blue",
        "green",
        "amber",
        "red"
       ]
      },
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/promo:AlertProps": {
   "summary": {
    "module": "@epam/promo",
    "typeName": {
     "name": "AlertProps",
     "nameFull": "AlertProps"
    },
    "src": "epam-promo/components/overlays/Alert.tsx",
    "exported": true
   },
   "details": {
    "kind": 263,
    "typeValue": {
     "raw": "AlertProps",
     "print": [
      "interface AlertProps extends Omit<uui.AlertProps, 'color'>, AlertMods {",
      "}"
     ]
    },
    "props": [
     {
      "uid": 1,
      "name": "actions",
      "comment": {
       "raw": [
        "List of actions to display in the alert. Each action has name and 'action' callback"
       ]
      },
      "typeValue": {
       "raw": "notificationAction[]"
      },
      "from": "@epam/uui:AlertProps",
      "required": false
     },
     {
      "uid": 2,
      "name": "onClose",
      "comment": {
       "raw": [
        "When specified, a close icon is rendered. onClose callback will be called on clicking the close icon"
       ]
      },
      "typeValue": {
       "raw": "() => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui:AlertProps",
      "required": false
     },
     {
      "uid": 3,
      "name": "icon",
      "comment": {
       "raw": [
        "An optional icon to show on the left of the alert"
       ]
      },
      "typeValue": {
       "raw": "Icon"
      },
      "editor": {
       "type": "component"
      },
      "from": "@epam/uui:AlertProps",
      "required": false
     },
     {
      "uid": 4,
      "name": "size",
      "comment": {
       "raw": [
        "Component size. If omitted, 48 size will be used.",
        " @default '48'"
       ],
       "tags": {
        "@default": "48"
       }
      },
      "typeValue": {
       "raw": "'36' | '48'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "36",
        "48"
       ]
      },
      "from": "@epam/uui:AlertProps",
      "required": false
     },
     {
      "uid": 5,
      "name": "children",
      "typeValue": {
       "raw": "null | string | number | boolean | React.ReactElement<any, string | React.JSXElementConstructor<any>> | React.ReactFragment | React.ReactPortal"
      },
      "from": "@epam/uui-core:IHasChildren",
      "required": false
     },
     {
      "uid": 6,
      "name": "cx",
      "comment": {
       "raw": [
        "CSS class(es) to put on component's root. See {@link https://github.com/JedWatson/classnames#usage} for details"
       ]
      },
      "typeValue": {
       "raw": "null | string | number | boolean | ClassDictionary | ClassArray"
      },
      "from": "@epam/uui-core:IHasCX",
      "required": false
     },
     {
      "uid": 7,
      "name": "rawProps",
      "comment": {
       "raw": [
        "Any HTML attributes (native or 'data-') to put on the underlying component"
       ]
      },
      "typeValue": {
       "raw": "React.HTMLAttributes<HTMLDivElement> & Record<`data-${string}`, string>"
      },
      "from": "@epam/uui-core:IHasRawProps",
      "required": false
     },
     {
      "uid": 8,
      "name": "color",
      "comment": {
       "raw": [
        "@default 'blue'"
       ],
       "tags": {
        "@default": "blue"
       }
      },
      "typeValue": {
       "raw": "'blue' | 'green' | 'amber' | 'red'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "blue",
        "green",
        "amber",
        "red"
       ]
      },
      "from": "@epam/promo:AlertMods",
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/promo:BadgeMods": {
   "summary": {
    "module": "@epam/promo",
    "typeName": {
     "name": "BadgeMods",
     "nameFull": "BadgeMods"
    },
    "src": "epam-promo/components/widgets/Badge.tsx",
    "exported": true
   },
   "details": {
    "kind": 263,
    "typeValue": {
     "raw": "BadgeMods",
     "print": [
      "interface BadgeMods extends Omit<UuiBadgeProps, 'color' | 'fill'> {",
      "    /** @default 'blue' */",
      "    color?: EpamPrimaryColor | 'yellow' | 'orange' | 'fuchsia' | 'purple' | 'violet' | 'cobalt' | 'cyan' | 'mint' | 'white' | 'gray10' | 'gray30' | 'gray60';",
      "    /** @default 'solid' */",
      "    fill?: UuiBadgeMods['fill'] | 'semitransparent' | 'transparent';",
      "}"
     ]
    },
    "props": [
     {
      "uid": 1,
      "name": "color",
      "comment": {
       "raw": [
        "@default 'blue'"
       ],
       "tags": {
        "@default": "blue"
       }
      },
      "typeValue": {
       "raw": "'blue' | 'green' | 'amber' | 'red' | 'yellow' | 'orange' | 'fuchsia' | 'purple' | 'violet' | 'cobalt' | 'cyan' | 'mint' | 'white' | 'gray10' | 'gray30' | 'gray60'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "blue",
        "green",
        "amber",
        "red",
        "yellow",
        "orange",
        "fuchsia",
        "purple",
        "violet",
        "cobalt",
        "cyan",
        "mint",
        "white",
        "gray10",
        "gray30",
        "gray60"
       ]
      },
      "required": false
     },
     {
      "uid": 2,
      "name": "fill",
      "comment": {
       "raw": [
        "@default 'solid'"
       ],
       "tags": {
        "@default": "solid"
       }
      },
      "typeValue": {
       "raw": "'solid' | 'outline' | 'semitransparent' | 'transparent'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "solid",
        "outline",
        "semitransparent",
        "transparent"
       ]
      },
      "required": false
     },
     {
      "uid": 3,
      "name": "icon",
      "comment": {
       "raw": [
        "Icon can be a React element (usually an SVG element)"
       ]
      },
      "typeValue": {
       "raw": "Icon"
      },
      "editor": {
       "type": "component"
      },
      "from": "@epam/uui-core:IHasIcon",
      "required": false
     },
     {
      "uid": 4,
      "name": "size",
      "comment": {
       "raw": [
        "@default '36'"
       ],
       "tags": {
        "@default": "36"
       }
      },
      "typeValue": {
       "raw": "'36' | '48' | '18' | '24' | '30' | '42'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "18",
        "24",
        "30",
        "36",
        "42",
        "48"
       ]
      },
      "from": "@epam/uui:BadgeMods",
      "required": false
     },
     {
      "uid": 5,
      "name": "cx",
      "comment": {
       "raw": [
        "CSS class(es) to put on component's root. See {@link https://github.com/JedWatson/classnames#usage} for details"
       ]
      },
      "typeValue": {
       "raw": "null | string | number | boolean | ClassDictionary | ClassArray"
      },
      "from": "@epam/uui-core:IHasCX",
      "required": false
     },
     {
      "uid": 6,
      "name": "rawProps",
      "comment": {
       "raw": [
        "Any HTML attributes (native or 'data-') to put on the underlying component"
       ]
      },
      "typeValue": {
       "raw": "React.ButtonHTMLAttributes<HTMLButtonElement> & Record<`data-${string}`, string>"
      },
      "from": "@epam/uui-core:IHasRawProps",
      "required": false
     },
     {
      "uid": 7,
      "name": "clearIcon",
      "comment": {
       "raw": [
        "Icon for clear value button (usually cross)"
       ]
      },
      "typeValue": {
       "raw": "Icon"
      },
      "editor": {
       "type": "component"
      },
      "from": "@epam/uui-components:ButtonProps",
      "required": false
     },
     {
      "uid": 8,
      "name": "captionCX",
      "comment": {
       "raw": [
        "CSS classes to put on the caption"
       ]
      },
      "typeValue": {
       "raw": "null | string | number | boolean | ClassDictionary | ClassArray"
      },
      "from": "@epam/uui-components:ButtonProps",
      "required": false
     },
     {
      "uid": 9,
      "name": "countIndicator",
      "comment": {
       "raw": [
        "CountIndicator component"
       ]
      },
      "typeValue": {
       "raw": "React.ComponentClass<IHasCaption, any> | React.FunctionComponent<IHasCaption>"
      },
      "from": "@epam/uui-components:ButtonProps",
      "required": false
     },
     {
      "uid": 10,
      "name": "dropdownIcon",
      "comment": {
       "raw": [
        "Icon for drop-down toggler"
       ]
      },
      "typeValue": {
       "raw": "Icon"
      },
      "editor": {
       "type": "component"
      },
      "from": "@epam/uui-core:ButtonCoreProps",
      "required": false
     },
     {
      "uid": 11,
      "name": "dropdownIconPosition",
      "comment": {
       "raw": [
        "Position of the dropdown icon ('left' of 'right')"
       ]
      },
      "typeValue": {
       "raw": "'left' | 'right'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "left",
        "right"
       ]
      },
      "from": "@epam/uui-core:ButtonCoreProps",
      "required": false
     },
     {
      "uid": 12,
      "name": "count",
      "typeValue": {
       "raw": "null | string | number | boolean | React.ReactElement<any, string | React.JSXElementConstructor<any>> | React.ReactFragment | React.ReactPortal"
      },
      "from": "@epam/uui-core:ButtonCoreProps",
      "required": false
     },
     {
      "uid": 13,
      "name": "onClick",
      "comment": {
       "raw": [
        "Called when component is clicked"
       ]
      },
      "typeValue": {
       "raw": "(e?: any) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IClickable",
      "required": false
     },
     {
      "uid": 14,
      "name": "link",
      "comment": {
       "raw": [
        "Link object to redirect to for SPA-redirects"
       ]
      },
      "typeValue": {
       "raw": "Link"
      },
      "from": "@epam/uui-core:ICanRedirect",
      "required": false
     },
     {
      "uid": 15,
      "name": "href",
      "comment": {
       "raw": [
        "Href (URL) to redirect to, for non-SPA redirects"
       ]
      },
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "from": "@epam/uui-core:ICanRedirect",
      "required": false
     },
     {
      "uid": 16,
      "name": "isLinkActive",
      "comment": {
       "raw": [
        "Highlights component to show that link is active (browser is displaying the page to which link is pointing)"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:ICanRedirect",
      "required": false
     },
     {
      "uid": 17,
      "name": "target",
      "comment": {
       "raw": [
        "Controls where the link should be opened"
       ]
      },
      "typeValue": {
       "raw": "'_blank'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "_blank"
       ]
      },
      "from": "@epam/uui-core:ICanRedirect",
      "required": false
     },
     {
      "uid": 18,
      "name": "isDisabled",
      "comment": {
       "raw": [
        "Disable editing, and visually de-emphasize value of the component"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:IDisableable",
      "required": false
     },
     {
      "uid": 19,
      "name": "iconPosition",
      "comment": {
       "raw": [
        "Position of the icon (left of right)"
       ]
      },
      "typeValue": {
       "raw": "'left' | 'right'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "left",
        "right"
       ]
      },
      "from": "@epam/uui-core:IHasIcon",
      "required": false
     },
     {
      "uid": 20,
      "name": "onIconClick",
      "comment": {
       "raw": [
        "Click handler for the icon"
       ]
      },
      "typeValue": {
       "raw": "() => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IHasIcon",
      "required": false
     },
     {
      "uid": 21,
      "name": "clickAnalyticsEvent",
      "comment": {
       "raw": [
        "An analytics event to send (via AnalyticsContext) when component is clicked.",
        " See [AnalyticsContext](@link https://uui.epam.com/documents?id=analyticsContext&mode=doc&skin=UUI4_promo&category=contexts)."
       ]
      },
      "typeValue": {
       "raw": "null | { [key: string]: any; name: string; }"
      },
      "from": "@epam/uui-core:IAnalyticableClick",
      "required": false
     },
     {
      "uid": 22,
      "name": "tabIndex",
      "comment": {
       "raw": [
        "Controls the order of keyboard navigation between components"
       ]
      },
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "from": "@epam/uui-core:IHasTabIndex",
      "required": false
     },
     {
      "uid": 23,
      "name": "caption",
      "comment": {
       "raw": [
        "Caption. Can be a string, or React.Elements. Certain components supports minimal markup (<b>,<i>,<a>) in captions."
       ]
      },
      "typeValue": {
       "raw": "any"
      },
      "from": "@epam/uui-core:IHasCaption",
      "required": false
     },
     {
      "uid": 24,
      "name": "onClear",
      "comment": {
       "raw": [
        "Call to clear toggler value"
       ]
      },
      "typeValue": {
       "raw": "(e?: any) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IBasicPickerToggler",
      "required": false
     },
     {
      "uid": 25,
      "name": "isOpen",
      "comment": {
       "raw": [
        "When isDropdown=true, indicate that dropdown is open with chevron icon"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:IDropdownToggler",
      "required": false
     },
     {
      "uid": 26,
      "name": "isDropdown",
      "comment": {
       "raw": [
        "Shows chevron icon, enabling component to act as dropdown toggler"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:IDropdownToggler",
      "required": false
     },
     {
      "uid": 27,
      "name": "toggleDropdownOpening",
      "comment": {
       "raw": [
        "Called when associated dropdown should open or close"
       ]
      },
      "typeValue": {
       "raw": "(value: boolean) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IDropdownToggler",
      "required": false
     },
     {
      "uid": 28,
      "name": "isInteractedOutside",
      "comment": {
       "raw": [
        "Called when component is interacted outside, to close the dropdown"
       ]
      },
      "typeValue": {
       "raw": "(event: Event) => boolean"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IDropdownToggler",
      "required": false
     },
     {
      "uid": 29,
      "name": "ref",
      "comment": {
       "raw": [
        "Component's ref"
       ]
      },
      "typeValue": {
       "raw": "null | (instance: any) => void | React.RefObject<any>"
      },
      "from": "@epam/uui-core:IDropdownToggler",
      "required": false
     },
     {
      "uid": 30,
      "name": "forwardedRef",
      "comment": {
       "raw": [
        "this ref is passed to the underlying component"
       ]
      },
      "typeValue": {
       "raw": "null | (instance: HTMLButtonElement | HTMLAnchorElement | null) => void | React.MutableRefObject<HTMLButtonElement | HTMLAnchorElement | null>"
      },
      "from": "@epam/uui-core:IHasForwardedRef",
      "required": false
     },
     {
      "uid": 31,
      "name": "indicator",
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui:BadgeMods",
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/promo:BadgeProps": {
   "summary": {
    "module": "@epam/promo",
    "typeName": {
     "name": "BadgeProps",
     "nameFull": "BadgeProps"
    },
    "src": "epam-promo/components/widgets/Badge.tsx",
    "exported": true
   },
   "details": {
    "kind": 264,
    "typeValue": {
     "raw": "BadgeProps",
     "print": [
      "type BadgeProps = Omit<UuiBadgeProps, 'color' | 'fill'> & BadgeMods;"
     ]
    },
    "props": [
     {
      "uid": 1,
      "name": "icon",
      "comment": {
       "raw": [
        "Icon can be a React element (usually an SVG element)"
       ]
      },
      "typeValue": {
       "raw": "Icon"
      },
      "editor": {
       "type": "component"
      },
      "from": "@epam/uui-core:IHasIcon",
      "required": false
     },
     {
      "uid": 2,
      "name": "size",
      "comment": {
       "raw": [
        "@default '36'"
       ],
       "tags": {
        "@default": "36"
       }
      },
      "typeValue": {
       "raw": "'36' | '48' | '18' | '24' | '30' | '42'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "18",
        "24",
        "30",
        "36",
        "42",
        "48"
       ]
      },
      "from": "@epam/uui:BadgeMods",
      "required": false
     },
     {
      "uid": 3,
      "name": "cx",
      "comment": {
       "raw": [
        "CSS class(es) to put on component's root. See {@link https://github.com/JedWatson/classnames#usage} for details"
       ]
      },
      "typeValue": {
       "raw": "null | string | number | boolean | ClassDictionary | ClassArray"
      },
      "from": "@epam/uui-core:IHasCX",
      "required": false
     },
     {
      "uid": 4,
      "name": "rawProps",
      "comment": {
       "raw": [
        "Any HTML attributes (native or 'data-') to put on the underlying component"
       ]
      },
      "typeValue": {
       "raw": "React.ButtonHTMLAttributes<HTMLButtonElement> & Record<`data-${string}`, string>"
      },
      "from": "@epam/uui-core:IHasRawProps",
      "required": false
     },
     {
      "uid": 5,
      "name": "clearIcon",
      "comment": {
       "raw": [
        "Icon for clear value button (usually cross)"
       ]
      },
      "typeValue": {
       "raw": "Icon"
      },
      "editor": {
       "type": "component"
      },
      "from": "@epam/uui-components:ButtonProps",
      "required": false
     },
     {
      "uid": 6,
      "name": "captionCX",
      "comment": {
       "raw": [
        "CSS classes to put on the caption"
       ]
      },
      "typeValue": {
       "raw": "null | string | number | boolean | ClassDictionary | ClassArray"
      },
      "from": "@epam/uui-components:ButtonProps",
      "required": false
     },
     {
      "uid": 7,
      "name": "countIndicator",
      "comment": {
       "raw": [
        "CountIndicator component"
       ]
      },
      "typeValue": {
       "raw": "React.ComponentClass<IHasCaption, any> | React.FunctionComponent<IHasCaption>"
      },
      "from": "@epam/uui-components:ButtonProps",
      "required": false
     },
     {
      "uid": 8,
      "name": "dropdownIcon",
      "comment": {
       "raw": [
        "Icon for drop-down toggler"
       ]
      },
      "typeValue": {
       "raw": "Icon"
      },
      "editor": {
       "type": "component"
      },
      "from": "@epam/uui-core:ButtonCoreProps",
      "required": false
     },
     {
      "uid": 9,
      "name": "dropdownIconPosition",
      "comment": {
       "raw": [
        "Position of the dropdown icon ('left' of 'right')"
       ]
      },
      "typeValue": {
       "raw": "'left' | 'right'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "left",
        "right"
       ]
      },
      "from": "@epam/uui-core:ButtonCoreProps",
      "required": false
     },
     {
      "uid": 10,
      "name": "count",
      "typeValue": {
       "raw": "null | string | number | boolean | React.ReactElement<any, string | React.JSXElementConstructor<any>> | React.ReactFragment | React.ReactPortal"
      },
      "from": "@epam/uui-core:ButtonCoreProps",
      "required": false
     },
     {
      "uid": 11,
      "name": "onClick",
      "comment": {
       "raw": [
        "Called when component is clicked"
       ]
      },
      "typeValue": {
       "raw": "(e?: any) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IClickable",
      "required": false
     },
     {
      "uid": 12,
      "name": "link",
      "comment": {
       "raw": [
        "Link object to redirect to for SPA-redirects"
       ]
      },
      "typeValue": {
       "raw": "Link"
      },
      "from": "@epam/uui-core:ICanRedirect",
      "required": false
     },
     {
      "uid": 13,
      "name": "href",
      "comment": {
       "raw": [
        "Href (URL) to redirect to, for non-SPA redirects"
       ]
      },
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "from": "@epam/uui-core:ICanRedirect",
      "required": false
     },
     {
      "uid": 14,
      "name": "isLinkActive",
      "comment": {
       "raw": [
        "Highlights component to show that link is active (browser is displaying the page to which link is pointing)"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:ICanRedirect",
      "required": false
     },
     {
      "uid": 15,
      "name": "target",
      "comment": {
       "raw": [
        "Controls where the link should be opened"
       ]
      },
      "typeValue": {
       "raw": "'_blank'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "_blank"
       ]
      },
      "from": "@epam/uui-core:ICanRedirect",
      "required": false
     },
     {
      "uid": 16,
      "name": "isDisabled",
      "comment": {
       "raw": [
        "Disable editing, and visually de-emphasize value of the component"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:IDisableable",
      "required": false
     },
     {
      "uid": 17,
      "name": "iconPosition",
      "comment": {
       "raw": [
        "Position of the icon (left of right)"
       ]
      },
      "typeValue": {
       "raw": "'left' | 'right'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "left",
        "right"
       ]
      },
      "from": "@epam/uui-core:IHasIcon",
      "required": false
     },
     {
      "uid": 18,
      "name": "onIconClick",
      "comment": {
       "raw": [
        "Click handler for the icon"
       ]
      },
      "typeValue": {
       "raw": "() => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IHasIcon",
      "required": false
     },
     {
      "uid": 19,
      "name": "clickAnalyticsEvent",
      "comment": {
       "raw": [
        "An analytics event to send (via AnalyticsContext) when component is clicked.",
        " See [AnalyticsContext](@link https://uui.epam.com/documents?id=analyticsContext&mode=doc&skin=UUI4_promo&category=contexts)."
       ]
      },
      "typeValue": {
       "raw": "null | { [key: string]: any; name: string; }"
      },
      "from": "@epam/uui-core:IAnalyticableClick",
      "required": false
     },
     {
      "uid": 20,
      "name": "tabIndex",
      "comment": {
       "raw": [
        "Controls the order of keyboard navigation between components"
       ]
      },
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "from": "@epam/uui-core:IHasTabIndex",
      "required": false
     },
     {
      "uid": 21,
      "name": "caption",
      "comment": {
       "raw": [
        "Caption. Can be a string, or React.Elements. Certain components supports minimal markup (<b>,<i>,<a>) in captions."
       ]
      },
      "typeValue": {
       "raw": "any"
      },
      "from": "@epam/uui-core:IHasCaption",
      "required": false
     },
     {
      "uid": 22,
      "name": "onClear",
      "comment": {
       "raw": [
        "Call to clear toggler value"
       ]
      },
      "typeValue": {
       "raw": "(e?: any) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IBasicPickerToggler",
      "required": false
     },
     {
      "uid": 23,
      "name": "isOpen",
      "comment": {
       "raw": [
        "When isDropdown=true, indicate that dropdown is open with chevron icon"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:IDropdownToggler",
      "required": false
     },
     {
      "uid": 24,
      "name": "isDropdown",
      "comment": {
       "raw": [
        "Shows chevron icon, enabling component to act as dropdown toggler"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:IDropdownToggler",
      "required": false
     },
     {
      "uid": 25,
      "name": "toggleDropdownOpening",
      "comment": {
       "raw": [
        "Called when associated dropdown should open or close"
       ]
      },
      "typeValue": {
       "raw": "(value: boolean) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IDropdownToggler",
      "required": false
     },
     {
      "uid": 26,
      "name": "isInteractedOutside",
      "comment": {
       "raw": [
        "Called when component is interacted outside, to close the dropdown"
       ]
      },
      "typeValue": {
       "raw": "(event: Event) => boolean"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IDropdownToggler",
      "required": false
     },
     {
      "uid": 27,
      "name": "ref",
      "comment": {
       "raw": [
        "Component's ref"
       ]
      },
      "typeValue": {
       "raw": "null | (instance: any) => void | React.RefObject<any>"
      },
      "from": "@epam/uui-core:IDropdownToggler",
      "required": false
     },
     {
      "uid": 28,
      "name": "forwardedRef",
      "comment": {
       "raw": [
        "this ref is passed to the underlying component"
       ]
      },
      "typeValue": {
       "raw": "null | (instance: HTMLButtonElement | HTMLAnchorElement | null) => void | React.MutableRefObject<HTMLButtonElement | HTMLAnchorElement | null>"
      },
      "from": "@epam/uui-core:IHasForwardedRef",
      "required": false
     },
     {
      "uid": 29,
      "name": "indicator",
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui:BadgeMods",
      "required": false
     },
     {
      "uid": 30,
      "name": "color",
      "comment": {
       "raw": [
        "@default 'blue'"
       ],
       "tags": {
        "@default": "blue"
       }
      },
      "typeValue": {
       "raw": "'blue' | 'green' | 'amber' | 'red' | 'yellow' | 'orange' | 'fuchsia' | 'purple' | 'violet' | 'cobalt' | 'cyan' | 'mint' | 'white' | 'gray10' | 'gray30' | 'gray60'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "blue",
        "green",
        "amber",
        "red",
        "yellow",
        "orange",
        "fuchsia",
        "purple",
        "violet",
        "cobalt",
        "cyan",
        "mint",
        "white",
        "gray10",
        "gray30",
        "gray60"
       ]
      },
      "from": "@epam/promo:BadgeMods",
      "required": false
     },
     {
      "uid": 31,
      "name": "fill",
      "comment": {
       "raw": [
        "@default 'solid'"
       ],
       "tags": {
        "@default": "solid"
       }
      },
      "typeValue": {
       "raw": "'solid' | 'outline' | 'semitransparent' | 'transparent'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "solid",
        "outline",
        "semitransparent",
        "transparent"
       ]
      },
      "from": "@epam/promo:BadgeMods",
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/promo:ButtonColor": {
   "summary": {
    "module": "@epam/promo",
    "typeName": {
     "name": "ButtonColor",
     "nameFull": "ButtonColor"
    },
    "src": "epam-promo/components/buttons/Button.tsx",
    "exported": true
   },
   "details": {
    "kind": 264,
    "typeValue": {
     "raw": "'blue' | 'green' | 'red' | 'gray50' | 'gray'",
     "print": [
      "type ButtonColor = 'blue' | 'green' | 'red' | 'gray50' | 'gray';"
     ]
    }
   }
  },
  "@epam/promo:ButtonMods": {
   "summary": {
    "module": "@epam/promo",
    "typeName": {
     "name": "ButtonMods",
     "nameFull": "ButtonMods"
    },
    "src": "epam-promo/components/buttons/Button.tsx",
    "exported": true
   },
   "details": {
    "kind": 263,
    "typeValue": {
     "raw": "ButtonMods",
     "print": [
      "interface ButtonMods {",
      "    /** @default 'solid' */",
      "    fill?: FillStyle;",
      "    color?: ButtonColor;",
      "}"
     ]
    },
    "props": [
     {
      "uid": 1,
      "name": "fill",
      "comment": {
       "raw": [
        "@default 'solid'"
       ],
       "tags": {
        "@default": "solid"
       }
      },
      "typeValue": {
       "raw": "'white' | 'solid' | 'light' | 'none'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "white",
        "solid",
        "light",
        "none"
       ]
      },
      "required": false
     },
     {
      "uid": 2,
      "name": "color",
      "typeValue": {
       "raw": "'blue' | 'green' | 'red' | 'gray50' | 'gray'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "blue",
        "green",
        "red",
        "gray50",
        "gray"
       ]
      },
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/promo:ButtonProps": {
   "summary": {
    "module": "@epam/promo",
    "typeName": {
     "name": "ButtonProps",
     "nameFull": "ButtonProps"
    },
    "src": "epam-promo/components/buttons/Button.tsx",
    "exported": true
   },
   "details": {
    "kind": 264,
    "typeValue": {
     "raw": "ButtonProps",
     "print": [
      "type ButtonProps = Omit<uui.ButtonProps, 'color' | 'fill'> & ButtonMods;"
     ]
    },
    "props": [
     {
      "uid": 1,
      "name": "icon",
      "comment": {
       "raw": [
        "Icon can be a React element (usually an SVG element)"
       ]
      },
      "typeValue": {
       "raw": "Icon"
      },
      "editor": {
       "type": "component"
      },
      "from": "@epam/uui-core:IHasIcon",
      "required": false
     },
     {
      "uid": 2,
      "name": "size",
      "typeValue": {
       "raw": "'36' | '48' | '18' | '24' | '30' | '42' | 'none'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "18",
        "24",
        "30",
        "36",
        "42",
        "48",
        "none"
       ]
      },
      "from": "@epam/uui:ButtonMods",
      "required": false
     },
     {
      "uid": 3,
      "name": "cx",
      "comment": {
       "raw": [
        "CSS class(es) to put on component's root. See {@link https://github.com/JedWatson/classnames#usage} for details"
       ]
      },
      "typeValue": {
       "raw": "null | string | number | boolean | ClassDictionary | ClassArray"
      },
      "from": "@epam/uui-core:IHasCX",
      "required": false
     },
     {
      "uid": 4,
      "name": "rawProps",
      "comment": {
       "raw": [
        "Any HTML attributes (native or 'data-') to put on the underlying component"
       ]
      },
      "typeValue": {
       "raw": "React.ButtonHTMLAttributes<HTMLButtonElement> & Record<`data-${string}`, string>"
      },
      "from": "@epam/uui-core:IHasRawProps",
      "required": false
     },
     {
      "uid": 5,
      "name": "clearIcon",
      "comment": {
       "raw": [
        "Icon for clear value button (usually cross)"
       ]
      },
      "typeValue": {
       "raw": "Icon"
      },
      "editor": {
       "type": "component"
      },
      "from": "@epam/uui-components:ButtonProps",
      "required": false
     },
     {
      "uid": 6,
      "name": "captionCX",
      "comment": {
       "raw": [
        "CSS classes to put on the caption"
       ]
      },
      "typeValue": {
       "raw": "null | string | number | boolean | ClassDictionary | ClassArray"
      },
      "from": "@epam/uui-components:ButtonProps",
      "required": false
     },
     {
      "uid": 7,
      "name": "countIndicator",
      "comment": {
       "raw": [
        "CountIndicator component"
       ]
      },
      "typeValue": {
       "raw": "React.ComponentClass<IHasCaption, any> | React.FunctionComponent<IHasCaption>"
      },
      "from": "@epam/uui-components:ButtonProps",
      "required": false
     },
     {
      "uid": 8,
      "name": "dropdownIcon",
      "comment": {
       "raw": [
        "Icon for drop-down toggler"
       ]
      },
      "typeValue": {
       "raw": "Icon"
      },
      "editor": {
       "type": "component"
      },
      "from": "@epam/uui-core:ButtonCoreProps",
      "required": false
     },
     {
      "uid": 9,
      "name": "dropdownIconPosition",
      "comment": {
       "raw": [
        "Position of the dropdown icon ('left' of 'right')"
       ]
      },
      "typeValue": {
       "raw": "'left' | 'right'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "left",
        "right"
       ]
      },
      "from": "@epam/uui-core:ButtonCoreProps",
      "required": false
     },
     {
      "uid": 10,
      "name": "onClick",
      "comment": {
       "raw": [
        "Called when component is clicked"
       ]
      },
      "typeValue": {
       "raw": "(e?: any) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IClickable",
      "required": false
     },
     {
      "uid": 11,
      "name": "link",
      "comment": {
       "raw": [
        "Link object to redirect to for SPA-redirects"
       ]
      },
      "typeValue": {
       "raw": "Link"
      },
      "from": "@epam/uui-core:ICanRedirect",
      "required": false
     },
     {
      "uid": 12,
      "name": "href",
      "comment": {
       "raw": [
        "Href (URL) to redirect to, for non-SPA redirects"
       ]
      },
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "from": "@epam/uui-core:ICanRedirect",
      "required": false
     },
     {
      "uid": 13,
      "name": "isLinkActive",
      "comment": {
       "raw": [
        "Highlights component to show that link is active (browser is displaying the page to which link is pointing)"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:ICanRedirect",
      "required": false
     },
     {
      "uid": 14,
      "name": "target",
      "comment": {
       "raw": [
        "Controls where the link should be opened"
       ]
      },
      "typeValue": {
       "raw": "'_blank'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "_blank"
       ]
      },
      "from": "@epam/uui-core:ICanRedirect",
      "required": false
     },
     {
      "uid": 15,
      "name": "isDisabled",
      "comment": {
       "raw": [
        "Disable editing, and visually de-emphasize value of the component"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:IDisableable",
      "required": false
     },
     {
      "uid": 16,
      "name": "iconPosition",
      "comment": {
       "raw": [
        "Position of the icon (left of right)"
       ]
      },
      "typeValue": {
       "raw": "'left' | 'right'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "left",
        "right"
       ]
      },
      "from": "@epam/uui-core:IHasIcon",
      "required": false
     },
     {
      "uid": 17,
      "name": "onIconClick",
      "comment": {
       "raw": [
        "Click handler for the icon"
       ]
      },
      "typeValue": {
       "raw": "() => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IHasIcon",
      "required": false
     },
     {
      "uid": 18,
      "name": "clickAnalyticsEvent",
      "comment": {
       "raw": [
        "An analytics event to send (via AnalyticsContext) when component is clicked.",
        " See [AnalyticsContext](@link https://uui.epam.com/documents?id=analyticsContext&mode=doc&skin=UUI4_promo&category=contexts)."
       ]
      },
      "typeValue": {
       "raw": "null | { [key: string]: any; name: string; }"
      },
      "from": "@epam/uui-core:IAnalyticableClick",
      "required": false
     },
     {
      "uid": 19,
      "name": "tabIndex",
      "comment": {
       "raw": [
        "Controls the order of keyboard navigation between components"
       ]
      },
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "from": "@epam/uui-core:IHasTabIndex",
      "required": false
     },
     {
      "uid": 20,
      "name": "caption",
      "comment": {
       "raw": [
        "Caption. Can be a string, or React.Elements. Certain components supports minimal markup (<b>,<i>,<a>) in captions."
       ]
      },
      "typeValue": {
       "raw": "any"
      },
      "from": "@epam/uui-core:IHasCaption",
      "required": false
     },
     {
      "uid": 21,
      "name": "onClear",
      "comment": {
       "raw": [
        "Call to clear toggler value"
       ]
      },
      "typeValue": {
       "raw": "(e?: any) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IBasicPickerToggler",
      "required": false
     },
     {
      "uid": 22,
      "name": "isOpen",
      "comment": {
       "raw": [
        "When isDropdown=true, indicate that dropdown is open with chevron icon"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:IDropdownToggler",
      "required": false
     },
     {
      "uid": 23,
      "name": "isDropdown",
      "comment": {
       "raw": [
        "Shows chevron icon, enabling component to act as dropdown toggler"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:IDropdownToggler",
      "required": false
     },
     {
      "uid": 24,
      "name": "toggleDropdownOpening",
      "comment": {
       "raw": [
        "Called when associated dropdown should open or close"
       ]
      },
      "typeValue": {
       "raw": "(value: boolean) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IDropdownToggler",
      "required": false
     },
     {
      "uid": 25,
      "name": "isInteractedOutside",
      "comment": {
       "raw": [
        "Called when component is interacted outside, to close the dropdown"
       ]
      },
      "typeValue": {
       "raw": "(event: Event) => boolean"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IDropdownToggler",
      "required": false
     },
     {
      "uid": 26,
      "name": "ref",
      "comment": {
       "raw": [
        "Component's ref"
       ]
      },
      "typeValue": {
       "raw": "null | (instance: any) => void | React.RefObject<any>"
      },
      "from": "@epam/uui-core:IDropdownToggler",
      "required": false
     },
     {
      "uid": 27,
      "name": "forwardedRef",
      "comment": {
       "raw": [
        "this ref is passed to the underlying component"
       ]
      },
      "typeValue": {
       "raw": "null | (instance: HTMLButtonElement | HTMLAnchorElement | null) => void | React.MutableRefObject<HTMLButtonElement | HTMLAnchorElement | null>"
      },
      "from": "@epam/uui-core:IHasForwardedRef",
      "required": false
     },
     {
      "uid": 28,
      "name": "fill",
      "comment": {
       "raw": [
        "@default 'solid'"
       ],
       "tags": {
        "@default": "solid"
       }
      },
      "typeValue": {
       "raw": "'white' | 'solid' | 'light' | 'none'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "white",
        "solid",
        "light",
        "none"
       ]
      },
      "from": "@epam/promo:ButtonMods",
      "required": false
     },
     {
      "uid": 29,
      "name": "color",
      "typeValue": {
       "raw": "'blue' | 'green' | 'red' | 'gray50' | 'gray'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "blue",
        "green",
        "red",
        "gray50",
        "gray"
       ]
      },
      "from": "@epam/promo:ButtonMods",
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/promo:ColorMod": {
   "summary": {
    "module": "@epam/promo",
    "typeName": {
     "name": "ColorMod",
     "nameFull": "ColorMod"
    },
    "src": "epam-promo/components/types.ts",
    "exported": true
   },
   "details": {
    "kind": 263,
    "typeValue": {
     "raw": "ColorMod",
     "print": [
      "// Mod interfaces",
      "interface ColorMod {",
      "    /** Component's base color */",
      "    color?: EpamColor;",
      "}"
     ]
    },
    "props": [
     {
      "uid": 1,
      "name": "color",
      "comment": {
       "raw": [
        "Component's base color"
       ]
      },
      "typeValue": {
       "raw": "'blue' | 'green' | 'amber' | 'red' | 'orange' | 'purple' | 'violet' | 'cyan' | 'white' | 'gray10' | 'gray30' | 'gray60' | 'gray50' | 'gray5' | 'gray20' | 'gray40' | 'gray70' | 'gray80' | 'gray90'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "blue",
        "green",
        "amber",
        "red",
        "orange",
        "purple",
        "violet",
        "cyan",
        "white",
        "gray10",
        "gray30",
        "gray60",
        "gray50",
        "gray5",
        "gray20",
        "gray40",
        "gray70",
        "gray80",
        "gray90"
       ]
      },
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/promo:ControlShape": {
   "summary": {
    "module": "@epam/promo",
    "typeName": {
     "name": "ControlShape",
     "nameFull": "ControlShape"
    },
    "src": "epam-promo/components/types.ts",
    "exported": true
   },
   "details": {
    "kind": 264,
    "typeValue": {
     "raw": "'square' | 'round'",
     "print": [
      "type ControlShape = 'square' | 'round';"
     ]
    }
   }
  },
  "@epam/promo:ControlSize": {
   "summary": {
    "module": "@epam/promo",
    "typeName": {
     "name": "ControlSize",
     "nameFull": "ControlSize"
    },
    "src": "epam-promo/components/types.ts",
    "exported": true
   },
   "details": {
    "kind": 264,
    "typeValue": {
     "raw": "'36' | '48' | '24' | '30' | '42' | 'none'",
     "print": [
      "type ControlSize = 'none' | '24' | '30' | '36' | '42' | '48';"
     ]
    }
   }
  },
  "@epam/promo:CountIndicatorMods": {
   "summary": {
    "module": "@epam/promo",
    "typeName": {
     "name": "CountIndicatorMods",
     "nameFull": "CountIndicatorMods"
    },
    "src": "epam-promo/components/widgets/CountIndicator.tsx",
    "exported": true
   },
   "details": {
    "kind": 263,
    "typeValue": {
     "raw": "CountIndicatorMods",
     "print": [
      "interface CountIndicatorMods {",
      "    color: 'gray' | 'white' | 'blue' | 'green' | 'amber' | 'red' | null;",
      "}"
     ]
    },
    "props": [
     {
      "uid": 1,
      "name": "color",
      "typeValue": {
       "raw": "null | 'blue' | 'green' | 'amber' | 'red' | 'white' | 'gray'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "blue",
        "green",
        "amber",
        "red",
        "white",
        "gray",
        null
       ]
      },
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/promo:CountIndicatorProps": {
   "summary": {
    "module": "@epam/promo",
    "typeName": {
     "name": "CountIndicatorProps",
     "nameFull": "CountIndicatorProps"
    },
    "src": "epam-promo/components/widgets/CountIndicator.tsx",
    "exported": true
   },
   "details": {
    "kind": 264,
    "typeValue": {
     "raw": "CountIndicatorProps",
     "print": [
      "type CountIndicatorProps = Omit<UuiCountIndicatorProps, 'color'> & CountIndicatorMods;"
     ]
    },
    "props": [
     {
      "uid": 1,
      "name": "size",
      "comment": {
       "raw": [
        "@default '24'"
       ],
       "tags": {
        "@default": "24"
       }
      },
      "typeValue": {
       "raw": "'18' | '24' | '12'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "12",
        "18",
        "24"
       ]
      },
      "from": "@epam/uui:CountIndicatorProps",
      "required": false
     },
     {
      "uid": 2,
      "name": "cx",
      "comment": {
       "raw": [
        "CSS class(es) to put on component's root. See {@link https://github.com/JedWatson/classnames#usage} for details"
       ]
      },
      "typeValue": {
       "raw": "null | string | number | boolean | ClassDictionary | ClassArray"
      },
      "from": "@epam/uui-core:IHasCX",
      "required": false
     },
     {
      "uid": 3,
      "name": "caption",
      "comment": {
       "raw": [
        "Caption. Can be a string, or React.Elements. Certain components supports minimal markup (<b>,<i>,<a>) in captions."
       ]
      },
      "typeValue": {
       "raw": "any"
      },
      "from": "@epam/uui-core:IHasCaption",
      "required": false
     },
     {
      "uid": 4,
      "name": "color",
      "typeValue": {
       "raw": "null | 'blue' | 'green' | 'amber' | 'red' | 'white' | 'gray'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "blue",
        "green",
        "amber",
        "red",
        "white",
        "gray",
        null
       ]
      },
      "from": "@epam/promo:CountIndicatorMods",
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/promo:DropdownContainerMods": {
   "summary": {
    "module": "@epam/promo",
    "typeName": {
     "name": "DropdownContainerMods",
     "nameFull": "DropdownContainerMods"
    },
    "src": "epam-promo/components/overlays/DropdownContainer.tsx",
    "exported": true
   },
   "details": {
    "kind": 263,
    "typeValue": {
     "raw": "DropdownContainerMods",
     "print": [
      "interface DropdownContainerMods {",
      "    color?: 'white' | 'gray70';",
      "}"
     ]
    },
    "props": [
     {
      "uid": 1,
      "name": "color",
      "typeValue": {
       "raw": "'white' | 'gray70'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "white",
        "gray70"
       ]
      },
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/promo:DropdownContainerProps": {
   "summary": {
    "module": "@epam/promo",
    "typeName": {
     "name": "DropdownContainerProps",
     "nameFull": "DropdownContainerProps"
    },
    "src": "epam-promo/components/overlays/DropdownContainer.tsx",
    "exported": true
   },
   "details": {
    "kind": 264,
    "typeValue": {
     "raw": "DropdownContainerProps",
     "print": [
      "type DropdownContainerProps = uui.DropdownContainerProps & DropdownContainerMods;"
     ]
    },
    "props": [
     {
      "uid": 1,
      "name": "width",
      "typeValue": {
       "raw": "number | 'auto'"
      },
      "from": "@epam/uui-components:DropdownContainerProps",
      "required": false
     },
     {
      "uid": 2,
      "name": "maxWidth",
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "from": "@epam/uui-components:DropdownContainerProps",
      "required": false
     },
     {
      "uid": 3,
      "name": "height",
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "from": "@epam/uui-components:DropdownContainerProps",
      "required": false
     },
     {
      "uid": 4,
      "name": "showArrow",
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-components:DropdownContainerProps",
      "required": false
     },
     {
      "uid": 5,
      "name": "style",
      "typeValue": {
       "raw": "React.CSSProperties"
      },
      "from": "@epam/uui-components:DropdownContainerProps",
      "required": false
     },
     {
      "uid": 6,
      "name": "focusLock",
      "comment": {
       "raw": [
        "Pass true to wrap DropdownContainer with FocusLock component to support keyboard navigation.",
        " If omitted, true value will be used.",
        "",
        " After DropdownContainer appeared the focus will be set on the first focusable element inside.",
        " @default true"
       ],
       "tags": {
        "@default": true
       }
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-components:DropdownContainerProps",
      "required": false
     },
     {
      "uid": 7,
      "name": "returnFocus",
      "comment": {
       "raw": [
        "Pass true to return focus into initial position on unmount.",
        " If omitted, true value will be used. It's used if focusLock=true."
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-components:DropdownContainerProps",
      "required": false
     },
     {
      "uid": 8,
      "name": "persistentFocus",
      "comment": {
       "raw": [
        "Pass true to lock focus within DropdownContainer.",
        " If omitted, true value will be used. It's used if focusLock=true."
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-components:DropdownContainerProps",
      "required": false
     },
     {
      "uid": 9,
      "name": "lockProps",
      "comment": {
       "raw": [
        "Pass any extra props to the FocusLock wrapper."
       ]
      },
      "typeValue": {
       "raw": "Record<string, any>"
      },
      "from": "@epam/uui-components:DropdownContainerProps",
      "required": false
     },
     {
      "uid": 10,
      "name": "shards",
      "comment": {
       "raw": [
        "Pass an array of ref pointing to the nodes, which focus lock should consider and a part of it. This is a way of focus scattering."
       ]
      },
      "typeValue": {
       "raw": "React.RefObject<HTMLElement>[]"
      },
      "from": "@epam/uui-components:DropdownContainerProps",
      "required": false
     },
     {
      "uid": 11,
      "name": "as",
      "comment": {
       "raw": [
        "Pass element name if you need to change internal FocusLock div element, to any other."
       ]
      },
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "from": "@epam/uui-components:DropdownContainerProps",
      "required": false
     },
     {
      "uid": 12,
      "name": "closeOnEsc",
      "comment": {
       "raw": [
        "Pass true to handle Escape key press and call props.onClose().",
        " If omitted, true value will be used. It's used if focusLock=true."
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-components:DropdownContainerProps",
      "required": false
     },
     {
      "uid": 13,
      "name": "onKeyDown",
      "comment": {
       "raw": [
        "Called on keyDown event in DropdownContainer.",
        "     Can be used to provide your own handlers."
       ]
      },
      "typeValue": {
       "raw": "(e: React.KeyboardEvent<HTMLElement>) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-components:DropdownContainerProps",
      "required": false
     },
     {
      "uid": 14,
      "name": "cx",
      "comment": {
       "raw": [
        "CSS class(es) to put on component's root. See {@link https://github.com/JedWatson/classnames#usage} for details"
       ]
      },
      "typeValue": {
       "raw": "null | string | number | boolean | ClassDictionary | ClassArray"
      },
      "typeValueRef": "@epam/uui-core:ClassValue",
      "from": "@epam/uui-core:IHasCX",
      "required": false
     },
     {
      "uid": 15,
      "name": "children",
      "typeValue": {
       "raw": "null | string | number | boolean | React.ReactElement<any, string | React.JSXElementConstructor<any>> | React.ReactFragment | React.ReactPortal"
      },
      "typeValueRef": "@types/react:ReactNode",
      "from": "@epam/uui-core:IHasChildren",
      "required": false
     },
     {
      "uid": 16,
      "name": "rawProps",
      "comment": {
       "raw": [
        "Any HTML attributes (native or 'data-') to put on the underlying component"
       ]
      },
      "typeValue": {
       "raw": "React.HTMLAttributes<HTMLDivElement> & Record<`data-${string}`, string>"
      },
      "from": "@epam/uui-core:IHasRawProps",
      "required": false
     },
     {
      "uid": 17,
      "name": "forwardedRef",
      "comment": {
       "raw": [
        "this ref is passed to the underlying component"
       ]
      },
      "typeValue": {
       "raw": "null | (instance: HTMLDivElement | null) => void | React.MutableRefObject<HTMLDivElement | null>"
      },
      "from": "@epam/uui-core:IHasForwardedRef",
      "required": false
     },
     {
      "uid": 18,
      "name": "onClose",
      "comment": {
       "raw": [
        "Call to close the Dropdown body"
       ]
      },
      "typeValue": {
       "raw": "() => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IDropdownBodyProps",
      "required": false
     },
     {
      "uid": 19,
      "name": "togglerWidth",
      "comment": {
       "raw": [
        "The width of the toggler, which can be used to adjust the body width to it"
       ]
      },
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "from": "@epam/uui-core:IDropdownBodyProps",
      "required": false
     },
     {
      "uid": 20,
      "name": "togglerHeight",
      "comment": {
       "raw": [
        "The height of the toggler"
       ]
      },
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "from": "@epam/uui-core:IDropdownBodyProps",
      "required": false
     },
     {
      "uid": 21,
      "name": "scheduleUpdate",
      "comment": {
       "raw": [
        "Call to force recompute dropdown position"
       ]
      },
      "typeValue": {
       "raw": "() => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IDropdownBodyProps",
      "required": false
     },
     {
      "uid": 22,
      "name": "isOpen",
      "comment": {
       "raw": [
        "Indicates that dropdown is open"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:IDropdownBodyProps",
      "required": false
     },
     {
      "uid": 23,
      "name": "arrowProps",
      "comment": {
       "raw": [
        "Props that should be provided to the arrow component"
       ]
      },
      "typeValue": {
       "raw": "PopperArrowProps"
      },
      "from": "@epam/uui-core:IDropdownBodyProps",
      "required": false
     },
     {
      "uid": 24,
      "name": "placement",
      "comment": {
       "raw": [
        "Dropdown position relative to the input. See [Popper Docs](@link https://popper.js.org/)"
       ]
      },
      "typeValue": {
       "raw": "'left' | 'right' | 'auto' | 'auto-start' | 'auto-end' | 'top' | 'bottom' | 'top-start' | 'top-end' | 'bottom-start' | 'bottom-end' | 'right-start' | 'right-end' | 'left-start' | 'left-end'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "left",
        "right",
        "auto",
        "auto-start",
        "auto-end",
        "top",
        "bottom",
        "top-start",
        "top-end",
        "bottom-start",
        "bottom-end",
        "right-start",
        "right-end",
        "left-start",
        "left-end"
       ]
      },
      "from": "@epam/uui-core:IDropdownBodyProps",
      "required": false
     },
     {
      "uid": 25,
      "name": "vPadding",
      "typeValue": {
       "raw": "'48' | '18' | '24' | '30' | '12' | '6'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "6",
        "12",
        "18",
        "24",
        "30",
        "48"
       ]
      },
      "from": "@epam/uui:DropdownContainerMods",
      "required": false
     },
     {
      "uid": 26,
      "name": "padding",
      "typeValue": {
       "raw": "'18' | '24' | '30' | '12' | '6'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "6",
        "12",
        "18",
        "24",
        "30"
       ]
      },
      "from": "@epam/uui:DropdownContainerMods",
      "required": false
     },
     {
      "uid": 27,
      "name": "color",
      "typeValue": {
       "raw": "'white' | 'gray70'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "white",
        "gray70"
       ]
      },
      "from": "@epam/promo:DropdownContainerMods",
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/promo:EpamAdditionalColor": {
   "summary": {
    "module": "@epam/promo",
    "typeName": {
     "name": "EpamAdditionalColor",
     "nameFull": "EpamAdditionalColor"
    },
    "src": "epam-promo/components/types.ts",
    "exported": true
   },
   "details": {
    "kind": 264,
    "typeValue": {
     "raw": "'blue' | 'green' | 'amber' | 'red' | 'orange' | 'purple' | 'violet' | 'cyan'",
     "print": [
      "type EpamAdditionalColor = EpamPrimaryColor | 'cyan' | 'orange' | 'purple' | 'violet';"
     ]
    }
   }
  },
  "@epam/promo:EpamColor": {
   "summary": {
    "module": "@epam/promo",
    "typeName": {
     "name": "EpamColor",
     "nameFull": "EpamColor"
    },
    "src": "epam-promo/components/types.ts",
    "exported": true
   },
   "details": {
    "kind": 264,
    "typeValue": {
     "raw": "'blue' | 'green' | 'amber' | 'red' | 'orange' | 'purple' | 'violet' | 'cyan' | 'white' | 'gray10' | 'gray30' | 'gray60' | 'gray50' | 'gray5' | 'gray20' | 'gray40' | 'gray70' | 'gray80' | 'gray90'",
     "print": [
      "type EpamColor = EpamPrimaryColor | EpamGrayscaleColor | EpamAdditionalColor;"
     ]
    }
   }
  },
  "@epam/promo:EpamGrayscaleColor": {
   "summary": {
    "module": "@epam/promo",
    "typeName": {
     "name": "EpamGrayscaleColor",
     "nameFull": "EpamGrayscaleColor"
    },
    "src": "epam-promo/components/types.ts",
    "exported": true
   },
   "details": {
    "kind": 264,
    "typeValue": {
     "raw": "'white' | 'gray10' | 'gray30' | 'gray60' | 'gray50' | 'gray5' | 'gray20' | 'gray40' | 'gray70' | 'gray80' | 'gray90'",
     "print": [
      "type EpamGrayscaleColor = 'white' | 'gray5' | 'gray10' | 'gray20' | 'gray30' | 'gray40' | 'gray50' | 'gray60' | 'gray70' | 'gray80' | 'gray90';"
     ]
    }
   }
  },
  "@epam/promo:EpamPrimaryColor": {
   "summary": {
    "module": "@epam/promo",
    "typeName": {
     "name": "EpamPrimaryColor",
     "nameFull": "EpamPrimaryColor"
    },
    "src": "epam-promo/components/types.ts",
    "exported": true
   },
   "details": {
    "kind": 264,
    "typeValue": {
     "raw": "'blue' | 'green' | 'amber' | 'red'",
     "print": [
      "type EpamPrimaryColor = 'blue' | 'green' | 'amber' | 'red';"
     ]
    }
   }
  },
  "@epam/promo:ErrorHandlerProps": {
   "summary": {
    "module": "@epam/promo",
    "typeName": {
     "name": "ErrorHandlerProps",
     "nameFull": "ErrorHandlerProps"
    },
    "src": "epam-promo/components/errors/ErrorHandler.tsx",
    "exported": true
   },
   "details": {
    "kind": 263,
    "typeValue": {
     "raw": "ErrorHandlerProps",
     "print": [
      "interface ErrorHandlerProps extends IHasCX, IHasChildren {",
      "    getErrorInfo?: (uuiError: UuiError | Error | ApiCallInfo, defaultErrorInfo: ErrorPageInfo) => ErrorPageInfo;",
      "    onNotificationError?: (errors: ApiCallInfo) => void;",
      "}"
     ]
    },
    "props": [
     {
      "uid": 1,
      "name": "getErrorInfo",
      "typeValue": {
       "raw": "(uuiError: UuiError | Error | ApiCallInfo, defaultErrorInfo: ErrorPageInfo) => ErrorPageInfo"
      },
      "editor": {
       "type": "func"
      },
      "required": false
     },
     {
      "uid": 2,
      "name": "onNotificationError",
      "typeValue": {
       "raw": "(errors: ApiCallInfo) => void"
      },
      "editor": {
       "type": "func"
      },
      "required": false
     },
     {
      "uid": 3,
      "name": "cx",
      "comment": {
       "raw": [
        "CSS class(es) to put on component's root. See {@link https://github.com/JedWatson/classnames#usage} for details"
       ]
      },
      "typeValue": {
       "raw": "null | string | number | boolean | ClassDictionary | ClassArray"
      },
      "typeValueRef": "@epam/uui-core:ClassValue",
      "from": "@epam/uui-core:IHasCX",
      "required": false
     },
     {
      "uid": 4,
      "name": "children",
      "typeValue": {
       "raw": "null | string | number | boolean | React.ReactElement<any, string | React.JSXElementConstructor<any>> | React.ReactFragment | React.ReactPortal"
      },
      "typeValueRef": "@types/react:ReactNode",
      "from": "@epam/uui-core:IHasChildren",
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/promo:FillStyle": {
   "summary": {
    "module": "@epam/promo",
    "typeName": {
     "name": "FillStyle",
     "nameFull": "FillStyle"
    },
    "src": "epam-promo/components/types.ts",
    "exported": true
   },
   "details": {
    "kind": 264,
    "typeValue": {
     "raw": "'white' | 'solid' | 'light' | 'none'",
     "print": [
      "type FillStyle = 'solid' | 'white' | 'light' | 'none';"
     ]
    }
   }
  },
  "@epam/promo:FlexRowProps": {
   "summary": {
    "module": "@epam/promo",
    "typeName": {
     "name": "FlexRowProps",
     "nameFull": "FlexRowProps"
    },
    "src": "epam-promo/components/layout/FlexItems/FlexRow.tsx",
    "exported": true
   },
   "details": {
    "kind": 264,
    "typeValue": {
     "raw": "FlexRowProps",
     "print": [
      "type FlexRowProps = uui.FlexRowProps & RowMods;"
     ]
    },
    "props": [
     {
      "uid": 1,
      "name": "children",
      "typeValue": {
       "raw": "null | string | number | boolean | React.ReactElement<any, string | React.JSXElementConstructor<any>> | React.ReactFragment | React.ReactPortal"
      },
      "from": "@epam/uui-core:IHasChildren",
      "required": false
     },
     {
      "uid": 2,
      "name": "cx",
      "comment": {
       "raw": [
        "CSS class(es) to put on component's root. See {@link https://github.com/JedWatson/classnames#usage} for details"
       ]
      },
      "typeValue": {
       "raw": "null | string | number | boolean | ClassDictionary | ClassArray"
      },
      "from": "@epam/uui-core:IHasCX",
      "required": false
     },
     {
      "uid": 3,
      "name": "rawProps",
      "comment": {
       "raw": [
        "Any HTML attributes (native or 'data-') to put on the underlying component"
       ]
      },
      "typeValue": {
       "raw": "React.HTMLAttributes<HTMLDivElement> & Record<`data-${string}`, string>"
      },
      "from": "@epam/uui-core:IHasRawProps",
      "required": false
     },
     {
      "uid": 4,
      "name": "onClick",
      "comment": {
       "raw": [
        "Called when component is clicked"
       ]
      },
      "typeValue": {
       "raw": "(e?: any) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IClickable",
      "required": false
     },
     {
      "uid": 5,
      "name": "key",
      "typeValue": {
       "raw": "null | string | number"
      },
      "from": "@types/react:Attributes",
      "required": false
     },
     {
      "uid": 6,
      "name": "alignItems",
      "comment": {
       "raw": [
        "Flexbox align-items property [Flexbox Guide](https://css-tricks.com/snippets/css/a-guide-to-flexbox/)"
       ]
      },
      "typeValue": {
       "raw": "'top' | 'bottom' | 'center' | 'stretch'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "top",
        "bottom",
        "center",
        "stretch"
       ]
      },
      "from": "@epam/uui-core:FlexRowProps",
      "required": false
     },
     {
      "uid": 7,
      "name": "background",
      "comment": {
       "raw": [
        "@default 'none'"
       ],
       "tags": {
        "@default": "none"
       }
      },
      "typeValue": {
       "raw": "'white' | 'none' | 'gray5'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "white",
        "none",
        "gray5"
       ]
      },
      "from": "@epam/promo:RowMods",
      "required": false
     },
     {
      "uid": 8,
      "name": "size",
      "typeValue": {
       "raw": "null | '36' | '48' | '24' | '30' | '42'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "24",
        "30",
        "36",
        "42",
        "48",
        null
       ]
      },
      "from": "@epam/uui:RowSizeMod",
      "required": false
     },
     {
      "uid": 9,
      "name": "columnGap",
      "typeValue": {
       "raw": "number | '36' | '18' | '24' | '12' | '6'"
      },
      "from": "@epam/uui:RowMods",
      "required": false
     },
     {
      "uid": 10,
      "name": "rowGap",
      "typeValue": {
       "raw": "number | '36' | '18' | '24' | '12' | '6'"
      },
      "from": "@epam/uui:RowMods",
      "required": false
     },
     {
      "uid": 11,
      "name": "borderBottom",
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui:RowMods",
      "required": false
     },
     {
      "uid": 12,
      "name": "margin",
      "typeValue": {
       "raw": "'24' | '12'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "12",
        "24"
       ]
      },
      "from": "@epam/uui:RowMods",
      "required": false
     },
     {
      "uid": 13,
      "name": "padding",
      "typeValue": {
       "raw": "'18' | '24' | '12' | '6'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "6",
        "12",
        "18",
        "24"
       ]
      },
      "from": "@epam/uui:RowMods",
      "required": false
     },
     {
      "uid": 14,
      "name": "spacing",
      "typeValue": {
       "raw": "'18' | '12' | '6'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "6",
        "12",
        "18"
       ]
      },
      "from": "@epam/uui:RowMods",
      "required": false
     },
     {
      "uid": 15,
      "name": "topShadow",
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui:RowMods",
      "required": false
     },
     {
      "uid": 16,
      "name": "vPadding",
      "typeValue": {
       "raw": "'36' | '48' | '18' | '24' | '12'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "12",
        "18",
        "24",
        "36",
        "48"
       ]
      },
      "from": "@epam/uui:RowMods",
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/promo:FontMod": {
   "summary": {
    "module": "@epam/promo",
    "typeName": {
     "name": "FontMod",
     "nameFull": "FontMod"
    },
    "src": "epam-promo/components/types.ts",
    "exported": true
   },
   "details": {
    "kind": 263,
    "typeValue": {
     "raw": "FontMod",
     "print": [
      "interface FontMod {",
      "    /** Font to use for text */",
      "    font?: FontStyle;",
      "}"
     ]
    },
    "props": [
     {
      "uid": 1,
      "name": "font",
      "comment": {
       "raw": [
        "Font to use for text"
       ]
      },
      "typeValue": {
       "raw": "'sans' | 'sans-semibold' | 'sans-italic' | 'museo-sans' | 'museo-slab'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "sans",
        "sans-semibold",
        "sans-italic",
        "museo-sans",
        "museo-slab"
       ]
      },
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/promo:FontStyle": {
   "summary": {
    "module": "@epam/promo",
    "typeName": {
     "name": "FontStyle",
     "nameFull": "FontStyle"
    },
    "src": "epam-promo/components/types.ts",
    "exported": true
   },
   "details": {
    "kind": 264,
    "typeValue": {
     "raw": "'sans' | 'sans-semibold' | 'sans-italic' | 'museo-sans' | 'museo-slab'",
     "print": [
      "type FontStyle = 'sans' | 'sans-semibold' | 'sans-italic' | 'museo-sans' | 'museo-slab';"
     ]
    }
   }
  },
  "@epam/promo:IconButtonMods": {
   "summary": {
    "module": "@epam/promo",
    "typeName": {
     "name": "IconButtonMods",
     "nameFull": "IconButtonMods"
    },
    "src": "epam-promo/components/buttons/IconButton.tsx",
    "exported": true
   },
   "details": {
    "kind": 263,
    "typeValue": {
     "raw": "IconButtonMods",
     "print": [
      "interface IconButtonMods {",
      "    /**",
      "     * @default 'gray60'",
      "     */",
      "    color?: IconColor;",
      "}"
     ]
    },
    "props": [
     {
      "uid": 1,
      "name": "color",
      "comment": {
       "raw": [
        "@default 'gray60'"
       ],
       "tags": {
        "@default": "gray60"
       }
      },
      "typeValue": {
       "raw": "'blue' | 'green' | 'amber' | 'red' | 'gray30' | 'gray60' | 'gray50'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "blue",
        "green",
        "amber",
        "red",
        "gray30",
        "gray60",
        "gray50"
       ]
      },
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/promo:IconButtonProps": {
   "summary": {
    "module": "@epam/promo",
    "typeName": {
     "name": "IconButtonProps",
     "nameFull": "IconButtonProps"
    },
    "src": "epam-promo/components/buttons/IconButton.tsx",
    "exported": true
   },
   "details": {
    "kind": 264,
    "typeValue": {
     "raw": "IconButtonProps",
     "print": [
      "type IconButtonProps = Omit<UuiIconButtonProps, 'color'> & IconButtonMods;"
     ]
    },
    "props": [
     {
      "uid": 1,
      "name": "icon",
      "comment": {
       "raw": [
        "Icon can be a React element (usually an SVG element)"
       ]
      },
      "typeValue": {
       "raw": "Icon"
      },
      "editor": {
       "type": "component"
      },
      "from": "@epam/uui-core:IHasIcon",
      "required": false
     },
     {
      "uid": 2,
      "name": "cx",
      "comment": {
       "raw": [
        "CSS class(es) to put on component's root. See {@link https://github.com/JedWatson/classnames#usage} for details"
       ]
      },
      "typeValue": {
       "raw": "null | string | number | boolean | ClassDictionary | ClassArray"
      },
      "from": "@epam/uui-core:IHasCX",
      "required": false
     },
     {
      "uid": 3,
      "name": "rawProps",
      "comment": {
       "raw": [
        "Any HTML attributes (native or 'data-') to put on the underlying component"
       ]
      },
      "typeValue": {
       "raw": "React.ButtonHTMLAttributes<HTMLButtonElement> & Record<`data-${string}`, string>"
      },
      "from": "@epam/uui-core:IHasRawProps",
      "required": false
     },
     {
      "uid": 4,
      "name": "onClick",
      "comment": {
       "raw": [
        "Called when component is clicked"
       ]
      },
      "typeValue": {
       "raw": "(e?: any) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IClickable",
      "required": false
     },
     {
      "uid": 5,
      "name": "link",
      "comment": {
       "raw": [
        "Link object to redirect to for SPA-redirects"
       ]
      },
      "typeValue": {
       "raw": "Link"
      },
      "from": "@epam/uui-core:ICanRedirect",
      "required": false
     },
     {
      "uid": 6,
      "name": "href",
      "comment": {
       "raw": [
        "Href (URL) to redirect to, for non-SPA redirects"
       ]
      },
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "from": "@epam/uui-core:ICanRedirect",
      "required": false
     },
     {
      "uid": 7,
      "name": "isLinkActive",
      "comment": {
       "raw": [
        "Highlights component to show that link is active (browser is displaying the page to which link is pointing)"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:ICanRedirect",
      "required": false
     },
     {
      "uid": 8,
      "name": "target",
      "comment": {
       "raw": [
        "Controls where the link should be opened"
       ]
      },
      "typeValue": {
       "raw": "'_blank'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "_blank"
       ]
      },
      "from": "@epam/uui-core:ICanRedirect",
      "required": false
     },
     {
      "uid": 9,
      "name": "isDisabled",
      "comment": {
       "raw": [
        "Disable editing, and visually de-emphasize value of the component"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:IDisableable",
      "required": false
     },
     {
      "uid": 10,
      "name": "iconPosition",
      "comment": {
       "raw": [
        "Position of the icon (left of right)"
       ]
      },
      "typeValue": {
       "raw": "'left' | 'right'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "left",
        "right"
       ]
      },
      "from": "@epam/uui-core:IHasIcon",
      "required": false
     },
     {
      "uid": 11,
      "name": "onIconClick",
      "comment": {
       "raw": [
        "Click handler for the icon"
       ]
      },
      "typeValue": {
       "raw": "() => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IHasIcon",
      "required": false
     },
     {
      "uid": 12,
      "name": "clickAnalyticsEvent",
      "comment": {
       "raw": [
        "An analytics event to send (via AnalyticsContext) when component is clicked.",
        " See [AnalyticsContext](@link https://uui.epam.com/documents?id=analyticsContext&mode=doc&skin=UUI4_promo&category=contexts)."
       ]
      },
      "typeValue": {
       "raw": "null | { [key: string]: any; name: string; }"
      },
      "from": "@epam/uui-core:IAnalyticableClick",
      "required": false
     },
     {
      "uid": 13,
      "name": "tabIndex",
      "comment": {
       "raw": [
        "Controls the order of keyboard navigation between components"
       ]
      },
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "from": "@epam/uui-core:IHasTabIndex",
      "required": false
     },
     {
      "uid": 14,
      "name": "forwardedRef",
      "comment": {
       "raw": [
        "this ref is passed to the underlying component"
       ]
      },
      "typeValue": {
       "raw": "null | (instance: HTMLButtonElement | HTMLAnchorElement | null) => void | React.MutableRefObject<HTMLButtonElement | HTMLAnchorElement | null>"
      },
      "from": "@epam/uui-core:IHasForwardedRef",
      "required": false
     },
     {
      "uid": 15,
      "name": "color",
      "comment": {
       "raw": [
        "@default 'gray60'"
       ],
       "tags": {
        "@default": "gray60"
       }
      },
      "typeValue": {
       "raw": "'blue' | 'green' | 'amber' | 'red' | 'gray30' | 'gray60' | 'gray50'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "blue",
        "green",
        "amber",
        "red",
        "gray30",
        "gray60",
        "gray50"
       ]
      },
      "from": "@epam/promo:IconButtonMods",
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/promo:IconColor": {
   "summary": {
    "module": "@epam/promo",
    "typeName": {
     "name": "IconColor",
     "nameFull": "IconColor"
    },
    "src": "epam-promo/components/buttons/IconButton.tsx",
    "exported": true
   },
   "details": {
    "kind": 264,
    "typeValue": {
     "raw": "'blue' | 'green' | 'amber' | 'red' | 'gray30' | 'gray60' | 'gray50'",
     "print": [
      "type IconColor = EpamPrimaryColor | 'gray30' | 'gray50' | 'gray60';"
     ]
    }
   }
  },
  "@epam/promo:IconContainerColors": {
   "summary": {
    "module": "@epam/promo",
    "typeName": {
     "name": "IconContainerColors",
     "nameFull": "IconContainerColors"
    },
    "src": "epam-promo/components/layout/IconContainer.tsx",
    "exported": true
   },
   "details": {
    "kind": 264,
    "typeValue": {
     "raw": "'blue' | 'green' | 'amber' | 'red' | 'orange' | 'purple' | 'violet' | 'cyan' | 'white' | 'gray10' | 'gray30' | 'gray60' | 'gray50' | 'gray5' | 'gray20' | 'gray40' | 'gray70' | 'gray80' | 'gray90'",
     "print": [
      "type IconContainerColors = 'blue' | 'green' | 'amber' | 'red' | 'cyan' | 'orange' | 'purple' | 'violet' | 'white' | 'gray5' | 'gray10' | 'gray20' | 'gray30' | 'gray40' | 'gray50' | 'gray60' | 'gray70' | 'gray80' | 'gray90';"
     ]
    }
   }
  },
  "@epam/promo:IconContainerMods": {
   "summary": {
    "module": "@epam/promo",
    "typeName": {
     "name": "IconContainerMods",
     "nameFull": "IconContainerMods"
    },
    "src": "epam-promo/components/layout/IconContainer.tsx",
    "exported": true
   },
   "details": {
    "kind": 263,
    "typeValue": {
     "raw": "IconContainerMods",
     "print": [
      "interface IconContainerMods {",
      "    /**",
      "     *  IconContainer color.",
      "     *  @deprecated Property color is deprecated and will be removed in future release. Please make icon color configuration by yourself, e.g. via cx or style prop.",
      "     *  @default 'gray60'",
      "     */",
      "    color?: IconContainerColors;",
      "}"
     ]
    },
    "props": [
     {
      "uid": 1,
      "name": "color",
      "comment": {
       "raw": [
        "IconContainer color.",
        "  @deprecated Property color is deprecated and will be removed in future release. Please make icon color configuration by yourself, e.g. via cx or style prop.",
        "  @default 'gray60'"
       ],
       "tags": {
        "@default": "gray60"
       }
      },
      "typeValue": {
       "raw": "'blue' | 'green' | 'amber' | 'red' | 'orange' | 'purple' | 'violet' | 'cyan' | 'white' | 'gray10' | 'gray30' | 'gray60' | 'gray50' | 'gray5' | 'gray20' | 'gray40' | 'gray70' | 'gray80' | 'gray90'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "blue",
        "green",
        "amber",
        "red",
        "orange",
        "purple",
        "violet",
        "cyan",
        "white",
        "gray10",
        "gray30",
        "gray60",
        "gray50",
        "gray5",
        "gray20",
        "gray40",
        "gray70",
        "gray80",
        "gray90"
       ]
      },
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/promo:IconContainerProps": {
   "summary": {
    "module": "@epam/promo",
    "typeName": {
     "name": "IconContainerProps",
     "nameFull": "IconContainerProps"
    },
    "src": "epam-promo/components/layout/IconContainer.tsx",
    "exported": true
   },
   "details": {
    "kind": 264,
    "typeValue": {
     "raw": "IconContainerProps",
     "print": [
      "type IconContainerProps = ControlIconProps & IconContainerMods;"
     ]
    },
    "props": [
     {
      "uid": 1,
      "name": "icon",
      "comment": {
       "raw": [
        "Icon to display"
       ]
      },
      "typeValue": {
       "raw": "Icon"
      },
      "editor": {
       "type": "component"
      },
      "from": "@epam/uui-components:ControlIconProps",
      "required": false
     },
     {
      "uid": 2,
      "name": "flipY",
      "comment": {
       "raw": [
        "Flips the icon vertically"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-components:ControlIconProps",
      "required": false
     },
     {
      "uid": 3,
      "name": "rotate",
      "comment": {
       "raw": [
        "Rotate the icon (cw stands for 'clock-wise', ccw stands for 'counter clock-wise))"
       ]
      },
      "typeValue": {
       "raw": "'0' | '90cw' | '180' | '90ccw'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "0",
        "180",
        "90cw",
        "90ccw"
       ]
      },
      "from": "@epam/uui-components:ControlIconProps",
      "required": false
     },
     {
      "uid": 4,
      "name": "onClick",
      "comment": {
       "raw": [
        "Click handler"
       ]
      },
      "typeValue": {
       "raw": "(e: React.SyntheticEvent<HTMLDivElement, Event>) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-components:ControlIconProps",
      "required": false
     },
     {
      "uid": 5,
      "name": "style",
      "comment": {
       "raw": [
        "CSS style prop to put on the component"
       ]
      },
      "typeValue": {
       "raw": "React.CSSProperties"
      },
      "from": "@epam/uui-components:ControlIconProps",
      "required": false
     },
     {
      "uid": 6,
      "name": "size",
      "comment": {
       "raw": [
        "Icon size in pixels (both width and height, as icons are assumed to be square-shaped)"
       ]
      },
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "from": "@epam/uui-components:ControlIconProps",
      "required": false
     },
     {
      "uid": 7,
      "name": "cx",
      "comment": {
       "raw": [
        "CSS class(es) to put on component's root. See {@link https://github.com/JedWatson/classnames#usage} for details"
       ]
      },
      "typeValue": {
       "raw": "null | string | number | boolean | ClassDictionary | ClassArray"
      },
      "typeValueRef": "@epam/uui-core:ClassValue",
      "from": "@epam/uui-core:IHasCX",
      "required": false
     },
     {
      "uid": 8,
      "name": "isDisabled",
      "comment": {
       "raw": [
        "Disable editing, and visually de-emphasize value of the component"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:IDisableable",
      "required": false
     },
     {
      "uid": 9,
      "name": "rawProps",
      "comment": {
       "raw": [
        "Any HTML attributes (native or 'data-') to put on the underlying component"
       ]
      },
      "typeValue": {
       "raw": "React.HTMLAttributes<HTMLDivElement> & Record<`data-${string}`, string>"
      },
      "from": "@epam/uui-core:IHasRawProps",
      "required": false
     },
     {
      "uid": 10,
      "name": "tabIndex",
      "comment": {
       "raw": [
        "Controls the order of keyboard navigation between components"
       ]
      },
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "from": "@epam/uui-core:IHasTabIndex",
      "required": false
     },
     {
      "uid": 11,
      "name": "color",
      "comment": {
       "raw": [
        "IconContainer color.",
        "  @deprecated Property color is deprecated and will be removed in future release. Please make icon color configuration by yourself, e.g. via cx or style prop.",
        "  @default 'gray60'"
       ],
       "tags": {
        "@default": "gray60"
       }
      },
      "typeValue": {
       "raw": "'blue' | 'green' | 'amber' | 'red' | 'orange' | 'purple' | 'violet' | 'cyan' | 'white' | 'gray10' | 'gray30' | 'gray60' | 'gray50' | 'gray5' | 'gray20' | 'gray40' | 'gray70' | 'gray80' | 'gray90'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "blue",
        "green",
        "amber",
        "red",
        "orange",
        "purple",
        "violet",
        "cyan",
        "white",
        "gray10",
        "gray30",
        "gray60",
        "gray50",
        "gray5",
        "gray20",
        "gray40",
        "gray70",
        "gray80",
        "gray90"
       ]
      },
      "from": "@epam/promo:IconContainerMods",
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/promo:LinkButtonMods": {
   "summary": {
    "module": "@epam/promo",
    "typeName": {
     "name": "LinkButtonMods",
     "nameFull": "LinkButtonMods"
    },
    "src": "epam-promo/components/buttons/LinkButton.tsx",
    "exported": true
   },
   "details": {
    "kind": 263,
    "typeValue": {
     "raw": "LinkButtonMods",
     "print": [
      "interface LinkButtonMods {",
      "    /**",
      "     * @default 'blue'",
      "     */",
      "    color?: 'blue' | 'green' | 'amber' | 'red' | 'gray60' | 'gray10';",
      "}"
     ]
    },
    "props": [
     {
      "uid": 1,
      "name": "color",
      "comment": {
       "raw": [
        "@default 'blue'"
       ],
       "tags": {
        "@default": "blue"
       }
      },
      "typeValue": {
       "raw": "'blue' | 'green' | 'amber' | 'red' | 'gray10' | 'gray60'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "blue",
        "green",
        "amber",
        "red",
        "gray10",
        "gray60"
       ]
      },
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/promo:LinkButtonProps": {
   "summary": {
    "module": "@epam/promo",
    "typeName": {
     "name": "LinkButtonProps",
     "nameFull": "LinkButtonProps"
    },
    "src": "epam-promo/components/buttons/LinkButton.tsx",
    "exported": true
   },
   "details": {
    "kind": 264,
    "typeValue": {
     "raw": "LinkButtonProps",
     "print": [
      "type LinkButtonProps = Omit<UuiLinkButtonProps, 'color'> & LinkButtonMods;"
     ]
    },
    "props": [
     {
      "uid": 1,
      "name": "icon",
      "comment": {
       "raw": [
        "Icon can be a React element (usually an SVG element)"
       ]
      },
      "typeValue": {
       "raw": "Icon"
      },
      "editor": {
       "type": "component"
      },
      "from": "@epam/uui-core:IHasIcon",
      "required": false
     },
     {
      "uid": 2,
      "name": "size",
      "comment": {
       "raw": [
        "@default '36'"
       ],
       "tags": {
        "@default": "36"
       }
      },
      "typeValue": {
       "raw": "'36' | '48' | '24' | '30' | '42' | 'none'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "24",
        "30",
        "36",
        "42",
        "48",
        "none"
       ]
      },
      "from": "@epam/uui:LinkButtonMods",
      "required": false
     },
     {
      "uid": 3,
      "name": "cx",
      "comment": {
       "raw": [
        "CSS class(es) to put on component's root. See {@link https://github.com/JedWatson/classnames#usage} for details"
       ]
      },
      "typeValue": {
       "raw": "null | string | number | boolean | ClassDictionary | ClassArray"
      },
      "from": "@epam/uui-core:IHasCX",
      "required": false
     },
     {
      "uid": 4,
      "name": "rawProps",
      "comment": {
       "raw": [
        "Any HTML attributes (native or 'data-') to put on the underlying component"
       ]
      },
      "typeValue": {
       "raw": "React.ButtonHTMLAttributes<HTMLButtonElement> & Record<`data-${string}`, string>"
      },
      "from": "@epam/uui-core:IHasRawProps",
      "required": false
     },
     {
      "uid": 5,
      "name": "clearIcon",
      "comment": {
       "raw": [
        "Icon for clear value button (usually cross)"
       ]
      },
      "typeValue": {
       "raw": "Icon"
      },
      "editor": {
       "type": "component"
      },
      "from": "@epam/uui-components:ButtonProps",
      "required": false
     },
     {
      "uid": 6,
      "name": "captionCX",
      "comment": {
       "raw": [
        "CSS classes to put on the caption"
       ]
      },
      "typeValue": {
       "raw": "null | string | number | boolean | ClassDictionary | ClassArray"
      },
      "from": "@epam/uui-components:ButtonProps",
      "required": false
     },
     {
      "uid": 7,
      "name": "countIndicator",
      "comment": {
       "raw": [
        "CountIndicator component"
       ]
      },
      "typeValue": {
       "raw": "React.ComponentClass<IHasCaption, any> | React.FunctionComponent<IHasCaption>"
      },
      "from": "@epam/uui-components:ButtonProps",
      "required": false
     },
     {
      "uid": 8,
      "name": "dropdownIcon",
      "comment": {
       "raw": [
        "Icon for drop-down toggler"
       ]
      },
      "typeValue": {
       "raw": "Icon"
      },
      "editor": {
       "type": "component"
      },
      "from": "@epam/uui-core:ButtonCoreProps",
      "required": false
     },
     {
      "uid": 9,
      "name": "dropdownIconPosition",
      "comment": {
       "raw": [
        "Position of the dropdown icon ('left' of 'right')"
       ]
      },
      "typeValue": {
       "raw": "'left' | 'right'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "left",
        "right"
       ]
      },
      "from": "@epam/uui-core:ButtonCoreProps",
      "required": false
     },
     {
      "uid": 10,
      "name": "count",
      "typeValue": {
       "raw": "null | string | number | boolean | React.ReactElement<any, string | React.JSXElementConstructor<any>> | React.ReactFragment | React.ReactPortal"
      },
      "from": "@epam/uui-core:ButtonCoreProps",
      "required": false
     },
     {
      "uid": 11,
      "name": "onClick",
      "comment": {
       "raw": [
        "Called when component is clicked"
       ]
      },
      "typeValue": {
       "raw": "(e?: any) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IClickable",
      "required": false
     },
     {
      "uid": 12,
      "name": "link",
      "comment": {
       "raw": [
        "Link object to redirect to for SPA-redirects"
       ]
      },
      "typeValue": {
       "raw": "Link"
      },
      "from": "@epam/uui-core:ICanRedirect",
      "required": false
     },
     {
      "uid": 13,
      "name": "href",
      "comment": {
       "raw": [
        "Href (URL) to redirect to, for non-SPA redirects"
       ]
      },
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "from": "@epam/uui-core:ICanRedirect",
      "required": false
     },
     {
      "uid": 14,
      "name": "isLinkActive",
      "comment": {
       "raw": [
        "Highlights component to show that link is active (browser is displaying the page to which link is pointing)"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:ICanRedirect",
      "required": false
     },
     {
      "uid": 15,
      "name": "target",
      "comment": {
       "raw": [
        "Controls where the link should be opened"
       ]
      },
      "typeValue": {
       "raw": "'_blank'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "_blank"
       ]
      },
      "from": "@epam/uui-core:ICanRedirect",
      "required": false
     },
     {
      "uid": 16,
      "name": "isDisabled",
      "comment": {
       "raw": [
        "Disable editing, and visually de-emphasize value of the component"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:IDisableable",
      "required": false
     },
     {
      "uid": 17,
      "name": "iconPosition",
      "comment": {
       "raw": [
        "Position of the icon (left of right)"
       ]
      },
      "typeValue": {
       "raw": "'left' | 'right'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "left",
        "right"
       ]
      },
      "from": "@epam/uui-core:IHasIcon",
      "required": false
     },
     {
      "uid": 18,
      "name": "onIconClick",
      "comment": {
       "raw": [
        "Click handler for the icon"
       ]
      },
      "typeValue": {
       "raw": "() => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IHasIcon",
      "required": false
     },
     {
      "uid": 19,
      "name": "clickAnalyticsEvent",
      "comment": {
       "raw": [
        "An analytics event to send (via AnalyticsContext) when component is clicked.",
        " See [AnalyticsContext](@link https://uui.epam.com/documents?id=analyticsContext&mode=doc&skin=UUI4_promo&category=contexts)."
       ]
      },
      "typeValue": {
       "raw": "null | { [key: string]: any; name: string; }"
      },
      "from": "@epam/uui-core:IAnalyticableClick",
      "required": false
     },
     {
      "uid": 20,
      "name": "tabIndex",
      "comment": {
       "raw": [
        "Controls the order of keyboard navigation between components"
       ]
      },
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "from": "@epam/uui-core:IHasTabIndex",
      "required": false
     },
     {
      "uid": 21,
      "name": "caption",
      "comment": {
       "raw": [
        "Caption. Can be a string, or React.Elements. Certain components supports minimal markup (<b>,<i>,<a>) in captions."
       ]
      },
      "typeValue": {
       "raw": "any"
      },
      "from": "@epam/uui-core:IHasCaption",
      "required": false
     },
     {
      "uid": 22,
      "name": "onClear",
      "comment": {
       "raw": [
        "Call to clear toggler value"
       ]
      },
      "typeValue": {
       "raw": "(e?: any) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IBasicPickerToggler",
      "required": false
     },
     {
      "uid": 23,
      "name": "isOpen",
      "comment": {
       "raw": [
        "When isDropdown=true, indicate that dropdown is open with chevron icon"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:IDropdownToggler",
      "required": false
     },
     {
      "uid": 24,
      "name": "isDropdown",
      "comment": {
       "raw": [
        "Shows chevron icon, enabling component to act as dropdown toggler"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:IDropdownToggler",
      "required": false
     },
     {
      "uid": 25,
      "name": "toggleDropdownOpening",
      "comment": {
       "raw": [
        "Called when associated dropdown should open or close"
       ]
      },
      "typeValue": {
       "raw": "(value: boolean) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IDropdownToggler",
      "required": false
     },
     {
      "uid": 26,
      "name": "isInteractedOutside",
      "comment": {
       "raw": [
        "Called when component is interacted outside, to close the dropdown"
       ]
      },
      "typeValue": {
       "raw": "(event: Event) => boolean"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IDropdownToggler",
      "required": false
     },
     {
      "uid": 27,
      "name": "ref",
      "comment": {
       "raw": [
        "Component's ref"
       ]
      },
      "typeValue": {
       "raw": "null | (instance: any) => void | React.RefObject<any>"
      },
      "from": "@epam/uui-core:IDropdownToggler",
      "required": false
     },
     {
      "uid": 28,
      "name": "forwardedRef",
      "comment": {
       "raw": [
        "this ref is passed to the underlying component"
       ]
      },
      "typeValue": {
       "raw": "null | (instance: HTMLButtonElement | HTMLAnchorElement | null) => void | React.MutableRefObject<HTMLButtonElement | HTMLAnchorElement | null>"
      },
      "from": "@epam/uui-core:IHasForwardedRef",
      "required": false
     },
     {
      "uid": 29,
      "name": "color",
      "comment": {
       "raw": [
        "@default 'blue'"
       ],
       "tags": {
        "@default": "blue"
       }
      },
      "typeValue": {
       "raw": "'blue' | 'green' | 'amber' | 'red' | 'gray10' | 'gray60'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "blue",
        "green",
        "amber",
        "red",
        "gray10",
        "gray60"
       ]
      },
      "from": "@epam/promo:LinkButtonMods",
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/promo:ModalWindowMods": {
   "summary": {
    "module": "@epam/promo",
    "typeName": {
     "name": "ModalWindowMods",
     "nameFull": "ModalWindowMods"
    },
    "src": "epam-promo/components/overlays/ModalWindow.tsx",
    "exported": true
   },
   "details": {
    "kind": 263,
    "typeValue": {
     "raw": "ModalWindowMods",
     "print": [
      "interface ModalWindowMods {",
      "    width?: '300' | '420' | '600' | '900' | number;",
      "    height?: '300' | '700' | 'auto' | number;",
      "}"
     ]
    },
    "props": [
     {
      "uid": 1,
      "name": "width",
      "typeValue": {
       "raw": "number | '300' | '420' | '600' | '900'"
      },
      "required": false
     },
     {
      "uid": 2,
      "name": "height",
      "typeValue": {
       "raw": "number | 'auto' | '300' | '700'"
      },
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/promo:MultiSwitchColor": {
   "summary": {
    "module": "@epam/promo",
    "typeName": {
     "name": "MultiSwitchColor",
     "nameFull": "MultiSwitchColor"
    },
    "src": "epam-promo/components/inputs/MultiSwitch.tsx",
    "exported": true
   },
   "details": {
    "kind": 264,
    "typeValue": {
     "raw": "'blue' | 'gray50' | 'gray'",
     "print": [
      "type MultiSwitchColor = 'blue' | 'gray50' | 'gray';"
     ]
    }
   }
  },
  "@epam/promo:MultiSwitchMods": {
   "summary": {
    "module": "@epam/promo",
    "typeName": {
     "name": "MultiSwitchMods",
     "nameFull": "MultiSwitchMods"
    },
    "src": "epam-promo/components/inputs/MultiSwitch.tsx",
    "exported": true
   },
   "details": {
    "kind": 263,
    "typeValue": {
     "raw": "MultiSwitchMods",
     "print": [
      "interface MultiSwitchMods {",
      "    /**",
      "     * @default 'blue'",
      "     */",
      "    color?: MultiSwitchColor;",
      "}"
     ]
    },
    "props": [
     {
      "uid": 1,
      "name": "color",
      "comment": {
       "raw": [
        "@default 'blue'"
       ],
       "tags": {
        "@default": "blue"
       }
      },
      "typeValue": {
       "raw": "'blue' | 'gray50' | 'gray'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "blue",
        "gray50",
        "gray"
       ]
      },
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/promo:MultiSwitchProps": {
   "summary": {
    "module": "@epam/promo",
    "typeName": {
     "name": "MultiSwitchProps",
     "nameFull": "MultiSwitchProps<TValue>"
    },
    "src": "epam-promo/components/inputs/MultiSwitch.tsx",
    "exported": true
   },
   "details": {
    "kind": 264,
    "typeValue": {
     "raw": "MultiSwitchProps<TValue>",
     "print": [
      "type MultiSwitchProps<TValue> = Omit<UuiMultiSwitchProps<TValue>, 'color'> & MultiSwitchMods;"
     ]
    },
    "props": [
     {
      "uid": 1,
      "name": "size",
      "typeValue": {
       "raw": "'36' | '48' | '24' | '30' | '42' | 'none'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "24",
        "30",
        "36",
        "42",
        "48",
        "none"
       ]
      },
      "from": "@epam/uui:SizeMod",
      "required": false
     },
     {
      "uid": 2,
      "name": "rawProps",
      "comment": {
       "raw": [
        "Any HTML attributes (native or 'data-') to put on the underlying component"
       ]
      },
      "typeValue": {
       "raw": "React.HTMLAttributes<HTMLDivElement> & Record<`data-${string}`, string>"
      },
      "from": "@epam/uui-core:IHasRawProps",
      "required": false
     },
     {
      "uid": 3,
      "name": "isDisabled",
      "comment": {
       "raw": [
        "Disable editing, and visually de-emphasize value of the component"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:IDisableable",
      "required": false
     },
     {
      "uid": 4,
      "name": "items",
      "typeValue": {
       "raw": "MultiSwitchItem<TValue>[]"
      },
      "from": "@epam/uui:MultiSwitchProps",
      "required": true
     },
     {
      "uid": 5,
      "name": "value",
      "comment": {
       "raw": [
        "The current value of component"
       ]
      },
      "typeValue": {
       "raw": "TValue"
      },
      "from": "@epam/uui-core:IEditable",
      "required": true
     },
     {
      "uid": 6,
      "name": "onValueChange",
      "comment": {
       "raw": [
        "Called when value needs to be changed (usually due to user interaction)"
       ]
      },
      "typeValue": {
       "raw": "(newValue: TValue) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IEditable",
      "required": true
     },
     {
      "uid": 7,
      "name": "isInvalid",
      "comment": {
       "raw": [
        "True if component contains invalid input"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:ICanBeInvalid",
      "required": false
     },
     {
      "uid": 8,
      "name": "validationMessage",
      "comment": {
       "raw": [
        "Message describing why the value is invalid"
       ]
      },
      "typeValue": {
       "raw": "null | string | number | boolean | React.ReactElement<any, string | React.JSXElementConstructor<any>> | React.ReactFragment | React.ReactPortal"
      },
      "from": "@epam/uui-core:ICanBeInvalid",
      "required": false
     },
     {
      "uid": 9,
      "name": "validationProps",
      "comment": {
       "raw": [
        "If T is a complex value (object or array), this property contains validation states of inner items"
       ]
      },
      "typeValue": {
       "raw": "{ [key: string]: ICanBeInvalid; }"
      },
      "from": "@epam/uui-core:ICanBeInvalid",
      "required": false
     },
     {
      "uid": 10,
      "name": "isReadonly",
      "comment": {
       "raw": [
        "Disable editing. Unlike isDisabled, keep component's value readable."
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:ICanBeReadonly",
      "required": false
     },
     {
      "uid": 11,
      "name": "isRequired",
      "comment": {
       "raw": [
        "Marks that component's value is required and shouldn't be empty"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:ICanBeRequired",
      "required": false
     },
     {
      "uid": 12,
      "name": "color",
      "comment": {
       "raw": [
        "@default 'blue'"
       ],
       "tags": {
        "@default": "blue"
       }
      },
      "typeValue": {
       "raw": "'blue' | 'gray50' | 'gray'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "blue",
        "gray50",
        "gray"
       ]
      },
      "from": "@epam/promo:MultiSwitchMods",
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/promo:NotificationCardMods": {
   "summary": {
    "module": "@epam/promo",
    "typeName": {
     "name": "NotificationCardMods",
     "nameFull": "NotificationCardMods"
    },
    "src": "epam-promo/components/overlays/NotificationCard.tsx",
    "exported": true
   },
   "details": {
    "kind": 263,
    "typeValue": {
     "raw": "NotificationCardMods",
     "print": [
      "interface NotificationCardMods {",
      "    color?: EpamPrimaryColor | 'gray60';",
      "}"
     ]
    },
    "props": [
     {
      "uid": 1,
      "name": "color",
      "typeValue": {
       "raw": "'blue' | 'green' | 'amber' | 'red' | 'gray60'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "blue",
        "green",
        "amber",
        "red",
        "gray60"
       ]
      },
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/promo:NotificationCardProps": {
   "summary": {
    "module": "@epam/promo",
    "typeName": {
     "name": "NotificationCardProps",
     "nameFull": "NotificationCardProps"
    },
    "src": "epam-promo/components/overlays/NotificationCard.tsx",
    "exported": true
   },
   "details": {
    "kind": 264,
    "typeValue": {
     "raw": "NotificationCardProps",
     "print": [
      "type NotificationCardProps = Omit<uuiNotificationCardProps, 'color'> & NotificationCardMods;"
     ]
    },
    "props": [
     {
      "uid": 1,
      "name": "actions",
      "typeValue": {
       "raw": "NotificationAction[]"
      },
      "from": "@epam/uui:DefaultNotificationProps",
      "required": false
     },
     {
      "uid": 2,
      "name": "onClose",
      "comment": {
       "raw": [
        "Call to close the notification with abort action. It's rejects `notificationContext.show()` promise."
       ]
      },
      "typeValue": {
       "raw": "() => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:INotification",
      "required": false
     },
     {
      "uid": 3,
      "name": "icon",
      "typeValue": {
       "raw": "Icon"
      },
      "editor": {
       "type": "component"
      },
      "from": "@epam/uui:NotificationCardProps",
      "required": false
     },
     {
      "uid": 4,
      "name": "children",
      "typeValue": {
       "raw": "null | string | number | boolean | React.ReactElement<any, string | React.JSXElementConstructor<any>> | React.ReactFragment | React.ReactPortal"
      },
      "from": "@epam/uui-core:IHasChildren",
      "required": false
     },
     {
      "uid": 5,
      "name": "cx",
      "comment": {
       "raw": [
        "CSS class(es) to put on component's root. See {@link https://github.com/JedWatson/classnames#usage} for details"
       ]
      },
      "typeValue": {
       "raw": "null | string | number | boolean | ClassDictionary | ClassArray"
      },
      "from": "@epam/uui-core:IHasCX",
      "required": false
     },
     {
      "uid": 6,
      "name": "rawProps",
      "comment": {
       "raw": [
        "Any HTML attributes (native or 'data-') to put on the underlying component"
       ]
      },
      "typeValue": {
       "raw": "React.HTMLAttributes<HTMLDivElement> & Record<`data-${string}`, string>"
      },
      "from": "@epam/uui-core:IHasRawProps",
      "required": false
     },
     {
      "uid": 7,
      "name": "key",
      "comment": {
       "raw": [
        "Unique key of the notification"
       ]
      },
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "from": "@epam/uui-core:INotification",
      "required": true
     },
     {
      "uid": 8,
      "name": "onSuccess",
      "comment": {
       "raw": [
        "Call to close the notification with success action. It's resolved `notificationContext.show()` promise."
       ]
      },
      "typeValue": {
       "raw": "() => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:INotification",
      "required": false
     },
     {
      "uid": 9,
      "name": "clearTimer",
      "comment": {
       "raw": [
        "Cancel notification closing timer"
       ]
      },
      "typeValue": {
       "raw": "() => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:INotification",
      "required": false
     },
     {
      "uid": 10,
      "name": "refreshTimer",
      "comment": {
       "raw": [
        "Reinitialize notification closing timer. It will be set to the provided notification duration."
       ]
      },
      "typeValue": {
       "raw": "() => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:INotification",
      "required": false
     },
     {
      "uid": 11,
      "name": "id",
      "comment": {
       "raw": [
        "Unique id of the notification"
       ]
      },
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "from": "@epam/uui-core:INotification",
      "required": true
     },
     {
      "uid": 12,
      "name": "color",
      "typeValue": {
       "raw": "'blue' | 'green' | 'amber' | 'red' | 'gray60'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "blue",
        "green",
        "amber",
        "red",
        "gray60"
       ]
      },
      "from": "@epam/promo:NotificationCardMods",
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/promo:PanelMods": {
   "summary": {
    "module": "@epam/promo",
    "typeName": {
     "name": "PanelMods",
     "nameFull": "PanelMods"
    },
    "src": "epam-promo/components/layout/FlexItems/Panel.tsx",
    "exported": true
   },
   "details": {
    "kind": 263,
    "typeValue": {
     "raw": "PanelMods",
     "print": [
      "interface PanelMods {",
      "    shadow?: boolean;",
      "    margin?: '24';",
      "    background?: 'white' | 'gray90';",
      "}"
     ]
    },
    "props": [
     {
      "uid": 1,
      "name": "shadow",
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "required": false
     },
     {
      "uid": 2,
      "name": "margin",
      "typeValue": {
       "raw": "'24'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "24"
       ]
      },
      "required": false
     },
     {
      "uid": 3,
      "name": "background",
      "typeValue": {
       "raw": "'white' | 'gray90'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "white",
        "gray90"
       ]
      },
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/promo:PanelProps": {
   "summary": {
    "module": "@epam/promo",
    "typeName": {
     "name": "PanelProps",
     "nameFull": "PanelProps"
    },
    "src": "epam-promo/components/layout/FlexItems/Panel.tsx",
    "exported": true
   },
   "details": {
    "kind": 263,
    "typeValue": {
     "raw": "PanelProps",
     "print": [
      "interface PanelProps extends VPanelProps, PanelMods {",
      "}"
     ]
    },
    "props": [
     {
      "uid": 1,
      "name": "cx",
      "comment": {
       "raw": [
        "CSS class(es) to put on component's root. See {@link https://github.com/JedWatson/classnames#usage} for details"
       ]
      },
      "typeValue": {
       "raw": "null | string | number | boolean | ClassDictionary | ClassArray"
      },
      "typeValueRef": "@epam/uui-core:ClassValue",
      "from": "@epam/uui-core:IHasCX",
      "required": false
     },
     {
      "uid": 2,
      "name": "children",
      "typeValue": {
       "raw": "null | string | number | boolean | React.ReactElement<any, string | React.JSXElementConstructor<any>> | React.ReactFragment | React.ReactPortal"
      },
      "typeValueRef": "@types/react:ReactNode",
      "from": "@epam/uui-core:IHasChildren",
      "required": false
     },
     {
      "uid": 3,
      "name": "onClick",
      "comment": {
       "raw": [
        "Called when component is clicked"
       ]
      },
      "typeValue": {
       "raw": "(e?: any) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IClickable",
      "required": false
     },
     {
      "uid": 4,
      "name": "rawProps",
      "comment": {
       "raw": [
        "Any HTML attributes (native or 'data-') to put on the underlying component"
       ]
      },
      "typeValue": {
       "raw": "React.HTMLAttributes<HTMLDivElement> & Record<`data-${string}`, string>"
      },
      "from": "@epam/uui-core:IHasRawProps",
      "required": false
     },
     {
      "uid": 5,
      "name": "forwardedRef",
      "comment": {
       "raw": [
        "this ref is passed to the underlying component"
       ]
      },
      "typeValue": {
       "raw": "null | (instance: HTMLDivElement | null) => void | React.MutableRefObject<HTMLDivElement | null>"
      },
      "from": "@epam/uui-core:IHasForwardedRef",
      "required": false
     },
     {
      "uid": 6,
      "name": "clickAnalyticsEvent",
      "comment": {
       "raw": [
        "An analytics event to send (via AnalyticsContext) when component is clicked.",
        " See [AnalyticsContext](@link https://uui.epam.com/documents?id=analyticsContext&mode=doc&skin=UUI4_promo&category=contexts)."
       ]
      },
      "typeValue": {
       "raw": "null | { [key: string]: any; name: string; }"
      },
      "from": "@epam/uui-core:IAnalyticableClick",
      "required": false
     },
     {
      "uid": 7,
      "name": "style",
      "typeValue": {
       "raw": "React.CSSProperties"
      },
      "from": "@epam/uui-core:VPanelProps",
      "required": false
     },
     {
      "uid": 8,
      "name": "shadow",
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/promo:PanelMods",
      "required": false
     },
     {
      "uid": 9,
      "name": "margin",
      "typeValue": {
       "raw": "'24'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "24"
       ]
      },
      "from": "@epam/promo:PanelMods",
      "required": false
     },
     {
      "uid": 10,
      "name": "background",
      "typeValue": {
       "raw": "'white' | 'gray90'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "white",
        "gray90"
       ]
      },
      "from": "@epam/promo:PanelMods",
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/promo:RatingMods": {
   "summary": {
    "module": "@epam/promo",
    "typeName": {
     "name": "RatingMods",
     "nameFull": "RatingMods"
    },
    "src": "epam-promo/components/inputs/Rating.tsx",
    "exported": true
   },
   "details": {
    "kind": 263,
    "typeValue": {
     "raw": "RatingMods",
     "print": [
      "interface RatingMods {",
      "    /**",
      "     * @default '18'",
      "     */",
      "    size?: 18 | 24 | 30;",
      "}"
     ]
    },
    "props": [
     {
      "uid": 1,
      "name": "size",
      "comment": {
       "raw": [
        "@default '18'"
       ],
       "tags": {
        "@default": "18"
       }
      },
      "typeValue": {
       "raw": "18 | 24 | 30"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        18,
        24,
        30
       ]
      },
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/promo:RatingProps": {
   "summary": {
    "module": "@epam/promo",
    "typeName": {
     "name": "RatingProps",
     "nameFull": "RatingProps"
    },
    "src": "epam-promo/components/inputs/Rating.tsx",
    "exported": true
   },
   "details": {
    "kind": 263,
    "typeValue": {
     "raw": "RatingProps",
     "print": [
      "interface RatingProps extends uuiComponents.RatingProps, RatingMods {",
      "}"
     ]
    },
    "props": [
     {
      "uid": 1,
      "name": "filledStarIcon",
      "typeValue": {
       "raw": "Icon"
      },
      "editor": {
       "type": "component"
      },
      "from": "@epam/uui-components:RatingProps",
      "required": false
     },
     {
      "uid": 2,
      "name": "emptyStarIcon",
      "typeValue": {
       "raw": "Icon"
      },
      "editor": {
       "type": "component"
      },
      "from": "@epam/uui-components:RatingProps",
      "required": false
     },
     {
      "uid": 3,
      "name": "hideTooltip",
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-components:RatingProps",
      "required": false
     },
     {
      "uid": 4,
      "name": "hint",
      "typeValue": {
       "raw": "(value: number) => string"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-components:RatingProps",
      "required": false
     },
     {
      "uid": 5,
      "name": "Tooltip",
      "typeValue": {
       "raw": "React.ComponentClass<TooltipProps, any> | React.FunctionComponent<TooltipProps>"
      },
      "from": "@epam/uui-components:RatingProps",
      "required": false
     },
     {
      "uid": 6,
      "name": "from",
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "from": "@epam/uui-components:BaseRatingProps",
      "required": false
     },
     {
      "uid": 7,
      "name": "to",
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "from": "@epam/uui-components:BaseRatingProps",
      "required": false
     },
     {
      "uid": 8,
      "name": "step",
      "comment": {
       "raw": [
        "@default 1"
       ],
       "tags": {
        "@default": 1
       }
      },
      "typeValue": {
       "raw": "0.5 | 1"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        0.5,
        1
       ]
      },
      "from": "@epam/uui-components:BaseRatingProps",
      "required": false
     },
     {
      "uid": 9,
      "name": "renderRating",
      "typeValue": {
       "raw": "(rating: number, markWidth: number, numberOfMarks: number) => React.ReactNode"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-components:BaseRatingProps",
      "required": false
     },
     {
      "uid": 10,
      "name": "cx",
      "comment": {
       "raw": [
        "CSS class(es) to put on component's root. See {@link https://github.com/JedWatson/classnames#usage} for details"
       ]
      },
      "typeValue": {
       "raw": "null | string | number | boolean | ClassDictionary | ClassArray"
      },
      "typeValueRef": "@epam/uui-core:ClassValue",
      "from": "@epam/uui-core:IHasCX",
      "required": false
     },
     {
      "uid": 11,
      "name": "isDisabled",
      "comment": {
       "raw": [
        "Disable editing, and visually de-emphasize value of the component"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:IDisableable",
      "required": false
     },
     {
      "uid": 12,
      "name": "value",
      "comment": {
       "raw": [
        "The current value of component"
       ]
      },
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "from": "@epam/uui-core:IEditable",
      "required": true
     },
     {
      "uid": 13,
      "name": "onValueChange",
      "comment": {
       "raw": [
        "Called when value needs to be changed (usually due to user interaction)"
       ]
      },
      "typeValue": {
       "raw": "(newValue: number) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IEditable",
      "required": true
     },
     {
      "uid": 14,
      "name": "isInvalid",
      "comment": {
       "raw": [
        "True if component contains invalid input"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:ICanBeInvalid",
      "required": false
     },
     {
      "uid": 15,
      "name": "validationMessage",
      "comment": {
       "raw": [
        "Message describing why the value is invalid"
       ]
      },
      "typeValue": {
       "raw": "null | string | number | boolean | React.ReactElement<any, string | React.JSXElementConstructor<any>> | React.ReactFragment | React.ReactPortal"
      },
      "typeValueRef": "@types/react:ReactNode",
      "from": "@epam/uui-core:ICanBeInvalid",
      "required": false
     },
     {
      "uid": 16,
      "name": "validationProps",
      "comment": {
       "raw": [
        "If T is a complex value (object or array), this property contains validation states of inner items"
       ]
      },
      "typeValue": {
       "raw": "{ [key: string]: ICanBeInvalid; }"
      },
      "from": "@epam/uui-core:ICanBeInvalid",
      "required": false
     },
     {
      "uid": 17,
      "name": "isReadonly",
      "comment": {
       "raw": [
        "Disable editing. Unlike isDisabled, keep component's value readable."
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:ICanBeReadonly",
      "required": false
     },
     {
      "uid": 18,
      "name": "isRequired",
      "comment": {
       "raw": [
        "Marks that component's value is required and shouldn't be empty"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:ICanBeRequired",
      "required": false
     },
     {
      "uid": 19,
      "name": "rawProps",
      "comment": {
       "raw": [
        "Any HTML attributes (native or 'data-') to put on the underlying component"
       ]
      },
      "typeValue": {
       "raw": "React.HTMLAttributes<HTMLDivElement> & Record<`data-${string}`, string>"
      },
      "from": "@epam/uui-core:IHasRawProps",
      "required": false
     },
     {
      "uid": 20,
      "name": "forwardedRef",
      "comment": {
       "raw": [
        "this ref is passed to the underlying component"
       ]
      },
      "typeValue": {
       "raw": "null | (instance: HTMLDivElement | null) => void | React.MutableRefObject<HTMLDivElement | null>"
      },
      "from": "@epam/uui-core:IHasForwardedRef",
      "required": false
     },
     {
      "uid": 21,
      "name": "size",
      "comment": {
       "raw": [
        "@default '18'"
       ],
       "tags": {
        "@default": "18"
       }
      },
      "typeValue": {
       "raw": "18 | 24 | 30"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        18,
        24,
        30
       ]
      },
      "from": "@epam/promo:RatingMods",
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/promo:RowMods": {
   "summary": {
    "module": "@epam/promo",
    "typeName": {
     "name": "RowMods",
     "nameFull": "RowMods"
    },
    "src": "epam-promo/components/layout/FlexItems/FlexRow.tsx",
    "exported": true
   },
   "details": {
    "kind": 263,
    "typeValue": {
     "raw": "RowMods",
     "print": [
      "interface RowMods extends Omit<uui.RowMods, 'background'>, types.RowSizeMod {",
      "    /**",
      "     * @default 'none'",
      "     */",
      "    background?: 'white' | 'gray5' | 'none';",
      "}"
     ]
    },
    "props": [
     {
      "uid": 1,
      "name": "background",
      "comment": {
       "raw": [
        "@default 'none'"
       ],
       "tags": {
        "@default": "none"
       }
      },
      "typeValue": {
       "raw": "'white' | 'none' | 'gray5'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "white",
        "none",
        "gray5"
       ]
      },
      "required": false
     },
     {
      "uid": 2,
      "name": "size",
      "typeValue": {
       "raw": "null | '36' | '48' | '24' | '30' | '42'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "24",
        "30",
        "36",
        "42",
        "48",
        null
       ]
      },
      "from": "@epam/uui:RowSizeMod",
      "required": false
     },
     {
      "uid": 3,
      "name": "columnGap",
      "typeValue": {
       "raw": "number | '36' | '18' | '24' | '12' | '6'"
      },
      "from": "@epam/uui:RowMods",
      "required": false
     },
     {
      "uid": 4,
      "name": "rowGap",
      "typeValue": {
       "raw": "number | '36' | '18' | '24' | '12' | '6'"
      },
      "from": "@epam/uui:RowMods",
      "required": false
     },
     {
      "uid": 5,
      "name": "borderBottom",
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui:RowMods",
      "required": false
     },
     {
      "uid": 6,
      "name": "margin",
      "typeValue": {
       "raw": "'24' | '12'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "12",
        "24"
       ]
      },
      "from": "@epam/uui:RowMods",
      "required": false
     },
     {
      "uid": 7,
      "name": "padding",
      "typeValue": {
       "raw": "'18' | '24' | '12' | '6'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "6",
        "12",
        "18",
        "24"
       ]
      },
      "from": "@epam/uui:RowMods",
      "required": false
     },
     {
      "uid": 8,
      "name": "spacing",
      "typeValue": {
       "raw": "'18' | '12' | '6'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "6",
        "12",
        "18"
       ]
      },
      "from": "@epam/uui:RowMods",
      "required": false
     },
     {
      "uid": 9,
      "name": "topShadow",
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui:RowMods",
      "required": false
     },
     {
      "uid": 10,
      "name": "vPadding",
      "typeValue": {
       "raw": "'36' | '48' | '18' | '24' | '12'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "12",
        "18",
        "24",
        "36",
        "48"
       ]
      },
      "from": "@epam/uui:RowMods",
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/promo:RowSize": {
   "summary": {
    "module": "@epam/promo",
    "typeName": {
     "name": "RowSize",
     "nameFull": "RowSize"
    },
    "src": "epam-promo/components/types.ts",
    "exported": true
   },
   "details": {
    "kind": 264,
    "typeValue": {
     "raw": "null | '36' | '48' | '24' | '30' | '42'",
     "print": [
      "type RowSize = null | '24' | '30' | '36' | '42' | '48';"
     ]
    }
   }
  },
  "@epam/promo:RowSizeMod": {
   "summary": {
    "module": "@epam/promo",
    "typeName": {
     "name": "RowSizeMod",
     "nameFull": "RowSizeMod"
    },
    "src": "epam-promo/components/types.ts",
    "exported": true
   },
   "details": {
    "kind": 263,
    "typeValue": {
     "raw": "RowSizeMod",
     "print": [
      "interface RowSizeMod {",
      "    size?: RowSize;",
      "}"
     ]
    },
    "props": [
     {
      "uid": 1,
      "name": "size",
      "typeValue": {
       "raw": "null | '36' | '48' | '24' | '30' | '42'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "24",
        "30",
        "36",
        "42",
        "48",
        null
       ]
      },
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/promo:SizeMod": {
   "summary": {
    "module": "@epam/promo",
    "typeName": {
     "name": "SizeMod",
     "nameFull": "SizeMod"
    },
    "src": "epam-promo/components/types.ts",
    "exported": true
   },
   "details": {
    "kind": 263,
    "typeValue": {
     "raw": "SizeMod",
     "print": [
      "interface SizeMod {",
      "    /** Component's size in px. This is 'logical' size, defined in how many pixels components occupies vertically. */",
      "    size?: ControlSize;",
      "}"
     ]
    },
    "props": [
     {
      "uid": 1,
      "name": "size",
      "comment": {
       "raw": [
        "Component's size in px. This is 'logical' size, defined in how many pixels components occupies vertically."
       ]
      },
      "typeValue": {
       "raw": "'36' | '48' | '24' | '30' | '42' | 'none'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "24",
        "30",
        "36",
        "42",
        "48",
        "none"
       ]
      },
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/promo:StatusIndicatorMods": {
   "summary": {
    "module": "@epam/promo",
    "typeName": {
     "name": "StatusIndicatorMods",
     "nameFull": "StatusIndicatorMods"
    },
    "src": "epam-promo/components/widgets/StatusIndicator.tsx",
    "exported": true
   },
   "details": {
    "kind": 263,
    "typeValue": {
     "raw": "StatusIndicatorMods",
     "print": [
      "interface StatusIndicatorMods extends Omit<UuiStatusIndicatorProps, 'color'> {",
      "    color?: EpamPrimaryColor | 'white' | 'gray' | 'yellow' | 'orange' | 'fuchsia' | 'purple' | 'violet' | 'cobalt' | 'cyan' | 'mint';",
      "}"
     ]
    },
    "props": [
     {
      "uid": 1,
      "name": "color",
      "typeValue": {
       "raw": "'blue' | 'green' | 'amber' | 'red' | 'yellow' | 'orange' | 'fuchsia' | 'purple' | 'violet' | 'cobalt' | 'cyan' | 'mint' | 'white' | 'gray'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "blue",
        "green",
        "amber",
        "red",
        "yellow",
        "orange",
        "fuchsia",
        "purple",
        "violet",
        "cobalt",
        "cyan",
        "mint",
        "white",
        "gray"
       ]
      },
      "required": false
     },
     {
      "uid": 2,
      "name": "size",
      "comment": {
       "raw": [
        "Component size. If omitted, 24 size will be used.",
        " @default '24'"
       ],
       "tags": {
        "@default": "24"
       }
      },
      "typeValue": {
       "raw": "'18' | '24' | '12'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "12",
        "18",
        "24"
       ]
      },
      "from": "@epam/uui:StatusIndicatorProps",
      "required": false
     },
     {
      "uid": 3,
      "name": "cx",
      "comment": {
       "raw": [
        "CSS class(es) to put on component's root. See {@link https://github.com/JedWatson/classnames#usage} for details"
       ]
      },
      "typeValue": {
       "raw": "null | string | number | boolean | ClassDictionary | ClassArray"
      },
      "from": "@epam/uui-core:IHasCX",
      "required": false
     },
     {
      "uid": 4,
      "name": "fill",
      "comment": {
       "raw": [
        "Fill mode, solid is used by default",
        " @default 'solid'"
       ],
       "tags": {
        "@default": "solid"
       }
      },
      "typeValue": {
       "raw": "'solid' | 'outline'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "solid",
        "outline"
       ]
      },
      "from": "@epam/uui:StatusIndicatorProps",
      "required": false
     },
     {
      "uid": 5,
      "name": "caption",
      "comment": {
       "raw": [
        "Component caption."
       ]
      },
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "from": "@epam/uui:StatusIndicatorProps",
      "required": true
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/promo:StatusIndicatorProps": {
   "summary": {
    "module": "@epam/promo",
    "typeName": {
     "name": "StatusIndicatorProps",
     "nameFull": "StatusIndicatorProps"
    },
    "src": "epam-promo/components/widgets/StatusIndicator.tsx",
    "exported": true
   },
   "details": {
    "kind": 264,
    "typeValue": {
     "raw": "StatusIndicatorProps",
     "print": [
      "type StatusIndicatorProps = Omit<UuiStatusIndicatorProps, 'color'> & StatusIndicatorMods;"
     ]
    },
    "props": [
     {
      "uid": 1,
      "name": "size",
      "comment": {
       "raw": [
        "Component size. If omitted, 24 size will be used.",
        " @default '24'"
       ],
       "tags": {
        "@default": "24"
       }
      },
      "typeValue": {
       "raw": "'18' | '24' | '12'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "12",
        "18",
        "24"
       ]
      },
      "from": "@epam/uui:StatusIndicatorProps",
      "required": false
     },
     {
      "uid": 2,
      "name": "cx",
      "comment": {
       "raw": [
        "CSS class(es) to put on component's root. See {@link https://github.com/JedWatson/classnames#usage} for details"
       ]
      },
      "typeValue": {
       "raw": "null | string | number | boolean | ClassDictionary | ClassArray"
      },
      "from": "@epam/uui-core:IHasCX",
      "required": false
     },
     {
      "uid": 3,
      "name": "fill",
      "comment": {
       "raw": [
        "Fill mode, solid is used by default",
        " @default 'solid'"
       ],
       "tags": {
        "@default": "solid"
       }
      },
      "typeValue": {
       "raw": "'solid' | 'outline'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "solid",
        "outline"
       ]
      },
      "from": "@epam/uui:StatusIndicatorProps",
      "required": false
     },
     {
      "uid": 4,
      "name": "caption",
      "comment": {
       "raw": [
        "Component caption."
       ]
      },
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "from": "@epam/uui:StatusIndicatorProps",
      "required": true
     },
     {
      "uid": 5,
      "name": "color",
      "typeValue": {
       "raw": "'blue' | 'green' | 'amber' | 'red' | 'yellow' | 'orange' | 'fuchsia' | 'purple' | 'violet' | 'cobalt' | 'cyan' | 'mint' | 'white' | 'gray'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "blue",
        "green",
        "amber",
        "red",
        "yellow",
        "orange",
        "fuchsia",
        "purple",
        "violet",
        "cobalt",
        "cyan",
        "mint",
        "white",
        "gray"
       ]
      },
      "from": "@epam/promo:StatusIndicatorMods",
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/promo:TextMods": {
   "summary": {
    "module": "@epam/promo",
    "typeName": {
     "name": "TextMods",
     "nameFull": "TextMods"
    },
    "src": "epam-promo/components/typography/Text.tsx",
    "exported": true
   },
   "details": {
    "kind": 263,
    "typeValue": {
     "raw": "TextMods",
     "print": [
      "interface TextMods {",
      "    /**",
      "     * @default 'gray80'",
      "     */",
      "    color?: 'blue' | 'green' | 'amber' | 'red' | 'white' | 'gray5' | 'gray50' | 'gray60' | 'gray80' | 'gray90';",
      "    /**",
      "     * @default 'sans'",
      "     */",
      "    font?: types.FontStyle;",
      "}"
     ]
    },
    "props": [
     {
      "uid": 1,
      "name": "color",
      "comment": {
       "raw": [
        "@default 'gray80'"
       ],
       "tags": {
        "@default": "gray80"
       }
      },
      "typeValue": {
       "raw": "'blue' | 'green' | 'amber' | 'red' | 'white' | 'gray60' | 'gray50' | 'gray5' | 'gray80' | 'gray90'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "blue",
        "green",
        "amber",
        "red",
        "white",
        "gray60",
        "gray50",
        "gray5",
        "gray80",
        "gray90"
       ]
      },
      "required": false
     },
     {
      "uid": 2,
      "name": "font",
      "comment": {
       "raw": [
        "@default 'sans'"
       ],
       "tags": {
        "@default": "sans"
       }
      },
      "typeValue": {
       "raw": "'sans' | 'sans-semibold' | 'sans-italic' | 'museo-sans' | 'museo-slab'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "sans",
        "sans-semibold",
        "sans-italic",
        "museo-sans",
        "museo-slab"
       ]
      },
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/promo:TextProps": {
   "summary": {
    "module": "@epam/promo",
    "typeName": {
     "name": "TextProps",
     "nameFull": "TextProps"
    },
    "src": "epam-promo/components/typography/Text.tsx",
    "exported": true
   },
   "details": {
    "kind": 264,
    "typeValue": {
     "raw": "TextProps",
     "print": [
      "type TextProps = Omit<UuiTextProps, 'color' | 'font'> & TextMods;"
     ]
    },
    "props": [
     {
      "uid": 1,
      "name": "size",
      "typeValue": {
       "raw": "'36' | '48' | '18' | '24' | '30' | '42' | 'none'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "18",
        "24",
        "30",
        "36",
        "42",
        "48",
        "none"
       ]
      },
      "from": "@epam/uui:TextMods",
      "required": false
     },
     {
      "uid": 2,
      "name": "children",
      "typeValue": {
       "raw": "null | string | number | boolean | React.ReactElement<any, string | React.JSXElementConstructor<any>> | React.ReactFragment | React.ReactPortal"
      },
      "from": "@epam/uui-core:IHasChildren",
      "required": false
     },
     {
      "uid": 3,
      "name": "cx",
      "comment": {
       "raw": [
        "CSS class(es) to put on component's root. See {@link https://github.com/JedWatson/classnames#usage} for details"
       ]
      },
      "typeValue": {
       "raw": "null | string | number | boolean | ClassDictionary | ClassArray"
      },
      "from": "@epam/uui-core:IHasCX",
      "required": false
     },
     {
      "uid": 4,
      "name": "rawProps",
      "comment": {
       "raw": [
        "Any HTML attributes (native or 'data-') to put on the underlying component"
       ]
      },
      "typeValue": {
       "raw": "React.HTMLAttributes<HTMLDivElement> & Record<`data-${string}`, string>"
      },
      "from": "@epam/uui-core:IHasRawProps",
      "required": false
     },
     {
      "uid": 5,
      "name": "onClick",
      "comment": {
       "raw": [
        "Called when component is clicked"
       ]
      },
      "typeValue": {
       "raw": "(e?: any) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IClickable",
      "required": false
     },
     {
      "uid": 6,
      "name": "clickAnalyticsEvent",
      "comment": {
       "raw": [
        "An analytics event to send (via AnalyticsContext) when component is clicked.",
        " See [AnalyticsContext](@link https://uui.epam.com/documents?id=analyticsContext&mode=doc&skin=UUI4_promo&category=contexts)."
       ]
      },
      "typeValue": {
       "raw": "null | { [key: string]: any; name: string; }"
      },
      "from": "@epam/uui-core:IAnalyticableClick",
      "required": false
     },
     {
      "uid": 7,
      "name": "forwardedRef",
      "comment": {
       "raw": [
        "this ref is passed to the underlying component"
       ]
      },
      "typeValue": {
       "raw": "null | (instance: HTMLDivElement | null) => void | React.MutableRefObject<HTMLDivElement | null>"
      },
      "from": "@epam/uui-core:IHasForwardedRef",
      "required": false
     },
     {
      "uid": 8,
      "name": "lineHeight",
      "typeValue": {
       "raw": "'18' | '24' | '30' | '12'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "12",
        "18",
        "24",
        "30"
       ]
      },
      "from": "@epam/uui:TextSettings",
      "required": false
     },
     {
      "uid": 9,
      "name": "fontSize",
      "typeValue": {
       "raw": "'18' | '24' | '12' | '10' | '14' | '16'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "10",
        "12",
        "14",
        "16",
        "18",
        "24"
       ]
      },
      "from": "@epam/uui:TextSettings",
      "required": false
     },
     {
      "uid": 10,
      "name": "color",
      "comment": {
       "raw": [
        "@default 'gray80'"
       ],
       "tags": {
        "@default": "gray80"
       }
      },
      "typeValue": {
       "raw": "'blue' | 'green' | 'amber' | 'red' | 'white' | 'gray60' | 'gray50' | 'gray5' | 'gray80' | 'gray90'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "blue",
        "green",
        "amber",
        "red",
        "white",
        "gray60",
        "gray50",
        "gray5",
        "gray80",
        "gray90"
       ]
      },
      "from": "@epam/promo:TextMods",
      "required": false
     },
     {
      "uid": 11,
      "name": "font",
      "comment": {
       "raw": [
        "@default 'sans'"
       ],
       "tags": {
        "@default": "sans"
       }
      },
      "typeValue": {
       "raw": "'sans' | 'sans-semibold' | 'sans-italic' | 'museo-sans' | 'museo-slab'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "sans",
        "sans-semibold",
        "sans-italic",
        "museo-sans",
        "museo-slab"
       ]
      },
      "from": "@epam/promo:TextMods",
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/promo:TextSize": {
   "summary": {
    "module": "@epam/promo",
    "typeName": {
     "name": "TextSize",
     "nameFull": "TextSize"
    },
    "src": "epam-promo/components/types.ts",
    "exported": true
   },
   "details": {
    "kind": 264,
    "typeValue": {
     "raw": "'36' | '48' | '18' | '24' | '30' | 'none'",
     "print": [
      "type TextSize = 'none' | '18' | '24' | '30' | '36' | '48';"
     ]
    }
   }
  },
  "@epam/promo:TooltipMods": {
   "summary": {
    "module": "@epam/promo",
    "typeName": {
     "name": "TooltipMods",
     "nameFull": "TooltipMods"
    },
    "src": "epam-promo/components/overlays/Tooltip.tsx",
    "exported": true
   },
   "details": {
    "kind": 263,
    "typeValue": {
     "raw": "TooltipMods",
     "print": [
      "interface TooltipMods {",
      "    /**",
      "     * Tooltip color.",
      "     * 'gray90' is deprecated and will be removed in future release, use 'gray' instead.",
      "     * @default 'gray'",
      "     */",
      "    color?: 'white' | 'gray90' | 'gray' | 'red';",
      "}"
     ]
    },
    "props": [
     {
      "uid": 1,
      "name": "color",
      "comment": {
       "raw": [
        "Tooltip color.",
        " 'gray90' is deprecated and will be removed in future release, use 'gray' instead.",
        " @default 'gray'"
       ],
       "tags": {
        "@default": "gray"
       }
      },
      "typeValue": {
       "raw": "'red' | 'white' | 'gray' | 'gray90'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "red",
        "white",
        "gray",
        "gray90"
       ]
      },
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/promo:TooltipProps": {
   "summary": {
    "module": "@epam/promo",
    "typeName": {
     "name": "TooltipProps",
     "nameFull": "TooltipProps"
    },
    "src": "epam-promo/components/overlays/Tooltip.tsx",
    "exported": true
   },
   "details": {
    "kind": 264,
    "typeValue": {
     "raw": "TooltipProps",
     "print": [
      "type TooltipProps = Omit<UuiTooltipProps, 'color'> & TooltipMods;"
     ]
    },
    "props": [
     {
      "uid": 1,
      "name": "onClose",
      "typeValue": {
       "raw": "() => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:DropdownProps",
      "required": false
     },
     {
      "uid": 2,
      "name": "children",
      "comment": {
       "raw": [
        "React Node(s) to show tooltip for"
       ]
      },
      "typeValue": {
       "raw": "null | string | number | boolean | React.ReactElement<any, string | React.JSXElementConstructor<any>> | React.ReactFragment | React.ReactPortal"
      },
      "from": "@epam/uui-core:TooltipCoreProps",
      "required": false
     },
     {
      "uid": 3,
      "name": "cx",
      "comment": {
       "raw": [
        "CSS class(es) to put on component's root. See {@link https://github.com/JedWatson/classnames#usage} for details"
       ]
      },
      "typeValue": {
       "raw": "null | string | number | boolean | ClassDictionary | ClassArray"
      },
      "from": "@epam/uui-core:IHasCX",
      "required": false
     },
     {
      "uid": 4,
      "name": "rawProps",
      "comment": {
       "raw": [
        "Any HTML attributes (native or 'data-') to put on the underlying component"
       ]
      },
      "typeValue": {
       "raw": "React.HTMLAttributes<HTMLDivElement> & Record<`data-${string}`, string>"
      },
      "from": "@epam/uui-core:IHasRawProps",
      "required": false
     },
     {
      "uid": 5,
      "name": "isDisabled",
      "comment": {
       "raw": [
        "Disable editing, and visually de-emphasize value of the component"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:IDisableable",
      "required": false
     },
     {
      "uid": 6,
      "name": "value",
      "comment": {
       "raw": [
        "The current value of component"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:IEditable",
      "required": true
     },
     {
      "uid": 7,
      "name": "onValueChange",
      "comment": {
       "raw": [
        "Called when value needs to be changed (usually due to user interaction)"
       ]
      },
      "typeValue": {
       "raw": "(newValue: boolean) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IEditable",
      "required": true
     },
     {
      "uid": 8,
      "name": "isInvalid",
      "comment": {
       "raw": [
        "True if component contains invalid input"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:ICanBeInvalid",
      "required": false
     },
     {
      "uid": 9,
      "name": "validationMessage",
      "comment": {
       "raw": [
        "Message describing why the value is invalid"
       ]
      },
      "typeValue": {
       "raw": "null | string | number | boolean | React.ReactElement<any, string | React.JSXElementConstructor<any>> | React.ReactFragment | React.ReactPortal"
      },
      "from": "@epam/uui-core:ICanBeInvalid",
      "required": false
     },
     {
      "uid": 10,
      "name": "validationProps",
      "comment": {
       "raw": [
        "If T is a complex value (object or array), this property contains validation states of inner items"
       ]
      },
      "typeValue": {
       "raw": "{ [key: string]: ICanBeInvalid; }"
      },
      "from": "@epam/uui-core:ICanBeInvalid",
      "required": false
     },
     {
      "uid": 11,
      "name": "isReadonly",
      "comment": {
       "raw": [
        "Disable editing. Unlike isDisabled, keep component's value readable."
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:ICanBeReadonly",
      "required": false
     },
     {
      "uid": 12,
      "name": "isRequired",
      "comment": {
       "raw": [
        "Marks that component's value is required and shouldn't be empty"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:ICanBeRequired",
      "required": false
     },
     {
      "uid": 13,
      "name": "placement",
      "typeValue": {
       "raw": "'left' | 'right' | 'auto' | 'auto-start' | 'auto-end' | 'top' | 'bottom' | 'top-start' | 'top-end' | 'bottom-start' | 'bottom-end' | 'right-start' | 'right-end' | 'left-start' | 'left-end'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "left",
        "right",
        "auto",
        "auto-start",
        "auto-end",
        "top",
        "bottom",
        "top-start",
        "top-end",
        "bottom-start",
        "bottom-end",
        "right-start",
        "right-end",
        "left-start",
        "left-end"
       ]
      },
      "from": "@epam/uui-core:DropdownProps",
      "required": false
     },
     {
      "uid": 14,
      "name": "modifiers",
      "typeValue": {
       "raw": "(StrictModifier<any> | Partial<Modifier<any, object>>)[]"
      },
      "from": "@epam/uui-core:DropdownProps",
      "required": false
     },
     {
      "uid": 15,
      "name": "openDelay",
      "comment": {
       "raw": [
        "@default 0"
       ],
       "tags": {
        "@default": 0
       }
      },
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "from": "@epam/uui-core:DropdownProps",
      "required": false
     },
     {
      "uid": 16,
      "name": "closeDelay",
      "comment": {
       "raw": [
        "@default 0"
       ],
       "tags": {
        "@default": 0
       }
      },
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "from": "@epam/uui-core:DropdownProps",
      "required": false
     },
     {
      "uid": 17,
      "name": "closeOnMouseLeave",
      "comment": {
       "raw": [
        "@default false"
       ],
       "tags": {
        "@default": false
       }
      },
      "typeValue": {
       "raw": "false | 'toggler' | 'boundary'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        false,
        "toggler",
        "boundary"
       ]
      },
      "from": "@epam/uui-core:DropdownProps",
      "required": false
     },
     {
      "uid": 18,
      "name": "portalTarget",
      "typeValue": {
       "raw": "HTMLElement"
      },
      "from": "@epam/uui-core:DropdownProps",
      "required": false
     },
     {
      "uid": 19,
      "name": "boundaryElement",
      "typeValue": {
       "raw": "HTMLElement | HTMLElement[] | 'clippingParents'"
      },
      "from": "@epam/uui-core:DropdownProps",
      "required": false
     },
     {
      "uid": 20,
      "name": "closeBodyOnTogglerHidden",
      "comment": {
       "raw": [
        "@default true"
       ],
       "tags": {
        "@default": true
       }
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:DropdownProps",
      "required": false
     },
     {
      "uid": 21,
      "name": "content",
      "comment": {
       "raw": [
        "Content to show in the tooltip (ReactNode)"
       ]
      },
      "typeValue": {
       "raw": "any"
      },
      "from": "@epam/uui-core:TooltipCoreProps",
      "required": false
     },
     {
      "uid": 22,
      "name": "renderContent",
      "comment": {
       "raw": [
        "Alternative to 'content' prop, you can pass a render function.",
        " The function will only be called when content is shown, this can save performance."
       ]
      },
      "typeValue": {
       "raw": "() => any"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:TooltipCoreProps",
      "required": false
     },
     {
      "uid": 23,
      "name": "offset",
      "comment": {
       "raw": [
        "See [Popper docs]{@link https://popper.js.org/docs/v2/modifiers/offset/}"
       ]
      },
      "typeValue": {
       "raw": "OffsetsFunction | [number | null | undefined, number | null | undefined]"
      },
      "from": "@epam/uui-core:TooltipCoreProps",
      "required": false
     },
     {
      "uid": 24,
      "name": "maxWidth",
      "comment": {
       "raw": [
        "Max width of tooltip"
       ]
      },
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "from": "@epam/uui-core:TooltipCoreProps",
      "required": false
     },
     {
      "uid": 25,
      "name": "color",
      "comment": {
       "raw": [
        "Tooltip color.",
        " 'gray90' is deprecated and will be removed in future release, use 'gray' instead.",
        " @default 'gray'"
       ],
       "tags": {
        "@default": "gray"
       }
      },
      "typeValue": {
       "raw": "'red' | 'white' | 'gray' | 'gray90'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "red",
        "white",
        "gray",
        "gray90"
       ]
      },
      "from": "@epam/promo:TooltipMods",
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/electric:PromoButtonMods": {
   "summary": {
    "module": "@epam/electric",
    "typeName": {
     "name": "PromoButtonMods",
     "nameFull": "PromoButtonMods"
    },
    "src": "epam-electric/components/buttons/PromoButton.ts",
    "exported": true
   },
   "details": {
    "kind": 263,
    "typeValue": {
     "raw": "PromoButtonMods",
     "print": [
      "interface PromoButtonMods {",
      "    size?: PromoButtonSize;",
      "}"
     ]
    },
    "props": [
     {
      "uid": 1,
      "name": "size",
      "typeValue": {
       "raw": "'36' | '42'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "36",
        "42"
       ]
      },
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/electric:PromoButtonProps": {
   "summary": {
    "module": "@epam/electric",
    "typeName": {
     "name": "PromoButtonProps",
     "nameFull": "PromoButtonProps"
    },
    "src": "epam-electric/components/buttons/PromoButton.ts",
    "exported": true
   },
   "details": {
    "kind": 264,
    "typeValue": {
     "raw": "PromoButtonProps",
     "print": [
      "type PromoButtonProps = ButtonPropsWithOmit & PromoButtonMods;"
     ]
    },
    "props": [
     {
      "uid": 1,
      "name": "captionCX",
      "comment": {
       "raw": [
        "CSS classes to put on the caption"
       ]
      },
      "typeValue": {
       "raw": "null | string | number | boolean | ClassDictionary | ClassArray"
      },
      "from": "@epam/uui-components:ButtonProps",
      "required": false
     },
     {
      "uid": 2,
      "name": "cx",
      "comment": {
       "raw": [
        "CSS class(es) to put on component's root. See {@link https://github.com/JedWatson/classnames#usage} for details"
       ]
      },
      "typeValue": {
       "raw": "null | string | number | boolean | ClassDictionary | ClassArray"
      },
      "from": "@epam/uui-core:IHasCX",
      "required": false
     },
     {
      "uid": 3,
      "name": "onClick",
      "comment": {
       "raw": [
        "Called when component is clicked"
       ]
      },
      "typeValue": {
       "raw": "(e?: any) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IClickable",
      "required": false
     },
     {
      "uid": 4,
      "name": "link",
      "comment": {
       "raw": [
        "Link object to redirect to for SPA-redirects"
       ]
      },
      "typeValue": {
       "raw": "Link"
      },
      "from": "@epam/uui-core:ICanRedirect",
      "required": false
     },
     {
      "uid": 5,
      "name": "href",
      "comment": {
       "raw": [
        "Href (URL) to redirect to, for non-SPA redirects"
       ]
      },
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "from": "@epam/uui-core:ICanRedirect",
      "required": false
     },
     {
      "uid": 6,
      "name": "isLinkActive",
      "comment": {
       "raw": [
        "Highlights component to show that link is active (browser is displaying the page to which link is pointing)"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:ICanRedirect",
      "required": false
     },
     {
      "uid": 7,
      "name": "target",
      "comment": {
       "raw": [
        "Controls where the link should be opened"
       ]
      },
      "typeValue": {
       "raw": "'_blank'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "_blank"
       ]
      },
      "from": "@epam/uui-core:ICanRedirect",
      "required": false
     },
     {
      "uid": 8,
      "name": "isDisabled",
      "comment": {
       "raw": [
        "Disable editing, and visually de-emphasize value of the component"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:IDisableable",
      "required": false
     },
     {
      "uid": 9,
      "name": "icon",
      "comment": {
       "raw": [
        "Icon can be a React element (usually an SVG element)"
       ]
      },
      "typeValue": {
       "raw": "Icon"
      },
      "editor": {
       "type": "component"
      },
      "from": "@epam/uui-core:IHasIcon",
      "required": false
     },
     {
      "uid": 10,
      "name": "iconPosition",
      "comment": {
       "raw": [
        "Position of the icon (left of right)"
       ]
      },
      "typeValue": {
       "raw": "'left' | 'right'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "left",
        "right"
       ]
      },
      "from": "@epam/uui-core:IHasIcon",
      "required": false
     },
     {
      "uid": 11,
      "name": "onIconClick",
      "comment": {
       "raw": [
        "Click handler for the icon"
       ]
      },
      "typeValue": {
       "raw": "() => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IHasIcon",
      "required": false
     },
     {
      "uid": 12,
      "name": "clickAnalyticsEvent",
      "comment": {
       "raw": [
        "An analytics event to send (via AnalyticsContext) when component is clicked.",
        " See [AnalyticsContext](@link https://uui.epam.com/documents?id=analyticsContext&mode=doc&skin=UUI4_promo&category=contexts)."
       ]
      },
      "typeValue": {
       "raw": "null | { [key: string]: any; name: string; }"
      },
      "from": "@epam/uui-core:IAnalyticableClick",
      "required": false
     },
     {
      "uid": 13,
      "name": "tabIndex",
      "comment": {
       "raw": [
        "Controls the order of keyboard navigation between components"
       ]
      },
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "from": "@epam/uui-core:IHasTabIndex",
      "required": false
     },
     {
      "uid": 14,
      "name": "rawProps",
      "comment": {
       "raw": [
        "Any HTML attributes (native or 'data-') to put on the underlying component"
       ]
      },
      "typeValue": {
       "raw": "React.ButtonHTMLAttributes<HTMLButtonElement> & Record<`data-${string}`, string>"
      },
      "from": "@epam/uui-core:IHasRawProps",
      "required": false
     },
     {
      "uid": 15,
      "name": "caption",
      "comment": {
       "raw": [
        "Caption. Can be a string, or React.Elements. Certain components supports minimal markup (<b>,<i>,<a>) in captions."
       ]
      },
      "typeValue": {
       "raw": "any"
      },
      "from": "@epam/uui-core:IHasCaption",
      "required": false
     },
     {
      "uid": 16,
      "name": "isInteractedOutside",
      "comment": {
       "raw": [
        "Called when component is interacted outside, to close the dropdown"
       ]
      },
      "typeValue": {
       "raw": "(event: Event) => boolean"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IDropdownToggler",
      "required": false
     },
     {
      "uid": 17,
      "name": "ref",
      "comment": {
       "raw": [
        "Component's ref"
       ]
      },
      "typeValue": {
       "raw": "null | (instance: any) => void | React.RefObject<any>"
      },
      "from": "@epam/uui-core:IDropdownToggler",
      "required": false
     },
     {
      "uid": 18,
      "name": "forwardedRef",
      "comment": {
       "raw": [
        "this ref is passed to the underlying component"
       ]
      },
      "typeValue": {
       "raw": "null | (instance: HTMLButtonElement | HTMLAnchorElement | null) => void | React.MutableRefObject<HTMLButtonElement | HTMLAnchorElement | null>"
      },
      "from": "@epam/uui-core:IHasForwardedRef",
      "required": false
     },
     {
      "uid": 19,
      "name": "size",
      "typeValue": {
       "raw": "'36' | '42'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "36",
        "42"
       ]
      },
      "from": "@epam/electric:PromoButtonMods",
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/electric:PromoButtonSize": {
   "summary": {
    "module": "@epam/electric",
    "typeName": {
     "name": "PromoButtonSize",
     "nameFull": "PromoButtonSize"
    },
    "src": "epam-electric/components/buttons/PromoButton.ts",
    "exported": true
   },
   "details": {
    "kind": 264,
    "typeValue": {
     "raw": "'36' | '42'",
     "print": [
      "type PromoButtonSize = '36' | '42';"
     ]
    }
   }
  },
  "@epam/loveship:AlertMods": {
   "summary": {
    "module": "@epam/loveship",
    "typeName": {
     "name": "AlertMods",
     "nameFull": "AlertMods"
    },
    "src": "loveship/components/overlays/Alert.tsx",
    "exported": true
   },
   "details": {
    "kind": 263,
    "typeValue": {
     "raw": "AlertMods",
     "print": [
      "interface AlertMods {",
      "    /** @default 'sky' */",
      "    color?: EpamPrimaryColor;",
      "}"
     ]
    },
    "props": [
     {
      "uid": 1,
      "name": "color",
      "comment": {
       "raw": [
        "@default 'sky'"
       ],
       "tags": {
        "@default": "sky"
       }
      },
      "typeValue": {
       "raw": "'sky' | 'grass' | 'sun' | 'fire'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "sky",
        "grass",
        "sun",
        "fire"
       ]
      },
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/loveship:AlertProps": {
   "summary": {
    "module": "@epam/loveship",
    "typeName": {
     "name": "AlertProps",
     "nameFull": "AlertProps"
    },
    "src": "loveship/components/overlays/Alert.tsx",
    "exported": true
   },
   "details": {
    "kind": 263,
    "typeValue": {
     "raw": "AlertProps",
     "print": [
      "interface AlertProps extends Omit<uui.AlertProps, 'color'>, AlertMods {",
      "}"
     ]
    },
    "props": [
     {
      "uid": 1,
      "name": "actions",
      "comment": {
       "raw": [
        "List of actions to display in the alert. Each action has name and 'action' callback"
       ]
      },
      "typeValue": {
       "raw": "notificationAction[]"
      },
      "from": "@epam/uui:AlertProps",
      "required": false
     },
     {
      "uid": 2,
      "name": "onClose",
      "comment": {
       "raw": [
        "When specified, a close icon is rendered. onClose callback will be called on clicking the close icon"
       ]
      },
      "typeValue": {
       "raw": "() => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui:AlertProps",
      "required": false
     },
     {
      "uid": 3,
      "name": "icon",
      "comment": {
       "raw": [
        "An optional icon to show on the left of the alert"
       ]
      },
      "typeValue": {
       "raw": "Icon"
      },
      "editor": {
       "type": "component"
      },
      "from": "@epam/uui:AlertProps",
      "required": false
     },
     {
      "uid": 4,
      "name": "size",
      "comment": {
       "raw": [
        "Component size. If omitted, 48 size will be used.",
        " @default '48'"
       ],
       "tags": {
        "@default": "48"
       }
      },
      "typeValue": {
       "raw": "'36' | '48'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "36",
        "48"
       ]
      },
      "from": "@epam/uui:AlertProps",
      "required": false
     },
     {
      "uid": 5,
      "name": "children",
      "typeValue": {
       "raw": "null | string | number | boolean | React.ReactElement<any, string | React.JSXElementConstructor<any>> | React.ReactFragment | React.ReactPortal"
      },
      "from": "@epam/uui-core:IHasChildren",
      "required": false
     },
     {
      "uid": 6,
      "name": "cx",
      "comment": {
       "raw": [
        "CSS class(es) to put on component's root. See {@link https://github.com/JedWatson/classnames#usage} for details"
       ]
      },
      "typeValue": {
       "raw": "null | string | number | boolean | ClassDictionary | ClassArray"
      },
      "from": "@epam/uui-core:IHasCX",
      "required": false
     },
     {
      "uid": 7,
      "name": "rawProps",
      "comment": {
       "raw": [
        "Any HTML attributes (native or 'data-') to put on the underlying component"
       ]
      },
      "typeValue": {
       "raw": "React.HTMLAttributes<HTMLDivElement> & Record<`data-${string}`, string>"
      },
      "from": "@epam/uui-core:IHasRawProps",
      "required": false
     },
     {
      "uid": 8,
      "name": "color",
      "comment": {
       "raw": [
        "@default 'sky'"
       ],
       "tags": {
        "@default": "sky"
       }
      },
      "typeValue": {
       "raw": "'sky' | 'grass' | 'sun' | 'fire'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "sky",
        "grass",
        "sun",
        "fire"
       ]
      },
      "from": "@epam/loveship:AlertMods",
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/loveship:BadgeMods": {
   "summary": {
    "module": "@epam/loveship",
    "typeName": {
     "name": "BadgeMods",
     "nameFull": "BadgeMods"
    },
    "src": "loveship/components/widgets/Badge.tsx",
    "exported": true
   },
   "details": {
    "kind": 263,
    "typeValue": {
     "raw": "BadgeMods",
     "print": [
      "interface BadgeMods extends Omit<UuiBadgeProps, 'color' | 'fill' | 'size'> {",
      "    color?: EpamPrimaryColor | EpamAdditionalColor | 'yellow' | 'orange' | 'purple' | 'cyan' | 'mint' | 'white' | 'night100' | 'night300' | 'night600';",
      "    shape?: types.ControlShape;",
      "    fill?: UuiBadgeMods['fill'] | 'semitransparent' | 'transparent';",
      "    size?: UuiBadgeMods['size'] | '12';",
      "}"
     ]
    },
    "props": [
     {
      "uid": 1,
      "name": "color",
      "typeValue": {
       "raw": "'sky' | 'grass' | 'sun' | 'fire' | 'cobalt' | 'violet' | 'fuchsia' | 'yellow' | 'orange' | 'purple' | 'cyan' | 'mint' | 'white' | 'night100' | 'night300' | 'night600'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "sky",
        "grass",
        "sun",
        "fire",
        "cobalt",
        "violet",
        "fuchsia",
        "yellow",
        "orange",
        "purple",
        "cyan",
        "mint",
        "white",
        "night100",
        "night300",
        "night600"
       ]
      },
      "required": false
     },
     {
      "uid": 2,
      "name": "shape",
      "typeValue": {
       "raw": "'square' | 'round'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "square",
        "round"
       ]
      },
      "required": false
     },
     {
      "uid": 3,
      "name": "fill",
      "typeValue": {
       "raw": "'solid' | 'outline' | 'semitransparent' | 'transparent'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "solid",
        "outline",
        "semitransparent",
        "transparent"
       ]
      },
      "required": false
     },
     {
      "uid": 4,
      "name": "size",
      "typeValue": {
       "raw": "'36' | '48' | '18' | '24' | '30' | '42' | '12'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "12",
        "18",
        "24",
        "30",
        "36",
        "42",
        "48"
       ]
      },
      "required": false
     },
     {
      "uid": 5,
      "name": "icon",
      "comment": {
       "raw": [
        "Icon can be a React element (usually an SVG element)"
       ]
      },
      "typeValue": {
       "raw": "Icon"
      },
      "editor": {
       "type": "component"
      },
      "from": "@epam/uui-core:IHasIcon",
      "required": false
     },
     {
      "uid": 6,
      "name": "cx",
      "comment": {
       "raw": [
        "CSS class(es) to put on component's root. See {@link https://github.com/JedWatson/classnames#usage} for details"
       ]
      },
      "typeValue": {
       "raw": "null | string | number | boolean | ClassDictionary | ClassArray"
      },
      "from": "@epam/uui-core:IHasCX",
      "required": false
     },
     {
      "uid": 7,
      "name": "rawProps",
      "comment": {
       "raw": [
        "Any HTML attributes (native or 'data-') to put on the underlying component"
       ]
      },
      "typeValue": {
       "raw": "React.ButtonHTMLAttributes<HTMLButtonElement> & Record<`data-${string}`, string>"
      },
      "from": "@epam/uui-core:IHasRawProps",
      "required": false
     },
     {
      "uid": 8,
      "name": "clearIcon",
      "comment": {
       "raw": [
        "Icon for clear value button (usually cross)"
       ]
      },
      "typeValue": {
       "raw": "Icon"
      },
      "editor": {
       "type": "component"
      },
      "from": "@epam/uui-components:ButtonProps",
      "required": false
     },
     {
      "uid": 9,
      "name": "captionCX",
      "comment": {
       "raw": [
        "CSS classes to put on the caption"
       ]
      },
      "typeValue": {
       "raw": "null | string | number | boolean | ClassDictionary | ClassArray"
      },
      "from": "@epam/uui-components:ButtonProps",
      "required": false
     },
     {
      "uid": 10,
      "name": "countIndicator",
      "comment": {
       "raw": [
        "CountIndicator component"
       ]
      },
      "typeValue": {
       "raw": "React.ComponentClass<IHasCaption, any> | React.FunctionComponent<IHasCaption>"
      },
      "from": "@epam/uui-components:ButtonProps",
      "required": false
     },
     {
      "uid": 11,
      "name": "dropdownIcon",
      "comment": {
       "raw": [
        "Icon for drop-down toggler"
       ]
      },
      "typeValue": {
       "raw": "Icon"
      },
      "editor": {
       "type": "component"
      },
      "from": "@epam/uui-core:ButtonCoreProps",
      "required": false
     },
     {
      "uid": 12,
      "name": "dropdownIconPosition",
      "comment": {
       "raw": [
        "Position of the dropdown icon ('left' of 'right')"
       ]
      },
      "typeValue": {
       "raw": "'left' | 'right'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "left",
        "right"
       ]
      },
      "from": "@epam/uui-core:ButtonCoreProps",
      "required": false
     },
     {
      "uid": 13,
      "name": "count",
      "typeValue": {
       "raw": "null | string | number | boolean | React.ReactElement<any, string | React.JSXElementConstructor<any>> | React.ReactFragment | React.ReactPortal"
      },
      "from": "@epam/uui-core:ButtonCoreProps",
      "required": false
     },
     {
      "uid": 14,
      "name": "onClick",
      "comment": {
       "raw": [
        "Called when component is clicked"
       ]
      },
      "typeValue": {
       "raw": "(e?: any) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IClickable",
      "required": false
     },
     {
      "uid": 15,
      "name": "link",
      "comment": {
       "raw": [
        "Link object to redirect to for SPA-redirects"
       ]
      },
      "typeValue": {
       "raw": "Link"
      },
      "from": "@epam/uui-core:ICanRedirect",
      "required": false
     },
     {
      "uid": 16,
      "name": "href",
      "comment": {
       "raw": [
        "Href (URL) to redirect to, for non-SPA redirects"
       ]
      },
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "from": "@epam/uui-core:ICanRedirect",
      "required": false
     },
     {
      "uid": 17,
      "name": "isLinkActive",
      "comment": {
       "raw": [
        "Highlights component to show that link is active (browser is displaying the page to which link is pointing)"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:ICanRedirect",
      "required": false
     },
     {
      "uid": 18,
      "name": "target",
      "comment": {
       "raw": [
        "Controls where the link should be opened"
       ]
      },
      "typeValue": {
       "raw": "'_blank'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "_blank"
       ]
      },
      "from": "@epam/uui-core:ICanRedirect",
      "required": false
     },
     {
      "uid": 19,
      "name": "isDisabled",
      "comment": {
       "raw": [
        "Disable editing, and visually de-emphasize value of the component"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:IDisableable",
      "required": false
     },
     {
      "uid": 20,
      "name": "iconPosition",
      "comment": {
       "raw": [
        "Position of the icon (left of right)"
       ]
      },
      "typeValue": {
       "raw": "'left' | 'right'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "left",
        "right"
       ]
      },
      "from": "@epam/uui-core:IHasIcon",
      "required": false
     },
     {
      "uid": 21,
      "name": "onIconClick",
      "comment": {
       "raw": [
        "Click handler for the icon"
       ]
      },
      "typeValue": {
       "raw": "() => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IHasIcon",
      "required": false
     },
     {
      "uid": 22,
      "name": "clickAnalyticsEvent",
      "comment": {
       "raw": [
        "An analytics event to send (via AnalyticsContext) when component is clicked.",
        " See [AnalyticsContext](@link https://uui.epam.com/documents?id=analyticsContext&mode=doc&skin=UUI4_promo&category=contexts)."
       ]
      },
      "typeValue": {
       "raw": "null | { [key: string]: any; name: string; }"
      },
      "from": "@epam/uui-core:IAnalyticableClick",
      "required": false
     },
     {
      "uid": 23,
      "name": "tabIndex",
      "comment": {
       "raw": [
        "Controls the order of keyboard navigation between components"
       ]
      },
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "from": "@epam/uui-core:IHasTabIndex",
      "required": false
     },
     {
      "uid": 24,
      "name": "caption",
      "comment": {
       "raw": [
        "Caption. Can be a string, or React.Elements. Certain components supports minimal markup (<b>,<i>,<a>) in captions."
       ]
      },
      "typeValue": {
       "raw": "any"
      },
      "from": "@epam/uui-core:IHasCaption",
      "required": false
     },
     {
      "uid": 25,
      "name": "onClear",
      "comment": {
       "raw": [
        "Call to clear toggler value"
       ]
      },
      "typeValue": {
       "raw": "(e?: any) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IBasicPickerToggler",
      "required": false
     },
     {
      "uid": 26,
      "name": "isOpen",
      "comment": {
       "raw": [
        "When isDropdown=true, indicate that dropdown is open with chevron icon"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:IDropdownToggler",
      "required": false
     },
     {
      "uid": 27,
      "name": "isDropdown",
      "comment": {
       "raw": [
        "Shows chevron icon, enabling component to act as dropdown toggler"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:IDropdownToggler",
      "required": false
     },
     {
      "uid": 28,
      "name": "toggleDropdownOpening",
      "comment": {
       "raw": [
        "Called when associated dropdown should open or close"
       ]
      },
      "typeValue": {
       "raw": "(value: boolean) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IDropdownToggler",
      "required": false
     },
     {
      "uid": 29,
      "name": "isInteractedOutside",
      "comment": {
       "raw": [
        "Called when component is interacted outside, to close the dropdown"
       ]
      },
      "typeValue": {
       "raw": "(event: Event) => boolean"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IDropdownToggler",
      "required": false
     },
     {
      "uid": 30,
      "name": "ref",
      "comment": {
       "raw": [
        "Component's ref"
       ]
      },
      "typeValue": {
       "raw": "null | (instance: any) => void | React.RefObject<any>"
      },
      "from": "@epam/uui-core:IDropdownToggler",
      "required": false
     },
     {
      "uid": 31,
      "name": "forwardedRef",
      "comment": {
       "raw": [
        "this ref is passed to the underlying component"
       ]
      },
      "typeValue": {
       "raw": "null | (instance: HTMLButtonElement | HTMLAnchorElement | null) => void | React.MutableRefObject<HTMLButtonElement | HTMLAnchorElement | null>"
      },
      "from": "@epam/uui-core:IHasForwardedRef",
      "required": false
     },
     {
      "uid": 32,
      "name": "indicator",
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui:BadgeMods",
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/loveship:BadgeProps": {
   "summary": {
    "module": "@epam/loveship",
    "typeName": {
     "name": "BadgeProps",
     "nameFull": "BadgeProps"
    },
    "src": "loveship/components/widgets/Badge.tsx",
    "exported": true
   },
   "details": {
    "kind": 264,
    "typeValue": {
     "raw": "BadgeProps",
     "print": [
      "type BadgeProps = Omit<UuiBadgeProps, 'color' | 'fill' | 'size'> & BadgeMods;"
     ]
    },
    "props": [
     {
      "uid": 1,
      "name": "icon",
      "comment": {
       "raw": [
        "Icon can be a React element (usually an SVG element)"
       ]
      },
      "typeValue": {
       "raw": "Icon"
      },
      "editor": {
       "type": "component"
      },
      "from": "@epam/uui-core:IHasIcon",
      "required": false
     },
     {
      "uid": 2,
      "name": "cx",
      "comment": {
       "raw": [
        "CSS class(es) to put on component's root. See {@link https://github.com/JedWatson/classnames#usage} for details"
       ]
      },
      "typeValue": {
       "raw": "null | string | number | boolean | ClassDictionary | ClassArray"
      },
      "from": "@epam/uui-core:IHasCX",
      "required": false
     },
     {
      "uid": 3,
      "name": "rawProps",
      "comment": {
       "raw": [
        "Any HTML attributes (native or 'data-') to put on the underlying component"
       ]
      },
      "typeValue": {
       "raw": "React.ButtonHTMLAttributes<HTMLButtonElement> & Record<`data-${string}`, string>"
      },
      "from": "@epam/uui-core:IHasRawProps",
      "required": false
     },
     {
      "uid": 4,
      "name": "clearIcon",
      "comment": {
       "raw": [
        "Icon for clear value button (usually cross)"
       ]
      },
      "typeValue": {
       "raw": "Icon"
      },
      "editor": {
       "type": "component"
      },
      "from": "@epam/uui-components:ButtonProps",
      "required": false
     },
     {
      "uid": 5,
      "name": "captionCX",
      "comment": {
       "raw": [
        "CSS classes to put on the caption"
       ]
      },
      "typeValue": {
       "raw": "null | string | number | boolean | ClassDictionary | ClassArray"
      },
      "from": "@epam/uui-components:ButtonProps",
      "required": false
     },
     {
      "uid": 6,
      "name": "countIndicator",
      "comment": {
       "raw": [
        "CountIndicator component"
       ]
      },
      "typeValue": {
       "raw": "React.ComponentClass<IHasCaption, any> | React.FunctionComponent<IHasCaption>"
      },
      "from": "@epam/uui-components:ButtonProps",
      "required": false
     },
     {
      "uid": 7,
      "name": "dropdownIcon",
      "comment": {
       "raw": [
        "Icon for drop-down toggler"
       ]
      },
      "typeValue": {
       "raw": "Icon"
      },
      "editor": {
       "type": "component"
      },
      "from": "@epam/uui-core:ButtonCoreProps",
      "required": false
     },
     {
      "uid": 8,
      "name": "dropdownIconPosition",
      "comment": {
       "raw": [
        "Position of the dropdown icon ('left' of 'right')"
       ]
      },
      "typeValue": {
       "raw": "'left' | 'right'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "left",
        "right"
       ]
      },
      "from": "@epam/uui-core:ButtonCoreProps",
      "required": false
     },
     {
      "uid": 9,
      "name": "count",
      "typeValue": {
       "raw": "null | string | number | boolean | React.ReactElement<any, string | React.JSXElementConstructor<any>> | React.ReactFragment | React.ReactPortal"
      },
      "from": "@epam/uui-core:ButtonCoreProps",
      "required": false
     },
     {
      "uid": 10,
      "name": "onClick",
      "comment": {
       "raw": [
        "Called when component is clicked"
       ]
      },
      "typeValue": {
       "raw": "(e?: any) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IClickable",
      "required": false
     },
     {
      "uid": 11,
      "name": "link",
      "comment": {
       "raw": [
        "Link object to redirect to for SPA-redirects"
       ]
      },
      "typeValue": {
       "raw": "Link"
      },
      "from": "@epam/uui-core:ICanRedirect",
      "required": false
     },
     {
      "uid": 12,
      "name": "href",
      "comment": {
       "raw": [
        "Href (URL) to redirect to, for non-SPA redirects"
       ]
      },
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "from": "@epam/uui-core:ICanRedirect",
      "required": false
     },
     {
      "uid": 13,
      "name": "isLinkActive",
      "comment": {
       "raw": [
        "Highlights component to show that link is active (browser is displaying the page to which link is pointing)"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:ICanRedirect",
      "required": false
     },
     {
      "uid": 14,
      "name": "target",
      "comment": {
       "raw": [
        "Controls where the link should be opened"
       ]
      },
      "typeValue": {
       "raw": "'_blank'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "_blank"
       ]
      },
      "from": "@epam/uui-core:ICanRedirect",
      "required": false
     },
     {
      "uid": 15,
      "name": "isDisabled",
      "comment": {
       "raw": [
        "Disable editing, and visually de-emphasize value of the component"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:IDisableable",
      "required": false
     },
     {
      "uid": 16,
      "name": "iconPosition",
      "comment": {
       "raw": [
        "Position of the icon (left of right)"
       ]
      },
      "typeValue": {
       "raw": "'left' | 'right'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "left",
        "right"
       ]
      },
      "from": "@epam/uui-core:IHasIcon",
      "required": false
     },
     {
      "uid": 17,
      "name": "onIconClick",
      "comment": {
       "raw": [
        "Click handler for the icon"
       ]
      },
      "typeValue": {
       "raw": "() => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IHasIcon",
      "required": false
     },
     {
      "uid": 18,
      "name": "clickAnalyticsEvent",
      "comment": {
       "raw": [
        "An analytics event to send (via AnalyticsContext) when component is clicked.",
        " See [AnalyticsContext](@link https://uui.epam.com/documents?id=analyticsContext&mode=doc&skin=UUI4_promo&category=contexts)."
       ]
      },
      "typeValue": {
       "raw": "null | { [key: string]: any; name: string; }"
      },
      "from": "@epam/uui-core:IAnalyticableClick",
      "required": false
     },
     {
      "uid": 19,
      "name": "tabIndex",
      "comment": {
       "raw": [
        "Controls the order of keyboard navigation between components"
       ]
      },
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "from": "@epam/uui-core:IHasTabIndex",
      "required": false
     },
     {
      "uid": 20,
      "name": "caption",
      "comment": {
       "raw": [
        "Caption. Can be a string, or React.Elements. Certain components supports minimal markup (<b>,<i>,<a>) in captions."
       ]
      },
      "typeValue": {
       "raw": "any"
      },
      "from": "@epam/uui-core:IHasCaption",
      "required": false
     },
     {
      "uid": 21,
      "name": "onClear",
      "comment": {
       "raw": [
        "Call to clear toggler value"
       ]
      },
      "typeValue": {
       "raw": "(e?: any) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IBasicPickerToggler",
      "required": false
     },
     {
      "uid": 22,
      "name": "isOpen",
      "comment": {
       "raw": [
        "When isDropdown=true, indicate that dropdown is open with chevron icon"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:IDropdownToggler",
      "required": false
     },
     {
      "uid": 23,
      "name": "isDropdown",
      "comment": {
       "raw": [
        "Shows chevron icon, enabling component to act as dropdown toggler"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:IDropdownToggler",
      "required": false
     },
     {
      "uid": 24,
      "name": "toggleDropdownOpening",
      "comment": {
       "raw": [
        "Called when associated dropdown should open or close"
       ]
      },
      "typeValue": {
       "raw": "(value: boolean) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IDropdownToggler",
      "required": false
     },
     {
      "uid": 25,
      "name": "isInteractedOutside",
      "comment": {
       "raw": [
        "Called when component is interacted outside, to close the dropdown"
       ]
      },
      "typeValue": {
       "raw": "(event: Event) => boolean"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IDropdownToggler",
      "required": false
     },
     {
      "uid": 26,
      "name": "ref",
      "comment": {
       "raw": [
        "Component's ref"
       ]
      },
      "typeValue": {
       "raw": "null | (instance: any) => void | React.RefObject<any>"
      },
      "from": "@epam/uui-core:IDropdownToggler",
      "required": false
     },
     {
      "uid": 27,
      "name": "forwardedRef",
      "comment": {
       "raw": [
        "this ref is passed to the underlying component"
       ]
      },
      "typeValue": {
       "raw": "null | (instance: HTMLButtonElement | HTMLAnchorElement | null) => void | React.MutableRefObject<HTMLButtonElement | HTMLAnchorElement | null>"
      },
      "from": "@epam/uui-core:IHasForwardedRef",
      "required": false
     },
     {
      "uid": 28,
      "name": "indicator",
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui:BadgeMods",
      "required": false
     },
     {
      "uid": 29,
      "name": "color",
      "typeValue": {
       "raw": "'sky' | 'grass' | 'sun' | 'fire' | 'cobalt' | 'violet' | 'fuchsia' | 'yellow' | 'orange' | 'purple' | 'cyan' | 'mint' | 'white' | 'night100' | 'night300' | 'night600'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "sky",
        "grass",
        "sun",
        "fire",
        "cobalt",
        "violet",
        "fuchsia",
        "yellow",
        "orange",
        "purple",
        "cyan",
        "mint",
        "white",
        "night100",
        "night300",
        "night600"
       ]
      },
      "from": "@epam/loveship:BadgeMods",
      "required": false
     },
     {
      "uid": 30,
      "name": "shape",
      "typeValue": {
       "raw": "'square' | 'round'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "square",
        "round"
       ]
      },
      "from": "@epam/loveship:BadgeMods",
      "required": false
     },
     {
      "uid": 31,
      "name": "fill",
      "typeValue": {
       "raw": "'solid' | 'outline' | 'semitransparent' | 'transparent'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "solid",
        "outline",
        "semitransparent",
        "transparent"
       ]
      },
      "from": "@epam/loveship:BadgeMods",
      "required": false
     },
     {
      "uid": 32,
      "name": "size",
      "typeValue": {
       "raw": "'36' | '48' | '18' | '24' | '30' | '42' | '12'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "12",
        "18",
        "24",
        "30",
        "36",
        "42",
        "48"
       ]
      },
      "from": "@epam/loveship:BadgeMods",
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/loveship:ButtonColorType": {
   "summary": {
    "module": "@epam/loveship",
    "typeName": {
     "name": "ButtonColorType",
     "nameFull": "ButtonColorType"
    },
    "src": "loveship/components/buttons/Button.tsx",
    "exported": true
   },
   "details": {
    "kind": 264,
    "typeValue": {
     "raw": "'sky' | 'grass' | 'sun' | 'fire' | 'white' | 'night600' | 'night500' | 'gray'",
     "print": [
      "type ButtonColorType = EpamPrimaryColor | 'white' | 'night500' | 'night600' | 'gray';"
     ]
    }
   }
  },
  "@epam/loveship:ButtonMods": {
   "summary": {
    "module": "@epam/loveship",
    "typeName": {
     "name": "ButtonMods",
     "nameFull": "ButtonMods"
    },
    "src": "loveship/components/buttons/Button.tsx",
    "exported": true
   },
   "details": {
    "kind": 263,
    "typeValue": {
     "raw": "ButtonMods",
     "print": [
      "interface ButtonMods {",
      "    color?: ButtonColorType;",
      "    /** @default '36' */",
      "    size?: ControlSize | '42' | '18';",
      "    /** @default 'square' */",
      "    shape?: ControlShape;",
      "    /** @default 'solid' */",
      "    fill?: FillStyle;",
      "}"
     ]
    },
    "props": [
     {
      "uid": 1,
      "name": "color",
      "typeValue": {
       "raw": "'sky' | 'grass' | 'sun' | 'fire' | 'white' | 'night600' | 'night500' | 'gray'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "sky",
        "grass",
        "sun",
        "fire",
        "white",
        "night600",
        "night500",
        "gray"
       ]
      },
      "required": false
     },
     {
      "uid": 2,
      "name": "size",
      "comment": {
       "raw": [
        "@default '36'"
       ],
       "tags": {
        "@default": "36"
       }
      },
      "typeValue": {
       "raw": "'36' | '48' | '18' | '24' | '30' | '42' | 'none'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "18",
        "24",
        "30",
        "36",
        "42",
        "48",
        "none"
       ]
      },
      "required": false
     },
     {
      "uid": 3,
      "name": "shape",
      "comment": {
       "raw": [
        "@default 'square'"
       ],
       "tags": {
        "@default": "square"
       }
      },
      "typeValue": {
       "raw": "'square' | 'round'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "square",
        "round"
       ]
      },
      "required": false
     },
     {
      "uid": 4,
      "name": "fill",
      "comment": {
       "raw": [
        "@default 'solid'"
       ],
       "tags": {
        "@default": "solid"
       }
      },
      "typeValue": {
       "raw": "'white' | 'solid' | 'none' | 'light'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "white",
        "solid",
        "none",
        "light"
       ]
      },
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/loveship:ButtonProps": {
   "summary": {
    "module": "@epam/loveship",
    "typeName": {
     "name": "ButtonProps",
     "nameFull": "ButtonProps"
    },
    "src": "loveship/components/buttons/Button.tsx",
    "exported": true
   },
   "details": {
    "kind": 264,
    "typeValue": {
     "raw": "ButtonProps",
     "print": [
      "type ButtonProps = Omit<UuiButtonProps, 'color' | 'fill'> & ButtonMods;"
     ]
    },
    "props": [
     {
      "uid": 1,
      "name": "icon",
      "comment": {
       "raw": [
        "Icon can be a React element (usually an SVG element)"
       ]
      },
      "typeValue": {
       "raw": "Icon"
      },
      "editor": {
       "type": "component"
      },
      "from": "@epam/uui-core:IHasIcon",
      "required": false
     },
     {
      "uid": 2,
      "name": "size",
      "typeValue": {
       "raw": "'36' | '48' | '18' | '24' | '30' | '42' | 'none'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "18",
        "24",
        "30",
        "36",
        "42",
        "48",
        "none"
       ]
      },
      "from": "@epam/uui:ButtonMods",
      "required": false
     },
     {
      "uid": 3,
      "name": "cx",
      "comment": {
       "raw": [
        "CSS class(es) to put on component's root. See {@link https://github.com/JedWatson/classnames#usage} for details"
       ]
      },
      "typeValue": {
       "raw": "null | string | number | boolean | ClassDictionary | ClassArray"
      },
      "from": "@epam/uui-core:IHasCX",
      "required": false
     },
     {
      "uid": 4,
      "name": "rawProps",
      "comment": {
       "raw": [
        "Any HTML attributes (native or 'data-') to put on the underlying component"
       ]
      },
      "typeValue": {
       "raw": "React.ButtonHTMLAttributes<HTMLButtonElement> & Record<`data-${string}`, string>"
      },
      "from": "@epam/uui-core:IHasRawProps",
      "required": false
     },
     {
      "uid": 5,
      "name": "clearIcon",
      "comment": {
       "raw": [
        "Icon for clear value button (usually cross)"
       ]
      },
      "typeValue": {
       "raw": "Icon"
      },
      "editor": {
       "type": "component"
      },
      "from": "@epam/uui-components:ButtonProps",
      "required": false
     },
     {
      "uid": 6,
      "name": "captionCX",
      "comment": {
       "raw": [
        "CSS classes to put on the caption"
       ]
      },
      "typeValue": {
       "raw": "null | string | number | boolean | ClassDictionary | ClassArray"
      },
      "from": "@epam/uui-components:ButtonProps",
      "required": false
     },
     {
      "uid": 7,
      "name": "countIndicator",
      "comment": {
       "raw": [
        "CountIndicator component"
       ]
      },
      "typeValue": {
       "raw": "React.ComponentClass<IHasCaption, any> | React.FunctionComponent<IHasCaption>"
      },
      "from": "@epam/uui-components:ButtonProps",
      "required": false
     },
     {
      "uid": 8,
      "name": "dropdownIcon",
      "comment": {
       "raw": [
        "Icon for drop-down toggler"
       ]
      },
      "typeValue": {
       "raw": "Icon"
      },
      "editor": {
       "type": "component"
      },
      "from": "@epam/uui-core:ButtonCoreProps",
      "required": false
     },
     {
      "uid": 9,
      "name": "dropdownIconPosition",
      "comment": {
       "raw": [
        "Position of the dropdown icon ('left' of 'right')"
       ]
      },
      "typeValue": {
       "raw": "'left' | 'right'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "left",
        "right"
       ]
      },
      "from": "@epam/uui-core:ButtonCoreProps",
      "required": false
     },
     {
      "uid": 10,
      "name": "onClick",
      "comment": {
       "raw": [
        "Called when component is clicked"
       ]
      },
      "typeValue": {
       "raw": "(e?: any) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IClickable",
      "required": false
     },
     {
      "uid": 11,
      "name": "link",
      "comment": {
       "raw": [
        "Link object to redirect to for SPA-redirects"
       ]
      },
      "typeValue": {
       "raw": "Link"
      },
      "from": "@epam/uui-core:ICanRedirect",
      "required": false
     },
     {
      "uid": 12,
      "name": "href",
      "comment": {
       "raw": [
        "Href (URL) to redirect to, for non-SPA redirects"
       ]
      },
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "from": "@epam/uui-core:ICanRedirect",
      "required": false
     },
     {
      "uid": 13,
      "name": "isLinkActive",
      "comment": {
       "raw": [
        "Highlights component to show that link is active (browser is displaying the page to which link is pointing)"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:ICanRedirect",
      "required": false
     },
     {
      "uid": 14,
      "name": "target",
      "comment": {
       "raw": [
        "Controls where the link should be opened"
       ]
      },
      "typeValue": {
       "raw": "'_blank'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "_blank"
       ]
      },
      "from": "@epam/uui-core:ICanRedirect",
      "required": false
     },
     {
      "uid": 15,
      "name": "isDisabled",
      "comment": {
       "raw": [
        "Disable editing, and visually de-emphasize value of the component"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:IDisableable",
      "required": false
     },
     {
      "uid": 16,
      "name": "iconPosition",
      "comment": {
       "raw": [
        "Position of the icon (left of right)"
       ]
      },
      "typeValue": {
       "raw": "'left' | 'right'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "left",
        "right"
       ]
      },
      "from": "@epam/uui-core:IHasIcon",
      "required": false
     },
     {
      "uid": 17,
      "name": "onIconClick",
      "comment": {
       "raw": [
        "Click handler for the icon"
       ]
      },
      "typeValue": {
       "raw": "() => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IHasIcon",
      "required": false
     },
     {
      "uid": 18,
      "name": "clickAnalyticsEvent",
      "comment": {
       "raw": [
        "An analytics event to send (via AnalyticsContext) when component is clicked.",
        " See [AnalyticsContext](@link https://uui.epam.com/documents?id=analyticsContext&mode=doc&skin=UUI4_promo&category=contexts)."
       ]
      },
      "typeValue": {
       "raw": "null | { [key: string]: any; name: string; }"
      },
      "from": "@epam/uui-core:IAnalyticableClick",
      "required": false
     },
     {
      "uid": 19,
      "name": "tabIndex",
      "comment": {
       "raw": [
        "Controls the order of keyboard navigation between components"
       ]
      },
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "from": "@epam/uui-core:IHasTabIndex",
      "required": false
     },
     {
      "uid": 20,
      "name": "caption",
      "comment": {
       "raw": [
        "Caption. Can be a string, or React.Elements. Certain components supports minimal markup (<b>,<i>,<a>) in captions."
       ]
      },
      "typeValue": {
       "raw": "any"
      },
      "from": "@epam/uui-core:IHasCaption",
      "required": false
     },
     {
      "uid": 21,
      "name": "onClear",
      "comment": {
       "raw": [
        "Call to clear toggler value"
       ]
      },
      "typeValue": {
       "raw": "(e?: any) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IBasicPickerToggler",
      "required": false
     },
     {
      "uid": 22,
      "name": "isOpen",
      "comment": {
       "raw": [
        "When isDropdown=true, indicate that dropdown is open with chevron icon"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:IDropdownToggler",
      "required": false
     },
     {
      "uid": 23,
      "name": "isDropdown",
      "comment": {
       "raw": [
        "Shows chevron icon, enabling component to act as dropdown toggler"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:IDropdownToggler",
      "required": false
     },
     {
      "uid": 24,
      "name": "toggleDropdownOpening",
      "comment": {
       "raw": [
        "Called when associated dropdown should open or close"
       ]
      },
      "typeValue": {
       "raw": "(value: boolean) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IDropdownToggler",
      "required": false
     },
     {
      "uid": 25,
      "name": "isInteractedOutside",
      "comment": {
       "raw": [
        "Called when component is interacted outside, to close the dropdown"
       ]
      },
      "typeValue": {
       "raw": "(event: Event) => boolean"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IDropdownToggler",
      "required": false
     },
     {
      "uid": 26,
      "name": "ref",
      "comment": {
       "raw": [
        "Component's ref"
       ]
      },
      "typeValue": {
       "raw": "null | (instance: any) => void | React.RefObject<any>"
      },
      "from": "@epam/uui-core:IDropdownToggler",
      "required": false
     },
     {
      "uid": 27,
      "name": "forwardedRef",
      "comment": {
       "raw": [
        "this ref is passed to the underlying component"
       ]
      },
      "typeValue": {
       "raw": "null | (instance: HTMLButtonElement | HTMLAnchorElement | null) => void | React.MutableRefObject<HTMLButtonElement | HTMLAnchorElement | null>"
      },
      "from": "@epam/uui-core:IHasForwardedRef",
      "required": false
     },
     {
      "uid": 28,
      "name": "color",
      "typeValue": {
       "raw": "'sky' | 'grass' | 'sun' | 'fire' | 'white' | 'night600' | 'night500' | 'gray'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "sky",
        "grass",
        "sun",
        "fire",
        "white",
        "night600",
        "night500",
        "gray"
       ]
      },
      "from": "@epam/loveship:ButtonMods",
      "required": false
     },
     {
      "uid": 29,
      "name": "shape",
      "comment": {
       "raw": [
        "@default 'square'"
       ],
       "tags": {
        "@default": "square"
       }
      },
      "typeValue": {
       "raw": "'square' | 'round'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "square",
        "round"
       ]
      },
      "from": "@epam/loveship:ButtonMods",
      "required": false
     },
     {
      "uid": 30,
      "name": "fill",
      "comment": {
       "raw": [
        "@default 'solid'"
       ],
       "tags": {
        "@default": "solid"
       }
      },
      "typeValue": {
       "raw": "'white' | 'solid' | 'none' | 'light'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "white",
        "solid",
        "none",
        "light"
       ]
      },
      "from": "@epam/loveship:ButtonMods",
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/loveship:ColorMod": {
   "summary": {
    "module": "@epam/loveship",
    "typeName": {
     "name": "ColorMod",
     "nameFull": "ColorMod"
    },
    "src": "loveship/components/types.ts",
    "exported": true
   },
   "details": {
    "kind": 263,
    "typeValue": {
     "raw": "ColorMod",
     "print": [
      "// Mod interfaces",
      "interface ColorMod {",
      "    /** Component color */",
      "    color?: EpamColor;",
      "}"
     ]
    },
    "props": [
     {
      "uid": 1,
      "name": "color",
      "comment": {
       "raw": [
        "Component color"
       ]
      },
      "typeValue": {
       "raw": "'sky' | 'grass' | 'sun' | 'fire' | 'cobalt' | 'violet' | 'fuchsia' | 'white' | 'night100' | 'night300' | 'night600' | 'night500' | 'night50' | 'night200' | 'night400' | 'night700' | 'night800' | 'night900'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "sky",
        "grass",
        "sun",
        "fire",
        "cobalt",
        "violet",
        "fuchsia",
        "white",
        "night100",
        "night300",
        "night600",
        "night500",
        "night50",
        "night200",
        "night400",
        "night700",
        "night800",
        "night900"
       ]
      },
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/loveship:ControlShape": {
   "summary": {
    "module": "@epam/loveship",
    "typeName": {
     "name": "ControlShape",
     "nameFull": "ControlShape"
    },
    "src": "loveship/components/types.ts",
    "exported": true
   },
   "details": {
    "kind": 264,
    "typeValue": {
     "raw": "'square' | 'round'",
     "print": [
      "type ControlShape = 'square' | 'round';"
     ]
    }
   }
  },
  "@epam/loveship:ControlSize": {
   "summary": {
    "module": "@epam/loveship",
    "typeName": {
     "name": "ControlSize",
     "nameFull": "ControlSize"
    },
    "src": "loveship/components/types.ts",
    "exported": true
   },
   "details": {
    "kind": 264,
    "typeValue": {
     "raw": "'36' | '48' | '24' | '30' | '42' | 'none'",
     "print": [
      "type ControlSize = 'none' | '24' | '30' | '36' | '42' | '48';"
     ]
    }
   }
  },
  "@epam/loveship:CountIndicatorMods": {
   "summary": {
    "module": "@epam/loveship",
    "typeName": {
     "name": "CountIndicatorMods",
     "nameFull": "CountIndicatorMods"
    },
    "src": "loveship/components/widgets/CountIndicator.tsx",
    "exported": true
   },
   "details": {
    "kind": 263,
    "typeValue": {
     "raw": "CountIndicatorMods",
     "print": [
      "interface CountIndicatorMods {",
      "    color: 'gray' | 'white' | 'sky' | 'grass' | 'sun' | 'fire' | null;",
      "}"
     ]
    },
    "props": [
     {
      "uid": 1,
      "name": "color",
      "typeValue": {
       "raw": "null | 'sky' | 'grass' | 'sun' | 'fire' | 'white' | 'gray'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "sky",
        "grass",
        "sun",
        "fire",
        "white",
        "gray",
        null
       ]
      },
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/loveship:CountIndicatorProps": {
   "summary": {
    "module": "@epam/loveship",
    "typeName": {
     "name": "CountIndicatorProps",
     "nameFull": "CountIndicatorProps"
    },
    "src": "loveship/components/widgets/CountIndicator.tsx",
    "exported": true
   },
   "details": {
    "kind": 264,
    "typeValue": {
     "raw": "CountIndicatorProps",
     "print": [
      "type CountIndicatorProps = Omit<UuiCountIndicatorProps, 'color'> & CountIndicatorMods;"
     ]
    },
    "props": [
     {
      "uid": 1,
      "name": "size",
      "comment": {
       "raw": [
        "@default '24'"
       ],
       "tags": {
        "@default": "24"
       }
      },
      "typeValue": {
       "raw": "'18' | '24' | '12'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "12",
        "18",
        "24"
       ]
      },
      "from": "@epam/uui:CountIndicatorProps",
      "required": false
     },
     {
      "uid": 2,
      "name": "cx",
      "comment": {
       "raw": [
        "CSS class(es) to put on component's root. See {@link https://github.com/JedWatson/classnames#usage} for details"
       ]
      },
      "typeValue": {
       "raw": "null | string | number | boolean | ClassDictionary | ClassArray"
      },
      "from": "@epam/uui-core:IHasCX",
      "required": false
     },
     {
      "uid": 3,
      "name": "caption",
      "comment": {
       "raw": [
        "Caption. Can be a string, or React.Elements. Certain components supports minimal markup (<b>,<i>,<a>) in captions."
       ]
      },
      "typeValue": {
       "raw": "any"
      },
      "from": "@epam/uui-core:IHasCaption",
      "required": false
     },
     {
      "uid": 4,
      "name": "color",
      "typeValue": {
       "raw": "null | 'sky' | 'grass' | 'sun' | 'fire' | 'white' | 'gray'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "sky",
        "grass",
        "sun",
        "fire",
        "white",
        "gray",
        null
       ]
      },
      "from": "@epam/loveship:CountIndicatorMods",
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/loveship:DropdownContainerMods": {
   "summary": {
    "module": "@epam/loveship",
    "typeName": {
     "name": "DropdownContainerMods",
     "nameFull": "DropdownContainerMods"
    },
    "src": "loveship/components/overlays/DropdownContainer.tsx",
    "exported": true
   },
   "details": {
    "kind": 263,
    "typeValue": {
     "raw": "DropdownContainerMods",
     "print": [
      "interface DropdownContainerMods {",
      "    color?: 'white' | 'night700';",
      "}"
     ]
    },
    "props": [
     {
      "uid": 1,
      "name": "color",
      "typeValue": {
       "raw": "'white' | 'night700'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "white",
        "night700"
       ]
      },
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/loveship:DropdownContainerProps": {
   "summary": {
    "module": "@epam/loveship",
    "typeName": {
     "name": "DropdownContainerProps",
     "nameFull": "DropdownContainerProps"
    },
    "src": "loveship/components/overlays/DropdownContainer.tsx",
    "exported": true
   },
   "details": {
    "kind": 264,
    "typeValue": {
     "raw": "DropdownContainerProps",
     "print": [
      "type DropdownContainerProps = uui.DropdownContainerProps & DropdownContainerMods;"
     ]
    },
    "props": [
     {
      "uid": 1,
      "name": "width",
      "typeValue": {
       "raw": "number | 'auto'"
      },
      "from": "@epam/uui-components:DropdownContainerProps",
      "required": false
     },
     {
      "uid": 2,
      "name": "maxWidth",
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "from": "@epam/uui-components:DropdownContainerProps",
      "required": false
     },
     {
      "uid": 3,
      "name": "height",
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "from": "@epam/uui-components:DropdownContainerProps",
      "required": false
     },
     {
      "uid": 4,
      "name": "showArrow",
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-components:DropdownContainerProps",
      "required": false
     },
     {
      "uid": 5,
      "name": "style",
      "typeValue": {
       "raw": "React.CSSProperties"
      },
      "from": "@epam/uui-components:DropdownContainerProps",
      "required": false
     },
     {
      "uid": 6,
      "name": "focusLock",
      "comment": {
       "raw": [
        "Pass true to wrap DropdownContainer with FocusLock component to support keyboard navigation.",
        " If omitted, true value will be used.",
        "",
        " After DropdownContainer appeared the focus will be set on the first focusable element inside.",
        " @default true"
       ],
       "tags": {
        "@default": true
       }
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-components:DropdownContainerProps",
      "required": false
     },
     {
      "uid": 7,
      "name": "returnFocus",
      "comment": {
       "raw": [
        "Pass true to return focus into initial position on unmount.",
        " If omitted, true value will be used. It's used if focusLock=true."
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-components:DropdownContainerProps",
      "required": false
     },
     {
      "uid": 8,
      "name": "persistentFocus",
      "comment": {
       "raw": [
        "Pass true to lock focus within DropdownContainer.",
        " If omitted, true value will be used. It's used if focusLock=true."
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-components:DropdownContainerProps",
      "required": false
     },
     {
      "uid": 9,
      "name": "lockProps",
      "comment": {
       "raw": [
        "Pass any extra props to the FocusLock wrapper."
       ]
      },
      "typeValue": {
       "raw": "Record<string, any>"
      },
      "from": "@epam/uui-components:DropdownContainerProps",
      "required": false
     },
     {
      "uid": 10,
      "name": "shards",
      "comment": {
       "raw": [
        "Pass an array of ref pointing to the nodes, which focus lock should consider and a part of it. This is a way of focus scattering."
       ]
      },
      "typeValue": {
       "raw": "React.RefObject<HTMLElement>[]"
      },
      "from": "@epam/uui-components:DropdownContainerProps",
      "required": false
     },
     {
      "uid": 11,
      "name": "as",
      "comment": {
       "raw": [
        "Pass element name if you need to change internal FocusLock div element, to any other."
       ]
      },
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "from": "@epam/uui-components:DropdownContainerProps",
      "required": false
     },
     {
      "uid": 12,
      "name": "closeOnEsc",
      "comment": {
       "raw": [
        "Pass true to handle Escape key press and call props.onClose().",
        " If omitted, true value will be used. It's used if focusLock=true."
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-components:DropdownContainerProps",
      "required": false
     },
     {
      "uid": 13,
      "name": "onKeyDown",
      "comment": {
       "raw": [
        "Called on keyDown event in DropdownContainer.",
        "     Can be used to provide your own handlers."
       ]
      },
      "typeValue": {
       "raw": "(e: React.KeyboardEvent<HTMLElement>) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-components:DropdownContainerProps",
      "required": false
     },
     {
      "uid": 14,
      "name": "cx",
      "comment": {
       "raw": [
        "CSS class(es) to put on component's root. See {@link https://github.com/JedWatson/classnames#usage} for details"
       ]
      },
      "typeValue": {
       "raw": "null | string | number | boolean | ClassDictionary | ClassArray"
      },
      "typeValueRef": "@epam/uui-core:ClassValue",
      "from": "@epam/uui-core:IHasCX",
      "required": false
     },
     {
      "uid": 15,
      "name": "children",
      "typeValue": {
       "raw": "null | string | number | boolean | React.ReactElement<any, string | React.JSXElementConstructor<any>> | React.ReactFragment | React.ReactPortal"
      },
      "typeValueRef": "@types/react:ReactNode",
      "from": "@epam/uui-core:IHasChildren",
      "required": false
     },
     {
      "uid": 16,
      "name": "rawProps",
      "comment": {
       "raw": [
        "Any HTML attributes (native or 'data-') to put on the underlying component"
       ]
      },
      "typeValue": {
       "raw": "React.HTMLAttributes<HTMLDivElement> & Record<`data-${string}`, string>"
      },
      "from": "@epam/uui-core:IHasRawProps",
      "required": false
     },
     {
      "uid": 17,
      "name": "forwardedRef",
      "comment": {
       "raw": [
        "this ref is passed to the underlying component"
       ]
      },
      "typeValue": {
       "raw": "null | (instance: HTMLDivElement | null) => void | React.MutableRefObject<HTMLDivElement | null>"
      },
      "from": "@epam/uui-core:IHasForwardedRef",
      "required": false
     },
     {
      "uid": 18,
      "name": "onClose",
      "comment": {
       "raw": [
        "Call to close the Dropdown body"
       ]
      },
      "typeValue": {
       "raw": "() => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IDropdownBodyProps",
      "required": false
     },
     {
      "uid": 19,
      "name": "togglerWidth",
      "comment": {
       "raw": [
        "The width of the toggler, which can be used to adjust the body width to it"
       ]
      },
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "from": "@epam/uui-core:IDropdownBodyProps",
      "required": false
     },
     {
      "uid": 20,
      "name": "togglerHeight",
      "comment": {
       "raw": [
        "The height of the toggler"
       ]
      },
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "from": "@epam/uui-core:IDropdownBodyProps",
      "required": false
     },
     {
      "uid": 21,
      "name": "scheduleUpdate",
      "comment": {
       "raw": [
        "Call to force recompute dropdown position"
       ]
      },
      "typeValue": {
       "raw": "() => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IDropdownBodyProps",
      "required": false
     },
     {
      "uid": 22,
      "name": "isOpen",
      "comment": {
       "raw": [
        "Indicates that dropdown is open"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:IDropdownBodyProps",
      "required": false
     },
     {
      "uid": 23,
      "name": "arrowProps",
      "comment": {
       "raw": [
        "Props that should be provided to the arrow component"
       ]
      },
      "typeValue": {
       "raw": "PopperArrowProps"
      },
      "from": "@epam/uui-core:IDropdownBodyProps",
      "required": false
     },
     {
      "uid": 24,
      "name": "placement",
      "comment": {
       "raw": [
        "Dropdown position relative to the input. See [Popper Docs](@link https://popper.js.org/)"
       ]
      },
      "typeValue": {
       "raw": "'left' | 'right' | 'auto' | 'auto-start' | 'auto-end' | 'top' | 'bottom' | 'top-start' | 'top-end' | 'bottom-start' | 'bottom-end' | 'right-start' | 'right-end' | 'left-start' | 'left-end'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "left",
        "right",
        "auto",
        "auto-start",
        "auto-end",
        "top",
        "bottom",
        "top-start",
        "top-end",
        "bottom-start",
        "bottom-end",
        "right-start",
        "right-end",
        "left-start",
        "left-end"
       ]
      },
      "from": "@epam/uui-core:IDropdownBodyProps",
      "required": false
     },
     {
      "uid": 25,
      "name": "vPadding",
      "typeValue": {
       "raw": "'48' | '18' | '24' | '30' | '12' | '6'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "6",
        "12",
        "18",
        "24",
        "30",
        "48"
       ]
      },
      "from": "@epam/uui:DropdownContainerMods",
      "required": false
     },
     {
      "uid": 26,
      "name": "padding",
      "typeValue": {
       "raw": "'18' | '24' | '30' | '12' | '6'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "6",
        "12",
        "18",
        "24",
        "30"
       ]
      },
      "from": "@epam/uui:DropdownContainerMods",
      "required": false
     },
     {
      "uid": 27,
      "name": "color",
      "typeValue": {
       "raw": "'white' | 'night700'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "white",
        "night700"
       ]
      },
      "from": "@epam/loveship:DropdownContainerMods",
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/loveship:EpamAdditionalColor": {
   "summary": {
    "module": "@epam/loveship",
    "typeName": {
     "name": "EpamAdditionalColor",
     "nameFull": "EpamAdditionalColor"
    },
    "src": "loveship/components/types.ts",
    "exported": true
   },
   "details": {
    "kind": 264,
    "typeValue": {
     "raw": "'cobalt' | 'violet' | 'fuchsia'",
     "print": [
      "type EpamAdditionalColor = 'cobalt' | 'violet' | 'fuchsia';"
     ]
    }
   }
  },
  "@epam/loveship:EpamColor": {
   "summary": {
    "module": "@epam/loveship",
    "typeName": {
     "name": "EpamColor",
     "nameFull": "EpamColor"
    },
    "src": "loveship/components/types.ts",
    "exported": true
   },
   "details": {
    "kind": 264,
    "typeValue": {
     "raw": "'sky' | 'grass' | 'sun' | 'fire' | 'cobalt' | 'violet' | 'fuchsia' | 'white' | 'night100' | 'night300' | 'night600' | 'night500' | 'night50' | 'night200' | 'night400' | 'night700' | 'night800' | 'night900'",
     "print": [
      "type EpamColor = EpamPrimaryColor | EpamAdditionalColor | EpamGrayscaleColor;"
     ]
    }
   }
  },
  "@epam/loveship:EpamGrayscaleColor": {
   "summary": {
    "module": "@epam/loveship",
    "typeName": {
     "name": "EpamGrayscaleColor",
     "nameFull": "EpamGrayscaleColor"
    },
    "src": "loveship/components/types.ts",
    "exported": true
   },
   "details": {
    "kind": 264,
    "typeValue": {
     "raw": "'white' | 'night100' | 'night300' | 'night600' | 'night500' | 'night50' | 'night200' | 'night400' | 'night700' | 'night800' | 'night900'",
     "print": [
      "type EpamGrayscaleColor = 'white' | 'night50' | 'night100' | 'night200' | 'night300' | 'night400' | 'night500' | 'night600' | 'night700' | 'night800' | 'night900';"
     ]
    }
   }
  },
  "@epam/loveship:EpamPrimaryColor": {
   "summary": {
    "module": "@epam/loveship",
    "typeName": {
     "name": "EpamPrimaryColor",
     "nameFull": "EpamPrimaryColor"
    },
    "src": "loveship/components/types.ts",
    "exported": true
   },
   "details": {
    "kind": 264,
    "typeValue": {
     "raw": "'sky' | 'grass' | 'sun' | 'fire'",
     "print": [
      "type EpamPrimaryColor = 'sky' | 'grass' | 'sun' | 'fire';"
     ]
    }
   }
  },
  "@epam/loveship:ErrorConfig": {
   "summary": {
    "module": "@epam/loveship",
    "typeName": {
     "name": "ErrorConfig",
     "nameFull": "ErrorConfig"
    },
    "src": "loveship/components/app/ErrorHandler.tsx",
    "exported": true
   },
   "details": {
    "kind": 263,
    "typeValue": {
     "raw": "ErrorConfig",
     "print": [
      "interface ErrorConfig {",
      "    getInfo?: (error: any, defaultErrorInfo: ErrorPageInfo) => ErrorPageInfo;",
      "}"
     ]
    },
    "props": [
     {
      "uid": 1,
      "name": "getInfo",
      "typeValue": {
       "raw": "(error: any, defaultErrorInfo: ErrorPageInfo) => ErrorPageInfo"
      },
      "editor": {
       "type": "func"
      },
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/loveship:ErrorPageProps": {
   "summary": {
    "module": "@epam/loveship",
    "typeName": {
     "name": "ErrorPageProps",
     "nameFull": "ErrorPageProps"
    },
    "src": "loveship/components/app/ErrorHandler.tsx",
    "exported": true
   },
   "details": {
    "kind": 263,
    "typeValue": {
     "raw": "ErrorPageProps",
     "print": [
      "interface ErrorPageProps extends IHasCX, IHasChildren {",
      "    errorPageConfig?: ErrorConfig;",
      "    theme?: Theme;",
      "    onNotificationError?: (errors: ApiCallInfo) => void;",
      "}"
     ]
    },
    "props": [
     {
      "uid": 1,
      "name": "errorPageConfig",
      "typeValue": {
       "raw": "ErrorConfig"
      },
      "required": false
     },
     {
      "uid": 2,
      "name": "theme",
      "typeValue": {
       "raw": "'light' | 'dark'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "light",
        "dark"
       ]
      },
      "required": false
     },
     {
      "uid": 3,
      "name": "onNotificationError",
      "typeValue": {
       "raw": "(errors: ApiCallInfo) => void"
      },
      "editor": {
       "type": "func"
      },
      "required": false
     },
     {
      "uid": 4,
      "name": "cx",
      "comment": {
       "raw": [
        "CSS class(es) to put on component's root. See {@link https://github.com/JedWatson/classnames#usage} for details"
       ]
      },
      "typeValue": {
       "raw": "null | string | number | boolean | ClassDictionary | ClassArray"
      },
      "typeValueRef": "@epam/uui-core:ClassValue",
      "from": "@epam/uui-core:IHasCX",
      "required": false
     },
     {
      "uid": 5,
      "name": "children",
      "typeValue": {
       "raw": "null | string | number | boolean | React.ReactElement<any, string | React.JSXElementConstructor<any>> | React.ReactFragment | React.ReactPortal"
      },
      "typeValueRef": "@types/react:ReactNode",
      "from": "@epam/uui-core:IHasChildren",
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/loveship:FillStyle": {
   "summary": {
    "module": "@epam/loveship",
    "typeName": {
     "name": "FillStyle",
     "nameFull": "FillStyle"
    },
    "src": "loveship/components/types.ts",
    "exported": true
   },
   "details": {
    "kind": 264,
    "typeValue": {
     "raw": "'white' | 'solid' | 'none' | 'light'",
     "print": [
      "type FillStyle = 'solid' | 'white' | 'light' | 'none';"
     ]
    }
   }
  },
  "@epam/loveship:FlexRowProps": {
   "summary": {
    "module": "@epam/loveship",
    "typeName": {
     "name": "FlexRowProps",
     "nameFull": "FlexRowProps"
    },
    "src": "loveship/components/layout/FlexItems/FlexRow.tsx",
    "exported": true
   },
   "details": {
    "kind": 264,
    "typeValue": {
     "raw": "FlexRowProps",
     "print": [
      "type FlexRowProps = uuiCore.FlexRowProps & RowMods;"
     ]
    },
    "props": [
     {
      "uid": 1,
      "name": "cx",
      "comment": {
       "raw": [
        "CSS class(es) to put on component's root. See {@link https://github.com/JedWatson/classnames#usage} for details"
       ]
      },
      "typeValue": {
       "raw": "null | string | number | boolean | ClassDictionary | ClassArray"
      },
      "typeValueRef": "@epam/uui-core:ClassValue",
      "from": "@epam/uui-core:IHasCX",
      "required": false
     },
     {
      "uid": 2,
      "name": "onClick",
      "comment": {
       "raw": [
        "Called when component is clicked"
       ]
      },
      "typeValue": {
       "raw": "(e?: any) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IClickable",
      "required": false
     },
     {
      "uid": 3,
      "name": "key",
      "typeValue": {
       "raw": "null | string | number"
      },
      "from": "@types/react:Attributes",
      "required": false
     },
     {
      "uid": 4,
      "name": "children",
      "typeValue": {
       "raw": "null | string | number | boolean | React.ReactElement<any, string | React.JSXElementConstructor<any>> | React.ReactFragment | React.ReactPortal"
      },
      "typeValueRef": "@types/react:ReactNode",
      "from": "@epam/uui-core:IHasChildren",
      "required": false
     },
     {
      "uid": 5,
      "name": "rawProps",
      "comment": {
       "raw": [
        "Any HTML attributes (native or 'data-') to put on the underlying component"
       ]
      },
      "typeValue": {
       "raw": "React.HTMLAttributes<HTMLDivElement> & Record<`data-${string}`, string>"
      },
      "from": "@epam/uui-core:IHasRawProps",
      "required": false
     },
     {
      "uid": 6,
      "name": "alignItems",
      "comment": {
       "raw": [
        "Flexbox align-items property [Flexbox Guide](https://css-tricks.com/snippets/css/a-guide-to-flexbox/)"
       ]
      },
      "typeValue": {
       "raw": "'top' | 'bottom' | 'center' | 'stretch'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "top",
        "bottom",
        "center",
        "stretch"
       ]
      },
      "from": "@epam/uui-core:FlexRowProps",
      "required": false
     },
     {
      "uid": 7,
      "name": "columnGap",
      "comment": {
       "raw": [
        "Flexbox column gap property [Flexbox Guide](https://css-tricks.com/snippets/css/a-guide-to-flexbox/#aa-gap-row-gap-column-gap)"
       ]
      },
      "typeValue": {
       "raw": "number | '36' | '18' | '24' | '12' | '6'"
      },
      "from": "@epam/uui-core:FlexRowProps",
      "required": false
     },
     {
      "uid": 8,
      "name": "rowGap",
      "comment": {
       "raw": [
        "Flexbox row gap property [Flexbox Guide](https://css-tricks.com/snippets/css/a-guide-to-flexbox/#aa-gap-row-gap-column-gap)"
       ]
      },
      "typeValue": {
       "raw": "number | '36' | '18' | '24' | '12' | '6'"
      },
      "from": "@epam/uui-core:FlexRowProps",
      "required": false
     },
     {
      "uid": 9,
      "name": "background",
      "comment": {
       "raw": [
        "@default 'none'"
       ],
       "tags": {
        "@default": "none"
       }
      },
      "typeValue": {
       "raw": "'white' | 'night100' | 'none' | 'night50'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "white",
        "night100",
        "none",
        "night50"
       ]
      },
      "from": "@epam/loveship:RowMods",
      "required": false
     },
     {
      "uid": 10,
      "name": "spacing",
      "typeValue": {
       "raw": "null | '18' | '12' | '6'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "6",
        "12",
        "18",
        null
       ]
      },
      "from": "@epam/loveship:RowMods",
      "required": false
     },
     {
      "uid": 11,
      "name": "type",
      "comment": {
       "raw": [
        "@default 'panel'"
       ],
       "tags": {
        "@default": "panel"
       }
      },
      "typeValue": {
       "raw": "'form' | 'panel'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "form",
        "panel"
       ]
      },
      "from": "@epam/loveship:RowMods",
      "required": false
     },
     {
      "uid": 12,
      "name": "size",
      "typeValue": {
       "raw": "null | '36' | '48' | '24' | '30' | '42'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "24",
        "30",
        "36",
        "42",
        "48",
        null
       ]
      },
      "from": "@epam/uui:RowSizeMod",
      "required": false
     },
     {
      "uid": 13,
      "name": "borderBottom",
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui:RowMods",
      "required": false
     },
     {
      "uid": 14,
      "name": "margin",
      "typeValue": {
       "raw": "'24' | '12'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "12",
        "24"
       ]
      },
      "from": "@epam/uui:RowMods",
      "required": false
     },
     {
      "uid": 15,
      "name": "padding",
      "typeValue": {
       "raw": "'18' | '24' | '12' | '6'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "6",
        "12",
        "18",
        "24"
       ]
      },
      "from": "@epam/uui:RowMods",
      "required": false
     },
     {
      "uid": 16,
      "name": "topShadow",
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui:RowMods",
      "required": false
     },
     {
      "uid": 17,
      "name": "vPadding",
      "typeValue": {
       "raw": "'36' | '48' | '18' | '24' | '12'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "12",
        "18",
        "24",
        "36",
        "48"
       ]
      },
      "from": "@epam/uui:RowMods",
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/loveship:FontMod": {
   "summary": {
    "module": "@epam/loveship",
    "typeName": {
     "name": "FontMod",
     "nameFull": "FontMod"
    },
    "src": "loveship/components/types.ts",
    "exported": true
   },
   "details": {
    "kind": 263,
    "typeValue": {
     "raw": "FontMod",
     "print": [
      "interface FontMod {",
      "    font?: FontStyle;",
      "}"
     ]
    },
    "props": [
     {
      "uid": 1,
      "name": "font",
      "typeValue": {
       "raw": "'sans' | 'sans-semibold' | 'sans-light'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "sans",
        "sans-semibold",
        "sans-light"
       ]
      },
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/loveship:FontStyle": {
   "summary": {
    "module": "@epam/loveship",
    "typeName": {
     "name": "FontStyle",
     "nameFull": "FontStyle"
    },
    "src": "loveship/components/types.ts",
    "exported": true
   },
   "details": {
    "kind": 264,
    "typeValue": {
     "raw": "'sans' | 'sans-semibold' | 'sans-light'",
     "print": [
      "type FontStyle = 'sans' | 'sans-semibold' | 'sans-light';"
     ]
    }
   }
  },
  "@epam/loveship:IconButtonMods": {
   "summary": {
    "module": "@epam/loveship",
    "typeName": {
     "name": "IconButtonMods",
     "nameFull": "IconButtonMods"
    },
    "src": "loveship/components/buttons/IconButton.tsx",
    "exported": true
   },
   "details": {
    "kind": 263,
    "typeValue": {
     "raw": "IconButtonMods",
     "print": [
      "interface IconButtonMods {",
      "    /**",
      "     * @default 'night600'",
      "     */",
      "    color?: EpamPrimaryColor | EpamAdditionalColor | 'white' | 'night200' | 'night300' | 'night400' | 'night500' | 'night600';",
      "}"
     ]
    },
    "props": [
     {
      "uid": 1,
      "name": "color",
      "comment": {
       "raw": [
        "@default 'night600'"
       ],
       "tags": {
        "@default": "night600"
       }
      },
      "typeValue": {
       "raw": "'sky' | 'grass' | 'sun' | 'fire' | 'cobalt' | 'violet' | 'fuchsia' | 'white' | 'night300' | 'night600' | 'night500' | 'night200' | 'night400'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "sky",
        "grass",
        "sun",
        "fire",
        "cobalt",
        "violet",
        "fuchsia",
        "white",
        "night300",
        "night600",
        "night500",
        "night200",
        "night400"
       ]
      },
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/loveship:IconButtonProps": {
   "summary": {
    "module": "@epam/loveship",
    "typeName": {
     "name": "IconButtonProps",
     "nameFull": "IconButtonProps"
    },
    "src": "loveship/components/buttons/IconButton.tsx",
    "exported": true
   },
   "details": {
    "kind": 264,
    "typeValue": {
     "raw": "IconButtonProps",
     "print": [
      "type IconButtonProps = Omit<UuiIconButtonProps, 'color'> & IconButtonMods;"
     ]
    },
    "props": [
     {
      "uid": 1,
      "name": "icon",
      "comment": {
       "raw": [
        "Icon can be a React element (usually an SVG element)"
       ]
      },
      "typeValue": {
       "raw": "Icon"
      },
      "editor": {
       "type": "component"
      },
      "from": "@epam/uui-core:IHasIcon",
      "required": false
     },
     {
      "uid": 2,
      "name": "cx",
      "comment": {
       "raw": [
        "CSS class(es) to put on component's root. See {@link https://github.com/JedWatson/classnames#usage} for details"
       ]
      },
      "typeValue": {
       "raw": "null | string | number | boolean | ClassDictionary | ClassArray"
      },
      "from": "@epam/uui-core:IHasCX",
      "required": false
     },
     {
      "uid": 3,
      "name": "rawProps",
      "comment": {
       "raw": [
        "Any HTML attributes (native or 'data-') to put on the underlying component"
       ]
      },
      "typeValue": {
       "raw": "React.ButtonHTMLAttributes<HTMLButtonElement> & Record<`data-${string}`, string>"
      },
      "from": "@epam/uui-core:IHasRawProps",
      "required": false
     },
     {
      "uid": 4,
      "name": "onClick",
      "comment": {
       "raw": [
        "Called when component is clicked"
       ]
      },
      "typeValue": {
       "raw": "(e?: any) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IClickable",
      "required": false
     },
     {
      "uid": 5,
      "name": "link",
      "comment": {
       "raw": [
        "Link object to redirect to for SPA-redirects"
       ]
      },
      "typeValue": {
       "raw": "Link"
      },
      "from": "@epam/uui-core:ICanRedirect",
      "required": false
     },
     {
      "uid": 6,
      "name": "href",
      "comment": {
       "raw": [
        "Href (URL) to redirect to, for non-SPA redirects"
       ]
      },
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "from": "@epam/uui-core:ICanRedirect",
      "required": false
     },
     {
      "uid": 7,
      "name": "isLinkActive",
      "comment": {
       "raw": [
        "Highlights component to show that link is active (browser is displaying the page to which link is pointing)"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:ICanRedirect",
      "required": false
     },
     {
      "uid": 8,
      "name": "target",
      "comment": {
       "raw": [
        "Controls where the link should be opened"
       ]
      },
      "typeValue": {
       "raw": "'_blank'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "_blank"
       ]
      },
      "from": "@epam/uui-core:ICanRedirect",
      "required": false
     },
     {
      "uid": 9,
      "name": "isDisabled",
      "comment": {
       "raw": [
        "Disable editing, and visually de-emphasize value of the component"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:IDisableable",
      "required": false
     },
     {
      "uid": 10,
      "name": "iconPosition",
      "comment": {
       "raw": [
        "Position of the icon (left of right)"
       ]
      },
      "typeValue": {
       "raw": "'left' | 'right'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "left",
        "right"
       ]
      },
      "from": "@epam/uui-core:IHasIcon",
      "required": false
     },
     {
      "uid": 11,
      "name": "onIconClick",
      "comment": {
       "raw": [
        "Click handler for the icon"
       ]
      },
      "typeValue": {
       "raw": "() => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IHasIcon",
      "required": false
     },
     {
      "uid": 12,
      "name": "clickAnalyticsEvent",
      "comment": {
       "raw": [
        "An analytics event to send (via AnalyticsContext) when component is clicked.",
        " See [AnalyticsContext](@link https://uui.epam.com/documents?id=analyticsContext&mode=doc&skin=UUI4_promo&category=contexts)."
       ]
      },
      "typeValue": {
       "raw": "null | { [key: string]: any; name: string; }"
      },
      "from": "@epam/uui-core:IAnalyticableClick",
      "required": false
     },
     {
      "uid": 13,
      "name": "tabIndex",
      "comment": {
       "raw": [
        "Controls the order of keyboard navigation between components"
       ]
      },
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "from": "@epam/uui-core:IHasTabIndex",
      "required": false
     },
     {
      "uid": 14,
      "name": "forwardedRef",
      "comment": {
       "raw": [
        "this ref is passed to the underlying component"
       ]
      },
      "typeValue": {
       "raw": "null | (instance: HTMLButtonElement | HTMLAnchorElement | null) => void | React.MutableRefObject<HTMLButtonElement | HTMLAnchorElement | null>"
      },
      "from": "@epam/uui-core:IHasForwardedRef",
      "required": false
     },
     {
      "uid": 15,
      "name": "color",
      "comment": {
       "raw": [
        "@default 'night600'"
       ],
       "tags": {
        "@default": "night600"
       }
      },
      "typeValue": {
       "raw": "'sky' | 'grass' | 'sun' | 'fire' | 'cobalt' | 'violet' | 'fuchsia' | 'white' | 'night300' | 'night600' | 'night500' | 'night200' | 'night400'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "sky",
        "grass",
        "sun",
        "fire",
        "cobalt",
        "violet",
        "fuchsia",
        "white",
        "night300",
        "night600",
        "night500",
        "night200",
        "night400"
       ]
      },
      "from": "@epam/loveship:IconButtonMods",
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/loveship:IconContainerMods": {
   "summary": {
    "module": "@epam/loveship",
    "typeName": {
     "name": "IconContainerMods",
     "nameFull": "IconContainerMods"
    },
    "src": "loveship/components/layout/IconContainer.tsx",
    "exported": true
   },
   "details": {
    "kind": 263,
    "typeValue": {
     "raw": "IconContainerMods",
     "print": [
      "interface IconContainerMods {",
      "    /**",
      "     * IconContainer color.",
      "     * @deprecated Property color is deprecated and will be removed in future release. Please make icon color configuration by yourself, e.g. via cx or style prop.",
      "     * @default 'night600'",
      "     */",
      "    color?: 'sky' | 'grass' | 'sun' | 'fire' | 'carbon' | 'cobalt' | 'lavanda' | 'fuchsia' | 'white' | 'night50' | 'night100' | 'night200' | 'night300' | 'night400' | 'night500' | 'night600' | 'night700' | 'night800' | 'night900';",
      "}"
     ]
    },
    "props": [
     {
      "uid": 1,
      "name": "color",
      "comment": {
       "raw": [
        "IconContainer color.",
        " @deprecated Property color is deprecated and will be removed in future release. Please make icon color configuration by yourself, e.g. via cx or style prop.",
        " @default 'night600'"
       ],
       "tags": {
        "@default": "night600"
       }
      },
      "typeValue": {
       "raw": "'sky' | 'grass' | 'sun' | 'fire' | 'cobalt' | 'fuchsia' | 'white' | 'night100' | 'night300' | 'night600' | 'night500' | 'night50' | 'night200' | 'night400' | 'night700' | 'night800' | 'night900' | 'carbon' | 'lavanda'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "sky",
        "grass",
        "sun",
        "fire",
        "cobalt",
        "fuchsia",
        "white",
        "night100",
        "night300",
        "night600",
        "night500",
        "night50",
        "night200",
        "night400",
        "night700",
        "night800",
        "night900",
        "carbon",
        "lavanda"
       ]
      },
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/loveship:IconContainerProps": {
   "summary": {
    "module": "@epam/loveship",
    "typeName": {
     "name": "IconContainerProps",
     "nameFull": "IconContainerProps"
    },
    "src": "loveship/components/layout/IconContainer.tsx",
    "exported": true
   },
   "details": {
    "kind": 264,
    "typeValue": {
     "raw": "IconContainerProps",
     "print": [
      "type IconContainerProps = ControlIconProps & IconContainerMods;"
     ]
    },
    "props": [
     {
      "uid": 1,
      "name": "icon",
      "comment": {
       "raw": [
        "Icon to display"
       ]
      },
      "typeValue": {
       "raw": "Icon"
      },
      "editor": {
       "type": "component"
      },
      "from": "@epam/uui-components:ControlIconProps",
      "required": false
     },
     {
      "uid": 2,
      "name": "flipY",
      "comment": {
       "raw": [
        "Flips the icon vertically"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-components:ControlIconProps",
      "required": false
     },
     {
      "uid": 3,
      "name": "rotate",
      "comment": {
       "raw": [
        "Rotate the icon (cw stands for 'clock-wise', ccw stands for 'counter clock-wise))"
       ]
      },
      "typeValue": {
       "raw": "'0' | '90cw' | '180' | '90ccw'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "0",
        "180",
        "90cw",
        "90ccw"
       ]
      },
      "from": "@epam/uui-components:ControlIconProps",
      "required": false
     },
     {
      "uid": 4,
      "name": "onClick",
      "comment": {
       "raw": [
        "Click handler"
       ]
      },
      "typeValue": {
       "raw": "(e: React.SyntheticEvent<HTMLDivElement, Event>) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-components:ControlIconProps",
      "required": false
     },
     {
      "uid": 5,
      "name": "style",
      "comment": {
       "raw": [
        "CSS style prop to put on the component"
       ]
      },
      "typeValue": {
       "raw": "React.CSSProperties"
      },
      "from": "@epam/uui-components:ControlIconProps",
      "required": false
     },
     {
      "uid": 6,
      "name": "size",
      "comment": {
       "raw": [
        "Icon size in pixels (both width and height, as icons are assumed to be square-shaped)"
       ]
      },
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "from": "@epam/uui-components:ControlIconProps",
      "required": false
     },
     {
      "uid": 7,
      "name": "cx",
      "comment": {
       "raw": [
        "CSS class(es) to put on component's root. See {@link https://github.com/JedWatson/classnames#usage} for details"
       ]
      },
      "typeValue": {
       "raw": "null | string | number | boolean | ClassDictionary | ClassArray"
      },
      "typeValueRef": "@epam/uui-core:ClassValue",
      "from": "@epam/uui-core:IHasCX",
      "required": false
     },
     {
      "uid": 8,
      "name": "isDisabled",
      "comment": {
       "raw": [
        "Disable editing, and visually de-emphasize value of the component"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:IDisableable",
      "required": false
     },
     {
      "uid": 9,
      "name": "rawProps",
      "comment": {
       "raw": [
        "Any HTML attributes (native or 'data-') to put on the underlying component"
       ]
      },
      "typeValue": {
       "raw": "React.HTMLAttributes<HTMLDivElement> & Record<`data-${string}`, string>"
      },
      "from": "@epam/uui-core:IHasRawProps",
      "required": false
     },
     {
      "uid": 10,
      "name": "tabIndex",
      "comment": {
       "raw": [
        "Controls the order of keyboard navigation between components"
       ]
      },
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "from": "@epam/uui-core:IHasTabIndex",
      "required": false
     },
     {
      "uid": 11,
      "name": "color",
      "comment": {
       "raw": [
        "IconContainer color.",
        " @deprecated Property color is deprecated and will be removed in future release. Please make icon color configuration by yourself, e.g. via cx or style prop.",
        " @default 'night600'"
       ],
       "tags": {
        "@default": "night600"
       }
      },
      "typeValue": {
       "raw": "'sky' | 'grass' | 'sun' | 'fire' | 'cobalt' | 'fuchsia' | 'white' | 'night100' | 'night300' | 'night600' | 'night500' | 'night50' | 'night200' | 'night400' | 'night700' | 'night800' | 'night900' | 'carbon' | 'lavanda'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "sky",
        "grass",
        "sun",
        "fire",
        "cobalt",
        "fuchsia",
        "white",
        "night100",
        "night300",
        "night600",
        "night500",
        "night50",
        "night200",
        "night400",
        "night700",
        "night800",
        "night900",
        "carbon",
        "lavanda"
       ]
      },
      "from": "@epam/loveship:IconContainerMods",
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/loveship:LinkButtonMods": {
   "summary": {
    "module": "@epam/loveship",
    "typeName": {
     "name": "LinkButtonMods",
     "nameFull": "LinkButtonMods"
    },
    "src": "loveship/components/buttons/LinkButton.tsx",
    "exported": true
   },
   "details": {
    "kind": 263,
    "typeValue": {
     "raw": "LinkButtonMods",
     "print": [
      "interface LinkButtonMods {",
      "    /**",
      "     * @default 'sky'",
      "     */",
      "    color?: 'sky' | 'grass' | 'sun' | 'fire' | 'cobalt' | 'violet' | 'fuchsia' | 'white' | 'night50' | 'night100' | 'night200' | 'night300' | 'night400' | 'night500' | 'night600' | 'night700' | 'night800' | 'night900';",
      "}"
     ]
    },
    "props": [
     {
      "uid": 1,
      "name": "color",
      "comment": {
       "raw": [
        "@default 'sky'"
       ],
       "tags": {
        "@default": "sky"
       }
      },
      "typeValue": {
       "raw": "'sky' | 'grass' | 'sun' | 'fire' | 'cobalt' | 'violet' | 'fuchsia' | 'white' | 'night100' | 'night300' | 'night600' | 'night500' | 'night50' | 'night200' | 'night400' | 'night700' | 'night800' | 'night900'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "sky",
        "grass",
        "sun",
        "fire",
        "cobalt",
        "violet",
        "fuchsia",
        "white",
        "night100",
        "night300",
        "night600",
        "night500",
        "night50",
        "night200",
        "night400",
        "night700",
        "night800",
        "night900"
       ]
      },
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/loveship:LinkButtonProps": {
   "summary": {
    "module": "@epam/loveship",
    "typeName": {
     "name": "LinkButtonProps",
     "nameFull": "LinkButtonProps"
    },
    "src": "loveship/components/buttons/LinkButton.tsx",
    "exported": true
   },
   "details": {
    "kind": 264,
    "typeValue": {
     "raw": "LinkButtonProps",
     "print": [
      "type LinkButtonProps = Omit<UuiLinkButtonProps, 'color'> & LinkButtonMods;"
     ]
    },
    "props": [
     {
      "uid": 1,
      "name": "icon",
      "comment": {
       "raw": [
        "Icon can be a React element (usually an SVG element)"
       ]
      },
      "typeValue": {
       "raw": "Icon"
      },
      "editor": {
       "type": "component"
      },
      "from": "@epam/uui-core:IHasIcon",
      "required": false
     },
     {
      "uid": 2,
      "name": "size",
      "comment": {
       "raw": [
        "@default '36'"
       ],
       "tags": {
        "@default": "36"
       }
      },
      "typeValue": {
       "raw": "'36' | '48' | '24' | '30' | '42' | 'none'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "24",
        "30",
        "36",
        "42",
        "48",
        "none"
       ]
      },
      "from": "@epam/uui:LinkButtonMods",
      "required": false
     },
     {
      "uid": 3,
      "name": "cx",
      "comment": {
       "raw": [
        "CSS class(es) to put on component's root. See {@link https://github.com/JedWatson/classnames#usage} for details"
       ]
      },
      "typeValue": {
       "raw": "null | string | number | boolean | ClassDictionary | ClassArray"
      },
      "from": "@epam/uui-core:IHasCX",
      "required": false
     },
     {
      "uid": 4,
      "name": "rawProps",
      "comment": {
       "raw": [
        "Any HTML attributes (native or 'data-') to put on the underlying component"
       ]
      },
      "typeValue": {
       "raw": "React.ButtonHTMLAttributes<HTMLButtonElement> & Record<`data-${string}`, string>"
      },
      "from": "@epam/uui-core:IHasRawProps",
      "required": false
     },
     {
      "uid": 5,
      "name": "clearIcon",
      "comment": {
       "raw": [
        "Icon for clear value button (usually cross)"
       ]
      },
      "typeValue": {
       "raw": "Icon"
      },
      "editor": {
       "type": "component"
      },
      "from": "@epam/uui-components:ButtonProps",
      "required": false
     },
     {
      "uid": 6,
      "name": "captionCX",
      "comment": {
       "raw": [
        "CSS classes to put on the caption"
       ]
      },
      "typeValue": {
       "raw": "null | string | number | boolean | ClassDictionary | ClassArray"
      },
      "from": "@epam/uui-components:ButtonProps",
      "required": false
     },
     {
      "uid": 7,
      "name": "countIndicator",
      "comment": {
       "raw": [
        "CountIndicator component"
       ]
      },
      "typeValue": {
       "raw": "React.ComponentClass<IHasCaption, any> | React.FunctionComponent<IHasCaption>"
      },
      "from": "@epam/uui-components:ButtonProps",
      "required": false
     },
     {
      "uid": 8,
      "name": "dropdownIcon",
      "comment": {
       "raw": [
        "Icon for drop-down toggler"
       ]
      },
      "typeValue": {
       "raw": "Icon"
      },
      "editor": {
       "type": "component"
      },
      "from": "@epam/uui-core:ButtonCoreProps",
      "required": false
     },
     {
      "uid": 9,
      "name": "dropdownIconPosition",
      "comment": {
       "raw": [
        "Position of the dropdown icon ('left' of 'right')"
       ]
      },
      "typeValue": {
       "raw": "'left' | 'right'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "left",
        "right"
       ]
      },
      "from": "@epam/uui-core:ButtonCoreProps",
      "required": false
     },
     {
      "uid": 10,
      "name": "count",
      "typeValue": {
       "raw": "null | string | number | boolean | React.ReactElement<any, string | React.JSXElementConstructor<any>> | React.ReactFragment | React.ReactPortal"
      },
      "from": "@epam/uui-core:ButtonCoreProps",
      "required": false
     },
     {
      "uid": 11,
      "name": "onClick",
      "comment": {
       "raw": [
        "Called when component is clicked"
       ]
      },
      "typeValue": {
       "raw": "(e?: any) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IClickable",
      "required": false
     },
     {
      "uid": 12,
      "name": "link",
      "comment": {
       "raw": [
        "Link object to redirect to for SPA-redirects"
       ]
      },
      "typeValue": {
       "raw": "Link"
      },
      "from": "@epam/uui-core:ICanRedirect",
      "required": false
     },
     {
      "uid": 13,
      "name": "href",
      "comment": {
       "raw": [
        "Href (URL) to redirect to, for non-SPA redirects"
       ]
      },
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "from": "@epam/uui-core:ICanRedirect",
      "required": false
     },
     {
      "uid": 14,
      "name": "isLinkActive",
      "comment": {
       "raw": [
        "Highlights component to show that link is active (browser is displaying the page to which link is pointing)"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:ICanRedirect",
      "required": false
     },
     {
      "uid": 15,
      "name": "target",
      "comment": {
       "raw": [
        "Controls where the link should be opened"
       ]
      },
      "typeValue": {
       "raw": "'_blank'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "_blank"
       ]
      },
      "from": "@epam/uui-core:ICanRedirect",
      "required": false
     },
     {
      "uid": 16,
      "name": "isDisabled",
      "comment": {
       "raw": [
        "Disable editing, and visually de-emphasize value of the component"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:IDisableable",
      "required": false
     },
     {
      "uid": 17,
      "name": "iconPosition",
      "comment": {
       "raw": [
        "Position of the icon (left of right)"
       ]
      },
      "typeValue": {
       "raw": "'left' | 'right'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "left",
        "right"
       ]
      },
      "from": "@epam/uui-core:IHasIcon",
      "required": false
     },
     {
      "uid": 18,
      "name": "onIconClick",
      "comment": {
       "raw": [
        "Click handler for the icon"
       ]
      },
      "typeValue": {
       "raw": "() => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IHasIcon",
      "required": false
     },
     {
      "uid": 19,
      "name": "clickAnalyticsEvent",
      "comment": {
       "raw": [
        "An analytics event to send (via AnalyticsContext) when component is clicked.",
        " See [AnalyticsContext](@link https://uui.epam.com/documents?id=analyticsContext&mode=doc&skin=UUI4_promo&category=contexts)."
       ]
      },
      "typeValue": {
       "raw": "null | { [key: string]: any; name: string; }"
      },
      "from": "@epam/uui-core:IAnalyticableClick",
      "required": false
     },
     {
      "uid": 20,
      "name": "tabIndex",
      "comment": {
       "raw": [
        "Controls the order of keyboard navigation between components"
       ]
      },
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "from": "@epam/uui-core:IHasTabIndex",
      "required": false
     },
     {
      "uid": 21,
      "name": "caption",
      "comment": {
       "raw": [
        "Caption. Can be a string, or React.Elements. Certain components supports minimal markup (<b>,<i>,<a>) in captions."
       ]
      },
      "typeValue": {
       "raw": "any"
      },
      "from": "@epam/uui-core:IHasCaption",
      "required": false
     },
     {
      "uid": 22,
      "name": "onClear",
      "comment": {
       "raw": [
        "Call to clear toggler value"
       ]
      },
      "typeValue": {
       "raw": "(e?: any) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IBasicPickerToggler",
      "required": false
     },
     {
      "uid": 23,
      "name": "isOpen",
      "comment": {
       "raw": [
        "When isDropdown=true, indicate that dropdown is open with chevron icon"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:IDropdownToggler",
      "required": false
     },
     {
      "uid": 24,
      "name": "isDropdown",
      "comment": {
       "raw": [
        "Shows chevron icon, enabling component to act as dropdown toggler"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:IDropdownToggler",
      "required": false
     },
     {
      "uid": 25,
      "name": "toggleDropdownOpening",
      "comment": {
       "raw": [
        "Called when associated dropdown should open or close"
       ]
      },
      "typeValue": {
       "raw": "(value: boolean) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IDropdownToggler",
      "required": false
     },
     {
      "uid": 26,
      "name": "isInteractedOutside",
      "comment": {
       "raw": [
        "Called when component is interacted outside, to close the dropdown"
       ]
      },
      "typeValue": {
       "raw": "(event: Event) => boolean"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IDropdownToggler",
      "required": false
     },
     {
      "uid": 27,
      "name": "ref",
      "comment": {
       "raw": [
        "Component's ref"
       ]
      },
      "typeValue": {
       "raw": "null | (instance: any) => void | React.RefObject<any>"
      },
      "from": "@epam/uui-core:IDropdownToggler",
      "required": false
     },
     {
      "uid": 28,
      "name": "forwardedRef",
      "comment": {
       "raw": [
        "this ref is passed to the underlying component"
       ]
      },
      "typeValue": {
       "raw": "null | (instance: HTMLButtonElement | HTMLAnchorElement | null) => void | React.MutableRefObject<HTMLButtonElement | HTMLAnchorElement | null>"
      },
      "from": "@epam/uui-core:IHasForwardedRef",
      "required": false
     },
     {
      "uid": 29,
      "name": "color",
      "comment": {
       "raw": [
        "@default 'sky'"
       ],
       "tags": {
        "@default": "sky"
       }
      },
      "typeValue": {
       "raw": "'sky' | 'grass' | 'sun' | 'fire' | 'cobalt' | 'violet' | 'fuchsia' | 'white' | 'night100' | 'night300' | 'night600' | 'night500' | 'night50' | 'night200' | 'night400' | 'night700' | 'night800' | 'night900'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "sky",
        "grass",
        "sun",
        "fire",
        "cobalt",
        "violet",
        "fuchsia",
        "white",
        "night100",
        "night300",
        "night600",
        "night500",
        "night50",
        "night200",
        "night400",
        "night700",
        "night800",
        "night900"
       ]
      },
      "from": "@epam/loveship:LinkButtonMods",
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/loveship:MakeMeItemProps": {
   "summary": {
    "module": "@epam/loveship",
    "typeName": {
     "name": "MakeMeItemProps",
     "nameFull": "MakeMeItemProps"
    },
    "src": "loveship/components/dev/MakeMeItem.tsx",
    "exported": true
   },
   "details": {
    "kind": 263,
    "typeValue": {
     "raw": "MakeMeItemProps",
     "print": [
      "interface MakeMeItemProps {",
      "    api: LazyDataSourceApi<MakeMeUser, number | string, any>;",
      "}"
     ]
    },
    "props": [
     {
      "uid": 1,
      "name": "api",
      "typeValue": {
       "raw": "LazyDataSourceApi<MakeMeUser, string | number, any>"
      },
      "typeValueRef": "@epam/uui-core:LazyDataSourceApi",
      "editor": {
       "type": "func"
      },
      "required": true
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/loveship:MakeMeUser": {
   "summary": {
    "module": "@epam/loveship",
    "typeName": {
     "name": "MakeMeUser",
     "nameFull": "MakeMeUser"
    },
    "src": "loveship/components/dev/MakeMeItem.tsx",
    "exported": true
   },
   "details": {
    "kind": 263,
    "typeValue": {
     "raw": "MakeMeUser",
     "print": [
      "interface MakeMeUser {",
      "    externalId: number | string;",
      "    name: string;",
      "    avatarUrl: string;",
      "    jobTitle?: string;",
      "    email?: string;",
      "}"
     ]
    },
    "props": [
     {
      "uid": 1,
      "name": "externalId",
      "typeValue": {
       "raw": "string | number"
      },
      "required": true
     },
     {
      "uid": 2,
      "name": "name",
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "required": true
     },
     {
      "uid": 3,
      "name": "avatarUrl",
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "required": true
     },
     {
      "uid": 4,
      "name": "jobTitle",
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "required": false
     },
     {
      "uid": 5,
      "name": "email",
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/loveship:ModalWindowMods": {
   "summary": {
    "module": "@epam/loveship",
    "typeName": {
     "name": "ModalWindowMods",
     "nameFull": "ModalWindowMods"
    },
    "src": "loveship/components/overlays/ModalWindow.tsx",
    "exported": true
   },
   "details": {
    "kind": 263,
    "typeValue": {
     "raw": "ModalWindowMods",
     "print": [
      "interface ModalWindowMods {",
      "    width?: '300' | '420' | '480' | '600' | '900' | number;",
      "    height?: '300' | '700' | 'auto' | number;",
      "}"
     ]
    },
    "props": [
     {
      "uid": 1,
      "name": "width",
      "typeValue": {
       "raw": "number | '300' | '420' | '480' | '600' | '900'"
      },
      "required": false
     },
     {
      "uid": 2,
      "name": "height",
      "typeValue": {
       "raw": "number | 'auto' | '300' | '700'"
      },
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/loveship:MultiSwitchColor": {
   "summary": {
    "module": "@epam/loveship",
    "typeName": {
     "name": "MultiSwitchColor",
     "nameFull": "MultiSwitchColor"
    },
    "src": "loveship/components/inputs/MultiSwitch.tsx",
    "exported": true
   },
   "details": {
    "kind": 264,
    "typeValue": {
     "raw": "'sky' | 'night600' | 'gray'",
     "print": [
      "type MultiSwitchColor = 'sky' | 'night600' | 'gray';"
     ]
    }
   }
  },
  "@epam/loveship:MultiSwitchMods": {
   "summary": {
    "module": "@epam/loveship",
    "typeName": {
     "name": "MultiSwitchMods",
     "nameFull": "MultiSwitchMods"
    },
    "src": "loveship/components/inputs/MultiSwitch.tsx",
    "exported": true
   },
   "details": {
    "kind": 263,
    "typeValue": {
     "raw": "MultiSwitchMods",
     "print": [
      "interface MultiSwitchMods {",
      "    /**",
      "     * @default 'sky'",
      "     */",
      "    color?: MultiSwitchColor;",
      "}"
     ]
    },
    "props": [
     {
      "uid": 1,
      "name": "color",
      "comment": {
       "raw": [
        "@default 'sky'"
       ],
       "tags": {
        "@default": "sky"
       }
      },
      "typeValue": {
       "raw": "'sky' | 'night600' | 'gray'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "sky",
        "night600",
        "gray"
       ]
      },
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/loveship:MultiSwitchProps": {
   "summary": {
    "module": "@epam/loveship",
    "typeName": {
     "name": "MultiSwitchProps",
     "nameFull": "MultiSwitchProps<TValue>"
    },
    "src": "loveship/components/inputs/MultiSwitch.tsx",
    "exported": true
   },
   "details": {
    "kind": 264,
    "typeValue": {
     "raw": "MultiSwitchProps<TValue>",
     "print": [
      "type MultiSwitchProps<TValue> = Omit<UuiMultiSwitchProps<TValue>, 'color'> & MultiSwitchMods;"
     ]
    },
    "props": [
     {
      "uid": 1,
      "name": "size",
      "typeValue": {
       "raw": "'36' | '48' | '24' | '30' | '42' | 'none'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "24",
        "30",
        "36",
        "42",
        "48",
        "none"
       ]
      },
      "from": "@epam/uui:SizeMod",
      "required": false
     },
     {
      "uid": 2,
      "name": "rawProps",
      "comment": {
       "raw": [
        "Any HTML attributes (native or 'data-') to put on the underlying component"
       ]
      },
      "typeValue": {
       "raw": "React.HTMLAttributes<HTMLDivElement> & Record<`data-${string}`, string>"
      },
      "from": "@epam/uui-core:IHasRawProps",
      "required": false
     },
     {
      "uid": 3,
      "name": "isDisabled",
      "comment": {
       "raw": [
        "Disable editing, and visually de-emphasize value of the component"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:IDisableable",
      "required": false
     },
     {
      "uid": 4,
      "name": "items",
      "typeValue": {
       "raw": "MultiSwitchItem<TValue>[]"
      },
      "from": "@epam/uui:MultiSwitchProps",
      "required": true
     },
     {
      "uid": 5,
      "name": "value",
      "comment": {
       "raw": [
        "The current value of component"
       ]
      },
      "typeValue": {
       "raw": "TValue"
      },
      "from": "@epam/uui-core:IEditable",
      "required": true
     },
     {
      "uid": 6,
      "name": "onValueChange",
      "comment": {
       "raw": [
        "Called when value needs to be changed (usually due to user interaction)"
       ]
      },
      "typeValue": {
       "raw": "(newValue: TValue) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IEditable",
      "required": true
     },
     {
      "uid": 7,
      "name": "isInvalid",
      "comment": {
       "raw": [
        "True if component contains invalid input"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:ICanBeInvalid",
      "required": false
     },
     {
      "uid": 8,
      "name": "validationMessage",
      "comment": {
       "raw": [
        "Message describing why the value is invalid"
       ]
      },
      "typeValue": {
       "raw": "null | string | number | boolean | React.ReactElement<any, string | React.JSXElementConstructor<any>> | React.ReactFragment | React.ReactPortal"
      },
      "from": "@epam/uui-core:ICanBeInvalid",
      "required": false
     },
     {
      "uid": 9,
      "name": "validationProps",
      "comment": {
       "raw": [
        "If T is a complex value (object or array), this property contains validation states of inner items"
       ]
      },
      "typeValue": {
       "raw": "{ [key: string]: ICanBeInvalid; }"
      },
      "from": "@epam/uui-core:ICanBeInvalid",
      "required": false
     },
     {
      "uid": 10,
      "name": "isReadonly",
      "comment": {
       "raw": [
        "Disable editing. Unlike isDisabled, keep component's value readable."
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:ICanBeReadonly",
      "required": false
     },
     {
      "uid": 11,
      "name": "isRequired",
      "comment": {
       "raw": [
        "Marks that component's value is required and shouldn't be empty"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:ICanBeRequired",
      "required": false
     },
     {
      "uid": 12,
      "name": "color",
      "comment": {
       "raw": [
        "@default 'sky'"
       ],
       "tags": {
        "@default": "sky"
       }
      },
      "typeValue": {
       "raw": "'sky' | 'night600' | 'gray'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "sky",
        "night600",
        "gray"
       ]
      },
      "from": "@epam/loveship:MultiSwitchMods",
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/loveship:NotificationCardMods": {
   "summary": {
    "module": "@epam/loveship",
    "typeName": {
     "name": "NotificationCardMods",
     "nameFull": "NotificationCardMods"
    },
    "src": "loveship/components/overlays/NotificationCard.tsx",
    "exported": true
   },
   "details": {
    "kind": 263,
    "typeValue": {
     "raw": "NotificationCardMods",
     "print": [
      "interface NotificationCardMods {",
      "    color: EpamPrimaryColor | 'night600';",
      "}"
     ]
    },
    "props": [
     {
      "uid": 1,
      "name": "color",
      "typeValue": {
       "raw": "'sky' | 'grass' | 'sun' | 'fire' | 'night600'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "sky",
        "grass",
        "sun",
        "fire",
        "night600"
       ]
      },
      "required": true
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/loveship:NotificationCardProps": {
   "summary": {
    "module": "@epam/loveship",
    "typeName": {
     "name": "NotificationCardProps",
     "nameFull": "NotificationCardProps"
    },
    "src": "loveship/components/overlays/NotificationCard.tsx",
    "exported": true
   },
   "details": {
    "kind": 264,
    "typeValue": {
     "raw": "NotificationCardProps",
     "print": [
      "type NotificationCardProps = Omit<uuiNotificationCardProps, 'color'> & NotificationCardMods;"
     ]
    },
    "props": [
     {
      "uid": 1,
      "name": "actions",
      "typeValue": {
       "raw": "NotificationAction[]"
      },
      "from": "@epam/uui:DefaultNotificationProps",
      "required": false
     },
     {
      "uid": 2,
      "name": "onClose",
      "comment": {
       "raw": [
        "Call to close the notification with abort action. It's rejects `notificationContext.show()` promise."
       ]
      },
      "typeValue": {
       "raw": "() => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:INotification",
      "required": false
     },
     {
      "uid": 3,
      "name": "icon",
      "typeValue": {
       "raw": "Icon"
      },
      "editor": {
       "type": "component"
      },
      "from": "@epam/uui:NotificationCardProps",
      "required": false
     },
     {
      "uid": 4,
      "name": "children",
      "typeValue": {
       "raw": "null | string | number | boolean | React.ReactElement<any, string | React.JSXElementConstructor<any>> | React.ReactFragment | React.ReactPortal"
      },
      "from": "@epam/uui-core:IHasChildren",
      "required": false
     },
     {
      "uid": 5,
      "name": "cx",
      "comment": {
       "raw": [
        "CSS class(es) to put on component's root. See {@link https://github.com/JedWatson/classnames#usage} for details"
       ]
      },
      "typeValue": {
       "raw": "null | string | number | boolean | ClassDictionary | ClassArray"
      },
      "from": "@epam/uui-core:IHasCX",
      "required": false
     },
     {
      "uid": 6,
      "name": "rawProps",
      "comment": {
       "raw": [
        "Any HTML attributes (native or 'data-') to put on the underlying component"
       ]
      },
      "typeValue": {
       "raw": "React.HTMLAttributes<HTMLDivElement> & Record<`data-${string}`, string>"
      },
      "from": "@epam/uui-core:IHasRawProps",
      "required": false
     },
     {
      "uid": 7,
      "name": "onSuccess",
      "comment": {
       "raw": [
        "Call to close the notification with success action. It's resolved `notificationContext.show()` promise."
       ]
      },
      "typeValue": {
       "raw": "() => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:INotification",
      "required": false
     },
     {
      "uid": 8,
      "name": "clearTimer",
      "comment": {
       "raw": [
        "Cancel notification closing timer"
       ]
      },
      "typeValue": {
       "raw": "() => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:INotification",
      "required": false
     },
     {
      "uid": 9,
      "name": "refreshTimer",
      "comment": {
       "raw": [
        "Reinitialize notification closing timer. It will be set to the provided notification duration."
       ]
      },
      "typeValue": {
       "raw": "() => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:INotification",
      "required": false
     },
     {
      "uid": 10,
      "name": "id",
      "comment": {
       "raw": [
        "Unique id of the notification"
       ]
      },
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "from": "@epam/uui-core:INotification",
      "required": true
     },
     {
      "uid": 11,
      "name": "key",
      "comment": {
       "raw": [
        "Unique key of the notification"
       ]
      },
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "from": "@epam/uui-core:INotification",
      "required": true
     },
     {
      "uid": 12,
      "name": "color",
      "typeValue": {
       "raw": "'sky' | 'grass' | 'sun' | 'fire' | 'night600'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "sky",
        "grass",
        "sun",
        "fire",
        "night600"
       ]
      },
      "from": "@epam/loveship:NotificationCardMods",
      "required": true
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/loveship:PanelMods": {
   "summary": {
    "module": "@epam/loveship",
    "typeName": {
     "name": "PanelMods",
     "nameFull": "PanelMods"
    },
    "src": "loveship/components/layout/FlexItems/Panel.tsx",
    "exported": true
   },
   "details": {
    "kind": 263,
    "typeValue": {
     "raw": "PanelMods",
     "print": [
      "interface PanelMods {",
      "    shadow?: boolean;",
      "    margin?: '24';",
      "    background?: 'white' | 'night50';",
      "}"
     ]
    },
    "props": [
     {
      "uid": 1,
      "name": "shadow",
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "required": false
     },
     {
      "uid": 2,
      "name": "margin",
      "typeValue": {
       "raw": "'24'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "24"
       ]
      },
      "required": false
     },
     {
      "uid": 3,
      "name": "background",
      "typeValue": {
       "raw": "'white' | 'night50'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "white",
        "night50"
       ]
      },
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/loveship:PanelProps": {
   "summary": {
    "module": "@epam/loveship",
    "typeName": {
     "name": "PanelProps",
     "nameFull": "PanelProps"
    },
    "src": "loveship/components/layout/FlexItems/Panel.tsx",
    "exported": true
   },
   "details": {
    "kind": 263,
    "typeValue": {
     "raw": "PanelProps",
     "print": [
      "interface PanelProps extends VPanelProps, PanelMods {",
      "}"
     ]
    },
    "props": [
     {
      "uid": 1,
      "name": "cx",
      "comment": {
       "raw": [
        "CSS class(es) to put on component's root. See {@link https://github.com/JedWatson/classnames#usage} for details"
       ]
      },
      "typeValue": {
       "raw": "null | string | number | boolean | ClassDictionary | ClassArray"
      },
      "typeValueRef": "@epam/uui-core:ClassValue",
      "from": "@epam/uui-core:IHasCX",
      "required": false
     },
     {
      "uid": 2,
      "name": "children",
      "typeValue": {
       "raw": "null | string | number | boolean | React.ReactElement<any, string | React.JSXElementConstructor<any>> | React.ReactFragment | React.ReactPortal"
      },
      "typeValueRef": "@types/react:ReactNode",
      "from": "@epam/uui-core:IHasChildren",
      "required": false
     },
     {
      "uid": 3,
      "name": "onClick",
      "comment": {
       "raw": [
        "Called when component is clicked"
       ]
      },
      "typeValue": {
       "raw": "(e?: any) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IClickable",
      "required": false
     },
     {
      "uid": 4,
      "name": "rawProps",
      "comment": {
       "raw": [
        "Any HTML attributes (native or 'data-') to put on the underlying component"
       ]
      },
      "typeValue": {
       "raw": "React.HTMLAttributes<HTMLDivElement> & Record<`data-${string}`, string>"
      },
      "from": "@epam/uui-core:IHasRawProps",
      "required": false
     },
     {
      "uid": 5,
      "name": "forwardedRef",
      "comment": {
       "raw": [
        "this ref is passed to the underlying component"
       ]
      },
      "typeValue": {
       "raw": "null | (instance: HTMLDivElement | null) => void | React.MutableRefObject<HTMLDivElement | null>"
      },
      "from": "@epam/uui-core:IHasForwardedRef",
      "required": false
     },
     {
      "uid": 6,
      "name": "clickAnalyticsEvent",
      "comment": {
       "raw": [
        "An analytics event to send (via AnalyticsContext) when component is clicked.",
        " See [AnalyticsContext](@link https://uui.epam.com/documents?id=analyticsContext&mode=doc&skin=UUI4_promo&category=contexts)."
       ]
      },
      "typeValue": {
       "raw": "null | { [key: string]: any; name: string; }"
      },
      "from": "@epam/uui-core:IAnalyticableClick",
      "required": false
     },
     {
      "uid": 7,
      "name": "style",
      "typeValue": {
       "raw": "React.CSSProperties"
      },
      "from": "@epam/uui-core:VPanelProps",
      "required": false
     },
     {
      "uid": 8,
      "name": "shadow",
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/loveship:PanelMods",
      "required": false
     },
     {
      "uid": 9,
      "name": "margin",
      "typeValue": {
       "raw": "'24'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "24"
       ]
      },
      "from": "@epam/loveship:PanelMods",
      "required": false
     },
     {
      "uid": 10,
      "name": "background",
      "typeValue": {
       "raw": "'white' | 'night50'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "white",
        "night50"
       ]
      },
      "from": "@epam/loveship:PanelMods",
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/loveship:RadioInputMods": {
   "summary": {
    "module": "@epam/loveship",
    "typeName": {
     "name": "RadioInputMods",
     "nameFull": "RadioInputMods"
    },
    "src": "loveship/components/inputs/RadioInput.tsx",
    "exported": true
   },
   "details": {
    "kind": 263,
    "typeValue": {
     "raw": "RadioInputMods",
     "print": [
      "interface RadioInputMods extends UuiRadioInputMods {",
      "    theme?: 'light' | 'dark';",
      "}"
     ]
    },
    "props": [
     {
      "uid": 1,
      "name": "theme",
      "typeValue": {
       "raw": "'light' | 'dark'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "light",
        "dark"
       ]
      },
      "required": false
     },
     {
      "uid": 2,
      "name": "size",
      "comment": {
       "raw": [
        "@default '18'"
       ],
       "tags": {
        "@default": "18"
       }
      },
      "typeValue": {
       "raw": "'18' | '12'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "12",
        "18"
       ]
      },
      "from": "@epam/uui:RadioInputMods",
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/loveship:RadioInputProps": {
   "summary": {
    "module": "@epam/loveship",
    "typeName": {
     "name": "RadioInputProps",
     "nameFull": "RadioInputProps"
    },
    "src": "loveship/components/inputs/RadioInput.tsx",
    "exported": true
   },
   "details": {
    "kind": 263,
    "typeValue": {
     "raw": "RadioInputProps",
     "print": [
      "interface RadioInputProps extends RadioInputMods, UuiRadioInputProps {",
      "}"
     ]
    },
    "props": [
     {
      "uid": 1,
      "name": "theme",
      "typeValue": {
       "raw": "'light' | 'dark'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "light",
        "dark"
       ]
      },
      "from": "@epam/loveship:RadioInputMods",
      "required": false
     },
     {
      "uid": 2,
      "name": "size",
      "comment": {
       "raw": [
        "@default '18'"
       ],
       "tags": {
        "@default": "18"
       }
      },
      "typeValue": {
       "raw": "'18' | '12'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "12",
        "18"
       ]
      },
      "from": "@epam/uui:RadioInputMods",
      "required": false
     },
     {
      "uid": 3,
      "name": "icon",
      "typeValue": {
       "raw": "Icon"
      },
      "editor": {
       "type": "component"
      },
      "from": "@epam/uui-components:RadioInputProps",
      "required": false
     },
     {
      "uid": 4,
      "name": "renderLabel",
      "typeValue": {
       "raw": "() => React.ReactNode"
      },
      "editor": {
       "type": "component"
      },
      "from": "@epam/uui-components:RadioInputProps",
      "required": false
     },
     {
      "uid": 5,
      "name": "tabIndex",
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "from": "@epam/uui-components:RadioInputProps",
      "required": false
     },
     {
      "uid": 6,
      "name": "id",
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "from": "@epam/uui-components:RadioInputProps",
      "required": false
     },
     {
      "uid": 7,
      "name": "cx",
      "comment": {
       "raw": [
        "CSS class(es) to put on component's root. See {@link https://github.com/JedWatson/classnames#usage} for details"
       ]
      },
      "typeValue": {
       "raw": "null | string | number | boolean | ClassDictionary | ClassArray"
      },
      "typeValueRef": "@epam/uui-core:ClassValue",
      "from": "@epam/uui-core:IHasCX",
      "required": false
     },
     {
      "uid": 8,
      "name": "isDisabled",
      "comment": {
       "raw": [
        "Disable editing, and visually de-emphasize value of the component"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:IDisableable",
      "required": false
     },
     {
      "uid": 9,
      "name": "value",
      "comment": {
       "raw": [
        "The current value of component"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:IEditable",
      "required": true
     },
     {
      "uid": 10,
      "name": "onValueChange",
      "comment": {
       "raw": [
        "Called when value needs to be changed (usually due to user interaction)"
       ]
      },
      "typeValue": {
       "raw": "(newValue: boolean) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IEditable",
      "required": true
     },
     {
      "uid": 11,
      "name": "isInvalid",
      "comment": {
       "raw": [
        "True if component contains invalid input"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:ICanBeInvalid",
      "required": false
     },
     {
      "uid": 12,
      "name": "validationMessage",
      "comment": {
       "raw": [
        "Message describing why the value is invalid"
       ]
      },
      "typeValue": {
       "raw": "null | string | number | boolean | React.ReactElement<any, string | React.JSXElementConstructor<any>> | React.ReactFragment | React.ReactPortal"
      },
      "typeValueRef": "@types/react:ReactNode",
      "from": "@epam/uui-core:ICanBeInvalid",
      "required": false
     },
     {
      "uid": 13,
      "name": "validationProps",
      "comment": {
       "raw": [
        "If T is a complex value (object or array), this property contains validation states of inner items"
       ]
      },
      "typeValue": {
       "raw": "{ [key: string]: ICanBeInvalid; }"
      },
      "from": "@epam/uui-core:ICanBeInvalid",
      "required": false
     },
     {
      "uid": 14,
      "name": "isReadonly",
      "comment": {
       "raw": [
        "Disable editing. Unlike isDisabled, keep component's value readable."
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:ICanBeReadonly",
      "required": false
     },
     {
      "uid": 15,
      "name": "isRequired",
      "comment": {
       "raw": [
        "Marks that component's value is required and shouldn't be empty"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:ICanBeRequired",
      "required": false
     },
     {
      "uid": 16,
      "name": "label",
      "comment": {
       "raw": [
        "Label. Can be a string, or React.Elements. Certain components supports minimal markup (<b>,<i>,<a>) in captions."
       ]
      },
      "typeValue": {
       "raw": "any"
      },
      "from": "@epam/uui-core:IHasLabel",
      "required": false
     },
     {
      "uid": 17,
      "name": "getValueChangeAnalyticsEvent",
      "comment": {
       "raw": [
        "Given a value, returns an analytics event to send when component is edited.",
        " See [AnalyticsContext](@link https://uui.epam.com/documents?id=analyticsContext&mode=doc&skin=UUI4_promo&category=contexts)."
       ]
      },
      "typeValue": {
       "raw": "(newValue: boolean | null, oldValue: boolean | null) => AnalyticsEvent"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IAnalyticableOnChange",
      "required": false
     },
     {
      "uid": 18,
      "name": "rawProps",
      "comment": {
       "raw": [
        "Any HTML attributes (native or 'data-') to put on the underlying component"
       ]
      },
      "typeValue": {
       "raw": "React.LabelHTMLAttributes<HTMLLabelElement> & Record<`data-${string}`, string>"
      },
      "from": "@epam/uui-core:IHasRawProps",
      "required": false
     },
     {
      "uid": 19,
      "name": "forwardedRef",
      "comment": {
       "raw": [
        "this ref is passed to the underlying component"
       ]
      },
      "typeValue": {
       "raw": "null | (instance: HTMLLabelElement | null) => void | React.MutableRefObject<HTMLLabelElement | null>"
      },
      "from": "@epam/uui-core:IHasForwardedRef",
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/loveship:RangeSliderMods": {
   "summary": {
    "module": "@epam/loveship",
    "typeName": {
     "name": "RangeSliderMods",
     "nameFull": "RangeSliderMods"
    },
    "src": "loveship/components/inputs/Slider/RangeSlider.tsx",
    "exported": true
   },
   "details": {
    "kind": 263,
    "typeValue": {
     "raw": "RangeSliderMods",
     "print": [
      "interface RangeSliderMods extends types.ColorMod {",
      "}"
     ]
    },
    "props": [
     {
      "uid": 1,
      "name": "color",
      "comment": {
       "raw": [
        "Component color"
       ]
      },
      "typeValue": {
       "raw": "'sky' | 'grass' | 'sun' | 'fire' | 'cobalt' | 'violet' | 'fuchsia' | 'white' | 'night100' | 'night300' | 'night600' | 'night500' | 'night50' | 'night200' | 'night400' | 'night700' | 'night800' | 'night900'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "sky",
        "grass",
        "sun",
        "fire",
        "cobalt",
        "violet",
        "fuchsia",
        "white",
        "night100",
        "night300",
        "night600",
        "night500",
        "night50",
        "night200",
        "night400",
        "night700",
        "night800",
        "night900"
       ]
      },
      "from": "@epam/loveship:ColorMod",
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/loveship:RatingMods": {
   "summary": {
    "module": "@epam/loveship",
    "typeName": {
     "name": "RatingMods",
     "nameFull": "RatingMods"
    },
    "src": "loveship/components/inputs/Rating.tsx",
    "exported": true
   },
   "details": {
    "kind": 263,
    "typeValue": {
     "raw": "RatingMods",
     "print": [
      "interface RatingMods {",
      "    /**",
      "     * @default '18'",
      "     */",
      "    size?: 18 | 24 | 30;",
      "}"
     ]
    },
    "props": [
     {
      "uid": 1,
      "name": "size",
      "comment": {
       "raw": [
        "@default '18'"
       ],
       "tags": {
        "@default": "18"
       }
      },
      "typeValue": {
       "raw": "18 | 24 | 30"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        18,
        24,
        30
       ]
      },
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/loveship:RatingProps": {
   "summary": {
    "module": "@epam/loveship",
    "typeName": {
     "name": "RatingProps",
     "nameFull": "RatingProps"
    },
    "src": "loveship/components/inputs/Rating.tsx",
    "exported": true
   },
   "details": {
    "kind": 263,
    "typeValue": {
     "raw": "RatingProps",
     "print": [
      "interface RatingProps extends uuiComponents.RatingProps, RatingMods {",
      "}"
     ]
    },
    "props": [
     {
      "uid": 1,
      "name": "filledStarIcon",
      "typeValue": {
       "raw": "Icon"
      },
      "editor": {
       "type": "component"
      },
      "from": "@epam/uui-components:RatingProps",
      "required": false
     },
     {
      "uid": 2,
      "name": "emptyStarIcon",
      "typeValue": {
       "raw": "Icon"
      },
      "editor": {
       "type": "component"
      },
      "from": "@epam/uui-components:RatingProps",
      "required": false
     },
     {
      "uid": 3,
      "name": "hideTooltip",
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-components:RatingProps",
      "required": false
     },
     {
      "uid": 4,
      "name": "hint",
      "typeValue": {
       "raw": "(value: number) => string"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-components:RatingProps",
      "required": false
     },
     {
      "uid": 5,
      "name": "Tooltip",
      "typeValue": {
       "raw": "React.ComponentClass<TooltipProps, any> | React.FunctionComponent<TooltipProps>"
      },
      "from": "@epam/uui-components:RatingProps",
      "required": false
     },
     {
      "uid": 6,
      "name": "from",
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "from": "@epam/uui-components:BaseRatingProps",
      "required": false
     },
     {
      "uid": 7,
      "name": "to",
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "from": "@epam/uui-components:BaseRatingProps",
      "required": false
     },
     {
      "uid": 8,
      "name": "step",
      "comment": {
       "raw": [
        "@default 1"
       ],
       "tags": {
        "@default": 1
       }
      },
      "typeValue": {
       "raw": "0.5 | 1"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        0.5,
        1
       ]
      },
      "from": "@epam/uui-components:BaseRatingProps",
      "required": false
     },
     {
      "uid": 9,
      "name": "renderRating",
      "typeValue": {
       "raw": "(rating: number, markWidth: number, numberOfMarks: number) => React.ReactNode"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-components:BaseRatingProps",
      "required": false
     },
     {
      "uid": 10,
      "name": "cx",
      "comment": {
       "raw": [
        "CSS class(es) to put on component's root. See {@link https://github.com/JedWatson/classnames#usage} for details"
       ]
      },
      "typeValue": {
       "raw": "null | string | number | boolean | ClassDictionary | ClassArray"
      },
      "typeValueRef": "@epam/uui-core:ClassValue",
      "from": "@epam/uui-core:IHasCX",
      "required": false
     },
     {
      "uid": 11,
      "name": "isDisabled",
      "comment": {
       "raw": [
        "Disable editing, and visually de-emphasize value of the component"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:IDisableable",
      "required": false
     },
     {
      "uid": 12,
      "name": "value",
      "comment": {
       "raw": [
        "The current value of component"
       ]
      },
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "from": "@epam/uui-core:IEditable",
      "required": true
     },
     {
      "uid": 13,
      "name": "onValueChange",
      "comment": {
       "raw": [
        "Called when value needs to be changed (usually due to user interaction)"
       ]
      },
      "typeValue": {
       "raw": "(newValue: number) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IEditable",
      "required": true
     },
     {
      "uid": 14,
      "name": "isInvalid",
      "comment": {
       "raw": [
        "True if component contains invalid input"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:ICanBeInvalid",
      "required": false
     },
     {
      "uid": 15,
      "name": "validationMessage",
      "comment": {
       "raw": [
        "Message describing why the value is invalid"
       ]
      },
      "typeValue": {
       "raw": "null | string | number | boolean | React.ReactElement<any, string | React.JSXElementConstructor<any>> | React.ReactFragment | React.ReactPortal"
      },
      "typeValueRef": "@types/react:ReactNode",
      "from": "@epam/uui-core:ICanBeInvalid",
      "required": false
     },
     {
      "uid": 16,
      "name": "validationProps",
      "comment": {
       "raw": [
        "If T is a complex value (object or array), this property contains validation states of inner items"
       ]
      },
      "typeValue": {
       "raw": "{ [key: string]: ICanBeInvalid; }"
      },
      "from": "@epam/uui-core:ICanBeInvalid",
      "required": false
     },
     {
      "uid": 17,
      "name": "isReadonly",
      "comment": {
       "raw": [
        "Disable editing. Unlike isDisabled, keep component's value readable."
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:ICanBeReadonly",
      "required": false
     },
     {
      "uid": 18,
      "name": "isRequired",
      "comment": {
       "raw": [
        "Marks that component's value is required and shouldn't be empty"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:ICanBeRequired",
      "required": false
     },
     {
      "uid": 19,
      "name": "rawProps",
      "comment": {
       "raw": [
        "Any HTML attributes (native or 'data-') to put on the underlying component"
       ]
      },
      "typeValue": {
       "raw": "React.HTMLAttributes<HTMLDivElement> & Record<`data-${string}`, string>"
      },
      "from": "@epam/uui-core:IHasRawProps",
      "required": false
     },
     {
      "uid": 20,
      "name": "forwardedRef",
      "comment": {
       "raw": [
        "this ref is passed to the underlying component"
       ]
      },
      "typeValue": {
       "raw": "null | (instance: HTMLDivElement | null) => void | React.MutableRefObject<HTMLDivElement | null>"
      },
      "from": "@epam/uui-core:IHasForwardedRef",
      "required": false
     },
     {
      "uid": 21,
      "name": "size",
      "comment": {
       "raw": [
        "@default '18'"
       ],
       "tags": {
        "@default": "18"
       }
      },
      "typeValue": {
       "raw": "18 | 24 | 30"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        18,
        24,
        30
       ]
      },
      "from": "@epam/loveship:RatingMods",
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/loveship:RowMods": {
   "summary": {
    "module": "@epam/loveship",
    "typeName": {
     "name": "RowMods",
     "nameFull": "RowMods"
    },
    "src": "loveship/components/layout/FlexItems/FlexRow.tsx",
    "exported": true
   },
   "details": {
    "kind": 263,
    "typeValue": {
     "raw": "RowMods",
     "print": [
      "interface RowMods extends Omit<uui.RowMods, 'spacing' | 'background'>, types.RowSizeMod {",
      "    /**",
      "     * @default 'none'",
      "     */",
      "    background?: 'white' | 'night50' | 'night100' | 'none';",
      "    spacing?: '6' | '12' | '18' | null;",
      "    /**",
      "     * @default 'panel'",
      "     */",
      "    type?: 'form' | 'panel';",
      "}"
     ]
    },
    "props": [
     {
      "uid": 1,
      "name": "background",
      "comment": {
       "raw": [
        "@default 'none'"
       ],
       "tags": {
        "@default": "none"
       }
      },
      "typeValue": {
       "raw": "'white' | 'night100' | 'none' | 'night50'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "white",
        "night100",
        "none",
        "night50"
       ]
      },
      "required": false
     },
     {
      "uid": 2,
      "name": "spacing",
      "typeValue": {
       "raw": "null | '18' | '12' | '6'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "6",
        "12",
        "18",
        null
       ]
      },
      "required": false
     },
     {
      "uid": 3,
      "name": "type",
      "comment": {
       "raw": [
        "@default 'panel'"
       ],
       "tags": {
        "@default": "panel"
       }
      },
      "typeValue": {
       "raw": "'form' | 'panel'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "form",
        "panel"
       ]
      },
      "required": false
     },
     {
      "uid": 4,
      "name": "size",
      "typeValue": {
       "raw": "null | '36' | '48' | '24' | '30' | '42'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "24",
        "30",
        "36",
        "42",
        "48",
        null
       ]
      },
      "from": "@epam/uui:RowSizeMod",
      "required": false
     },
     {
      "uid": 5,
      "name": "borderBottom",
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui:RowMods",
      "required": false
     },
     {
      "uid": 6,
      "name": "columnGap",
      "typeValue": {
       "raw": "number | '36' | '18' | '24' | '12' | '6'"
      },
      "from": "@epam/uui:RowMods",
      "required": false
     },
     {
      "uid": 7,
      "name": "margin",
      "typeValue": {
       "raw": "'24' | '12'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "12",
        "24"
       ]
      },
      "from": "@epam/uui:RowMods",
      "required": false
     },
     {
      "uid": 8,
      "name": "padding",
      "typeValue": {
       "raw": "'18' | '24' | '12' | '6'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "6",
        "12",
        "18",
        "24"
       ]
      },
      "from": "@epam/uui:RowMods",
      "required": false
     },
     {
      "uid": 9,
      "name": "rowGap",
      "typeValue": {
       "raw": "number | '36' | '18' | '24' | '12' | '6'"
      },
      "from": "@epam/uui:RowMods",
      "required": false
     },
     {
      "uid": 10,
      "name": "topShadow",
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui:RowMods",
      "required": false
     },
     {
      "uid": 11,
      "name": "vPadding",
      "typeValue": {
       "raw": "'36' | '48' | '18' | '24' | '12'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "12",
        "18",
        "24",
        "36",
        "48"
       ]
      },
      "from": "@epam/uui:RowMods",
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/loveship:RowSize": {
   "summary": {
    "module": "@epam/loveship",
    "typeName": {
     "name": "RowSize",
     "nameFull": "RowSize"
    },
    "src": "loveship/components/types.ts",
    "exported": true
   },
   "details": {
    "kind": 264,
    "typeValue": {
     "raw": "'36' | '48' | '24' | '30' | '42'",
     "print": [
      "type RowSize = '24' | '30' | '36' | '42' | '48';"
     ]
    }
   }
  },
  "@epam/loveship:RowSizeMod": {
   "summary": {
    "module": "@epam/loveship",
    "typeName": {
     "name": "RowSizeMod",
     "nameFull": "RowSizeMod"
    },
    "src": "loveship/components/types.ts",
    "exported": true
   },
   "details": {
    "kind": 263,
    "typeValue": {
     "raw": "RowSizeMod",
     "print": [
      "interface RowSizeMod {",
      "    size?: RowSize;",
      "}"
     ]
    },
    "props": [
     {
      "uid": 1,
      "name": "size",
      "typeValue": {
       "raw": "'36' | '48' | '24' | '30' | '42'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "24",
        "30",
        "36",
        "42",
        "48"
       ]
      },
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/loveship:SearchInputProps": {
   "summary": {
    "module": "@epam/loveship",
    "typeName": {
     "name": "SearchInputProps",
     "nameFull": "SearchInputProps"
    },
    "src": "loveship/components/inputs/TextInput.tsx",
    "exported": true
   },
   "details": {
    "kind": 264,
    "typeValue": {
     "raw": "SearchInputProps",
     "print": [
      "type SearchInputProps = uuiComponents.TextInputProps & TextInputMods & IEditableDebouncerOptions;"
     ]
    },
    "props": [
     {
      "uid": 1,
      "name": "acceptIcon",
      "comment": {
       "raw": [
        "Overrides accept (check) icon"
       ]
      },
      "typeValue": {
       "raw": "Icon"
      },
      "editor": {
       "type": "component"
      },
      "from": "@epam/uui-components:TextInputProps",
      "required": false
     },
     {
      "uid": 2,
      "name": "cancelIcon",
      "comment": {
       "raw": [
        "Overrides cancel (cross) icon"
       ]
      },
      "typeValue": {
       "raw": "Icon"
      },
      "editor": {
       "type": "component"
      },
      "from": "@epam/uui-components:TextInputProps",
      "required": false
     },
     {
      "uid": 3,
      "name": "dropdownIcon",
      "comment": {
       "raw": [
        "Overrides dropdown (chevron) icon"
       ]
      },
      "typeValue": {
       "raw": "Icon"
      },
      "editor": {
       "type": "component"
      },
      "from": "@epam/uui-components:TextInputProps",
      "required": false
     },
     {
      "uid": 4,
      "name": "inputCx",
      "comment": {
       "raw": [
        "CSS class(es) to put to the HTML Input element"
       ]
      },
      "typeValue": {
       "raw": "null | string | number | boolean | ClassDictionary | ClassArray"
      },
      "typeValueRef": "@epam/uui-core:ClassValue",
      "from": "@epam/uui-components:TextInputProps",
      "required": false
     },
     {
      "uid": 5,
      "name": "renderInput",
      "comment": {
       "raw": [
        "overrides rendering of HTML Input element"
       ]
      },
      "typeValue": {
       "raw": "(props: IRenderInputProps) => JSX.Element"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-components:TextInputProps",
      "required": false
     },
     {
      "uid": 6,
      "name": "onCancel",
      "comment": {
       "raw": [
        "Enables cancel (cross) icon, and fires when the icon is clicked"
       ]
      },
      "typeValue": {
       "raw": "() => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:TextInputCoreProps",
      "required": false
     },
     {
      "uid": 7,
      "name": "onAccept",
      "comment": {
       "raw": [
        "Enables accept (check) icon, and fires when the icon is clicked"
       ]
      },
      "typeValue": {
       "raw": "() => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:TextInputCoreProps",
      "required": false
     },
     {
      "uid": 8,
      "name": "onKeyDown",
      "comment": {
       "raw": [
        "keydown event handler to put on the HTML input element"
       ]
      },
      "typeValue": {
       "raw": "(e?: any) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:TextInputCoreProps",
      "required": false
     },
     {
      "uid": 9,
      "name": "autoFocus",
      "comment": {
       "raw": [
        "Put focus on the element, when component is mounted"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:TextInputCoreProps",
      "required": false
     },
     {
      "uid": 10,
      "name": "type",
      "comment": {
       "raw": [
        "Standard 'type' attribute to put on the HTML input element (e.g. 'password')"
       ]
      },
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "from": "@epam/uui-core:TextInputCoreProps",
      "required": false
     },
     {
      "uid": 11,
      "name": "autoComplete",
      "comment": {
       "raw": [
        "Standard [autocomplete attribute]{@link https://www.w3schools.com/tags/att_input_autocomplete.asp}"
       ]
      },
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "from": "@epam/uui-core:TextInputCoreProps",
      "required": false
     },
     {
      "uid": 12,
      "name": "name",
      "comment": {
       "raw": [
        "Standard [name attribute]{@link https://www.w3schools.com/tags/att_input_name.asp}"
       ]
      },
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "from": "@epam/uui-core:TextInputCoreProps",
      "required": false
     },
     {
      "uid": 13,
      "name": "maxLength",
      "comment": {
       "raw": [
        "Maximum input length in characters"
       ]
      },
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "from": "@epam/uui-core:TextInputCoreProps",
      "required": false
     },
     {
      "uid": 14,
      "name": "inputMode",
      "comment": {
       "raw": [
        "Standard [inputMode attribute]{@link https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/inputmode}"
       ]
      },
      "typeValue": {
       "raw": "'none' | 'text' | 'tel' | 'url' | 'email' | 'numeric' | 'decimal' | 'search'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "none",
        "text",
        "tel",
        "url",
        "email",
        "numeric",
        "decimal",
        "search"
       ]
      },
      "from": "@epam/uui-core:TextInputCoreProps",
      "required": false
     },
     {
      "uid": 15,
      "name": "id",
      "comment": {
       "raw": [
        "HTML ID attribute for input"
       ]
      },
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "from": "@epam/uui-core:TextInputCoreProps",
      "required": false
     },
     {
      "uid": 16,
      "name": "cx",
      "comment": {
       "raw": [
        "CSS class(es) to put on component's root. See {@link https://github.com/JedWatson/classnames#usage} for details"
       ]
      },
      "typeValue": {
       "raw": "null | string | number | boolean | ClassDictionary | ClassArray"
      },
      "typeValueRef": "@epam/uui-core:ClassValue",
      "from": "@epam/uui-core:IHasCX",
      "required": false
     },
     {
      "uid": 17,
      "name": "onClick",
      "comment": {
       "raw": [
        "Called when component is clicked"
       ]
      },
      "typeValue": {
       "raw": "(e?: any) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IClickable",
      "required": false
     },
     {
      "uid": 18,
      "name": "isDisabled",
      "comment": {
       "raw": [
        "Disable editing, and visually de-emphasize value of the component"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:IDisableable",
      "required": false
     },
     {
      "uid": 19,
      "name": "value",
      "comment": {
       "raw": [
        "The current value of component"
       ]
      },
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "from": "@epam/uui-core:IEditable",
      "required": true
     },
     {
      "uid": 20,
      "name": "onValueChange",
      "comment": {
       "raw": [
        "Called when value needs to be changed (usually due to user interaction)"
       ]
      },
      "typeValue": {
       "raw": "(newValue: string | undefined) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IEditable",
      "required": true
     },
     {
      "uid": 21,
      "name": "isInvalid",
      "comment": {
       "raw": [
        "True if component contains invalid input"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:ICanBeInvalid",
      "required": false
     },
     {
      "uid": 22,
      "name": "validationMessage",
      "comment": {
       "raw": [
        "Message describing why the value is invalid"
       ]
      },
      "typeValue": {
       "raw": "null | string | number | boolean | React.ReactElement<any, string | React.JSXElementConstructor<any>> | React.ReactFragment | React.ReactPortal"
      },
      "typeValueRef": "@types/react:ReactNode",
      "from": "@epam/uui-core:ICanBeInvalid",
      "required": false
     },
     {
      "uid": 23,
      "name": "validationProps",
      "comment": {
       "raw": [
        "If T is a complex value (object or array), this property contains validation states of inner items"
       ]
      },
      "typeValue": {
       "raw": "{ [key: string]: ICanBeInvalid; }"
      },
      "from": "@epam/uui-core:ICanBeInvalid",
      "required": false
     },
     {
      "uid": 24,
      "name": "isReadonly",
      "comment": {
       "raw": [
        "Disable editing. Unlike isDisabled, keep component's value readable."
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:ICanBeReadonly",
      "required": false
     },
     {
      "uid": 25,
      "name": "isRequired",
      "comment": {
       "raw": [
        "Marks that component's value is required and shouldn't be empty"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:ICanBeRequired",
      "required": false
     },
     {
      "uid": 26,
      "name": "placeholder",
      "comment": {
       "raw": [
        "Placeholder to display when empty"
       ]
      },
      "typeValue": {
       "raw": "any"
      },
      "from": "@epam/uui-core:IHasPlaceholder",
      "required": false
     },
     {
      "uid": 27,
      "name": "icon",
      "comment": {
       "raw": [
        "Icon can be a React element (usually an SVG element)"
       ]
      },
      "typeValue": {
       "raw": "Icon"
      },
      "editor": {
       "type": "component"
      },
      "from": "@epam/uui-core:IHasIcon",
      "required": false
     },
     {
      "uid": 28,
      "name": "iconPosition",
      "comment": {
       "raw": [
        "Position of the icon (left of right)"
       ]
      },
      "typeValue": {
       "raw": "'left' | 'right'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "left",
        "right"
       ]
      },
      "from": "@epam/uui-core:IHasIcon",
      "required": false
     },
     {
      "uid": 29,
      "name": "onIconClick",
      "comment": {
       "raw": [
        "Click handler for the icon"
       ]
      },
      "typeValue": {
       "raw": "() => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IHasIcon",
      "required": false
     },
     {
      "uid": 30,
      "name": "isOpen",
      "comment": {
       "raw": [
        "When isDropdown=true, indicate that dropdown is open with chevron icon"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:IDropdownToggler",
      "required": false
     },
     {
      "uid": 31,
      "name": "isDropdown",
      "comment": {
       "raw": [
        "Shows chevron icon, enabling component to act as dropdown toggler"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:IDropdownToggler",
      "required": false
     },
     {
      "uid": 32,
      "name": "toggleDropdownOpening",
      "comment": {
       "raw": [
        "Called when associated dropdown should open or close"
       ]
      },
      "typeValue": {
       "raw": "(value: boolean) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IDropdownToggler",
      "required": false
     },
     {
      "uid": 33,
      "name": "isInteractedOutside",
      "comment": {
       "raw": [
        "Called when component is interacted outside, to close the dropdown"
       ]
      },
      "typeValue": {
       "raw": "(event: Event) => boolean"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IDropdownToggler",
      "required": false
     },
     {
      "uid": 34,
      "name": "ref",
      "comment": {
       "raw": [
        "Component's ref"
       ]
      },
      "typeValue": {
       "raw": "null | (instance: any) => void | React.RefObject<any>"
      },
      "from": "@epam/uui-core:IDropdownToggler",
      "required": false
     },
     {
      "uid": 35,
      "name": "caption",
      "comment": {
       "raw": [
        "Caption. Can be a string, or React.Elements. Certain components supports minimal markup (<b>,<i>,<a>) in captions."
       ]
      },
      "typeValue": {
       "raw": "any"
      },
      "from": "@epam/uui-core:IHasCaption",
      "required": false
     },
     {
      "uid": 36,
      "name": "getValueChangeAnalyticsEvent",
      "comment": {
       "raw": [
        "Given a value, returns an analytics event to send when component is edited.",
        " See [AnalyticsContext](@link https://uui.epam.com/documents?id=analyticsContext&mode=doc&skin=UUI4_promo&category=contexts)."
       ]
      },
      "typeValue": {
       "raw": "(newValue: string | null, oldValue: string | null) => AnalyticsEvent"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IAnalyticableOnChange",
      "required": false
     },
     {
      "uid": 37,
      "name": "rawProps",
      "comment": {
       "raw": [
        "Any HTML attributes (native or 'data-') to put on the underlying component"
       ]
      },
      "typeValue": {
       "raw": "React.HTMLAttributes<HTMLInputElement> & Record<`data-${string}`, string>"
      },
      "from": "@epam/uui-core:IHasRawProps",
      "required": false
     },
     {
      "uid": 38,
      "name": "onFocus",
      "comment": {
       "raw": [
        "Called when component gets input focus"
       ]
      },
      "typeValue": {
       "raw": "(e: React.FocusEvent<HTMLInputElement, Element>) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:ICanFocus",
      "required": false
     },
     {
      "uid": 39,
      "name": "onBlur",
      "comment": {
       "raw": [
        "Called when component looses input focus"
       ]
      },
      "typeValue": {
       "raw": "(e: React.FocusEvent<HTMLInputElement, Element>) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:ICanFocus",
      "required": false
     },
     {
      "uid": 40,
      "name": "tabIndex",
      "comment": {
       "raw": [
        "Controls the order of keyboard navigation between components"
       ]
      },
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "from": "@epam/uui-core:IHasTabIndex",
      "required": false
     },
     {
      "uid": 41,
      "name": "size",
      "comment": {
       "raw": [
        "@default '36'"
       ],
       "tags": {
        "@default": "36"
       }
      },
      "typeValue": {
       "raw": "'36' | '48' | '24' | '30' | '42' | 'none' | '60'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "24",
        "30",
        "36",
        "42",
        "48",
        "60",
        "none"
       ]
      },
      "from": "@epam/loveship:TextInputMods",
      "required": false
     },
     {
      "uid": 42,
      "name": "mode",
      "comment": {
       "raw": [
        "Visual mode for component:",
        " - form: default visuals, to use in forms.",
        " - cell: adjust to embed as table cell editor: no borders, no focus (it is applied by DataCell)",
        " - inline: adjust for WYSIWYG UX. Backgrounds removed. Borders appear only on hover."
       ]
      },
      "typeValue": {
       "raw": "'form' | 'cell' | 'inline'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "form",
        "cell",
        "inline"
       ]
      },
      "from": "@epam/uui:IHasEditMode",
      "required": false
     },
     {
      "uid": 43,
      "name": "disableDebounce",
      "comment": {
       "raw": [
        "Pass true to disable debouncing"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:IEditableDebouncerOptions",
      "required": false
     },
     {
      "uid": 44,
      "name": "debounceDelay",
      "comment": {
       "raw": [
        "Debounce delay in ms. Default value is 500ms"
       ]
      },
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "from": "@epam/uui-core:IEditableDebouncerOptions",
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/loveship:SizeMod": {
   "summary": {
    "module": "@epam/loveship",
    "typeName": {
     "name": "SizeMod",
     "nameFull": "SizeMod"
    },
    "src": "loveship/components/types.ts",
    "exported": true
   },
   "details": {
    "kind": 263,
    "typeValue": {
     "raw": "SizeMod",
     "print": [
      "interface SizeMod {",
      "    size?: ControlSize;",
      "}"
     ]
    },
    "props": [
     {
      "uid": 1,
      "name": "size",
      "typeValue": {
       "raw": "'36' | '48' | '24' | '30' | '42' | 'none'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "24",
        "30",
        "36",
        "42",
        "48",
        "none"
       ]
      },
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/loveship:SliderRatingProps": {
   "summary": {
    "module": "@epam/loveship",
    "typeName": {
     "name": "SliderRatingProps",
     "nameFull": "SliderRatingProps<TValue>"
    },
    "src": "loveship/components/inputs/SliderRating.tsx",
    "exported": true
   },
   "details": {
    "kind": 263,
    "typeValue": {
     "raw": "SliderRatingProps<TValue>",
     "print": [
      "interface SliderRatingProps<TValue> extends IEditable<TValue>, IHasRawProps<React.HTMLAttributes<HTMLDivElement>> {",
      "    renderTooltip?: (value: TValue) => React.ReactNode;",
      "    /**",
      "     * @default 1",
      "     */",
      "    from?: 1 | 2;",
      "    /**",
      "     * @default false",
      "     */",
      "    withoutNa?: boolean;",
      "    /**",
      "     * @default '18'",
      "     */",
      "    size?: '18' | '24';",
      "    getScaleIcon?: (value: number) => Icon;",
      "    getHandlerIcon?: (value: number) => Icon;",
      "    tooltipColor?: 'white' | 'fire' | 'gray';",
      "}"
     ]
    },
    "props": [
     {
      "uid": 1,
      "name": "renderTooltip",
      "typeValue": {
       "raw": "(value: TValue) => React.ReactNode"
      },
      "editor": {
       "type": "component"
      },
      "required": false
     },
     {
      "uid": 2,
      "name": "from",
      "comment": {
       "raw": [
        "@default 1"
       ],
       "tags": {
        "@default": 1
       }
      },
      "typeValue": {
       "raw": "1 | 2"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        1,
        2
       ]
      },
      "required": false
     },
     {
      "uid": 3,
      "name": "withoutNa",
      "comment": {
       "raw": [
        "@default false"
       ],
       "tags": {
        "@default": false
       }
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "required": false
     },
     {
      "uid": 4,
      "name": "size",
      "comment": {
       "raw": [
        "@default '18'"
       ],
       "tags": {
        "@default": "18"
       }
      },
      "typeValue": {
       "raw": "'18' | '24'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "18",
        "24"
       ]
      },
      "required": false
     },
     {
      "uid": 5,
      "name": "getScaleIcon",
      "typeValue": {
       "raw": "(value: number) => Icon"
      },
      "editor": {
       "type": "func"
      },
      "required": false
     },
     {
      "uid": 6,
      "name": "getHandlerIcon",
      "typeValue": {
       "raw": "(value: number) => Icon"
      },
      "editor": {
       "type": "func"
      },
      "required": false
     },
     {
      "uid": 7,
      "name": "tooltipColor",
      "typeValue": {
       "raw": "'fire' | 'white' | 'gray'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "fire",
        "white",
        "gray"
       ]
      },
      "required": false
     },
     {
      "uid": 8,
      "name": "value",
      "comment": {
       "raw": [
        "The current value of component"
       ]
      },
      "typeValue": {
       "raw": "TValue"
      },
      "from": "@epam/uui-core:IEditable",
      "required": true
     },
     {
      "uid": 9,
      "name": "onValueChange",
      "comment": {
       "raw": [
        "Called when value needs to be changed (usually due to user interaction)"
       ]
      },
      "typeValue": {
       "raw": "(newValue: TValue) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IEditable",
      "required": true
     },
     {
      "uid": 10,
      "name": "isInvalid",
      "comment": {
       "raw": [
        "True if component contains invalid input"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:ICanBeInvalid",
      "required": false
     },
     {
      "uid": 11,
      "name": "validationMessage",
      "comment": {
       "raw": [
        "Message describing why the value is invalid"
       ]
      },
      "typeValue": {
       "raw": "null | string | number | boolean | React.ReactElement<any, string | React.JSXElementConstructor<any>> | React.ReactFragment | React.ReactPortal"
      },
      "typeValueRef": "@types/react:ReactNode",
      "from": "@epam/uui-core:ICanBeInvalid",
      "required": false
     },
     {
      "uid": 12,
      "name": "validationProps",
      "comment": {
       "raw": [
        "If T is a complex value (object or array), this property contains validation states of inner items"
       ]
      },
      "typeValue": {
       "raw": "{ [key: string]: ICanBeInvalid; }"
      },
      "from": "@epam/uui-core:ICanBeInvalid",
      "required": false
     },
     {
      "uid": 13,
      "name": "isDisabled",
      "comment": {
       "raw": [
        "Disable editing, and visually de-emphasize value of the component"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:IDisableable",
      "required": false
     },
     {
      "uid": 14,
      "name": "isReadonly",
      "comment": {
       "raw": [
        "Disable editing. Unlike isDisabled, keep component's value readable."
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:ICanBeReadonly",
      "required": false
     },
     {
      "uid": 15,
      "name": "isRequired",
      "comment": {
       "raw": [
        "Marks that component's value is required and shouldn't be empty"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:ICanBeRequired",
      "required": false
     },
     {
      "uid": 16,
      "name": "rawProps",
      "comment": {
       "raw": [
        "Any HTML attributes (native or 'data-') to put on the underlying component"
       ]
      },
      "typeValue": {
       "raw": "React.HTMLAttributes<HTMLDivElement> & Record<`data-${string}`, string>"
      },
      "from": "@epam/uui-core:IHasRawProps",
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/loveship:SnackbarCardProps": {
   "summary": {
    "module": "@epam/loveship",
    "typeName": {
     "name": "SnackbarCardProps",
     "nameFull": "SnackbarCardProps"
    },
    "src": "loveship/components/overlays/SnackbarCard.tsx",
    "exported": true
   },
   "details": {
    "kind": 263,
    "typeValue": {
     "raw": "SnackbarCardProps",
     "print": [
      "interface SnackbarCardProps extends INotification, IHasChildren, IHasRawProps<React.HTMLAttributes<HTMLDivElement>> {",
      "    snackType: 'success' | 'warning' | 'info' | 'danger';",
      "}"
     ]
    },
    "props": [
     {
      "uid": 1,
      "name": "snackType",
      "typeValue": {
       "raw": "'success' | 'warning' | 'info' | 'danger'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "success",
        "warning",
        "info",
        "danger"
       ]
      },
      "required": true
     },
     {
      "uid": 2,
      "name": "onClose",
      "comment": {
       "raw": [
        "Call to close the notification with abort action. It's rejects `notificationContext.show()` promise."
       ]
      },
      "typeValue": {
       "raw": "() => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:INotification",
      "required": false
     },
     {
      "uid": 3,
      "name": "onSuccess",
      "comment": {
       "raw": [
        "Call to close the notification with success action. It's resolved `notificationContext.show()` promise."
       ]
      },
      "typeValue": {
       "raw": "() => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:INotification",
      "required": false
     },
     {
      "uid": 4,
      "name": "clearTimer",
      "comment": {
       "raw": [
        "Cancel notification closing timer"
       ]
      },
      "typeValue": {
       "raw": "() => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:INotification",
      "required": false
     },
     {
      "uid": 5,
      "name": "refreshTimer",
      "comment": {
       "raw": [
        "Reinitialize notification closing timer. It will be set to the provided notification duration."
       ]
      },
      "typeValue": {
       "raw": "() => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:INotification",
      "required": false
     },
     {
      "uid": 6,
      "name": "id",
      "comment": {
       "raw": [
        "Unique id of the notification"
       ]
      },
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "from": "@epam/uui-core:INotification",
      "required": true
     },
     {
      "uid": 7,
      "name": "key",
      "comment": {
       "raw": [
        "Unique key of the notification"
       ]
      },
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "from": "@epam/uui-core:INotification",
      "required": true
     },
     {
      "uid": 8,
      "name": "children",
      "typeValue": {
       "raw": "null | string | number | boolean | React.ReactElement<any, string | React.JSXElementConstructor<any>> | React.ReactFragment | React.ReactPortal"
      },
      "typeValueRef": "@types/react:ReactNode",
      "from": "@epam/uui-core:IHasChildren",
      "required": false
     },
     {
      "uid": 9,
      "name": "rawProps",
      "comment": {
       "raw": [
        "Any HTML attributes (native or 'data-') to put on the underlying component"
       ]
      },
      "typeValue": {
       "raw": "React.HTMLAttributes<HTMLDivElement> & Record<`data-${string}`, string>"
      },
      "from": "@epam/uui-core:IHasRawProps",
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/loveship:StatusIndicatorMods": {
   "summary": {
    "module": "@epam/loveship",
    "typeName": {
     "name": "StatusIndicatorMods",
     "nameFull": "StatusIndicatorMods"
    },
    "src": "loveship/components/widgets/StatusIndicator.tsx",
    "exported": true
   },
   "details": {
    "kind": 263,
    "typeValue": {
     "raw": "StatusIndicatorMods",
     "print": [
      "interface StatusIndicatorMods extends Omit<UuiStatusIndicatorProps, 'color'> {",
      "    color?: EpamPrimaryColor | 'white' | 'gray' | 'yellow' | 'orange' | 'fuchsia' | 'purple' | 'violet' | 'cobalt' | 'cyan' | 'mint';",
      "}"
     ]
    },
    "props": [
     {
      "uid": 1,
      "name": "color",
      "typeValue": {
       "raw": "'sky' | 'grass' | 'sun' | 'fire' | 'cobalt' | 'violet' | 'fuchsia' | 'yellow' | 'orange' | 'purple' | 'cyan' | 'mint' | 'white' | 'gray'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "sky",
        "grass",
        "sun",
        "fire",
        "cobalt",
        "violet",
        "fuchsia",
        "yellow",
        "orange",
        "purple",
        "cyan",
        "mint",
        "white",
        "gray"
       ]
      },
      "required": false
     },
     {
      "uid": 2,
      "name": "size",
      "comment": {
       "raw": [
        "Component size. If omitted, 24 size will be used.",
        " @default '24'"
       ],
       "tags": {
        "@default": "24"
       }
      },
      "typeValue": {
       "raw": "'18' | '24' | '12'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "12",
        "18",
        "24"
       ]
      },
      "from": "@epam/uui:StatusIndicatorProps",
      "required": false
     },
     {
      "uid": 3,
      "name": "cx",
      "comment": {
       "raw": [
        "CSS class(es) to put on component's root. See {@link https://github.com/JedWatson/classnames#usage} for details"
       ]
      },
      "typeValue": {
       "raw": "null | string | number | boolean | ClassDictionary | ClassArray"
      },
      "from": "@epam/uui-core:IHasCX",
      "required": false
     },
     {
      "uid": 4,
      "name": "fill",
      "comment": {
       "raw": [
        "Fill mode, solid is used by default",
        " @default 'solid'"
       ],
       "tags": {
        "@default": "solid"
       }
      },
      "typeValue": {
       "raw": "'solid' | 'outline'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "solid",
        "outline"
       ]
      },
      "from": "@epam/uui:StatusIndicatorProps",
      "required": false
     },
     {
      "uid": 5,
      "name": "caption",
      "comment": {
       "raw": [
        "Component caption."
       ]
      },
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "from": "@epam/uui:StatusIndicatorProps",
      "required": true
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/loveship:StatusIndicatorProps": {
   "summary": {
    "module": "@epam/loveship",
    "typeName": {
     "name": "StatusIndicatorProps",
     "nameFull": "StatusIndicatorProps"
    },
    "src": "loveship/components/widgets/StatusIndicator.tsx",
    "exported": true
   },
   "details": {
    "kind": 264,
    "typeValue": {
     "raw": "StatusIndicatorProps",
     "print": [
      "type StatusIndicatorProps = Omit<UuiStatusIndicatorProps, 'color'> & StatusIndicatorMods;"
     ]
    },
    "props": [
     {
      "uid": 1,
      "name": "size",
      "comment": {
       "raw": [
        "Component size. If omitted, 24 size will be used.",
        " @default '24'"
       ],
       "tags": {
        "@default": "24"
       }
      },
      "typeValue": {
       "raw": "'18' | '24' | '12'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "12",
        "18",
        "24"
       ]
      },
      "from": "@epam/uui:StatusIndicatorProps",
      "required": false
     },
     {
      "uid": 2,
      "name": "cx",
      "comment": {
       "raw": [
        "CSS class(es) to put on component's root. See {@link https://github.com/JedWatson/classnames#usage} for details"
       ]
      },
      "typeValue": {
       "raw": "null | string | number | boolean | ClassDictionary | ClassArray"
      },
      "from": "@epam/uui-core:IHasCX",
      "required": false
     },
     {
      "uid": 3,
      "name": "fill",
      "comment": {
       "raw": [
        "Fill mode, solid is used by default",
        " @default 'solid'"
       ],
       "tags": {
        "@default": "solid"
       }
      },
      "typeValue": {
       "raw": "'solid' | 'outline'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "solid",
        "outline"
       ]
      },
      "from": "@epam/uui:StatusIndicatorProps",
      "required": false
     },
     {
      "uid": 4,
      "name": "caption",
      "comment": {
       "raw": [
        "Component caption."
       ]
      },
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "from": "@epam/uui:StatusIndicatorProps",
      "required": true
     },
     {
      "uid": 5,
      "name": "color",
      "typeValue": {
       "raw": "'sky' | 'grass' | 'sun' | 'fire' | 'cobalt' | 'violet' | 'fuchsia' | 'yellow' | 'orange' | 'purple' | 'cyan' | 'mint' | 'white' | 'gray'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "sky",
        "grass",
        "sun",
        "fire",
        "cobalt",
        "violet",
        "fuchsia",
        "yellow",
        "orange",
        "purple",
        "cyan",
        "mint",
        "white",
        "gray"
       ]
      },
      "from": "@epam/loveship:StatusIndicatorMods",
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/loveship:TabButtonMods": {
   "summary": {
    "module": "@epam/loveship",
    "typeName": {
     "name": "TabButtonMods",
     "nameFull": "TabButtonMods"
    },
    "src": "loveship/components/buttons/TabButton.tsx",
    "exported": true
   },
   "details": {
    "kind": 263,
    "typeValue": {
     "raw": "TabButtonMods",
     "print": [
      "interface TabButtonMods extends uui.TabButtonProps {",
      "    theme?: 'light' | 'dark';",
      "}"
     ]
    },
    "props": [
     {
      "uid": 1,
      "name": "theme",
      "typeValue": {
       "raw": "'light' | 'dark'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "light",
        "dark"
       ]
      },
      "required": false
     },
     {
      "uid": 2,
      "name": "size",
      "comment": {
       "raw": [
        "@default '48'"
       ],
       "tags": {
        "@default": "48"
       }
      },
      "typeValue": {
       "raw": "'36' | '48' | '60'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "36",
        "48",
        "60"
       ]
      },
      "from": "@epam/uui:TabButtonMods",
      "required": false
     },
     {
      "uid": 3,
      "name": "withNotify",
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui:TabButtonMods",
      "required": false
     },
     {
      "uid": 4,
      "name": "clearIcon",
      "comment": {
       "raw": [
        "Icon for clear value button (usually cross)"
       ]
      },
      "typeValue": {
       "raw": "Icon"
      },
      "editor": {
       "type": "component"
      },
      "from": "@epam/uui-components:ButtonProps",
      "required": false
     },
     {
      "uid": 5,
      "name": "captionCX",
      "comment": {
       "raw": [
        "CSS classes to put on the caption"
       ]
      },
      "typeValue": {
       "raw": "null | string | number | boolean | ClassDictionary | ClassArray"
      },
      "typeValueRef": "@epam/uui-core:ClassValue",
      "from": "@epam/uui-components:ButtonProps",
      "required": false
     },
     {
      "uid": 6,
      "name": "countIndicator",
      "comment": {
       "raw": [
        "CountIndicator component"
       ]
      },
      "typeValue": {
       "raw": "React.ComponentClass<IHasCaption, any> | React.FunctionComponent<IHasCaption>"
      },
      "from": "@epam/uui-components:ButtonProps",
      "required": false
     },
     {
      "uid": 7,
      "name": "dropdownIcon",
      "comment": {
       "raw": [
        "Icon for drop-down toggler"
       ]
      },
      "typeValue": {
       "raw": "Icon"
      },
      "editor": {
       "type": "component"
      },
      "from": "@epam/uui-core:ButtonCoreProps",
      "required": false
     },
     {
      "uid": 8,
      "name": "dropdownIconPosition",
      "comment": {
       "raw": [
        "Position of the dropdown icon ('left' of 'right')"
       ]
      },
      "typeValue": {
       "raw": "'left' | 'right'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "left",
        "right"
       ]
      },
      "from": "@epam/uui-core:ButtonCoreProps",
      "required": false
     },
     {
      "uid": 9,
      "name": "count",
      "typeValue": {
       "raw": "null | string | number | boolean | React.ReactElement<any, string | React.JSXElementConstructor<any>> | React.ReactFragment | React.ReactPortal"
      },
      "typeValueRef": "@types/react:ReactNode",
      "from": "@epam/uui-core:ButtonCoreProps",
      "required": false
     },
     {
      "uid": 10,
      "name": "cx",
      "comment": {
       "raw": [
        "CSS class(es) to put on component's root. See {@link https://github.com/JedWatson/classnames#usage} for details"
       ]
      },
      "typeValue": {
       "raw": "null | string | number | boolean | ClassDictionary | ClassArray"
      },
      "typeValueRef": "@epam/uui-core:ClassValue",
      "from": "@epam/uui-core:IHasCX",
      "required": false
     },
     {
      "uid": 11,
      "name": "onClick",
      "comment": {
       "raw": [
        "Called when component is clicked"
       ]
      },
      "typeValue": {
       "raw": "(e?: any) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IClickable",
      "required": false
     },
     {
      "uid": 12,
      "name": "link",
      "comment": {
       "raw": [
        "Link object to redirect to for SPA-redirects"
       ]
      },
      "typeValue": {
       "raw": "Link"
      },
      "from": "@epam/uui-core:ICanRedirect",
      "required": false
     },
     {
      "uid": 13,
      "name": "href",
      "comment": {
       "raw": [
        "Href (URL) to redirect to, for non-SPA redirects"
       ]
      },
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "from": "@epam/uui-core:ICanRedirect",
      "required": false
     },
     {
      "uid": 14,
      "name": "isLinkActive",
      "comment": {
       "raw": [
        "Highlights component to show that link is active (browser is displaying the page to which link is pointing)"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:ICanRedirect",
      "required": false
     },
     {
      "uid": 15,
      "name": "target",
      "comment": {
       "raw": [
        "Controls where the link should be opened"
       ]
      },
      "typeValue": {
       "raw": "'_blank'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "_blank"
       ]
      },
      "from": "@epam/uui-core:ICanRedirect",
      "required": false
     },
     {
      "uid": 16,
      "name": "isDisabled",
      "comment": {
       "raw": [
        "Disable editing, and visually de-emphasize value of the component"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:IDisableable",
      "required": false
     },
     {
      "uid": 17,
      "name": "icon",
      "comment": {
       "raw": [
        "Icon can be a React element (usually an SVG element)"
       ]
      },
      "typeValue": {
       "raw": "Icon"
      },
      "editor": {
       "type": "component"
      },
      "from": "@epam/uui-core:IHasIcon",
      "required": false
     },
     {
      "uid": 18,
      "name": "iconPosition",
      "comment": {
       "raw": [
        "Position of the icon (left of right)"
       ]
      },
      "typeValue": {
       "raw": "'left' | 'right'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "left",
        "right"
       ]
      },
      "from": "@epam/uui-core:IHasIcon",
      "required": false
     },
     {
      "uid": 19,
      "name": "onIconClick",
      "comment": {
       "raw": [
        "Click handler for the icon"
       ]
      },
      "typeValue": {
       "raw": "() => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IHasIcon",
      "required": false
     },
     {
      "uid": 20,
      "name": "clickAnalyticsEvent",
      "comment": {
       "raw": [
        "An analytics event to send (via AnalyticsContext) when component is clicked.",
        " See [AnalyticsContext](@link https://uui.epam.com/documents?id=analyticsContext&mode=doc&skin=UUI4_promo&category=contexts)."
       ]
      },
      "typeValue": {
       "raw": "null | { [key: string]: any; name: string; }"
      },
      "from": "@epam/uui-core:IAnalyticableClick",
      "required": false
     },
     {
      "uid": 21,
      "name": "tabIndex",
      "comment": {
       "raw": [
        "Controls the order of keyboard navigation between components"
       ]
      },
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "from": "@epam/uui-core:IHasTabIndex",
      "required": false
     },
     {
      "uid": 22,
      "name": "rawProps",
      "comment": {
       "raw": [
        "Any HTML attributes (native or 'data-') to put on the underlying component"
       ]
      },
      "typeValue": {
       "raw": "React.ButtonHTMLAttributes<HTMLButtonElement> & Record<`data-${string}`, string>"
      },
      "from": "@epam/uui-core:IHasRawProps",
      "required": false
     },
     {
      "uid": 23,
      "name": "caption",
      "comment": {
       "raw": [
        "Caption. Can be a string, or React.Elements. Certain components supports minimal markup (<b>,<i>,<a>) in captions."
       ]
      },
      "typeValue": {
       "raw": "any"
      },
      "from": "@epam/uui-core:IHasCaption",
      "required": false
     },
     {
      "uid": 24,
      "name": "onClear",
      "comment": {
       "raw": [
        "Call to clear toggler value"
       ]
      },
      "typeValue": {
       "raw": "(e?: any) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IBasicPickerToggler",
      "required": false
     },
     {
      "uid": 25,
      "name": "isOpen",
      "comment": {
       "raw": [
        "When isDropdown=true, indicate that dropdown is open with chevron icon"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:IDropdownToggler",
      "required": false
     },
     {
      "uid": 26,
      "name": "isDropdown",
      "comment": {
       "raw": [
        "Shows chevron icon, enabling component to act as dropdown toggler"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:IDropdownToggler",
      "required": false
     },
     {
      "uid": 27,
      "name": "toggleDropdownOpening",
      "comment": {
       "raw": [
        "Called when associated dropdown should open or close"
       ]
      },
      "typeValue": {
       "raw": "(value: boolean) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IDropdownToggler",
      "required": false
     },
     {
      "uid": 28,
      "name": "isInteractedOutside",
      "comment": {
       "raw": [
        "Called when component is interacted outside, to close the dropdown"
       ]
      },
      "typeValue": {
       "raw": "(event: Event) => boolean"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IDropdownToggler",
      "required": false
     },
     {
      "uid": 29,
      "name": "ref",
      "comment": {
       "raw": [
        "Component's ref"
       ]
      },
      "typeValue": {
       "raw": "null | (instance: any) => void | React.RefObject<any>"
      },
      "from": "@epam/uui-core:IDropdownToggler",
      "required": false
     },
     {
      "uid": 30,
      "name": "forwardedRef",
      "comment": {
       "raw": [
        "this ref is passed to the underlying component"
       ]
      },
      "typeValue": {
       "raw": "null | (instance: HTMLButtonElement | HTMLAnchorElement | null) => void | React.MutableRefObject<HTMLButtonElement | HTMLAnchorElement | null>"
      },
      "from": "@epam/uui-core:IHasForwardedRef",
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/loveship:TabButtonProps": {
   "summary": {
    "module": "@epam/loveship",
    "typeName": {
     "name": "TabButtonProps",
     "nameFull": "TabButtonProps"
    },
    "src": "loveship/components/buttons/TabButton.tsx",
    "exported": true
   },
   "details": {
    "kind": 263,
    "typeValue": {
     "raw": "TabButtonProps",
     "print": [
      "interface TabButtonProps extends uui.TabButtonProps, TabButtonMods {",
      "}"
     ]
    },
    "props": [
     {
      "uid": 1,
      "name": "size",
      "comment": {
       "raw": [
        "@default '48'"
       ],
       "tags": {
        "@default": "48"
       }
      },
      "typeValue": {
       "raw": "'36' | '48' | '60'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "36",
        "48",
        "60"
       ]
      },
      "from": "@epam/uui:TabButtonMods",
      "required": false
     },
     {
      "uid": 2,
      "name": "withNotify",
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui:TabButtonMods",
      "required": false
     },
     {
      "uid": 3,
      "name": "clearIcon",
      "comment": {
       "raw": [
        "Icon for clear value button (usually cross)"
       ]
      },
      "typeValue": {
       "raw": "Icon"
      },
      "editor": {
       "type": "component"
      },
      "from": "@epam/uui-components:ButtonProps",
      "required": false
     },
     {
      "uid": 4,
      "name": "captionCX",
      "comment": {
       "raw": [
        "CSS classes to put on the caption"
       ]
      },
      "typeValue": {
       "raw": "null | string | number | boolean | ClassDictionary | ClassArray"
      },
      "typeValueRef": "@epam/uui-core:ClassValue",
      "from": "@epam/uui-components:ButtonProps",
      "required": false
     },
     {
      "uid": 5,
      "name": "countIndicator",
      "comment": {
       "raw": [
        "CountIndicator component"
       ]
      },
      "typeValue": {
       "raw": "React.ComponentClass<IHasCaption, any> | React.FunctionComponent<IHasCaption>"
      },
      "from": "@epam/uui-components:ButtonProps",
      "required": false
     },
     {
      "uid": 6,
      "name": "dropdownIcon",
      "comment": {
       "raw": [
        "Icon for drop-down toggler"
       ]
      },
      "typeValue": {
       "raw": "Icon"
      },
      "editor": {
       "type": "component"
      },
      "from": "@epam/uui-core:ButtonCoreProps",
      "required": false
     },
     {
      "uid": 7,
      "name": "dropdownIconPosition",
      "comment": {
       "raw": [
        "Position of the dropdown icon ('left' of 'right')"
       ]
      },
      "typeValue": {
       "raw": "'left' | 'right'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "left",
        "right"
       ]
      },
      "from": "@epam/uui-core:ButtonCoreProps",
      "required": false
     },
     {
      "uid": 8,
      "name": "count",
      "typeValue": {
       "raw": "null | string | number | boolean | React.ReactElement<any, string | React.JSXElementConstructor<any>> | React.ReactFragment | React.ReactPortal"
      },
      "typeValueRef": "@types/react:ReactNode",
      "from": "@epam/uui-core:ButtonCoreProps",
      "required": false
     },
     {
      "uid": 9,
      "name": "cx",
      "comment": {
       "raw": [
        "CSS class(es) to put on component's root. See {@link https://github.com/JedWatson/classnames#usage} for details"
       ]
      },
      "typeValue": {
       "raw": "null | string | number | boolean | ClassDictionary | ClassArray"
      },
      "typeValueRef": "@epam/uui-core:ClassValue",
      "from": "@epam/uui-core:IHasCX",
      "required": false
     },
     {
      "uid": 10,
      "name": "onClick",
      "comment": {
       "raw": [
        "Called when component is clicked"
       ]
      },
      "typeValue": {
       "raw": "(e?: any) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IClickable",
      "required": false
     },
     {
      "uid": 11,
      "name": "link",
      "comment": {
       "raw": [
        "Link object to redirect to for SPA-redirects"
       ]
      },
      "typeValue": {
       "raw": "Link"
      },
      "from": "@epam/uui-core:ICanRedirect",
      "required": false
     },
     {
      "uid": 12,
      "name": "href",
      "comment": {
       "raw": [
        "Href (URL) to redirect to, for non-SPA redirects"
       ]
      },
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "from": "@epam/uui-core:ICanRedirect",
      "required": false
     },
     {
      "uid": 13,
      "name": "isLinkActive",
      "comment": {
       "raw": [
        "Highlights component to show that link is active (browser is displaying the page to which link is pointing)"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:ICanRedirect",
      "required": false
     },
     {
      "uid": 14,
      "name": "target",
      "comment": {
       "raw": [
        "Controls where the link should be opened"
       ]
      },
      "typeValue": {
       "raw": "'_blank'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "_blank"
       ]
      },
      "from": "@epam/uui-core:ICanRedirect",
      "required": false
     },
     {
      "uid": 15,
      "name": "isDisabled",
      "comment": {
       "raw": [
        "Disable editing, and visually de-emphasize value of the component"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:IDisableable",
      "required": false
     },
     {
      "uid": 16,
      "name": "icon",
      "comment": {
       "raw": [
        "Icon can be a React element (usually an SVG element)"
       ]
      },
      "typeValue": {
       "raw": "Icon"
      },
      "editor": {
       "type": "component"
      },
      "from": "@epam/uui-core:IHasIcon",
      "required": false
     },
     {
      "uid": 17,
      "name": "iconPosition",
      "comment": {
       "raw": [
        "Position of the icon (left of right)"
       ]
      },
      "typeValue": {
       "raw": "'left' | 'right'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "left",
        "right"
       ]
      },
      "from": "@epam/uui-core:IHasIcon",
      "required": false
     },
     {
      "uid": 18,
      "name": "onIconClick",
      "comment": {
       "raw": [
        "Click handler for the icon"
       ]
      },
      "typeValue": {
       "raw": "() => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IHasIcon",
      "required": false
     },
     {
      "uid": 19,
      "name": "clickAnalyticsEvent",
      "comment": {
       "raw": [
        "An analytics event to send (via AnalyticsContext) when component is clicked.",
        " See [AnalyticsContext](@link https://uui.epam.com/documents?id=analyticsContext&mode=doc&skin=UUI4_promo&category=contexts)."
       ]
      },
      "typeValue": {
       "raw": "null | { [key: string]: any; name: string; }"
      },
      "from": "@epam/uui-core:IAnalyticableClick",
      "required": false
     },
     {
      "uid": 20,
      "name": "tabIndex",
      "comment": {
       "raw": [
        "Controls the order of keyboard navigation between components"
       ]
      },
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "from": "@epam/uui-core:IHasTabIndex",
      "required": false
     },
     {
      "uid": 21,
      "name": "rawProps",
      "comment": {
       "raw": [
        "Any HTML attributes (native or 'data-') to put on the underlying component"
       ]
      },
      "typeValue": {
       "raw": "React.ButtonHTMLAttributes<HTMLButtonElement> & Record<`data-${string}`, string>"
      },
      "from": "@epam/uui-core:IHasRawProps",
      "required": false
     },
     {
      "uid": 22,
      "name": "caption",
      "comment": {
       "raw": [
        "Caption. Can be a string, or React.Elements. Certain components supports minimal markup (<b>,<i>,<a>) in captions."
       ]
      },
      "typeValue": {
       "raw": "any"
      },
      "from": "@epam/uui-core:IHasCaption",
      "required": false
     },
     {
      "uid": 23,
      "name": "onClear",
      "comment": {
       "raw": [
        "Call to clear toggler value"
       ]
      },
      "typeValue": {
       "raw": "(e?: any) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IBasicPickerToggler",
      "required": false
     },
     {
      "uid": 24,
      "name": "isOpen",
      "comment": {
       "raw": [
        "When isDropdown=true, indicate that dropdown is open with chevron icon"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:IDropdownToggler",
      "required": false
     },
     {
      "uid": 25,
      "name": "isDropdown",
      "comment": {
       "raw": [
        "Shows chevron icon, enabling component to act as dropdown toggler"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:IDropdownToggler",
      "required": false
     },
     {
      "uid": 26,
      "name": "toggleDropdownOpening",
      "comment": {
       "raw": [
        "Called when associated dropdown should open or close"
       ]
      },
      "typeValue": {
       "raw": "(value: boolean) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IDropdownToggler",
      "required": false
     },
     {
      "uid": 27,
      "name": "isInteractedOutside",
      "comment": {
       "raw": [
        "Called when component is interacted outside, to close the dropdown"
       ]
      },
      "typeValue": {
       "raw": "(event: Event) => boolean"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IDropdownToggler",
      "required": false
     },
     {
      "uid": 28,
      "name": "ref",
      "comment": {
       "raw": [
        "Component's ref"
       ]
      },
      "typeValue": {
       "raw": "null | (instance: any) => void | React.RefObject<any>"
      },
      "from": "@epam/uui-core:IDropdownToggler",
      "required": false
     },
     {
      "uid": 29,
      "name": "forwardedRef",
      "comment": {
       "raw": [
        "this ref is passed to the underlying component"
       ]
      },
      "typeValue": {
       "raw": "null | (instance: HTMLButtonElement | HTMLAnchorElement | null) => void | React.MutableRefObject<HTMLButtonElement | HTMLAnchorElement | null>"
      },
      "from": "@epam/uui-core:IHasForwardedRef",
      "required": false
     },
     {
      "uid": 30,
      "name": "theme",
      "typeValue": {
       "raw": "'light' | 'dark'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "light",
        "dark"
       ]
      },
      "from": "@epam/loveship:TabButtonMods",
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/loveship:TagMods": {
   "summary": {
    "module": "@epam/loveship",
    "typeName": {
     "name": "TagMods",
     "nameFull": "TagMods"
    },
    "src": "loveship/components/widgets/Tag.tsx",
    "exported": true
   },
   "details": {
    "kind": 263,
    "typeValue": {
     "raw": "TagMods",
     "print": [
      "interface TagMods extends uui.TagMods {",
      "    /**",
      "     * @default 'solid'",
      "     */",
      "    fill?: types.FillStyle;",
      "}"
     ]
    },
    "props": [
     {
      "uid": 1,
      "name": "fill",
      "comment": {
       "raw": [
        "@default 'solid'"
       ],
       "tags": {
        "@default": "solid"
       }
      },
      "typeValue": {
       "raw": "'white' | 'solid' | 'none' | 'light'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "white",
        "solid",
        "none",
        "light"
       ]
      },
      "required": false
     },
     {
      "uid": 2,
      "name": "size",
      "comment": {
       "raw": [
        "@default '36'"
       ],
       "tags": {
        "@default": "36"
       }
      },
      "typeValue": {
       "raw": "'36' | '48' | '18' | '24' | '30' | '42'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "18",
        "24",
        "30",
        "36",
        "42",
        "48"
       ]
      },
      "from": "@epam/uui:TagMods",
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/loveship:TagProps": {
   "summary": {
    "module": "@epam/loveship",
    "typeName": {
     "name": "TagProps",
     "nameFull": "TagProps"
    },
    "src": "loveship/components/widgets/Tag.tsx",
    "exported": true
   },
   "details": {
    "kind": 263,
    "typeValue": {
     "raw": "TagProps",
     "print": [
      "interface TagProps extends Omit<uui.TagProps, 'color'>, TagMods {",
      "}"
     ]
    },
    "props": [
     {
      "uid": 1,
      "name": "icon",
      "comment": {
       "raw": [
        "Icon can be a React element (usually an SVG element)"
       ]
      },
      "typeValue": {
       "raw": "Icon"
      },
      "editor": {
       "type": "component"
      },
      "from": "@epam/uui-core:IHasIcon",
      "required": false
     },
     {
      "uid": 2,
      "name": "size",
      "comment": {
       "raw": [
        "@default '36'"
       ],
       "tags": {
        "@default": "36"
       }
      },
      "typeValue": {
       "raw": "'36' | '48' | '18' | '24' | '30' | '42'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "18",
        "24",
        "30",
        "36",
        "42",
        "48"
       ]
      },
      "from": "@epam/uui:TagMods",
      "required": false
     },
     {
      "uid": 3,
      "name": "cx",
      "comment": {
       "raw": [
        "CSS class(es) to put on component's root. See {@link https://github.com/JedWatson/classnames#usage} for details"
       ]
      },
      "typeValue": {
       "raw": "null | string | number | boolean | ClassDictionary | ClassArray"
      },
      "from": "@epam/uui-core:IHasCX",
      "required": false
     },
     {
      "uid": 4,
      "name": "rawProps",
      "comment": {
       "raw": [
        "Any HTML attributes (native or 'data-') to put on the underlying component"
       ]
      },
      "typeValue": {
       "raw": "React.ButtonHTMLAttributes<HTMLButtonElement> & Record<`data-${string}`, string>"
      },
      "from": "@epam/uui-core:IHasRawProps",
      "required": false
     },
     {
      "uid": 5,
      "name": "clearIcon",
      "comment": {
       "raw": [
        "Icon for clear value button (usually cross)"
       ]
      },
      "typeValue": {
       "raw": "Icon"
      },
      "editor": {
       "type": "component"
      },
      "from": "@epam/uui-components:ButtonProps",
      "required": false
     },
     {
      "uid": 6,
      "name": "captionCX",
      "comment": {
       "raw": [
        "CSS classes to put on the caption"
       ]
      },
      "typeValue": {
       "raw": "null | string | number | boolean | ClassDictionary | ClassArray"
      },
      "from": "@epam/uui-components:ButtonProps",
      "required": false
     },
     {
      "uid": 7,
      "name": "countIndicator",
      "comment": {
       "raw": [
        "CountIndicator component"
       ]
      },
      "typeValue": {
       "raw": "React.ComponentClass<IHasCaption, any> | React.FunctionComponent<IHasCaption>"
      },
      "from": "@epam/uui-components:ButtonProps",
      "required": false
     },
     {
      "uid": 8,
      "name": "dropdownIcon",
      "comment": {
       "raw": [
        "Icon for drop-down toggler"
       ]
      },
      "typeValue": {
       "raw": "Icon"
      },
      "editor": {
       "type": "component"
      },
      "from": "@epam/uui-core:ButtonCoreProps",
      "required": false
     },
     {
      "uid": 9,
      "name": "dropdownIconPosition",
      "comment": {
       "raw": [
        "Position of the dropdown icon ('left' of 'right')"
       ]
      },
      "typeValue": {
       "raw": "'left' | 'right'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "left",
        "right"
       ]
      },
      "from": "@epam/uui-core:ButtonCoreProps",
      "required": false
     },
     {
      "uid": 10,
      "name": "count",
      "typeValue": {
       "raw": "null | string | number | boolean | React.ReactElement<any, string | React.JSXElementConstructor<any>> | React.ReactFragment | React.ReactPortal"
      },
      "from": "@epam/uui-core:ButtonCoreProps",
      "required": false
     },
     {
      "uid": 11,
      "name": "onClick",
      "comment": {
       "raw": [
        "Called when component is clicked"
       ]
      },
      "typeValue": {
       "raw": "(e?: any) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IClickable",
      "required": false
     },
     {
      "uid": 12,
      "name": "link",
      "comment": {
       "raw": [
        "Link object to redirect to for SPA-redirects"
       ]
      },
      "typeValue": {
       "raw": "Link"
      },
      "from": "@epam/uui-core:ICanRedirect",
      "required": false
     },
     {
      "uid": 13,
      "name": "href",
      "comment": {
       "raw": [
        "Href (URL) to redirect to, for non-SPA redirects"
       ]
      },
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "from": "@epam/uui-core:ICanRedirect",
      "required": false
     },
     {
      "uid": 14,
      "name": "isLinkActive",
      "comment": {
       "raw": [
        "Highlights component to show that link is active (browser is displaying the page to which link is pointing)"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:ICanRedirect",
      "required": false
     },
     {
      "uid": 15,
      "name": "target",
      "comment": {
       "raw": [
        "Controls where the link should be opened"
       ]
      },
      "typeValue": {
       "raw": "'_blank'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "_blank"
       ]
      },
      "from": "@epam/uui-core:ICanRedirect",
      "required": false
     },
     {
      "uid": 16,
      "name": "isDisabled",
      "comment": {
       "raw": [
        "Disable editing, and visually de-emphasize value of the component"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:IDisableable",
      "required": false
     },
     {
      "uid": 17,
      "name": "iconPosition",
      "comment": {
       "raw": [
        "Position of the icon (left of right)"
       ]
      },
      "typeValue": {
       "raw": "'left' | 'right'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "left",
        "right"
       ]
      },
      "from": "@epam/uui-core:IHasIcon",
      "required": false
     },
     {
      "uid": 18,
      "name": "onIconClick",
      "comment": {
       "raw": [
        "Click handler for the icon"
       ]
      },
      "typeValue": {
       "raw": "() => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IHasIcon",
      "required": false
     },
     {
      "uid": 19,
      "name": "clickAnalyticsEvent",
      "comment": {
       "raw": [
        "An analytics event to send (via AnalyticsContext) when component is clicked.",
        " See [AnalyticsContext](@link https://uui.epam.com/documents?id=analyticsContext&mode=doc&skin=UUI4_promo&category=contexts)."
       ]
      },
      "typeValue": {
       "raw": "null | { [key: string]: any; name: string; }"
      },
      "from": "@epam/uui-core:IAnalyticableClick",
      "required": false
     },
     {
      "uid": 20,
      "name": "tabIndex",
      "comment": {
       "raw": [
        "Controls the order of keyboard navigation between components"
       ]
      },
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "from": "@epam/uui-core:IHasTabIndex",
      "required": false
     },
     {
      "uid": 21,
      "name": "caption",
      "comment": {
       "raw": [
        "Caption. Can be a string, or React.Elements. Certain components supports minimal markup (<b>,<i>,<a>) in captions."
       ]
      },
      "typeValue": {
       "raw": "any"
      },
      "from": "@epam/uui-core:IHasCaption",
      "required": false
     },
     {
      "uid": 22,
      "name": "onClear",
      "comment": {
       "raw": [
        "Call to clear toggler value"
       ]
      },
      "typeValue": {
       "raw": "(e?: any) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IBasicPickerToggler",
      "required": false
     },
     {
      "uid": 23,
      "name": "isOpen",
      "comment": {
       "raw": [
        "When isDropdown=true, indicate that dropdown is open with chevron icon"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:IDropdownToggler",
      "required": false
     },
     {
      "uid": 24,
      "name": "isDropdown",
      "comment": {
       "raw": [
        "Shows chevron icon, enabling component to act as dropdown toggler"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:IDropdownToggler",
      "required": false
     },
     {
      "uid": 25,
      "name": "toggleDropdownOpening",
      "comment": {
       "raw": [
        "Called when associated dropdown should open or close"
       ]
      },
      "typeValue": {
       "raw": "(value: boolean) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IDropdownToggler",
      "required": false
     },
     {
      "uid": 26,
      "name": "isInteractedOutside",
      "comment": {
       "raw": [
        "Called when component is interacted outside, to close the dropdown"
       ]
      },
      "typeValue": {
       "raw": "(event: Event) => boolean"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IDropdownToggler",
      "required": false
     },
     {
      "uid": 27,
      "name": "ref",
      "comment": {
       "raw": [
        "Component's ref"
       ]
      },
      "typeValue": {
       "raw": "null | (instance: any) => void | React.RefObject<any>"
      },
      "from": "@epam/uui-core:IDropdownToggler",
      "required": false
     },
     {
      "uid": 28,
      "name": "forwardedRef",
      "comment": {
       "raw": [
        "this ref is passed to the underlying component"
       ]
      },
      "typeValue": {
       "raw": "null | (instance: HTMLButtonElement | HTMLAnchorElement | null) => void | React.MutableRefObject<HTMLButtonElement | HTMLAnchorElement | null>"
      },
      "from": "@epam/uui-core:IHasForwardedRef",
      "required": false
     },
     {
      "uid": 29,
      "name": "fill",
      "comment": {
       "raw": [
        "@default 'solid'"
       ],
       "tags": {
        "@default": "solid"
       }
      },
      "typeValue": {
       "raw": "'white' | 'solid' | 'none' | 'light'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "white",
        "solid",
        "none",
        "light"
       ]
      },
      "from": "@epam/loveship:TagMods",
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/loveship:TextInputMods": {
   "summary": {
    "module": "@epam/loveship",
    "typeName": {
     "name": "TextInputMods",
     "nameFull": "TextInputMods"
    },
    "src": "loveship/components/inputs/TextInput.tsx",
    "exported": true
   },
   "details": {
    "kind": 263,
    "typeValue": {
     "raw": "TextInputMods",
     "print": [
      "interface TextInputMods extends types.IHasEditMode {",
      "    /**",
      "     * @default '36'",
      "     */",
      "    size?: types.ControlSize | '60';",
      "}"
     ]
    },
    "props": [
     {
      "uid": 1,
      "name": "size",
      "comment": {
       "raw": [
        "@default '36'"
       ],
       "tags": {
        "@default": "36"
       }
      },
      "typeValue": {
       "raw": "'36' | '48' | '24' | '30' | '42' | 'none' | '60'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "24",
        "30",
        "36",
        "42",
        "48",
        "60",
        "none"
       ]
      },
      "required": false
     },
     {
      "uid": 2,
      "name": "mode",
      "comment": {
       "raw": [
        "Visual mode for component:",
        " - form: default visuals, to use in forms.",
        " - cell: adjust to embed as table cell editor: no borders, no focus (it is applied by DataCell)",
        " - inline: adjust for WYSIWYG UX. Backgrounds removed. Borders appear only on hover."
       ]
      },
      "typeValue": {
       "raw": "'form' | 'cell' | 'inline'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "form",
        "cell",
        "inline"
       ]
      },
      "from": "@epam/uui:IHasEditMode",
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/loveship:TextInputProps": {
   "summary": {
    "module": "@epam/loveship",
    "typeName": {
     "name": "TextInputProps",
     "nameFull": "TextInputProps"
    },
    "src": "loveship/components/inputs/TextInput.tsx",
    "exported": true
   },
   "details": {
    "kind": 264,
    "typeValue": {
     "raw": "TextInputProps",
     "print": [
      "type TextInputProps = uuiComponents.TextInputProps & TextInputMods;"
     ]
    },
    "props": [
     {
      "uid": 1,
      "name": "acceptIcon",
      "comment": {
       "raw": [
        "Overrides accept (check) icon"
       ]
      },
      "typeValue": {
       "raw": "Icon"
      },
      "editor": {
       "type": "component"
      },
      "from": "@epam/uui-components:TextInputProps",
      "required": false
     },
     {
      "uid": 2,
      "name": "cancelIcon",
      "comment": {
       "raw": [
        "Overrides cancel (cross) icon"
       ]
      },
      "typeValue": {
       "raw": "Icon"
      },
      "editor": {
       "type": "component"
      },
      "from": "@epam/uui-components:TextInputProps",
      "required": false
     },
     {
      "uid": 3,
      "name": "dropdownIcon",
      "comment": {
       "raw": [
        "Overrides dropdown (chevron) icon"
       ]
      },
      "typeValue": {
       "raw": "Icon"
      },
      "editor": {
       "type": "component"
      },
      "from": "@epam/uui-components:TextInputProps",
      "required": false
     },
     {
      "uid": 4,
      "name": "inputCx",
      "comment": {
       "raw": [
        "CSS class(es) to put to the HTML Input element"
       ]
      },
      "typeValue": {
       "raw": "null | string | number | boolean | ClassDictionary | ClassArray"
      },
      "typeValueRef": "@epam/uui-core:ClassValue",
      "from": "@epam/uui-components:TextInputProps",
      "required": false
     },
     {
      "uid": 5,
      "name": "renderInput",
      "comment": {
       "raw": [
        "overrides rendering of HTML Input element"
       ]
      },
      "typeValue": {
       "raw": "(props: IRenderInputProps) => JSX.Element"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-components:TextInputProps",
      "required": false
     },
     {
      "uid": 6,
      "name": "onCancel",
      "comment": {
       "raw": [
        "Enables cancel (cross) icon, and fires when the icon is clicked"
       ]
      },
      "typeValue": {
       "raw": "() => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:TextInputCoreProps",
      "required": false
     },
     {
      "uid": 7,
      "name": "onAccept",
      "comment": {
       "raw": [
        "Enables accept (check) icon, and fires when the icon is clicked"
       ]
      },
      "typeValue": {
       "raw": "() => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:TextInputCoreProps",
      "required": false
     },
     {
      "uid": 8,
      "name": "onKeyDown",
      "comment": {
       "raw": [
        "keydown event handler to put on the HTML input element"
       ]
      },
      "typeValue": {
       "raw": "(e?: any) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:TextInputCoreProps",
      "required": false
     },
     {
      "uid": 9,
      "name": "autoFocus",
      "comment": {
       "raw": [
        "Put focus on the element, when component is mounted"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:TextInputCoreProps",
      "required": false
     },
     {
      "uid": 10,
      "name": "type",
      "comment": {
       "raw": [
        "Standard 'type' attribute to put on the HTML input element (e.g. 'password')"
       ]
      },
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "from": "@epam/uui-core:TextInputCoreProps",
      "required": false
     },
     {
      "uid": 11,
      "name": "autoComplete",
      "comment": {
       "raw": [
        "Standard [autocomplete attribute]{@link https://www.w3schools.com/tags/att_input_autocomplete.asp}"
       ]
      },
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "from": "@epam/uui-core:TextInputCoreProps",
      "required": false
     },
     {
      "uid": 12,
      "name": "name",
      "comment": {
       "raw": [
        "Standard [name attribute]{@link https://www.w3schools.com/tags/att_input_name.asp}"
       ]
      },
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "from": "@epam/uui-core:TextInputCoreProps",
      "required": false
     },
     {
      "uid": 13,
      "name": "maxLength",
      "comment": {
       "raw": [
        "Maximum input length in characters"
       ]
      },
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "from": "@epam/uui-core:TextInputCoreProps",
      "required": false
     },
     {
      "uid": 14,
      "name": "inputMode",
      "comment": {
       "raw": [
        "Standard [inputMode attribute]{@link https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/inputmode}"
       ]
      },
      "typeValue": {
       "raw": "'none' | 'text' | 'tel' | 'url' | 'email' | 'numeric' | 'decimal' | 'search'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "none",
        "text",
        "tel",
        "url",
        "email",
        "numeric",
        "decimal",
        "search"
       ]
      },
      "from": "@epam/uui-core:TextInputCoreProps",
      "required": false
     },
     {
      "uid": 15,
      "name": "id",
      "comment": {
       "raw": [
        "HTML ID attribute for input"
       ]
      },
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "from": "@epam/uui-core:TextInputCoreProps",
      "required": false
     },
     {
      "uid": 16,
      "name": "cx",
      "comment": {
       "raw": [
        "CSS class(es) to put on component's root. See {@link https://github.com/JedWatson/classnames#usage} for details"
       ]
      },
      "typeValue": {
       "raw": "null | string | number | boolean | ClassDictionary | ClassArray"
      },
      "typeValueRef": "@epam/uui-core:ClassValue",
      "from": "@epam/uui-core:IHasCX",
      "required": false
     },
     {
      "uid": 17,
      "name": "onClick",
      "comment": {
       "raw": [
        "Called when component is clicked"
       ]
      },
      "typeValue": {
       "raw": "(e?: any) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IClickable",
      "required": false
     },
     {
      "uid": 18,
      "name": "isDisabled",
      "comment": {
       "raw": [
        "Disable editing, and visually de-emphasize value of the component"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:IDisableable",
      "required": false
     },
     {
      "uid": 19,
      "name": "value",
      "comment": {
       "raw": [
        "The current value of component"
       ]
      },
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "from": "@epam/uui-core:IEditable",
      "required": true
     },
     {
      "uid": 20,
      "name": "onValueChange",
      "comment": {
       "raw": [
        "Called when value needs to be changed (usually due to user interaction)"
       ]
      },
      "typeValue": {
       "raw": "(newValue: string | undefined) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IEditable",
      "required": true
     },
     {
      "uid": 21,
      "name": "isInvalid",
      "comment": {
       "raw": [
        "True if component contains invalid input"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:ICanBeInvalid",
      "required": false
     },
     {
      "uid": 22,
      "name": "validationMessage",
      "comment": {
       "raw": [
        "Message describing why the value is invalid"
       ]
      },
      "typeValue": {
       "raw": "null | string | number | boolean | React.ReactElement<any, string | React.JSXElementConstructor<any>> | React.ReactFragment | React.ReactPortal"
      },
      "typeValueRef": "@types/react:ReactNode",
      "from": "@epam/uui-core:ICanBeInvalid",
      "required": false
     },
     {
      "uid": 23,
      "name": "validationProps",
      "comment": {
       "raw": [
        "If T is a complex value (object or array), this property contains validation states of inner items"
       ]
      },
      "typeValue": {
       "raw": "{ [key: string]: ICanBeInvalid; }"
      },
      "from": "@epam/uui-core:ICanBeInvalid",
      "required": false
     },
     {
      "uid": 24,
      "name": "isReadonly",
      "comment": {
       "raw": [
        "Disable editing. Unlike isDisabled, keep component's value readable."
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:ICanBeReadonly",
      "required": false
     },
     {
      "uid": 25,
      "name": "isRequired",
      "comment": {
       "raw": [
        "Marks that component's value is required and shouldn't be empty"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:ICanBeRequired",
      "required": false
     },
     {
      "uid": 26,
      "name": "placeholder",
      "comment": {
       "raw": [
        "Placeholder to display when empty"
       ]
      },
      "typeValue": {
       "raw": "any"
      },
      "from": "@epam/uui-core:IHasPlaceholder",
      "required": false
     },
     {
      "uid": 27,
      "name": "icon",
      "comment": {
       "raw": [
        "Icon can be a React element (usually an SVG element)"
       ]
      },
      "typeValue": {
       "raw": "Icon"
      },
      "editor": {
       "type": "component"
      },
      "from": "@epam/uui-core:IHasIcon",
      "required": false
     },
     {
      "uid": 28,
      "name": "iconPosition",
      "comment": {
       "raw": [
        "Position of the icon (left of right)"
       ]
      },
      "typeValue": {
       "raw": "'left' | 'right'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "left",
        "right"
       ]
      },
      "from": "@epam/uui-core:IHasIcon",
      "required": false
     },
     {
      "uid": 29,
      "name": "onIconClick",
      "comment": {
       "raw": [
        "Click handler for the icon"
       ]
      },
      "typeValue": {
       "raw": "() => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IHasIcon",
      "required": false
     },
     {
      "uid": 30,
      "name": "isOpen",
      "comment": {
       "raw": [
        "When isDropdown=true, indicate that dropdown is open with chevron icon"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:IDropdownToggler",
      "required": false
     },
     {
      "uid": 31,
      "name": "isDropdown",
      "comment": {
       "raw": [
        "Shows chevron icon, enabling component to act as dropdown toggler"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:IDropdownToggler",
      "required": false
     },
     {
      "uid": 32,
      "name": "toggleDropdownOpening",
      "comment": {
       "raw": [
        "Called when associated dropdown should open or close"
       ]
      },
      "typeValue": {
       "raw": "(value: boolean) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IDropdownToggler",
      "required": false
     },
     {
      "uid": 33,
      "name": "isInteractedOutside",
      "comment": {
       "raw": [
        "Called when component is interacted outside, to close the dropdown"
       ]
      },
      "typeValue": {
       "raw": "(event: Event) => boolean"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IDropdownToggler",
      "required": false
     },
     {
      "uid": 34,
      "name": "ref",
      "comment": {
       "raw": [
        "Component's ref"
       ]
      },
      "typeValue": {
       "raw": "null | (instance: any) => void | React.RefObject<any>"
      },
      "from": "@epam/uui-core:IDropdownToggler",
      "required": false
     },
     {
      "uid": 35,
      "name": "caption",
      "comment": {
       "raw": [
        "Caption. Can be a string, or React.Elements. Certain components supports minimal markup (<b>,<i>,<a>) in captions."
       ]
      },
      "typeValue": {
       "raw": "any"
      },
      "from": "@epam/uui-core:IHasCaption",
      "required": false
     },
     {
      "uid": 36,
      "name": "getValueChangeAnalyticsEvent",
      "comment": {
       "raw": [
        "Given a value, returns an analytics event to send when component is edited.",
        " See [AnalyticsContext](@link https://uui.epam.com/documents?id=analyticsContext&mode=doc&skin=UUI4_promo&category=contexts)."
       ]
      },
      "typeValue": {
       "raw": "(newValue: string | null, oldValue: string | null) => AnalyticsEvent"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IAnalyticableOnChange",
      "required": false
     },
     {
      "uid": 37,
      "name": "rawProps",
      "comment": {
       "raw": [
        "Any HTML attributes (native or 'data-') to put on the underlying component"
       ]
      },
      "typeValue": {
       "raw": "React.HTMLAttributes<HTMLInputElement> & Record<`data-${string}`, string>"
      },
      "from": "@epam/uui-core:IHasRawProps",
      "required": false
     },
     {
      "uid": 38,
      "name": "onFocus",
      "comment": {
       "raw": [
        "Called when component gets input focus"
       ]
      },
      "typeValue": {
       "raw": "(e: React.FocusEvent<HTMLInputElement, Element>) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:ICanFocus",
      "required": false
     },
     {
      "uid": 39,
      "name": "onBlur",
      "comment": {
       "raw": [
        "Called when component looses input focus"
       ]
      },
      "typeValue": {
       "raw": "(e: React.FocusEvent<HTMLInputElement, Element>) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:ICanFocus",
      "required": false
     },
     {
      "uid": 40,
      "name": "tabIndex",
      "comment": {
       "raw": [
        "Controls the order of keyboard navigation between components"
       ]
      },
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "from": "@epam/uui-core:IHasTabIndex",
      "required": false
     },
     {
      "uid": 41,
      "name": "size",
      "comment": {
       "raw": [
        "@default '36'"
       ],
       "tags": {
        "@default": "36"
       }
      },
      "typeValue": {
       "raw": "'36' | '48' | '24' | '30' | '42' | 'none' | '60'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "24",
        "30",
        "36",
        "42",
        "48",
        "60",
        "none"
       ]
      },
      "from": "@epam/loveship:TextInputMods",
      "required": false
     },
     {
      "uid": 42,
      "name": "mode",
      "comment": {
       "raw": [
        "Visual mode for component:",
        " - form: default visuals, to use in forms.",
        " - cell: adjust to embed as table cell editor: no borders, no focus (it is applied by DataCell)",
        " - inline: adjust for WYSIWYG UX. Backgrounds removed. Borders appear only on hover."
       ]
      },
      "typeValue": {
       "raw": "'form' | 'cell' | 'inline'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "form",
        "cell",
        "inline"
       ]
      },
      "from": "@epam/uui:IHasEditMode",
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/loveship:TextMods": {
   "summary": {
    "module": "@epam/loveship",
    "typeName": {
     "name": "TextMods",
     "nameFull": "TextMods"
    },
    "src": "loveship/components/typography/Text.tsx",
    "exported": true
   },
   "details": {
    "kind": 263,
    "typeValue": {
     "raw": "TextMods",
     "print": [
      "interface TextMods {",
      "    /**",
      "     * @default 'night700'",
      "     */",
      "    color?: 'sky' | 'grass' | 'sun' | 'fire' | 'white' | 'night50' | 'night300' | 'night400' | 'night500' | 'night600' | 'night700' | 'night800' | 'night900';",
      "    /**",
      "     * @default 'sans'",
      "     */",
      "    font?: types.FontStyle;",
      "}"
     ]
    },
    "props": [
     {
      "uid": 1,
      "name": "color",
      "comment": {
       "raw": [
        "@default 'night700'"
       ],
       "tags": {
        "@default": "night700"
       }
      },
      "typeValue": {
       "raw": "'sky' | 'grass' | 'sun' | 'fire' | 'white' | 'night300' | 'night600' | 'night500' | 'night50' | 'night400' | 'night700' | 'night800' | 'night900'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "sky",
        "grass",
        "sun",
        "fire",
        "white",
        "night300",
        "night600",
        "night500",
        "night50",
        "night400",
        "night700",
        "night800",
        "night900"
       ]
      },
      "required": false
     },
     {
      "uid": 2,
      "name": "font",
      "comment": {
       "raw": [
        "@default 'sans'"
       ],
       "tags": {
        "@default": "sans"
       }
      },
      "typeValue": {
       "raw": "'sans' | 'sans-semibold' | 'sans-light'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "sans",
        "sans-semibold",
        "sans-light"
       ]
      },
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/loveship:TextProps": {
   "summary": {
    "module": "@epam/loveship",
    "typeName": {
     "name": "TextProps",
     "nameFull": "TextProps"
    },
    "src": "loveship/components/typography/Text.tsx",
    "exported": true
   },
   "details": {
    "kind": 264,
    "typeValue": {
     "raw": "TextProps",
     "print": [
      "type TextProps = Omit<UuiTextProps, 'color' | 'font'> & TextMods;"
     ]
    },
    "props": [
     {
      "uid": 1,
      "name": "size",
      "typeValue": {
       "raw": "'36' | '48' | '18' | '24' | '30' | '42' | 'none'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "18",
        "24",
        "30",
        "36",
        "42",
        "48",
        "none"
       ]
      },
      "from": "@epam/uui:TextMods",
      "required": false
     },
     {
      "uid": 2,
      "name": "children",
      "typeValue": {
       "raw": "null | string | number | boolean | React.ReactElement<any, string | React.JSXElementConstructor<any>> | React.ReactFragment | React.ReactPortal"
      },
      "from": "@epam/uui-core:IHasChildren",
      "required": false
     },
     {
      "uid": 3,
      "name": "cx",
      "comment": {
       "raw": [
        "CSS class(es) to put on component's root. See {@link https://github.com/JedWatson/classnames#usage} for details"
       ]
      },
      "typeValue": {
       "raw": "null | string | number | boolean | ClassDictionary | ClassArray"
      },
      "from": "@epam/uui-core:IHasCX",
      "required": false
     },
     {
      "uid": 4,
      "name": "rawProps",
      "comment": {
       "raw": [
        "Any HTML attributes (native or 'data-') to put on the underlying component"
       ]
      },
      "typeValue": {
       "raw": "React.HTMLAttributes<HTMLDivElement> & Record<`data-${string}`, string>"
      },
      "from": "@epam/uui-core:IHasRawProps",
      "required": false
     },
     {
      "uid": 5,
      "name": "onClick",
      "comment": {
       "raw": [
        "Called when component is clicked"
       ]
      },
      "typeValue": {
       "raw": "(e?: any) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IClickable",
      "required": false
     },
     {
      "uid": 6,
      "name": "clickAnalyticsEvent",
      "comment": {
       "raw": [
        "An analytics event to send (via AnalyticsContext) when component is clicked.",
        " See [AnalyticsContext](@link https://uui.epam.com/documents?id=analyticsContext&mode=doc&skin=UUI4_promo&category=contexts)."
       ]
      },
      "typeValue": {
       "raw": "null | { [key: string]: any; name: string; }"
      },
      "from": "@epam/uui-core:IAnalyticableClick",
      "required": false
     },
     {
      "uid": 7,
      "name": "forwardedRef",
      "comment": {
       "raw": [
        "this ref is passed to the underlying component"
       ]
      },
      "typeValue": {
       "raw": "null | (instance: HTMLDivElement | null) => void | React.MutableRefObject<HTMLDivElement | null>"
      },
      "from": "@epam/uui-core:IHasForwardedRef",
      "required": false
     },
     {
      "uid": 8,
      "name": "lineHeight",
      "typeValue": {
       "raw": "'18' | '24' | '30' | '12'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "12",
        "18",
        "24",
        "30"
       ]
      },
      "from": "@epam/uui:TextSettings",
      "required": false
     },
     {
      "uid": 9,
      "name": "fontSize",
      "typeValue": {
       "raw": "'18' | '24' | '12' | '10' | '14' | '16'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "10",
        "12",
        "14",
        "16",
        "18",
        "24"
       ]
      },
      "from": "@epam/uui:TextSettings",
      "required": false
     },
     {
      "uid": 10,
      "name": "color",
      "comment": {
       "raw": [
        "@default 'night700'"
       ],
       "tags": {
        "@default": "night700"
       }
      },
      "typeValue": {
       "raw": "'sky' | 'grass' | 'sun' | 'fire' | 'white' | 'night300' | 'night600' | 'night500' | 'night50' | 'night400' | 'night700' | 'night800' | 'night900'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "sky",
        "grass",
        "sun",
        "fire",
        "white",
        "night300",
        "night600",
        "night500",
        "night50",
        "night400",
        "night700",
        "night800",
        "night900"
       ]
      },
      "from": "@epam/loveship:TextMods",
      "required": false
     },
     {
      "uid": 11,
      "name": "font",
      "comment": {
       "raw": [
        "@default 'sans'"
       ],
       "tags": {
        "@default": "sans"
       }
      },
      "typeValue": {
       "raw": "'sans' | 'sans-semibold' | 'sans-light'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "sans",
        "sans-semibold",
        "sans-light"
       ]
      },
      "from": "@epam/loveship:TextMods",
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/loveship:TextSize": {
   "summary": {
    "module": "@epam/loveship",
    "typeName": {
     "name": "TextSize",
     "nameFull": "TextSize"
    },
    "src": "loveship/components/types.ts",
    "exported": true
   },
   "details": {
    "kind": 264,
    "typeValue": {
     "raw": "'36' | '48' | '18' | '24' | '30' | '42' | 'none'",
     "print": [
      "type TextSize = 'none' | '18' | '24' | '30' | '36' | '42' | '48';"
     ]
    }
   }
  },
  "@epam/loveship:TooltipMods": {
   "summary": {
    "module": "@epam/loveship",
    "typeName": {
     "name": "TooltipMods",
     "nameFull": "TooltipMods"
    },
    "src": "loveship/components/overlays/Tooltip.tsx",
    "exported": true
   },
   "details": {
    "kind": 263,
    "typeValue": {
     "raw": "TooltipMods",
     "print": [
      "interface TooltipMods {",
      "    /**",
      "     * Tooltip color.",
      "     * 'night900' is deprecated and will be removed in future release, use 'gray' instead.",
      "     *",
      "     * @default 'gray'",
      "     */",
      "    color?: 'white' | 'fire' | 'gray' | 'night900';",
      "}"
     ]
    },
    "props": [
     {
      "uid": 1,
      "name": "color",
      "comment": {
       "raw": [
        "Tooltip color.",
        " 'night900' is deprecated and will be removed in future release, use 'gray' instead.",
        "",
        " @default 'gray'"
       ],
       "tags": {
        "@default": "gray"
       }
      },
      "typeValue": {
       "raw": "'fire' | 'white' | 'gray' | 'night900'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "fire",
        "white",
        "gray",
        "night900"
       ]
      },
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/loveship:TooltipProps": {
   "summary": {
    "module": "@epam/loveship",
    "typeName": {
     "name": "TooltipProps",
     "nameFull": "TooltipProps"
    },
    "src": "loveship/components/overlays/Tooltip.tsx",
    "exported": true
   },
   "details": {
    "kind": 264,
    "typeValue": {
     "raw": "TooltipProps",
     "print": [
      "type TooltipProps = Omit<UuiTooltipProps, 'color'> & TooltipMods;"
     ]
    },
    "props": [
     {
      "uid": 1,
      "name": "onClose",
      "typeValue": {
       "raw": "() => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:DropdownProps",
      "required": false
     },
     {
      "uid": 2,
      "name": "children",
      "comment": {
       "raw": [
        "React Node(s) to show tooltip for"
       ]
      },
      "typeValue": {
       "raw": "null | string | number | boolean | React.ReactElement<any, string | React.JSXElementConstructor<any>> | React.ReactFragment | React.ReactPortal"
      },
      "from": "@epam/uui-core:TooltipCoreProps",
      "required": false
     },
     {
      "uid": 3,
      "name": "cx",
      "comment": {
       "raw": [
        "CSS class(es) to put on component's root. See {@link https://github.com/JedWatson/classnames#usage} for details"
       ]
      },
      "typeValue": {
       "raw": "null | string | number | boolean | ClassDictionary | ClassArray"
      },
      "from": "@epam/uui-core:IHasCX",
      "required": false
     },
     {
      "uid": 4,
      "name": "rawProps",
      "comment": {
       "raw": [
        "Any HTML attributes (native or 'data-') to put on the underlying component"
       ]
      },
      "typeValue": {
       "raw": "React.HTMLAttributes<HTMLDivElement> & Record<`data-${string}`, string>"
      },
      "from": "@epam/uui-core:IHasRawProps",
      "required": false
     },
     {
      "uid": 5,
      "name": "isDisabled",
      "comment": {
       "raw": [
        "Disable editing, and visually de-emphasize value of the component"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:IDisableable",
      "required": false
     },
     {
      "uid": 6,
      "name": "value",
      "comment": {
       "raw": [
        "The current value of component"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:IEditable",
      "required": true
     },
     {
      "uid": 7,
      "name": "onValueChange",
      "comment": {
       "raw": [
        "Called when value needs to be changed (usually due to user interaction)"
       ]
      },
      "typeValue": {
       "raw": "(newValue: boolean) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IEditable",
      "required": true
     },
     {
      "uid": 8,
      "name": "isInvalid",
      "comment": {
       "raw": [
        "True if component contains invalid input"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:ICanBeInvalid",
      "required": false
     },
     {
      "uid": 9,
      "name": "validationMessage",
      "comment": {
       "raw": [
        "Message describing why the value is invalid"
       ]
      },
      "typeValue": {
       "raw": "null | string | number | boolean | React.ReactElement<any, string | React.JSXElementConstructor<any>> | React.ReactFragment | React.ReactPortal"
      },
      "from": "@epam/uui-core:ICanBeInvalid",
      "required": false
     },
     {
      "uid": 10,
      "name": "validationProps",
      "comment": {
       "raw": [
        "If T is a complex value (object or array), this property contains validation states of inner items"
       ]
      },
      "typeValue": {
       "raw": "{ [key: string]: ICanBeInvalid; }"
      },
      "from": "@epam/uui-core:ICanBeInvalid",
      "required": false
     },
     {
      "uid": 11,
      "name": "isReadonly",
      "comment": {
       "raw": [
        "Disable editing. Unlike isDisabled, keep component's value readable."
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:ICanBeReadonly",
      "required": false
     },
     {
      "uid": 12,
      "name": "isRequired",
      "comment": {
       "raw": [
        "Marks that component's value is required and shouldn't be empty"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:ICanBeRequired",
      "required": false
     },
     {
      "uid": 13,
      "name": "placement",
      "typeValue": {
       "raw": "'left' | 'right' | 'auto' | 'auto-start' | 'auto-end' | 'top' | 'bottom' | 'top-start' | 'top-end' | 'bottom-start' | 'bottom-end' | 'right-start' | 'right-end' | 'left-start' | 'left-end'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "left",
        "right",
        "auto",
        "auto-start",
        "auto-end",
        "top",
        "bottom",
        "top-start",
        "top-end",
        "bottom-start",
        "bottom-end",
        "right-start",
        "right-end",
        "left-start",
        "left-end"
       ]
      },
      "from": "@epam/uui-core:DropdownProps",
      "required": false
     },
     {
      "uid": 14,
      "name": "modifiers",
      "typeValue": {
       "raw": "(StrictModifier<any> | Partial<Modifier<any, object>>)[]"
      },
      "from": "@epam/uui-core:DropdownProps",
      "required": false
     },
     {
      "uid": 15,
      "name": "openDelay",
      "comment": {
       "raw": [
        "@default 0"
       ],
       "tags": {
        "@default": 0
       }
      },
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "from": "@epam/uui-core:DropdownProps",
      "required": false
     },
     {
      "uid": 16,
      "name": "closeDelay",
      "comment": {
       "raw": [
        "@default 0"
       ],
       "tags": {
        "@default": 0
       }
      },
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "from": "@epam/uui-core:DropdownProps",
      "required": false
     },
     {
      "uid": 17,
      "name": "closeOnMouseLeave",
      "comment": {
       "raw": [
        "@default false"
       ],
       "tags": {
        "@default": false
       }
      },
      "typeValue": {
       "raw": "false | 'toggler' | 'boundary'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        false,
        "toggler",
        "boundary"
       ]
      },
      "from": "@epam/uui-core:DropdownProps",
      "required": false
     },
     {
      "uid": 18,
      "name": "portalTarget",
      "typeValue": {
       "raw": "HTMLElement"
      },
      "from": "@epam/uui-core:DropdownProps",
      "required": false
     },
     {
      "uid": 19,
      "name": "boundaryElement",
      "typeValue": {
       "raw": "HTMLElement | HTMLElement[] | 'clippingParents'"
      },
      "from": "@epam/uui-core:DropdownProps",
      "required": false
     },
     {
      "uid": 20,
      "name": "closeBodyOnTogglerHidden",
      "comment": {
       "raw": [
        "@default true"
       ],
       "tags": {
        "@default": true
       }
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:DropdownProps",
      "required": false
     },
     {
      "uid": 21,
      "name": "content",
      "comment": {
       "raw": [
        "Content to show in the tooltip (ReactNode)"
       ]
      },
      "typeValue": {
       "raw": "any"
      },
      "from": "@epam/uui-core:TooltipCoreProps",
      "required": false
     },
     {
      "uid": 22,
      "name": "renderContent",
      "comment": {
       "raw": [
        "Alternative to 'content' prop, you can pass a render function.",
        " The function will only be called when content is shown, this can save performance."
       ]
      },
      "typeValue": {
       "raw": "() => any"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:TooltipCoreProps",
      "required": false
     },
     {
      "uid": 23,
      "name": "offset",
      "comment": {
       "raw": [
        "See [Popper docs]{@link https://popper.js.org/docs/v2/modifiers/offset/}"
       ]
      },
      "typeValue": {
       "raw": "OffsetsFunction | [number | null | undefined, number | null | undefined]"
      },
      "from": "@epam/uui-core:TooltipCoreProps",
      "required": false
     },
     {
      "uid": 24,
      "name": "maxWidth",
      "comment": {
       "raw": [
        "Max width of tooltip"
       ]
      },
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "from": "@epam/uui-core:TooltipCoreProps",
      "required": false
     },
     {
      "uid": 25,
      "name": "color",
      "comment": {
       "raw": [
        "Tooltip color.",
        " 'night900' is deprecated and will be removed in future release, use 'gray' instead.",
        "",
        " @default 'gray'"
       ],
       "tags": {
        "@default": "gray"
       }
      },
      "typeValue": {
       "raw": "'fire' | 'white' | 'gray' | 'night900'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "fire",
        "white",
        "gray",
        "night900"
       ]
      },
      "from": "@epam/loveship:TooltipMods",
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui-editor:EditorValue": {
   "summary": {
    "module": "@epam/uui-editor",
    "typeName": {
     "name": "EditorValue",
     "nameFull": "EditorValue"
    },
    "src": "uui-editor/src/types.ts",
    "exported": true
   },
   "details": {
    "kind": 264,
    "typeValue": {
     "raw": "null | Value",
     "print": [
      "type EditorValue = Value | null;"
     ]
    }
   }
  },
  "@epam/uui-editor:IImageElement": {
   "summary": {
    "module": "@epam/uui-editor",
    "typeName": {
     "name": "IImageElement",
     "nameFull": "IImageElement"
    },
    "src": "uui-editor/src/types.ts",
    "exported": true
   },
   "details": {
    "kind": 263,
    "typeValue": {
     "raw": "IImageElement",
     "print": [
      "interface IImageElement extends TElement, PlateProps, SlateProps {",
      "}"
     ]
    },
    "props": [
     {
      "uid": 1,
      "name": "children",
      "typeValue": {
       "raw": "TDescendant[]"
      },
      "from": "node_modules/@udecode/slate/dist/interfaces/element/TElement.d.ts:TElement",
      "required": true
     },
     {
      "uid": 2,
      "name": "type",
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "from": "node_modules/@udecode/slate/dist/interfaces/element/TElement.d.ts:TElement",
      "required": true
     },
     {
      "uid": 3,
      "name": "url",
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "from": "@epam/uui-editor:PlateProps",
      "required": true
     },
     {
      "uid": 4,
      "name": "align",
      "typeValue": {
       "raw": "'left' | 'center' | 'right'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "left",
        "center",
        "right"
       ]
      },
      "from": "@epam/uui-editor:PlateProps",
      "required": false
     },
     {
      "uid": 5,
      "name": "width",
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "from": "@epam/uui-editor:PlateProps",
      "required": false
     },
     {
      "uid": 6,
      "name": "data",
      "typeValue": {
       "raw": "{ imageSize: SlateImageSize; align: SlateImgAlign; } & Partial<File> | { imageSize: SlateImageSize; align: SlateImgAlign; } & Partial<FileUploadResponse>"
      },
      "typeValueRef": "@epam/uui-editor:SlateImageData",
      "from": "@epam/uui-editor:SlateProps",
      "required": true
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui-editor:LinkElement": {
   "summary": {
    "module": "@epam/uui-editor",
    "typeName": {
     "name": "LinkElement",
     "nameFull": "LinkElement"
    },
    "src": "uui-editor/src/plugins/linkPlugin/linkPlugin.tsx",
    "exported": true
   },
   "details": {
    "kind": 263,
    "typeValue": {
     "raw": "LinkElement",
     "print": [
      "interface LinkElement extends TElement {",
      "    href: string;",
      "    type: string;",
      "}"
     ]
    },
    "props": [
     {
      "uid": 1,
      "name": "href",
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "required": true
     },
     {
      "uid": 2,
      "name": "type",
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "required": true
     },
     {
      "uid": 3,
      "name": "children",
      "typeValue": {
       "raw": "TDescendant[]"
      },
      "from": "node_modules/@udecode/slate/dist/interfaces/element/TElement.d.ts:TElement",
      "required": true
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui-editor:PlaceholderPluginParams": {
   "summary": {
    "module": "@epam/uui-editor",
    "typeName": {
     "name": "PlaceholderPluginParams",
     "nameFull": "PlaceholderPluginParams"
    },
    "src": "uui-editor/src/plugins/placeholderPlugin/placeholderPlugin.tsx",
    "exported": true
   },
   "details": {
    "kind": 263,
    "typeValue": {
     "raw": "PlaceholderPluginParams",
     "print": [
      "interface PlaceholderPluginParams {",
      "    items: {",
      "        name: string;",
      "        [key: string]: any;",
      "    }[];",
      "}"
     ]
    },
    "props": [
     {
      "uid": 1,
      "name": "items",
      "typeValue": {
       "raw": "{ [key: string]: any; name: string; }[]"
      },
      "required": true
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui-editor:PlateImgAlign": {
   "summary": {
    "module": "@epam/uui-editor",
    "typeName": {
     "name": "PlateImgAlign",
     "nameFull": "PlateImgAlign"
    },
    "src": "uui-editor/src/types.ts",
    "exported": true
   },
   "details": {
    "kind": 264,
    "typeValue": {
     "raw": "'left' | 'center' | 'right'",
     "print": [
      "type PlateImgAlign = 'left' | 'center' | 'right';"
     ]
    }
   }
  },
  "@epam/uui-editor:PlateProps": {
   "summary": {
    "module": "@epam/uui-editor",
    "typeName": {
     "name": "PlateProps",
     "nameFull": "PlateProps"
    },
    "src": "uui-editor/src/types.ts",
    "exported": true
   },
   "details": {
    "kind": 263,
    "typeValue": {
     "raw": "PlateProps",
     "print": [
      "interface PlateProps {",
      "    url: string;",
      "    align?: PlateImgAlign;",
      "    width?: number;",
      "}"
     ]
    },
    "props": [
     {
      "uid": 1,
      "name": "url",
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "required": true
     },
     {
      "uid": 2,
      "name": "align",
      "typeValue": {
       "raw": "'left' | 'center' | 'right'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "left",
        "center",
        "right"
       ]
      },
      "required": false
     },
     {
      "uid": 3,
      "name": "width",
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui-editor:SlateImageSize": {
   "summary": {
    "module": "@epam/uui-editor",
    "typeName": {
     "name": "SlateImageSize",
     "nameFull": "SlateImageSize"
    },
    "src": "uui-editor/src/types.ts",
    "exported": true
   },
   "details": {
    "kind": 264,
    "typeValue": {
     "raw": "SlateImageSize",
     "print": [
      "type SlateImageSize = {",
      "    width: number;",
      "    height: number | string;",
      "};"
     ]
    },
    "props": [
     {
      "uid": 1,
      "name": "width",
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "required": true
     },
     {
      "uid": 2,
      "name": "height",
      "typeValue": {
       "raw": "string | number"
      },
      "required": true
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui-editor:SlateImgAlign": {
   "summary": {
    "module": "@epam/uui-editor",
    "typeName": {
     "name": "SlateImgAlign",
     "nameFull": "SlateImgAlign"
    },
    "src": "uui-editor/src/types.ts",
    "exported": true
   },
   "details": {
    "kind": 264,
    "typeValue": {
     "raw": "'align-left' | 'align-right' | 'align-center'",
     "print": [
      "type SlateImgAlign = 'align-left' | 'align-right' | 'align-center';"
     ]
    }
   }
  },
  "@epam/uui-editor:SlateProps": {
   "summary": {
    "module": "@epam/uui-editor",
    "typeName": {
     "name": "SlateProps",
     "nameFull": "SlateProps"
    },
    "src": "uui-editor/src/types.ts",
    "exported": true
   },
   "details": {
    "kind": 263,
    "typeValue": {
     "raw": "SlateProps",
     "print": [
      "interface SlateProps {",
      "    data: SlateImageData;",
      "}"
     ]
    },
    "props": [
     {
      "uid": 1,
      "name": "data",
      "typeValue": {
       "raw": "{ imageSize: SlateImageSize; align: SlateImgAlign; } & Partial<File> | { imageSize: SlateImageSize; align: SlateImgAlign; } & Partial<FileUploadResponse>"
      },
      "typeValueRef": "@epam/uui-editor:SlateImageData",
      "required": true
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui-editor:ToolbarButtonProps": {
   "summary": {
    "module": "@epam/uui-editor",
    "typeName": {
     "name": "ToolbarButtonProps",
     "nameFull": "ToolbarButtonProps"
    },
    "src": "uui-editor/src/implementation/ToolbarButton.tsx",
    "exported": true
   },
   "details": {
    "kind": 263,
    "typeValue": {
     "raw": "ToolbarButtonProps",
     "print": [
      "interface ToolbarButtonProps extends IHasCX {",
      "    isActive?: boolean;",
      "    onClick?: (event: React.MouseEvent<HTMLButtonElement, MouseEvent>) => void;",
      "    icon?: Icon;",
      "    iconColor?: 'red' | 'green' | 'amber' | 'blue' | 'gray60';",
      "    editor?: Editor;",
      "    isDisabled?: boolean;",
      "    caption?: string;",
      "}"
     ]
    },
    "props": [
     {
      "uid": 1,
      "name": "isActive",
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "required": false
     },
     {
      "uid": 2,
      "name": "onClick",
      "typeValue": {
       "raw": "(event: React.MouseEvent<HTMLButtonElement, MouseEvent>) => void"
      },
      "editor": {
       "type": "func"
      },
      "required": false
     },
     {
      "uid": 3,
      "name": "icon",
      "typeValue": {
       "raw": "Icon"
      },
      "editor": {
       "type": "component"
      },
      "required": false
     },
     {
      "uid": 4,
      "name": "iconColor",
      "typeValue": {
       "raw": "'red' | 'green' | 'amber' | 'blue' | 'gray60'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "red",
        "green",
        "amber",
        "blue",
        "gray60"
       ]
      },
      "required": false
     },
     {
      "uid": 5,
      "name": "editor",
      "typeValue": {
       "raw": "BaseEditor"
      },
      "required": false
     },
     {
      "uid": 6,
      "name": "isDisabled",
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "required": false
     },
     {
      "uid": 7,
      "name": "caption",
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "required": false
     },
     {
      "uid": 8,
      "name": "cx",
      "comment": {
       "raw": [
        "CSS class(es) to put on component's root. See {@link https://github.com/JedWatson/classnames#usage} for details"
       ]
      },
      "typeValue": {
       "raw": "null | string | number | boolean | ClassDictionary | ClassArray"
      },
      "typeValueRef": "@epam/uui-core:ClassValue",
      "from": "@epam/uui-core:IHasCX",
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui-editor:SlateImageData": {
   "summary": {
    "module": "@epam/uui-editor",
    "typeName": {
     "name": "SlateImageData",
     "nameFull": "SlateImageData"
    },
    "src": "uui-editor/src/types.ts",
    "exported": false
   }
  },
  "@types/react:AllHTMLAttributes": {
   "summary": {
    "module": "@types/react",
    "typeName": {
     "name": "AllHTMLAttributes",
     "nameFull": "AllHTMLAttributes<T>"
    },
    "src": "node_modules/@types/react/index.d.ts",
    "exported": false
   }
  },
  "@types/react:AriaAttributes": {
   "summary": {
    "module": "@types/react",
    "typeName": {
     "name": "AriaAttributes",
     "nameFull": "AriaAttributes"
    },
    "src": "node_modules/@types/react/index.d.ts",
    "exported": false
   }
  },
  "@types/react:Attributes": {
   "summary": {
    "module": "@types/react",
    "typeName": {
     "name": "Attributes",
     "nameFull": "Attributes"
    },
    "src": "node_modules/@types/react/index.d.ts",
    "comment": {
     "raw": [
      "@internal You shouldn't need to use this type since you never see these attributes",
      " inside your component or have to validate them."
     ]
    },
    "exported": false
   }
  },
  "@types/react:ClassAttributes": {
   "summary": {
    "module": "@types/react",
    "typeName": {
     "name": "ClassAttributes",
     "nameFull": "ClassAttributes<T>"
    },
    "src": "node_modules/@types/react/index.d.ts",
    "exported": false
   }
  },
  "@types/react:Component": {
   "summary": {
    "module": "@types/react",
    "typeName": {
     "name": "Component",
     "nameFull": "Component<P, S, SS>"
    },
    "src": "node_modules/@types/react/index.d.ts",
    "exported": false
   }
  },
  "@types/react:ComponentLifecycle": {
   "summary": {
    "module": "@types/react",
    "typeName": {
     "name": "ComponentLifecycle",
     "nameFull": "ComponentLifecycle<P, S, SS>"
    },
    "src": "node_modules/@types/react/index.d.ts",
    "exported": false
   }
  },
  "@types/react:ComponentType": {
   "summary": {
    "module": "@types/react",
    "typeName": {
     "name": "ComponentType",
     "nameFull": "ComponentType<P>"
    },
    "src": "node_modules/@types/react/index.d.ts",
    "exported": false
   }
  },
  "@types/react:DeprecatedLifecycle": {
   "summary": {
    "module": "@types/react",
    "typeName": {
     "name": "DeprecatedLifecycle",
     "nameFull": "DeprecatedLifecycle<P, S>"
    },
    "src": "node_modules/@types/react/index.d.ts",
    "exported": false
   }
  },
  "@types/react:DOMAttributes": {
   "summary": {
    "module": "@types/react",
    "typeName": {
     "name": "DOMAttributes",
     "nameFull": "DOMAttributes<T>"
    },
    "src": "node_modules/@types/react/index.d.ts",
    "exported": false
   }
  },
  "@types/react:HTMLAttributes": {
   "summary": {
    "module": "@types/react",
    "typeName": {
     "name": "HTMLAttributes",
     "nameFull": "HTMLAttributes<T>"
    },
    "src": "node_modules/@types/react/index.d.ts",
    "exported": false
   }
  },
  "@types/react:InputHTMLAttributes": {
   "summary": {
    "module": "@types/react",
    "typeName": {
     "name": "InputHTMLAttributes",
     "nameFull": "InputHTMLAttributes<T>"
    },
    "src": "node_modules/@types/react/index.d.ts",
    "exported": false
   }
  },
  "@types/react:NewLifecycle": {
   "summary": {
    "module": "@types/react",
    "typeName": {
     "name": "NewLifecycle",
     "nameFull": "NewLifecycle<P, S, SS>"
    },
    "src": "node_modules/@types/react/index.d.ts",
    "exported": false
   }
  },
  "@types/react:PropsWithChildren": {
   "summary": {
    "module": "@types/react",
    "typeName": {
     "name": "PropsWithChildren",
     "nameFull": "PropsWithChildren<P>"
    },
    "src": "node_modules/@types/react/index.d.ts",
    "exported": false
   }
  },
  "@types/react:ReactNode": {
   "summary": {
    "module": "@types/react",
    "typeName": {
     "name": "ReactNode",
     "nameFull": "ReactNode"
    },
    "src": "node_modules/@types/react/index.d.ts",
    "exported": false
   }
  },
  "node_modules/@udecode/slate/dist/interfaces/element/TElement.d.ts:TElement": {
   "summary": {
    "module": "node_modules/@udecode/slate/dist/interfaces/element/TElement.d.ts",
    "typeName": {
     "name": "TElement",
     "nameFull": "TElement"
    },
    "src": "node_modules/@udecode/slate/dist/interfaces/element/TElement.d.ts",
    "comment": {
     "raw": [
      "`Element` objects are a type of node in a Slate document that contain other",
      " element nodes or text nodes. They can be either \"blocks\" or \"inlines\"",
      " depending on the Slate editor's configuration."
     ]
    },
    "exported": false
   }
  },
  "node_modules/react-custom-scrollbars-2/index.d.ts:positionValues": {
   "summary": {
    "module": "node_modules/react-custom-scrollbars-2/index.d.ts",
    "typeName": {
     "name": "positionValues",
     "nameFull": "positionValues"
    },
    "src": "node_modules/react-custom-scrollbars-2/index.d.ts",
    "exported": false
   }
  },
  "node_modules/react-custom-scrollbars-2/index.d.ts:ScrollbarProps": {
   "summary": {
    "module": "node_modules/react-custom-scrollbars-2/index.d.ts",
    "typeName": {
     "name": "ScrollbarProps",
     "nameFull": "ScrollbarProps"
    },
    "src": "node_modules/react-custom-scrollbars-2/index.d.ts",
    "exported": false
   }
  },
  "node_modules/react-custom-scrollbars-2/index.d.ts:Scrollbars": {
   "summary": {
    "module": "node_modules/react-custom-scrollbars-2/index.d.ts",
    "typeName": {
     "name": "Scrollbars",
     "nameFull": "Scrollbars"
    },
    "src": "node_modules/react-custom-scrollbars-2/index.d.ts",
    "exported": false
   }
  },
  "node_modules/typescript/lib/lib.dom.d.ts:Blob": {
   "summary": {
    "module": "node_modules/typescript/lib/lib.dom.d.ts",
    "typeName": {
     "name": "Blob",
     "nameFull": "Blob"
    },
    "src": "node_modules/typescript/lib/lib.dom.d.ts",
    "exported": false
   }
  },
  "node_modules/typescript/lib/lib.dom.d.ts:File": {
   "summary": {
    "module": "node_modules/typescript/lib/lib.dom.d.ts",
    "typeName": {
     "name": "File",
     "nameFull": "File"
    },
    "src": "node_modules/typescript/lib/lib.dom.d.ts",
    "comment": {
     "raw": [
      "Provides information about files and allows JavaScript in a web page to access their content.",
      "",
      " [MDN Reference](https://developer.mozilla.org/docs/Web/API/File)"
     ]
    },
    "exported": false
   }
  },
  "node_modules/typescript/lib/lib.es5.d.ts:Partial": {
   "summary": {
    "module": "node_modules/typescript/lib/lib.es5.d.ts",
    "typeName": {
     "name": "Partial",
     "nameFull": "Partial<T>"
    },
    "src": "node_modules/typescript/lib/lib.es5.d.ts",
    "exported": false
   }
  },
  "node_modules/typescript/lib/lib.es5.d.ts:Readonly": {
   "summary": {
    "module": "node_modules/typescript/lib/lib.es5.d.ts",
    "typeName": {
     "name": "Readonly",
     "nameFull": "Readonly<T>"
    },
    "src": "node_modules/typescript/lib/lib.es5.d.ts",
    "exported": false
   }
  }
 }
}