[
  {
    "type": "paragraph",
    "data": {},
    "children": [
      {
        "text": "The primary component for Drag & Drop is "
      },
      {
        "text": "DragActor",
        "uui-richTextEditor-code": true
      },
      {
        "text": ". DragActor wraps your own "
      },
      {
        "text": "render",
        "uui-richTextEditor-code": true
      },
      {
        "text": " and provides necessary "
      },
      {
        "text": "eventHandlers",
        "uui-richTextEditor-code": true
      },
      {
        "text": ", "
      },
      {
        "text": "classNames",
        "uui-richTextEditor-code": true
      },
      {
        "text": " and params for Drag and Drop. Ensure you pass "
      },
      {
        "text": "eventHandlers",
        "uui-richTextEditor-code": true
      },
      {
        "text": ", "
      },
      {
        "text": "ref",
        "uui-richTextEditor-code": true
      },
      {
        "text": " and "
      },
      {
        "text": "classNames",
        "uui-richTextEditor-code": true
      },
      {
        "text": " to your component for correct D&D work."
      }
    ]
  },
  {
    "type": "paragraph",
    "data": {},
    "children": [
      {
        "text": "DragActor can be a drop destination, drag source or both. You can configure it by "
      },
      {
        "text": "srcData",
        "uui-richTextEditor-code": true
      },
      {
        "text": " and "
      },
      {
        "text": "dstData",
        "uui-richTextEditor-code": true
      },
      {
        "text": " props. If you pass "
      },
      {
        "text": "srcData",
        "uui-richTextEditor-code": true
      },
      {
        "text": " props, this Actor can be dragged. If you pass the "
      },
      {
        "text": "dstData",
        "uui-richTextEditor-code": true
      },
      {
        "text": " prop, this Actor can accept drop. If you pass both, the Actor can be dragged and accept drop simultaneously."
      }
    ]
  },
  {
    "type": "paragraph",
    "data": {},
    "children": [
      {
        "text": "UUI DnD uses data, not the views, as the source of truth. So when you drag something across the screen, we don't say that a component or a DOM node is being dragged. Instead, we say that some JS object is being dragged. So "
      },
      {
        "text": "srcData",
        "uui-richTextEditor-code": true
      },
      {
        "text": " — it's this object which will be dragged."
      }
    ]
  },
  {
    "type": "paragraph",
    "data": {},
    "children": [
      {
        "text": "DragActor recalculates "
      },
      {
        "text": "DndActorRenderParams",
        "uui-richTextEditor-code": true
      },
      {
        "text": " and calls "
      },
      {
        "text": "render",
        "uui-richTextEditor-code": true
      },
      {
        "text": " callback with new values when the drag starts. So you can change your component based on these props. Furthermore"
      },
      {
        "text": ", w",
        "font-size": "12pt",
        "font-family": null,
        "color": "#0e101a",
        "background-color": null,
        "font-weight": "400",
        "font-style": null,
        "font-variant": "normal",
        "text-decoration": "none",
        "vertical-align": "baseline",
        "white-space": "pre-wrap",
        "": null,
        "uui-richTextEditor-span-mark": true
      },
      {
        "text": "hen a component is dragged, we use the same DragActor "
      },
      {
        "text": "render",
        "uui-richTextEditor-code": true
      },
      {
        "text": " function to render drag ghost and pass  "
      },
      {
        "text": "isDragGhost={ true }",
        "uui-richTextEditor-code": true
      },
      {
        "text": " params inside "
      },
      {
        "text": "render",
        "uui-richTextEditor-code": true
      },
      {
        "text": ", so based on this param, you can define some styles for ghost."
      }
    ]
  },
  {
    "type": "paragraph",
    "data": {},
    "children": [
      {
        "text": "Use the "
      },
      {
        "text": "canAcceptDrop",
        "uui-richTextEditor-code": true
      },
      {
        "text": " prop to define which position "
      },
      {
        "text": "DragActor",
        "uui-richTextEditor-code": true
      },
      {
        "text": " can accept drop - top, bottom, left, right or inside. This prop will be called when some item is dragged into this DragActor; this item will be passed as an argument."
      }
    ]
  },
  {
    "type": "paragraph",
    "data": {},
    "children": [
      {
        "text": "When you drop an item on DragActor and it's accept drop in this position — an "
      },
      {
        "text": "onDrop",
        "uui-richTextEditor-code": true
      },
      {
        "text": " callback will be called. In this callback, you need to reorder your items based on "
      },
      {
        "text": "DropParams",
        "uui-richTextEditor-code": true
      },
      {
        "text": ". "
      }
    ]
  }
]