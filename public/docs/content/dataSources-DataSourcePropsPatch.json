[
  {
    "type": "paragraph",
    "children": [
      {
        "text": "Contains a set of items, which overrides values of corresponding items in DataSource. Comparison is made by item's ID (configured with "
      },
      {
        "text": "getId",
        "uui-richTextEditor-code": true
      },
      {
        "text": " prop). If a patch contains an item with id=1, this item will override the existing item with the same id=1."
      }
    ]
  },
  {
    "type": "paragraph",
    "children": [
      {
        "text": "Patch prop, as well as complimentary props, allows to:"
      }
    ]
  },
  {
    "type": "unordered-list",
    "children": [
      {
        "type": "list-item",
        "children": [
          {
            "type": "list-item-child",
            "children": [
              {
                "text": "update, add, delete, and move items, without modifying the original data"
              }
            ]
          },
          {
            "type": "unordered-list",
            "children": [
              {
                "type": "list-item",
                "children": [
                  {
                    "type": "list-item-child",
                    "children": [
                      {
                        "text": "this is especially viable, when data is managed by LazyDataSource, as data set can be huge, and can't be loaded completely"
                      }
                    ]
                  }
                ]
              },
              {
                "type": "list-item",
                "children": [
                  {
                    "type": "list-item-child",
                    "children": [
                      {
                        "text": "however, this is also useful when all data can be loaded, as you don't need to mix original and updated data, which simplifies state management"
                      }
                    ]
                  }
                ]
              }
            ]
          }
        ]
      },
      {
        "type": "list-item",
        "children": [
          {
            "type": "list-item-child",
            "children": [
              {
                "text": "simplify a form initialization - the patch can start as an empty set, and the data to edit can be loaded and managed by Async or Lazy DataSource"
              }
            ]
          }
        ]
      },
      {
        "type": "list-item",
        "children": [
          {
            "type": "list-item-child",
            "children": [
              {
                "text": "simplify saving data to server - patch contains only changed data, so you can send a patch to server as is to save it"
              }
            ]
          }
        ]
      },
      {
        "type": "list-item",
        "children": [
          {
            "type": "list-item-child",
            "children": [
              {
                "text": "refresh data in DataSources, w/o loosing changes. E.g. you can change sorting in LazyDataSource, causing re-loading data, and the patch will be re-applied to the new data."
              }
            ]
          }
        ]
      }
    ]
  },
  {
    "type": "paragraph",
    "children": [
      {
        "text": "Examples of real-life usage can be seen "
      },
      {
        "type": "link",
        "url": "/documents?id=editableTables&mode=doc&isSkin=null&category=tables&theme=loveship#editable_table",
        "target": "_blank",
        "children": [
          {
            "text": "here"
          }
        ]
      },
      {
        "text": "."
      }
    ]
  },
  {
    "type": "paragraph",
    "children": [
      {
        "text": "Patch accepts two types of values:"
      }
    ]
  },
  {
    "type": "unordered-list",
    "children": [
      {
        "type": "list-item",
        "children": [
          {
            "type": "list-item-child",
            "children": [
              {
                "text": "IImmutableMap - a UUI abstraction over immutable maps (key/value collections)."
              }
            ]
          },
          {
            "type": "unordered-list",
            "children": [
              {
                "type": "list-item",
                "children": [
                  {
                    "type": "list-item-child",
                    "children": [
                      {
                        "text": "UUI has built-in implementation - ItemsMap, which supports it. Using ItemsMap is recommended default approach."
                      }
                    ]
                  }
                ]
              },
              {
                "type": "list-item",
                "children": [
                  {
                    "type": "list-item-child",
                    "children": [
                      {
                        "text": "It's also straightforward to implement this interface on top of any collection. E.g. one can wrap the Map from Immutable.js."
                      }
                    ]
                  }
                ]
              }
            ]
          }
        ]
      },
      {
        "type": "list-item",
        "children": [
          {
            "type": "list-item-child",
            "children": [
              {
                "text": "IMap - UUI abstraction over mutable maps. "
              }
            ]
          },
          {
            "type": "unordered-list",
            "children": [
              {
                "type": "list-item",
                "children": [
                  {
                    "type": "list-item-child",
                    "children": [
                      {
                        "text": "the standard Map is compatible with this interface, so you can pass it as is"
                      }
                    ]
                  }
                ]
              },
              {
                "type": "list-item",
                "children": [
                  {
                    "type": "list-item-child",
                    "children": [
                      {
                        "text": "you can also implement it over any collection alike. Note, that when UUI needs to update such collection, it would copy it via constructor, so we never actually mutate it. "
                      }
                    ]
                  }
                ]
              }
            ]
          }
        ]
      }
    ]
  }
]